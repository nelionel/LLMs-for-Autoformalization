import Mathlib.Analysis.Convex.Normed
import Mathlib.Analysis.Normed.Module.Ray
open Convex Pointwise Set Metric
class StrictConvexSpace (ùïú E : Type*) [NormedLinearOrderedField ùïú] [NormedAddCommGroup E]
  [NormedSpace ùïú E] : Prop where
  strictConvex_closedBall : ‚àÄ r : ‚Ñù, 0 < r ‚Üí StrictConvex ùïú (closedBall (0 : E) r)
variable (ùïú : Type*) {E : Type*} [NormedLinearOrderedField ùïú] [NormedAddCommGroup E]
  [NormedSpace ùïú E]
theorem strictConvex_closedBall [StrictConvexSpace ùïú E] (x : E) (r : ‚Ñù) :
    StrictConvex ùïú (closedBall x r) := by
  rcases le_or_lt r 0 with hr | hr
  ¬∑ exact (subsingleton_closedBall x hr).strictConvex
  rw [‚Üê vadd_closedBall_zero]
  exact (StrictConvexSpace.strictConvex_closedBall r hr).vadd _
variable [NormedSpace ‚Ñù E]
theorem StrictConvexSpace.of_strictConvex_closed_unit_ball [LinearMap.CompatibleSMul E E ùïú ‚Ñù]
    (h : StrictConvex ùïú (closedBall (0 : E) 1)) : StrictConvexSpace ùïú E :=
  ‚ü®fun r hr => by simpa only [smul_closedUnitBall_of_nonneg hr.le] using h.smul r‚ü©
theorem StrictConvexSpace.of_norm_combo_lt_one
    (h : ‚àÄ x y : E, ‚Äñx‚Äñ = 1 ‚Üí ‚Äñy‚Äñ = 1 ‚Üí x ‚â† y ‚Üí ‚àÉ a b : ‚Ñù, a + b = 1 ‚àß ‚Äña ‚Ä¢ x + b ‚Ä¢ y‚Äñ < 1) :
    StrictConvexSpace ‚Ñù E := by
  refine
    StrictConvexSpace.of_strictConvex_closed_unit_ball ‚Ñù
      ((convex_closedBall _ _).strictConvex' fun x hx y hy hne => ?_)
  rw [interior_closedBall (0 : E) one_ne_zero, closedBall_diff_ball,
    mem_sphere_zero_iff_norm] at hx hy
  rcases h x y hx hy hne with ‚ü®a, b, hab, hlt‚ü©
  use b
  rwa [AffineMap.lineMap_apply_module, interior_closedBall (0 : E) one_ne_zero, mem_ball_zero_iff,
    sub_eq_iff_eq_add.2 hab.symm]
theorem StrictConvexSpace.of_norm_combo_ne_one
    (h :
      ‚àÄ x y : E,
        ‚Äñx‚Äñ = 1 ‚Üí ‚Äñy‚Äñ = 1 ‚Üí x ‚â† y ‚Üí ‚àÉ a b : ‚Ñù, 0 ‚â§ a ‚àß 0 ‚â§ b ‚àß a + b = 1 ‚àß ‚Äña ‚Ä¢ x + b ‚Ä¢ y‚Äñ ‚â† 1) :
    StrictConvexSpace ‚Ñù E := by
  refine StrictConvexSpace.of_strictConvex_closed_unit_ball ‚Ñù
    ((convex_closedBall _ _).strictConvex ?_)
  simp only [interior_closedBall _ one_ne_zero, closedBall_diff_ball, Set.Pairwise,
    frontier_closedBall _ one_ne_zero, mem_sphere_zero_iff_norm]
  intro x hx y hy hne
  rcases h x y hx hy hne with ‚ü®a, b, ha, hb, hab, hne'‚ü©
  exact ‚ü®_, ‚ü®a, b, ha, hb, hab, rfl‚ü©, mt mem_sphere_zero_iff_norm.1 hne'‚ü©
theorem StrictConvexSpace.of_norm_add_ne_two
    (h : ‚àÄ ‚¶Éx y : E‚¶Ñ, ‚Äñx‚Äñ = 1 ‚Üí ‚Äñy‚Äñ = 1 ‚Üí x ‚â† y ‚Üí ‚Äñx + y‚Äñ ‚â† 2) : StrictConvexSpace ‚Ñù E := by
  refine
    StrictConvexSpace.of_norm_combo_ne_one fun x y hx hy hne =>
      ‚ü®1 / 2, 1 / 2, one_half_pos.le, one_half_pos.le, add_halves _, ?_‚ü©
  rw [‚Üê smul_add, norm_smul, Real.norm_of_nonneg one_half_pos.le, one_div, ‚Üê div_eq_inv_mul, Ne,
    div_eq_one_iff_eq (two_ne_zero' ‚Ñù)]
  exact h hx hy hne
theorem StrictConvexSpace.of_pairwise_sphere_norm_ne_two
    (h : (sphere (0 : E) 1).Pairwise fun x y => ‚Äñx + y‚Äñ ‚â† 2) : StrictConvexSpace ‚Ñù E :=
  StrictConvexSpace.of_norm_add_ne_two fun _ _ hx hy =>
    h (mem_sphere_zero_iff_norm.2 hx) (mem_sphere_zero_iff_norm.2 hy)
theorem StrictConvexSpace.of_norm_add
    (h : ‚àÄ x y : E, ‚Äñx‚Äñ = 1 ‚Üí ‚Äñy‚Äñ = 1 ‚Üí ‚Äñx + y‚Äñ = 2 ‚Üí SameRay ‚Ñù x y) : StrictConvexSpace ‚Ñù E := by
  refine StrictConvexSpace.of_pairwise_sphere_norm_ne_two fun x hx y hy => mt fun h‚ÇÇ => ?_
  rw [mem_sphere_zero_iff_norm] at hx hy
  exact (sameRay_iff_of_norm_eq (hx.trans hy.symm)).1 (h x y hx hy h‚ÇÇ)
variable [StrictConvexSpace ‚Ñù E] {x y z : E} {a b r : ‚Ñù}
theorem combo_mem_ball_of_ne (hx : x ‚àà closedBall z r) (hy : y ‚àà closedBall z r) (hne : x ‚â† y)
    (ha : 0 < a) (hb : 0 < b) (hab : a + b = 1) : a ‚Ä¢ x + b ‚Ä¢ y ‚àà ball z r := by
  rcases eq_or_ne r 0 with (rfl | hr)
  ¬∑ rw [closedBall_zero, mem_singleton_iff] at hx hy
    exact (hne (hx.trans hy.symm)).elim
  ¬∑ simp only [‚Üê interior_closedBall _ hr] at hx hy ‚ä¢
    exact strictConvex_closedBall ‚Ñù z r hx hy hne ha hb hab
theorem openSegment_subset_ball_of_ne (hx : x ‚àà closedBall z r) (hy : y ‚àà closedBall z r)
    (hne : x ‚â† y) : openSegment ‚Ñù x y ‚äÜ ball z r :=
  (openSegment_subset_iff _).2 fun _ _ => combo_mem_ball_of_ne hx hy hne
theorem norm_combo_lt_of_ne (hx : ‚Äñx‚Äñ ‚â§ r) (hy : ‚Äñy‚Äñ ‚â§ r) (hne : x ‚â† y) (ha : 0 < a) (hb : 0 < b)
    (hab : a + b = 1) : ‚Äña ‚Ä¢ x + b ‚Ä¢ y‚Äñ < r := by
  simp only [‚Üê mem_ball_zero_iff, ‚Üê mem_closedBall_zero_iff] at hx hy ‚ä¢
  exact combo_mem_ball_of_ne hx hy hne ha hb hab
theorem norm_add_lt_of_not_sameRay (h : ¬¨SameRay ‚Ñù x y) : ‚Äñx + y‚Äñ < ‚Äñx‚Äñ + ‚Äñy‚Äñ := by
  simp only [sameRay_iff_inv_norm_smul_eq, not_or, ‚Üê Ne.eq_def] at h
  rcases h with ‚ü®hx, hy, hne‚ü©
  rw [‚Üê norm_pos_iff] at hx hy
  have hxy : 0 < ‚Äñx‚Äñ + ‚Äñy‚Äñ := add_pos hx hy
  have :=
    combo_mem_ball_of_ne (inv_norm_smul_mem_closed_unit_ball x)
      (inv_norm_smul_mem_closed_unit_ball y) hne (div_pos hx hxy) (div_pos hy hxy)
      (by rw [‚Üê add_div, div_self hxy.ne'])
  rwa [mem_ball_zero_iff, div_eq_inv_mul, div_eq_inv_mul, mul_smul, mul_smul, smul_inv_smul‚ÇÄ hx.ne',
    smul_inv_smul‚ÇÄ hy.ne', ‚Üê smul_add, norm_smul, Real.norm_of_nonneg (inv_pos.2 hxy).le, ‚Üê
    div_eq_inv_mul, div_lt_one hxy] at this
theorem lt_norm_sub_of_not_sameRay (h : ¬¨SameRay ‚Ñù x y) : ‚Äñx‚Äñ - ‚Äñy‚Äñ < ‚Äñx - y‚Äñ := by
  nth_rw 1 [‚Üê sub_add_cancel x y] at h ‚ä¢
  exact sub_lt_iff_lt_add.2 (norm_add_lt_of_not_sameRay fun H' => h <| H'.add_left SameRay.rfl)
theorem abs_lt_norm_sub_of_not_sameRay (h : ¬¨SameRay ‚Ñù x y) : |‚Äñx‚Äñ - ‚Äñy‚Äñ| < ‚Äñx - y‚Äñ := by
  refine abs_sub_lt_iff.2 ‚ü®lt_norm_sub_of_not_sameRay h, ?_‚ü©
  rw [norm_sub_rev]
  exact lt_norm_sub_of_not_sameRay (mt SameRay.symm h)
theorem sameRay_iff_norm_add : SameRay ‚Ñù x y ‚Üî ‚Äñx + y‚Äñ = ‚Äñx‚Äñ + ‚Äñy‚Äñ :=
  ‚ü®SameRay.norm_add, fun h => Classical.not_not.1 fun h' => (norm_add_lt_of_not_sameRay h').ne h‚ü©
theorem eq_of_norm_eq_of_norm_add_eq (h‚ÇÅ : ‚Äñx‚Äñ = ‚Äñy‚Äñ) (h‚ÇÇ : ‚Äñx + y‚Äñ = ‚Äñx‚Äñ + ‚Äñy‚Äñ) : x = y :=
  (sameRay_iff_norm_add.mpr h‚ÇÇ).eq_of_norm_eq h‚ÇÅ
theorem not_sameRay_iff_norm_add_lt : ¬¨SameRay ‚Ñù x y ‚Üî ‚Äñx + y‚Äñ < ‚Äñx‚Äñ + ‚Äñy‚Äñ :=
  sameRay_iff_norm_add.not.trans (norm_add_le _ _).lt_iff_ne.symm
theorem sameRay_iff_norm_sub : SameRay ‚Ñù x y ‚Üî ‚Äñx - y‚Äñ = |‚Äñx‚Äñ - ‚Äñy‚Äñ| :=
  ‚ü®SameRay.norm_sub, fun h =>
    Classical.not_not.1 fun h' => (abs_lt_norm_sub_of_not_sameRay h').ne' h‚ü©
theorem not_sameRay_iff_abs_lt_norm_sub : ¬¨SameRay ‚Ñù x y ‚Üî |‚Äñx‚Äñ - ‚Äñy‚Äñ| < ‚Äñx - y‚Äñ :=
  sameRay_iff_norm_sub.not.trans <| ne_comm.trans (abs_norm_sub_norm_le _ _).lt_iff_ne.symm
theorem norm_midpoint_lt_iff (h : ‚Äñx‚Äñ = ‚Äñy‚Äñ) : ‚Äñ(1 / 2 : ‚Ñù) ‚Ä¢ (x + y)‚Äñ < ‚Äñx‚Äñ ‚Üî x ‚â† y := by
  rw [norm_smul, Real.norm_of_nonneg (one_div_nonneg.2 zero_le_two), ‚Üê inv_eq_one_div, ‚Üê
    div_eq_inv_mul, div_lt_iff‚ÇÄ (zero_lt_two' ‚Ñù), mul_two, ‚Üê not_sameRay_iff_of_norm_eq h,
    not_sameRay_iff_norm_add_lt, h]