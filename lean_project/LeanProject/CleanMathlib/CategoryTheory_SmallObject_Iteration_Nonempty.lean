import Mathlib.CategoryTheory.SmallObject.Iteration.ExtendToSucc
universe u
namespace CategoryTheory
open Category Limits
variable {C : Type*} [Category C] {Œ¶ : C ‚•§ C} {Œµ : ùü≠ C ‚ü∂ Œ¶}
  {J : Type u} [LinearOrder J] [OrderBot J] [SuccOrder J]
namespace Functor
namespace Iteration
variable (Œµ J) in
def mkOfBot : Iteration Œµ (‚ä• : J) where
  F := (Functor.const _).obj (ùü≠ C)
  isoZero := Iso.refl _
  isoSucc _ h := by simp at h
  mapSucc'_eq _ h := by simp at h
  isColimit x hx h := by
    exfalso
    refine hx.not_isMin (by simpa using h)
noncomputable def mkOfSucc {j : J} (hj : ¬¨IsMax j) (iter : Iteration Œµ j) :
    Iteration Œµ (Order.succ j) where
  F := extendToSucc hj iter.F (whiskerLeft _ Œµ)
  isoZero := (extendToSuccObjIso hj iter.F (whiskerLeft _ Œµ) ‚ü®‚ä•, by simp‚ü©).trans iter.isoZero
  isoSucc i hi :=
    if hij : i < j then
      extendToSuccObjIso _ _ _ ‚ü®Order.succ i, Order.succ_le_of_lt hij‚ü© ‚â™‚â´
        iter.isoSucc i hij ‚â™‚â´ (isoWhiskerRight (extendToSuccObjIso _ _ _ ‚ü®i, hij.le‚ü©).symm _)
    else
      have hij' : i = j := le_antisymm
        (by simpa only [Order.lt_succ_iff_of_not_isMax hj] using hi) (by simpa using hij)
      eqToIso (by subst hij'; rfl) ‚â™‚â´ extendToSuccObjSuccIso hj iter.F (whiskerLeft _ Œµ) ‚â™‚â´
        isoWhiskerRight ((extendToSuccObjIso hj iter.F (whiskerLeft _ Œµ) ‚ü®j, by simp‚ü©).symm.trans
            (eqToIso (by subst hij'; rfl))) _
  mapSucc'_eq i hi := by
    obtain hi' | rfl := ((Order.lt_succ_iff_of_not_isMax hj).mp hi).lt_or_eq
    ¬∑ ext X
      have := iter.mapSucc_eq i hi'
      dsimp [mapSucc, mapSucc'] at this ‚ä¢
      rw [extentToSucc_map _ _ _ _ _ _ (Order.succ_le_of_lt hi'), this, dif_pos hi']
      dsimp
      rw [assoc, assoc]
      erw [Œµ.naturality_assoc]
    ¬∑ ext X
      dsimp [mapSucc']
      rw [dif_neg (gt_irrefl i), extendToSucc_map_le_succ]
      dsimp
      rw [id_comp, comp_id]
      erw [Œµ.naturality_assoc]
  isColimit i hi hij := by
    have hij' : i ‚â§ j := by
      obtain hij | rfl := hij.lt_or_eq
      ¬∑ exact (Order.lt_succ_iff_of_not_isMax hj).1 hij
      ¬∑ exfalso
        exact Order.not_isSuccLimit_succ_of_not_isMax hj hi
    refine (IsColimit.precomposeHomEquiv
      (isoWhiskerLeft (monotone_inclusion_lt_le_of_le hij').functor
        (extendToSuccRestrictionLEIso hj iter.F (whiskerLeft _ Œµ))).symm _).1
      (IsColimit.ofIsoColimit (iter.isColimit i hi hij')
      (Iso.symm (Cocones.ext (extendToSuccObjIso hj iter.F (whiskerLeft _ Œµ) ‚ü®i, hij'‚ü©)
      (fun ‚ü®k, hk‚ü© ‚Ü¶ ?_))))
    dsimp
    rw [assoc, extendToSuccObjIso_hom_naturality hj iter.F (whiskerLeft _ Œµ)]
    dsimp
    rw [Iso.inv_hom_id_assoc]
end Iteration
end Functor
end CategoryTheory