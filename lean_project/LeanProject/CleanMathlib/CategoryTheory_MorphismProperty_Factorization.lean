import Mathlib.CategoryTheory.MorphismProperty.Basic
namespace CategoryTheory
namespace MorphismProperty
variable {C : Type*} [Category C] (W‚ÇÅ W‚ÇÇ : MorphismProperty C)
structure MapFactorizationData {X Y : C} (f : X ‚ü∂ Y) where
  Z : C
  i : X ‚ü∂ Z
  p : Z ‚ü∂ Y
  fac : i ‚â´ p = f := by aesop_cat
  hi : W‚ÇÅ i
  hp : W‚ÇÇ p
attribute [reassoc (attr := simp)] MapFactorizationData.fac
abbrev FactorizationData := ‚àÄ {X Y : C} (f : X ‚ü∂ Y), MapFactorizationData W‚ÇÅ W‚ÇÇ f
class HasFactorization : Prop where
  nonempty_mapFactorizationData {X Y : C} (f : X ‚ü∂ Y) : Nonempty (MapFactorizationData W‚ÇÅ W‚ÇÇ f)
noncomputable def factorizationData [HasFactorization W‚ÇÅ W‚ÇÇ] : FactorizationData W‚ÇÅ W‚ÇÇ :=
  fun _ => Nonempty.some (HasFactorization.nonempty_mapFactorizationData _)
def comp : MorphismProperty C := fun _ _ f => Nonempty (MapFactorizationData W‚ÇÅ W‚ÇÇ f)
lemma comp_eq_top_iff : W‚ÇÅ.comp W‚ÇÇ = ‚ä§ ‚Üî HasFactorization W‚ÇÅ W‚ÇÇ := by
  constructor
  ¬∑ intro h
    refine ‚ü®fun f => ?_‚ü©
    have : W‚ÇÅ.comp W‚ÇÇ f := by simp only [h, top_apply]
    exact ‚ü®this.some‚ü©
  ¬∑ intro
    ext X Y f
    simp only [top_apply, iff_true]
    exact ‚ü®factorizationData W‚ÇÅ W‚ÇÇ f‚ü©
structure FunctorialFactorizationData where
  Z : Arrow C ‚•§ C
  i : Arrow.leftFunc ‚ü∂ Z
  p : Z ‚ü∂ Arrow.rightFunc
  fac : i ‚â´ p = Arrow.leftToRight := by aesop_cat
  hi (f : Arrow C) : W‚ÇÅ (i.app f)
  hp (f : Arrow C) : W‚ÇÇ (p.app f)
namespace FunctorialFactorizationData
variable {W‚ÇÅ W‚ÇÇ}
variable (data : FunctorialFactorizationData W‚ÇÅ W‚ÇÇ)
attribute [reassoc (attr := simp)] fac
@[reassoc (attr := simp)]
lemma fac_app {f : Arrow C} : data.i.app f ‚â´ data.p.app f = f.hom := by
  rw [‚Üê NatTrans.comp_app, fac,Arrow.leftToRight_app]
def ofLE {W‚ÇÅ' W‚ÇÇ' : MorphismProperty C} (le‚ÇÅ : W‚ÇÅ ‚â§ W‚ÇÅ') (le‚ÇÇ : W‚ÇÇ ‚â§ W‚ÇÇ') :
    FunctorialFactorizationData W‚ÇÅ' W‚ÇÇ' where
  Z := data.Z
  i := data.i
  p := data.p
  hi f := le‚ÇÅ _ (data.hi f)
  hp f := le‚ÇÇ _ (data.hp f)
def factorizationData : FactorizationData W‚ÇÅ W‚ÇÇ := fun f =>
  { i := data.i.app (Arrow.mk f)
    p := data.p.app (Arrow.mk f)
    hi := data.hi _
    hp := data.hp _ }
section
variable {X Y X' Y' : C} {f : X ‚ü∂ Y} {g : X' ‚ü∂ Y'} (œÜ : Arrow.mk f ‚ü∂ Arrow.mk g)
def mapZ : (data.factorizationData f).Z ‚ü∂ (data.factorizationData g).Z := data.Z.map œÜ
@[reassoc (attr := simp)]
lemma i_mapZ :
    (data.factorizationData f).i ‚â´ data.mapZ œÜ = œÜ.left ‚â´ (data.factorizationData g).i :=
  (data.i.naturality œÜ).symm
@[reassoc (attr := simp)]
lemma mapZ_p :
    data.mapZ œÜ ‚â´ (data.factorizationData g).p = (data.factorizationData f).p ‚â´ œÜ.right :=
  data.p.naturality œÜ
variable (f) in
@[simp]
lemma mapZ_id : data.mapZ (ùüô (Arrow.mk f)) = ùüô _ :=
  data.Z.map_id _
@[reassoc, simp]
lemma mapZ_comp {X'' Y'' : C} {h : X'' ‚ü∂ Y''} (œà : Arrow.mk g ‚ü∂ Arrow.mk h) :
    data.mapZ (œÜ ‚â´ œà) = data.mapZ œÜ ‚â´ data.mapZ œà :=
  data.Z.map_comp _ _
end
section
variable (J : Type*) [Category J]
@[simps]
def functorCategory.Z : Arrow (J ‚•§ C) ‚•§ J ‚•§ C where
  obj f :=
    { obj := fun j => (data.factorizationData (f.hom.app j)).Z
      map := fun œÜ => data.mapZ
        { left := f.left.map œÜ
          right := f.right.map œÜ }
      map_id := fun j => by
        dsimp
        rw [‚Üê data.mapZ_id (f.hom.app j)]
        congr <;> simp
      map_comp := fun _ _ => by
        dsimp
        rw [‚Üê data.mapZ_comp]
        congr <;> simp }
  map œÑ :=
    { app := fun j => data.mapZ
        { left := œÑ.left.app j
          right := œÑ.right.app j
          w := congr_app œÑ.w j }
      naturality := fun _ _ Œ± => by
        dsimp
        rw [‚Üê data.mapZ_comp, ‚Üê data.mapZ_comp]
        congr 1
        ext <;> simp }
  map_id f := by
    ext j
    dsimp
    rw [‚Üê data.mapZ_id]
    congr 1
  map_comp f g := by
    ext j
    dsimp
    rw [‚Üê data.mapZ_comp]
    congr 1
def functorCategory :
    FunctorialFactorizationData (W‚ÇÅ.functorCategory J) (W‚ÇÇ.functorCategory J) where
  Z := functorCategory.Z data J
  i := { app := fun f => { app := fun j => (data.factorizationData (f.hom.app j)).i } }
  p := { app := fun f => { app := fun j => (data.factorizationData (f.hom.app j)).p } }
  hi _ _ := data.hi _
  hp _ _ := data.hp _
end
end FunctorialFactorizationData
class HasFunctorialFactorization : Prop where
  nonempty_functorialFactorizationData : Nonempty (FunctorialFactorizationData W‚ÇÅ W‚ÇÇ)
noncomputable def functorialFactorizationData [HasFunctorialFactorization W‚ÇÅ W‚ÇÇ] :
    FunctorialFactorizationData W‚ÇÅ W‚ÇÇ :=
  Nonempty.some (HasFunctorialFactorization.nonempty_functorialFactorizationData)
instance [HasFunctorialFactorization W‚ÇÅ W‚ÇÇ] : HasFactorization W‚ÇÅ W‚ÇÇ where
  nonempty_mapFactorizationData f := ‚ü®(functorialFactorizationData W‚ÇÅ W‚ÇÇ).factorizationData f‚ü©
instance [HasFunctorialFactorization W‚ÇÅ W‚ÇÇ] (J : Type*) [Category J] :
    HasFunctorialFactorization (W‚ÇÅ.functorCategory J) (W‚ÇÇ.functorCategory J) :=
  ‚ü®‚ü®(functorialFactorizationData W‚ÇÅ W‚ÇÇ).functorCategory J‚ü©‚ü©
end MorphismProperty
end CategoryTheory