import Mathlib.Init
import Batteries.Util.ExtendedBinder
import Lean.Elab.Term
open Lean Elab Term Meta Batteries.ExtendedBinder
universe u
variable {Œ± : Type u}
def Set (Œ± : Type u) := Œ± ‚Üí Prop
def setOf {Œ± : Type u} (p : Œ± ‚Üí Prop) : Set Œ± :=
  p
namespace Set
protected def Mem (s : Set Œ±) (a : Œ±) : Prop :=
  s a
instance : Membership Œ± (Set Œ±) :=
  ‚ü®Set.Mem‚ü©
theorem ext {a b : Set Œ±} (h : ‚àÄ (x : Œ±), x ‚àà a ‚Üî x ‚àà b) : a = b :=
  funext (fun x ‚Ü¶ propext (h x))
protected def Subset (s‚ÇÅ s‚ÇÇ : Set Œ±) :=
  ‚àÄ ‚¶Éa‚¶Ñ, a ‚àà s‚ÇÅ ‚Üí a ‚àà s‚ÇÇ
instance : LE (Set Œ±) :=
  ‚ü®Set.Subset‚ü©
instance : HasSubset (Set Œ±) :=
  ‚ü®(¬∑ ‚â§ ¬∑)‚ü©
instance : EmptyCollection (Set Œ±) :=
  ‚ü®fun _ ‚Ü¶ False‚ü©
end Set
namespace Mathlib.Meta
syntax (name := setBuilder) "{" extBinder " | " term "}" : term
@[term_elab setBuilder]
def elabSetBuilder : TermElab
  | `({ $x:ident | $p }), expectedType? => do
    elabTerm (‚Üê `(setOf fun $x:ident ‚Ü¶ $p)) expectedType?
  | `({ $x:ident : $t | $p }), expectedType? => do
    elabTerm (‚Üê `(setOf fun $x:ident : $t ‚Ü¶ $p)) expectedType?
  | `({ $x:ident $b:binderPred | $p }), expectedType? => do
    elabTerm (‚Üê `(setOf fun $x:ident ‚Ü¶ satisfies_binder_pred% $x $b ‚àß $p)) expectedType?
  | _, _ => throwUnsupportedSyntax
@[app_unexpander setOf]
def setOf.unexpander : Lean.PrettyPrinter.Unexpander
  | `($_ fun $x:ident ‚Ü¶ $p) => `({ $x:ident | $p })
  | `($_ fun ($x:ident : $ty:term) ‚Ü¶ $p) => `({ $x:ident : $ty:term | $p })
  | _ => throw ()
open Batteries.ExtendedBinder in
macro (priority := low) "{" t:term " | " bs:extBinders "}" : term =>
  `({x | ‚àÉ·µâ $bs:extBinders, $t = x})
macro (name := macroPattSetBuilder) (priority := low-1)
  "{" pat:term " : " t:term " | " p:term "}" : term =>
  `({ x : $t | match x with | $pat => $p })
@[inherit_doc macroPattSetBuilder]
macro (priority := low-1) "{" pat:term " | " p:term "}" : term =>
  `({ x | match x with | $pat => $p })
@[app_unexpander setOf]
def setOfPatternMatchUnexpander : Lean.PrettyPrinter.Unexpander
  | `($_ fun $x:ident ‚Ü¶ match $y:ident with | $pat => $p) =>
      if x == y then
        `({ $pat:term | $p:term })
      else
        throw ()
  | `($_ fun ($x:ident : $ty:term) ‚Ü¶ match $y:ident with | $pat => $p) =>
      if x == y then
        `({ $pat:term : $ty:term | $p:term })
      else
        throw ()
  | _ => throw ()
end Mathlib.Meta
namespace Set
def univ : Set Œ± := {_a | True}
protected def insert (a : Œ±) (s : Set Œ±) : Set Œ± := {b | b = a ‚à® b ‚àà s}
instance : Insert Œ± (Set Œ±) := ‚ü®Set.insert‚ü©
protected def singleton (a : Œ±) : Set Œ± := {b | b = a}
instance instSingletonSet : Singleton Œ± (Set Œ±) := ‚ü®Set.singleton‚ü©
protected def union (s‚ÇÅ s‚ÇÇ : Set Œ±) : Set Œ± := {a | a ‚àà s‚ÇÅ ‚à® a ‚àà s‚ÇÇ}
instance : Union (Set Œ±) := ‚ü®Set.union‚ü©
protected def inter (s‚ÇÅ s‚ÇÇ : Set Œ±) : Set Œ± := {a | a ‚àà s‚ÇÅ ‚àß a ‚àà s‚ÇÇ}
instance : Inter (Set Œ±) := ‚ü®Set.inter‚ü©
protected def compl (s : Set Œ±) : Set Œ± := {a | a ‚àâ s}
protected def diff (s t : Set Œ±) : Set Œ± := {a ‚àà s | a ‚àâ t}
instance : SDiff (Set Œ±) := ‚ü®Set.diff‚ü©
def powerset (s : Set Œ±) : Set (Set Œ±) := {t | t ‚äÜ s}
@[inherit_doc] prefix:100 "ùí´" => powerset
universe v in
def image {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) (s : Set Œ±) : Set Œ≤ := {f a | a ‚àà s}
instance : Functor Set where map := @Set.image
instance : LawfulFunctor Set where
  id_map _ := funext fun _ ‚Ü¶ propext ‚ü®fun ‚ü®_, sb, rfl‚ü© ‚Ü¶ sb, fun sb ‚Ü¶ ‚ü®_, sb, rfl‚ü©‚ü©
  comp_map g h _ := funext <| fun c ‚Ü¶ propext
    ‚ü®fun ‚ü®a, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü© ‚Ü¶ ‚ü®g a, ‚ü®‚ü®a, ‚ü®h‚ÇÅ, rfl‚ü©‚ü©, h‚ÇÇ‚ü©‚ü©,
     fun ‚ü®_, ‚ü®‚ü®a, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©, h‚ÇÉ‚ü©‚ü© ‚Ü¶ ‚ü®a, ‚ü®h‚ÇÅ, show h (g a) = c from h‚ÇÇ ‚ñ∏ h‚ÇÉ‚ü©‚ü©‚ü©
  map_const := rfl
protected def Nonempty (s : Set Œ±) : Prop :=
  ‚àÉ x, x ‚àà s
end Set