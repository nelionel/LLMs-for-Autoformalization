import Mathlib.Topology.MetricSpace.PiNat
namespace CantorScheme
open List Function Filter Set PiNat Topology
variable {Œ≤ Œ± : Type*} (A : List Œ≤ ‚Üí Set Œ±)
noncomputable def inducedMap : Œ£s : Set (‚Ñï ‚Üí Œ≤), s ‚Üí Œ± :=
  ‚ü®fun x => Set.Nonempty (‚ãÇ n : ‚Ñï, A (res x n)), fun x => x.property.some‚ü©
section Topology
protected def Antitone : Prop :=
  ‚àÄ l : List Œ≤, ‚àÄ a : Œ≤, A (a :: l) ‚äÜ A l
def ClosureAntitone [TopologicalSpace Œ±] : Prop :=
  ‚àÄ l : List Œ≤, ‚àÄ a : Œ≤, closure (A (a :: l)) ‚äÜ A l
protected def Disjoint : Prop :=
  ‚àÄ l : List Œ≤, Pairwise fun a b => Disjoint (A (a :: l)) (A (b :: l))
variable {A}
theorem map_mem (x : (inducedMap A).1) (n : ‚Ñï) : (inducedMap A).2 x ‚àà A (res x n) := by
  have := x.property.some_mem
  rw [mem_iInter] at this
  exact this n
protected theorem ClosureAntitone.antitone [TopologicalSpace Œ±] (hA : ClosureAntitone A) :
    CantorScheme.Antitone A := fun l a => subset_closure.trans (hA l a)
protected theorem Antitone.closureAntitone [TopologicalSpace Œ±] (hanti : CantorScheme.Antitone A)
    (hclosed : ‚àÄ l, IsClosed (A l)) : ClosureAntitone A := fun _ _ =>
  (hclosed _).closure_eq.subset.trans (hanti _ _)
theorem Disjoint.map_injective (hA : CantorScheme.Disjoint A) : Injective (inducedMap A).2 := by
  rintro ‚ü®x, hx‚ü© ‚ü®y, hy‚ü© hxy
  refine Subtype.coe_injective (res_injective ?_)
  dsimp
  ext n : 1
  induction' n with n ih; ¬∑ simp
  simp only [res_succ, cons.injEq]
  refine ‚ü®?_, ih‚ü©
  contrapose hA
  simp only [CantorScheme.Disjoint, _root_.Pairwise, Ne, not_forall, exists_prop]
  refine ‚ü®res x n, _, _, hA, ?_‚ü©
  rw [not_disjoint_iff]
  refine ‚ü®(inducedMap A).2 ‚ü®x, hx‚ü©, ?_, ?_‚ü©
  ¬∑ rw [‚Üê res_succ]
    apply map_mem
  rw [hxy, ih, ‚Üê res_succ]
  apply map_mem
end Topology
section Metric
variable [PseudoMetricSpace Œ±]
def VanishingDiam : Prop :=
  ‚àÄ x : ‚Ñï ‚Üí Œ≤, Tendsto (fun n : ‚Ñï => EMetric.diam (A (res x n))) atTop (ùìù 0)
variable {A}
theorem VanishingDiam.dist_lt (hA : VanishingDiam A) (Œµ : ‚Ñù) (Œµ_pos : 0 < Œµ) (x : ‚Ñï ‚Üí Œ≤) :
    ‚àÉ n : ‚Ñï, ‚àÄ (y) (_ : y ‚àà A (res x n)) (z) (_ : z ‚àà A (res x n)), dist y z < Œµ := by
  specialize hA x
  rw [ENNReal.tendsto_atTop_zero] at hA
  cases' hA (ENNReal.ofReal (Œµ / 2)) (by
    simp only [gt_iff_lt, ENNReal.ofReal_pos]
    linarith) with n hn
  use n
  intro y hy z hz
  rw [‚Üê ENNReal.ofReal_lt_ofReal_iff Œµ_pos, ‚Üê edist_dist]
  apply lt_of_le_of_lt (EMetric.edist_le_diam_of_mem hy hz)
  apply lt_of_le_of_lt (hn _ (le_refl _))
  rw [ENNReal.ofReal_lt_ofReal_iff Œµ_pos]
  linarith
theorem VanishingDiam.map_continuous [TopologicalSpace Œ≤] [DiscreteTopology Œ≤]
    (hA : VanishingDiam A) : Continuous (inducedMap A).2 := by
  rw [Metric.continuous_iff']
  rintro ‚ü®x, hx‚ü© Œµ Œµ_pos
  cases' hA.dist_lt _ Œµ_pos x with n hn
  rw [_root_.eventually_nhds_iff]
  refine ‚ü®(‚Üë)‚Åª¬π' cylinder x n, ?_, ?_, by simp‚ü©
  ¬∑ rintro ‚ü®y, hy‚ü© hyx
    rw [mem_preimage, Subtype.coe_mk, cylinder_eq_res, mem_setOf] at hyx
    apply hn
    ¬∑ rw [‚Üê hyx]
      apply map_mem
    apply map_mem
  apply continuous_subtype_val.isOpen_preimage
  apply isOpen_cylinder
theorem ClosureAntitone.map_of_vanishingDiam [CompleteSpace Œ±] (hdiam : VanishingDiam A)
    (hanti : ClosureAntitone A) (hnonempty : ‚àÄ l, (A l).Nonempty) : (inducedMap A).1 = univ := by
  rw [eq_univ_iff_forall]
  intro x
  choose u hu using fun n => hnonempty (res x n)
  have umem : ‚àÄ n m : ‚Ñï, n ‚â§ m ‚Üí u m ‚àà A (res x n) := by
    have : Antitone fun n : ‚Ñï => A (res x n) := by
      refine antitone_nat_of_succ_le ?_
      intro n
      apply hanti.antitone
    intro n m hnm
    exact this hnm (hu _)
  have : CauchySeq u := by
    rw [Metric.cauchySeq_iff]
    intro Œµ Œµ_pos
    cases' hdiam.dist_lt _ Œµ_pos x with n hn
    use n
    intro m‚ÇÄ hm‚ÇÄ m‚ÇÅ hm‚ÇÅ
    apply hn <;> apply umem <;> assumption
  cases' cauchySeq_tendsto_of_complete this with y hy
  use y
  rw [mem_iInter]
  intro n
  apply hanti _ (x n)
  apply mem_closure_of_tendsto hy
  rw [eventually_atTop]
  exact ‚ü®n.succ, umem _‚ü©
end Metric
end CantorScheme