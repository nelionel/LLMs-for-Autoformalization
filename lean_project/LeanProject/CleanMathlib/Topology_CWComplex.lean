import Mathlib.Topology.Category.TopCat.Limits.Basic
import Mathlib.Topology.Category.TopCat.Sphere
import Mathlib.CategoryTheory.Limits.Shapes.Products
import Mathlib.CategoryTheory.Functor.OfSequence
open CategoryTheory TopCat
universe u
namespace RelativeCWComplex
def sphereInclusion (n : ‚Ñ§) : ùïä n ‚ü∂ ùîª (n + 1) where
  toFun := fun ‚ü®p, hp‚ü© ‚Ü¶ ‚ü®p, le_of_eq hp‚ü©
  continuous_toFun := ‚ü®fun t ‚ü®s, ‚ü®r, hro, hrs‚ü©, hst‚ü© ‚Ü¶ by
    rw [isOpen_induced_iff, ‚Üê hst, ‚Üê hrs]
    tauto‚ü©
structure AttachGeneralizedCells {S D : TopCat.{u}} (f : S ‚ü∂ D) (X X' : TopCat.{u}) where
  cells : Type u
  attachMaps : cells ‚Üí (S ‚ü∂ X)
  iso_pushout : X' ‚âÖ Limits.pushout (Limits.Sigma.desc attachMaps) (Limits.Sigma.map fun _ ‚Ü¶ f)
def AttachCells (n : ‚Ñ§) := AttachGeneralizedCells (sphereInclusion n)
end RelativeCWComplex
structure RelativeCWComplex where
  sk : ‚Ñï ‚Üí TopCat.{u}
  attachCells (n : ‚Ñï) : RelativeCWComplex.AttachCells ((n : ‚Ñ§) - 1) (sk n) (sk (n + 1))
structure CWComplex extends RelativeCWComplex.{u} where
  isEmpty_sk_zero : IsEmpty (sk 0)
namespace RelativeCWComplex
noncomputable section Topology
def AttachGeneralizedCells.inclusion {S D : TopCat.{u}} {f : S ‚ü∂ D} {X X' : TopCat.{u}}
    (att : AttachGeneralizedCells f X X') : X ‚ü∂ X' :=
  Limits.pushout.inl _ _ ‚â´ att.iso_pushout.inv
def skInclusion (X : RelativeCWComplex.{u}) (n : ‚Ñï) : X.sk n ‚ü∂ X.sk (n + 1) :=
  (X.attachCells n).inclusion
def toTopCat (X : RelativeCWComplex.{u}) : TopCat.{u} :=
  Limits.colimit (Functor.ofSequence X.skInclusion)
instance : Coe RelativeCWComplex TopCat where coe X := toTopCat X
end Topology
end RelativeCWComplex