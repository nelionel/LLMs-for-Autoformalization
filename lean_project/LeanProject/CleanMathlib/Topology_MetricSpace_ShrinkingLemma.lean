import Mathlib.Topology.EMetricSpace.Paracompact
import Mathlib.Topology.MetricSpace.Basic
import Mathlib.Topology.MetricSpace.ProperSpace.Lemmas
import Mathlib.Topology.ShrinkingLemma
universe u v
open Set Metric
open Topology
variable {Œ± : Type u} {Œπ : Type v} [MetricSpace Œ±] [ProperSpace Œ±] {c : Œπ ‚Üí Œ±}
variable {s : Set Œ±}
theorem exists_subset_iUnion_ball_radius_lt {r : Œπ ‚Üí ‚Ñù} (hs : IsClosed s)
    (uf : ‚àÄ x ‚àà s, { i | x ‚àà ball (c i) (r i) }.Finite) (us : s ‚äÜ ‚ãÉ i, ball (c i) (r i)) :
    ‚àÉ r' : Œπ ‚Üí ‚Ñù, (s ‚äÜ ‚ãÉ i, ball (c i) (r' i)) ‚àß ‚àÄ i, r' i < r i := by
  rcases exists_subset_iUnion_closed_subset hs (fun i => @isOpen_ball _ _ (c i) (r i)) uf us with
    ‚ü®v, hsv, hvc, hcv‚ü©
  have := fun i => exists_lt_subset_ball (hvc i) (hcv i)
  choose r' hlt hsub using this
  exact ‚ü®r', hsv.trans <| iUnion_mono <| hsub, hlt‚ü©
theorem exists_iUnion_ball_eq_radius_lt {r : Œπ ‚Üí ‚Ñù} (uf : ‚àÄ x, { i | x ‚àà ball (c i) (r i) }.Finite)
    (uU : ‚ãÉ i, ball (c i) (r i) = univ) :
    ‚àÉ r' : Œπ ‚Üí ‚Ñù, ‚ãÉ i, ball (c i) (r' i) = univ ‚àß ‚àÄ i, r' i < r i :=
  let ‚ü®r', hU, hv‚ü© := exists_subset_iUnion_ball_radius_lt isClosed_univ (fun x _ => uf x) uU.ge
  ‚ü®r', univ_subset_iff.1 hU, hv‚ü©
theorem exists_subset_iUnion_ball_radius_pos_lt {r : Œπ ‚Üí ‚Ñù} (hr : ‚àÄ i, 0 < r i) (hs : IsClosed s)
    (uf : ‚àÄ x ‚àà s, { i | x ‚àà ball (c i) (r i) }.Finite) (us : s ‚äÜ ‚ãÉ i, ball (c i) (r i)) :
    ‚àÉ r' : Œπ ‚Üí ‚Ñù, (s ‚äÜ ‚ãÉ i, ball (c i) (r' i)) ‚àß ‚àÄ i, r' i ‚àà Ioo 0 (r i) := by
  rcases exists_subset_iUnion_closed_subset hs (fun i => @isOpen_ball _ _ (c i) (r i)) uf us with
    ‚ü®v, hsv, hvc, hcv‚ü©
  have := fun i => exists_pos_lt_subset_ball (hr i) (hvc i) (hcv i)
  choose r' hlt hsub using this
  exact ‚ü®r', hsv.trans <| iUnion_mono hsub, hlt‚ü©
theorem exists_iUnion_ball_eq_radius_pos_lt {r : Œπ ‚Üí ‚Ñù} (hr : ‚àÄ i, 0 < r i)
    (uf : ‚àÄ x, { i | x ‚àà ball (c i) (r i) }.Finite) (uU : ‚ãÉ i, ball (c i) (r i) = univ) :
    ‚àÉ r' : Œπ ‚Üí ‚Ñù, ‚ãÉ i, ball (c i) (r' i) = univ ‚àß ‚àÄ i, r' i ‚àà Ioo 0 (r i) :=
  let ‚ü®r', hU, hv‚ü© :=
    exists_subset_iUnion_ball_radius_pos_lt hr isClosed_univ (fun x _ => uf x) uU.ge
  ‚ü®r', univ_subset_iff.1 hU, hv‚ü©
theorem exists_locallyFinite_subset_iUnion_ball_radius_lt (hs : IsClosed s) {R : Œ± ‚Üí ‚Ñù}
    (hR : ‚àÄ x ‚àà s, 0 < R x) :
    ‚àÉ (Œπ : Type u) (c : Œπ ‚Üí Œ±) (r r' : Œπ ‚Üí ‚Ñù),
      (‚àÄ i, c i ‚àà s ‚àß 0 < r i ‚àß r i < r' i ‚àß r' i < R (c i)) ‚àß
        (LocallyFinite fun i => ball (c i) (r' i)) ‚àß s ‚äÜ ‚ãÉ i, ball (c i) (r i) := by
  have : ‚àÄ x ‚àà s, (ùìù x).HasBasis (fun r : ‚Ñù => 0 < r ‚àß r < R x) fun r => ball x r := fun x hx =>
    nhds_basis_uniformity (uniformity_basis_dist_lt (hR x hx))
  rcases refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set hs this with
    ‚ü®Œπ, c, r', hr', hsub', hfin‚ü©
  rcases exists_subset_iUnion_ball_radius_pos_lt (fun i => (hr' i).2.1) hs
      (fun x _ => hfin.point_finite x) hsub' with
    ‚ü®r, hsub, hlt‚ü©
  exact ‚ü®Œπ, c, r, r', fun i => ‚ü®(hr' i).1, (hlt i).1, (hlt i).2, (hr' i).2.2‚ü©, hfin, hsub‚ü©
theorem exists_locallyFinite_iUnion_eq_ball_radius_lt {R : Œ± ‚Üí ‚Ñù} (hR : ‚àÄ x, 0 < R x) :
    ‚àÉ (Œπ : Type u) (c : Œπ ‚Üí Œ±) (r r' : Œπ ‚Üí ‚Ñù),
      (‚àÄ i, 0 < r i ‚àß r i < r' i ‚àß r' i < R (c i)) ‚àß
        (LocallyFinite fun i => ball (c i) (r' i)) ‚àß ‚ãÉ i, ball (c i) (r i) = univ :=
  let ‚ü®Œπ, c, r, r', hlt, hfin, hsub‚ü© :=
    exists_locallyFinite_subset_iUnion_ball_radius_lt isClosed_univ fun x _ => hR x
  ‚ü®Œπ, c, r, r', fun i => (hlt i).2, hfin, univ_subset_iff.1 hsub‚ü©