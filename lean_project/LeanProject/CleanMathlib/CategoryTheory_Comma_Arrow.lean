import Mathlib.CategoryTheory.Comma.Basic
namespace CategoryTheory
universe v u
variable {T : Type u} [Category.{v} T]
section
variable (T)
def Arrow :=
  Comma.{v, v, v} (ùü≠ T) (ùü≠ T)
instance : Category (Arrow T) := commaCategory
instance Arrow.inhabited [Inhabited T] : Inhabited (Arrow T) where
  default := show Comma (ùü≠ T) (ùü≠ T) from default
end
namespace Arrow
@[ext]
lemma hom_ext {X Y : Arrow T} (f g : X ‚ü∂ Y) (h‚ÇÅ : f.left = g.left) (h‚ÇÇ : f.right = g.right) :
    f = g :=
  CommaMorphism.ext h‚ÇÅ h‚ÇÇ
@[simp]
theorem id_left (f : Arrow T) : CommaMorphism.left (ùüô f) = ùüô f.left :=
  rfl
@[simp]
theorem id_right (f : Arrow T) : CommaMorphism.right (ùüô f) = ùüô f.right :=
  rfl
@[simp, reassoc]
theorem comp_left {X Y Z : Arrow T} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).left = f.left ‚â´ g.left := rfl
@[simp, reassoc]
theorem comp_right {X Y Z : Arrow T} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).right = f.right ‚â´ g.right := rfl
@[simps]
def mk {X Y : T} (f : X ‚ü∂ Y) : Arrow T where
  left := X
  right := Y
  hom := f
@[simp]
theorem mk_eq (f : Arrow T) : Arrow.mk f.hom = f := by
  cases f
  rfl
theorem mk_injective (A B : T) :
    Function.Injective (Arrow.mk : (A ‚ü∂ B) ‚Üí Arrow T) := fun f g h => by
  cases h
  rfl
theorem mk_inj (A B : T) {f g : A ‚ü∂ B} : Arrow.mk f = Arrow.mk g ‚Üî f = g :=
  (mk_injective A B).eq_iff
instance {X Y : T} : CoeOut (X ‚ü∂ Y) (Arrow T) where
  coe := mk
@[simps]
def homMk {f g : Arrow T} {u : f.left ‚ü∂ g.left} {v : f.right ‚ü∂ g.right}
    (w : u ‚â´ g.hom = f.hom ‚â´ v) : f ‚ü∂ g where
  left := u
  right := v
  w := w
@[simps]
def homMk' {X Y : T} {f : X ‚ü∂ Y} {P Q : T} {g : P ‚ü∂ Q} {u : X ‚ü∂ P} {v : Y ‚ü∂ Q} (w : u ‚â´ g = f ‚â´ v) :
    Arrow.mk f ‚ü∂ Arrow.mk g where
  left := u
  right := v
  w := w
@[reassoc (attr := simp, nolint simpNF)]
theorem w {f g : Arrow T} (sq : f ‚ü∂ g) : sq.left ‚â´ g.hom = f.hom ‚â´ sq.right :=
  sq.w
@[reassoc (attr := simp)]
theorem w_mk_right {f : Arrow T} {X Y : T} {g : X ‚ü∂ Y} (sq : f ‚ü∂ mk g) :
    sq.left ‚â´ g = f.hom ‚â´ sq.right :=
  sq.w
theorem isIso_of_isIso_left_of_isIso_right {f g : Arrow T} (ff : f ‚ü∂ g) [IsIso ff.left]
    [IsIso ff.right] : IsIso ff where
  out := by
    let inverse : g ‚ü∂ f := ‚ü®inv ff.left, inv ff.right, (by simp)‚ü©
    apply Exists.intro inverse
    aesop_cat
@[simps!]
def isoMk {f g : Arrow T} (l : f.left ‚âÖ g.left) (r : f.right ‚âÖ g.right)
    (h : l.hom ‚â´ g.hom = f.hom ‚â´ r.hom := by aesop_cat) : f ‚âÖ g :=
  Comma.isoMk l r h
abbrev isoMk' {W X Y Z : T} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) (e‚ÇÅ : W ‚âÖ Y) (e‚ÇÇ : X ‚âÖ Z)
    (h : e‚ÇÅ.hom ‚â´ g = f ‚â´ e‚ÇÇ.hom := by aesop_cat) : Arrow.mk f ‚âÖ Arrow.mk g :=
  Arrow.isoMk e‚ÇÅ e‚ÇÇ h
theorem hom.congr_left {f g : Arrow T} {œÜ‚ÇÅ œÜ‚ÇÇ : f ‚ü∂ g} (h : œÜ‚ÇÅ = œÜ‚ÇÇ) : œÜ‚ÇÅ.left = œÜ‚ÇÇ.left := by
  rw [h]
@[simp]
theorem hom.congr_right {f g : Arrow T} {œÜ‚ÇÅ œÜ‚ÇÇ : f ‚ü∂ g} (h : œÜ‚ÇÅ = œÜ‚ÇÇ) : œÜ‚ÇÅ.right = œÜ‚ÇÇ.right := by
  rw [h]
theorem iso_w {f g : Arrow T} (e : f ‚âÖ g) : g.hom = e.inv.left ‚â´ f.hom ‚â´ e.hom.right := by
  have eq := Arrow.hom.congr_right e.inv_hom_id
  rw [Arrow.comp_right, Arrow.id_right] at eq
  rw [Arrow.w_assoc, eq, Category.comp_id]
theorem iso_w' {W X Y Z : T} {f : W ‚ü∂ X} {g : Y ‚ü∂ Z} (e : Arrow.mk f ‚âÖ Arrow.mk g) :
    g = e.inv.left ‚â´ f ‚â´ e.hom.right :=
  iso_w e
section
variable {f g : Arrow T} (sq : f ‚ü∂ g)
instance isIso_left [IsIso sq] : IsIso sq.left where
  out := by
    apply Exists.intro (inv sq).left
    simp only [‚Üê Comma.comp_left, IsIso.hom_inv_id, IsIso.inv_hom_id, Arrow.id_left,
      eq_self_iff_true, and_self_iff]
    simp
instance isIso_right [IsIso sq] : IsIso sq.right where
  out := by
    apply Exists.intro (inv sq).right
    simp only [‚Üê Comma.comp_right, IsIso.hom_inv_id, IsIso.inv_hom_id, Arrow.id_right,
      eq_self_iff_true, and_self_iff]
    simp
@[simp]
theorem inv_left [IsIso sq] : (inv sq).left = inv sq.left :=
  IsIso.eq_inv_of_hom_inv_id <| by rw [‚Üê Comma.comp_left, IsIso.hom_inv_id, id_left]
@[simp]
theorem inv_right [IsIso sq] : (inv sq).right = inv sq.right :=
  IsIso.eq_inv_of_hom_inv_id <| by rw [‚Üê Comma.comp_right, IsIso.hom_inv_id, id_right]
theorem left_hom_inv_right [IsIso sq] : sq.left ‚â´ g.hom ‚â´ inv sq.right = f.hom := by
  simp only [‚Üê Category.assoc, IsIso.comp_inv_eq, w]
theorem inv_left_hom_right [IsIso sq] : inv sq.left ‚â´ f.hom ‚â´ sq.right = g.hom := by
  simp only [w, IsIso.inv_comp_eq]
instance mono_left [Mono sq] : Mono sq.left where
  right_cancellation {Z} œÜ œà h := by
    let aux : (Z ‚ü∂ f.left) ‚Üí (Arrow.mk (ùüô Z) ‚ü∂ f) := fun œÜ =>
      { left := œÜ
        right := œÜ ‚â´ f.hom }
    have : ‚àÄ g, (aux g).right = g ‚â´ f.hom := fun g => by dsimp
    show (aux œÜ).left = (aux œà).left
    congr 1
    rw [‚Üê cancel_mono sq]
    apply CommaMorphism.ext
    ¬∑ exact h
    ¬∑ rw [Comma.comp_right, Comma.comp_right, this, this, Category.assoc, Category.assoc]
      rw [‚Üê Arrow.w]
      simp only [‚Üê Category.assoc, h]
instance epi_right [Epi sq] : Epi sq.right where
  left_cancellation {Z} œÜ œà h := by
    let aux : (g.right ‚ü∂ Z) ‚Üí (g ‚ü∂ Arrow.mk (ùüô Z)) := fun œÜ =>
      { right := œÜ
        left := g.hom ‚â´ œÜ }
    show (aux œÜ).right = (aux œà).right
    congr 1
    rw [‚Üê cancel_epi sq]
    apply CommaMorphism.ext
    ¬∑ rw [Comma.comp_left, Comma.comp_left, Arrow.w_assoc, Arrow.w_assoc, h]
    ¬∑ exact h
@[reassoc (attr := simp)]
lemma hom_inv_id_left (e : f ‚âÖ g) : e.hom.left ‚â´ e.inv.left = ùüô _ := by
  rw [‚Üê comp_left, e.hom_inv_id, id_left]
@[reassoc (attr := simp)]
lemma inv_hom_id_left (e : f ‚âÖ g) : e.inv.left ‚â´ e.hom.left = ùüô _ := by
  rw [‚Üê comp_left, e.inv_hom_id, id_left]
@[reassoc (attr := simp)]
lemma hom_inv_id_right (e : f ‚âÖ g) : e.hom.right ‚â´ e.inv.right = ùüô _ := by
  rw [‚Üê comp_right, e.hom_inv_id, id_right]
@[reassoc (attr := simp)]
lemma inv_hom_id_right (e : f ‚âÖ g) : e.inv.right ‚â´ e.hom.right = ùüô _ := by
  rw [‚Üê comp_right, e.inv_hom_id, id_right]
end
@[simp]
theorem square_to_iso_invert (i : Arrow T) {X Y : T} (p : X ‚âÖ Y) (sq : i ‚ü∂ Arrow.mk p.hom) :
    i.hom ‚â´ sq.right ‚â´ p.inv = sq.left := by
  simpa only [Category.assoc] using (Iso.comp_inv_eq p).mpr (Arrow.w_mk_right sq).symm
theorem square_from_iso_invert {X Y : T} (i : X ‚âÖ Y) (p : Arrow T) (sq : Arrow.mk i.hom ‚ü∂ p) :
    i.inv ‚â´ sq.left ‚â´ p.hom = sq.right := by simp only [Iso.inv_hom_id_assoc, Arrow.w, Arrow.mk_hom]
variable {C : Type u} [Category.{v} C]
@[simps]
def squareToSnd {X Y Z : C} {i : Arrow C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} (sq : i ‚ü∂ Arrow.mk (f ‚â´ g)) :
    i ‚ü∂ Arrow.mk g where
  left := sq.left ‚â´ f
  right := sq.right
@[simps!]
def leftFunc : Arrow C ‚•§ C :=
  Comma.fst _ _
@[simps!]
def rightFunc : Arrow C ‚•§ C :=
  Comma.snd _ _
@[simps]
def leftToRight : (leftFunc : Arrow C ‚•§ C) ‚ü∂ rightFunc where app f := f.hom
end Arrow
namespace Functor
universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
@[simps]
def mapArrow (F : C ‚•§ D) : Arrow C ‚•§ Arrow D where
  obj a :=
    { left := F.obj a.left
      right := F.obj a.right
      hom := F.map a.hom }
  map f :=
    { left := F.map f.left
      right := F.map f.right
      w := by
        let w := f.w
        simp only [id_map] at w
        dsimp
        simp only [‚Üê F.map_comp, w] }
variable (C D)
@[simps]
def mapArrowFunctor : (C ‚•§ D) ‚•§ (Arrow C ‚•§ Arrow D) where
  obj F := F.mapArrow
  map œÑ :=
    { app := fun f =>
        { left := œÑ.app _
          right := œÑ.app _ } }
variable {C D}
def mapArrowEquivalence (e : C ‚âå D) : Arrow C ‚âå Arrow D where
  functor := e.functor.mapArrow
  inverse := e.inverse.mapArrow
  unitIso := Functor.mapIso (mapArrowFunctor C C) e.unitIso
  counitIso := Functor.mapIso (mapArrowFunctor D D) e.counitIso
instance isEquivalence_mapArrow (F : C ‚•§ D) [IsEquivalence F] :
    IsEquivalence F.mapArrow :=
  (mapArrowEquivalence (asEquivalence F)).isEquivalence_functor
end Functor
def Arrow.isoOfNatIso {C D : Type*} [Category C] [Category D] {F G : C ‚•§ D} (e : F ‚âÖ G)
    (f : Arrow C) : F.mapArrow.obj f ‚âÖ G.mapArrow.obj f :=
  Arrow.isoMk (e.app f.left) (e.app f.right)
end CategoryTheory