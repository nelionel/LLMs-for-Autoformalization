import Mathlib.Analysis.CStarAlgebra.Spectrum
import Mathlib.Analysis.CStarAlgebra.ContinuousMap
import Mathlib.Analysis.Normed.Group.Quotient
import Mathlib.Analysis.Normed.Algebra.Basic
import Mathlib.Topology.ContinuousMap.Units
import Mathlib.Topology.ContinuousMap.Compact
import Mathlib.Topology.Algebra.Algebra
import Mathlib.Topology.ContinuousMap.Ideals
import Mathlib.Topology.ContinuousMap.StoneWeierstrass
open WeakDual
open scoped NNReal
section ComplexBanachAlgebra
open Ideal
variable {A : Type*} [NormedCommRing A] [NormedAlgebra ‚ÑÇ A] [CompleteSpace A] (I : Ideal A)
  [Ideal.IsMaximal I]
noncomputable def Ideal.toCharacterSpace : characterSpace ‚ÑÇ A :=
  CharacterSpace.equivAlgHom.symm <|
    ((NormedRing.algEquivComplexOfComplete
      (letI := Quotient.field I; isUnit_iff_ne_zero (G‚ÇÄ := A ‚ß∏ I))).symm : A ‚ß∏ I ‚Üí‚Çê[‚ÑÇ] ‚ÑÇ).comp <|
    Quotient.mk‚Çê ‚ÑÇ I
theorem Ideal.toCharacterSpace_apply_eq_zero_of_mem {a : A} (ha : a ‚àà I) :
    I.toCharacterSpace a = 0 := by
  unfold Ideal.toCharacterSpace
  simp only [CharacterSpace.equivAlgHom_symm_coe, AlgHom.coe_comp, AlgHom.coe_coe,
    Quotient.mk‚Çê_eq_mk, Function.comp_apply, NormedRing.algEquivComplexOfComplete_symm_apply]
  simp_rw [Quotient.eq_zero_iff_mem.mpr ha, spectrum.zero_eq]
  exact Set.eq_of_mem_singleton (Set.singleton_nonempty (0 : ‚ÑÇ)).some_mem
theorem WeakDual.CharacterSpace.exists_apply_eq_zero {a : A} (ha : ¬¨IsUnit a) :
    ‚àÉ f : characterSpace ‚ÑÇ A, f a = 0 := by
  obtain ‚ü®M, hM, haM‚ü© := (span {a}).exists_le_maximal (span_singleton_ne_top ha)
  exact
    ‚ü®M.toCharacterSpace,
      M.toCharacterSpace_apply_eq_zero_of_mem
        (haM (mem_span_singleton.mpr ‚ü®1, (mul_one a).symm‚ü©))‚ü©
theorem WeakDual.CharacterSpace.mem_spectrum_iff_exists {a : A} {z : ‚ÑÇ} :
    z ‚àà spectrum ‚ÑÇ a ‚Üî ‚àÉ f : characterSpace ‚ÑÇ A, f a = z := by
  refine ‚ü®fun hz => ?_, ?_‚ü©
  ¬∑ obtain ‚ü®f, hf‚ü© := WeakDual.CharacterSpace.exists_apply_eq_zero hz
    simp only [map_sub, sub_eq_zero, AlgHomClass.commutes] at hf
    exact ‚ü®_, hf.symm‚ü©
  ¬∑ rintro ‚ü®f, rfl‚ü©
    exact AlgHom.apply_mem_spectrum f a
theorem spectrum.gelfandTransform_eq (a : A) :
    spectrum ‚ÑÇ (gelfandTransform ‚ÑÇ A a) = spectrum ‚ÑÇ a := by
  ext z
  rw [ContinuousMap.spectrum_eq_range, WeakDual.CharacterSpace.mem_spectrum_iff_exists]
  exact Iff.rfl
instance [Nontrivial A] : Nonempty (characterSpace ‚ÑÇ A) :=
  ‚ü®Classical.choose <|
      WeakDual.CharacterSpace.exists_apply_eq_zero <| zero_mem_nonunits.2 zero_ne_one‚ü©
end ComplexBanachAlgebra
section ComplexCStarAlgebra
variable {A : Type*} [CommCStarAlgebra A]
theorem gelfandTransform_map_star (a : A) :
    gelfandTransform ‚ÑÇ A (star a) = star (gelfandTransform ‚ÑÇ A a) :=
  ContinuousMap.ext fun œÜ => map_star œÜ a
variable (A)
theorem gelfandTransform_isometry : Isometry (gelfandTransform ‚ÑÇ A) := by
  nontriviality A
  refine AddMonoidHomClass.isometry_of_norm (gelfandTransform ‚ÑÇ A) fun a => ?_
  have : spectralRadius ‚ÑÇ (gelfandTransform ‚ÑÇ A (star a * a)) = spectralRadius ‚ÑÇ (star a * a) := by
    unfold spectralRadius; rw [spectrum.gelfandTransform_eq]
  rw [map_mul, (IsSelfAdjoint.star_mul_self a).spectralRadius_eq_nnnorm, gelfandTransform_map_star,
    (IsSelfAdjoint.star_mul_self (gelfandTransform ‚ÑÇ A a)).spectralRadius_eq_nnnorm] at this
  simp only [ENNReal.coe_inj, CStarRing.nnnorm_star_mul_self, ‚Üê sq] at this
  simpa only [Function.comp_apply, NNReal.sqrt_sq] using
    congr_arg (((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù) ‚àò ‚áëNNReal.sqrt) this
theorem gelfandTransform_bijective : Function.Bijective (gelfandTransform ‚ÑÇ A) := by
  refine ‚ü®(gelfandTransform_isometry A).injective, ?_‚ü©
  let rng : StarSubalgebra ‚ÑÇ C(characterSpace ‚ÑÇ A, ‚ÑÇ) :=
    { toSubalgebra := (gelfandTransform ‚ÑÇ A).range
      star_mem' := by
        rintro - ‚ü®a, rfl‚ü©
        use star a
        ext1 œÜ
        dsimp
        simp only [map_star, RCLike.star_def] }
  suffices rng = ‚ä§ from
    fun x => show x ‚àà rng from this.symm ‚ñ∏ StarSubalgebra.mem_top
  have h : rng.topologicalClosure = rng := le_antisymm
    (StarSubalgebra.topologicalClosure_minimal le_rfl
      (gelfandTransform_isometry A).isClosedEmbedding.isClosed_range)
    (StarSubalgebra.le_topologicalClosure _)
  refine h ‚ñ∏ ContinuousMap.starSubalgebra_topologicalClosure_eq_top_of_separatesPoints
    _ (fun _ _ => ?_)
  contrapose!
  exact fun h => Subtype.ext (ContinuousLinearMap.ext fun a =>
    h (gelfandTransform ‚ÑÇ A a) ‚ü®gelfandTransform ‚ÑÇ A a, ‚ü®a, rfl‚ü©, rfl‚ü©)
@[simps!]
noncomputable def gelfandStarTransform : A ‚âÉ‚ãÜ‚Çê[‚ÑÇ] C(characterSpace ‚ÑÇ A, ‚ÑÇ) :=
  StarAlgEquiv.ofBijective
    (show A ‚Üí‚ãÜ‚Çê[‚ÑÇ] C(characterSpace ‚ÑÇ A, ‚ÑÇ) from
      { gelfandTransform ‚ÑÇ A with map_star' := fun x => gelfandTransform_map_star x })
    (gelfandTransform_bijective A)
end ComplexCStarAlgebra
section Functoriality
namespace WeakDual
namespace CharacterSpace
variable {A B C ùïú : Type*} [NontriviallyNormedField ùïú]
variable [NormedRing A] [NormedAlgebra ùïú A] [CompleteSpace A] [StarRing A]
variable [NormedRing B] [NormedAlgebra ùïú B] [CompleteSpace B] [StarRing B]
variable [NormedRing C] [NormedAlgebra ùïú C] [CompleteSpace C] [StarRing C]
@[simps]
noncomputable def compContinuousMap (œà : A ‚Üí‚ãÜ‚Çê[ùïú] B) :
    C(characterSpace ùïú B, characterSpace ùïú A) where
  toFun œÜ := equivAlgHom.symm ((equivAlgHom œÜ).comp œà.toAlgHom)
  continuous_toFun :=
    Continuous.subtype_mk
      (continuous_of_continuous_eval fun a => map_continuous <| gelfandTransform ùïú B (œà a)) _
variable (A)
@[simp]
theorem compContinuousMap_id :
    compContinuousMap (StarAlgHom.id ùïú A) = ContinuousMap.id (characterSpace ùïú A) :=
  ContinuousMap.ext fun _a => ext fun _x => rfl
variable {A}
@[simp]
theorem compContinuousMap_comp (œà‚ÇÇ : B ‚Üí‚ãÜ‚Çê[ùïú] C) (œà‚ÇÅ : A ‚Üí‚ãÜ‚Çê[ùïú] B) :
    compContinuousMap (œà‚ÇÇ.comp œà‚ÇÅ) = (compContinuousMap œà‚ÇÅ).comp (compContinuousMap œà‚ÇÇ) :=
  ContinuousMap.ext fun _a => ext fun _x => rfl
end CharacterSpace
end WeakDual
end Functoriality
open CharacterSpace in
theorem gelfandStarTransform_naturality {A B : Type*} [CommCStarAlgebra A] [CommCStarAlgebra B]
    (œÜ : A ‚Üí‚ãÜ‚Çê[‚ÑÇ] B) :
    (gelfandStarTransform B : _ ‚Üí‚ãÜ‚Çê[‚ÑÇ] _).comp œÜ =
      (compContinuousMap œÜ |>.compStarAlgHom' ‚ÑÇ ‚ÑÇ).comp (gelfandStarTransform A : _ ‚Üí‚ãÜ‚Çê[‚ÑÇ] _) := by
  rfl
lemma WeakDual.CharacterSpace.homeoEval_naturality {X Y ùïú : Type*} [RCLike ùïú] [TopologicalSpace X]
    [CompactSpace X] [T2Space X] [TopologicalSpace Y] [CompactSpace Y] [T2Space Y] (f : C(X, Y)) :
    (homeoEval Y ùïú : C(_, _)).comp f =
      (f.compStarAlgHom' ùïú ùïú |> compContinuousMap).comp (homeoEval X ùïú : C(_, _)) :=
  rfl