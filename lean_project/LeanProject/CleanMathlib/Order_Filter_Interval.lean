import Mathlib.Order.Interval.Set.OrdConnected
import Mathlib.Order.Filter.SmallSets
import Mathlib.Order.Filter.AtTopBot
variable {Œ± Œ≤ : Type*}
open Filter Set Function
namespace Filter
section Preorder
class TendstoIxxClass (Ixx : Œ± ‚Üí Œ± ‚Üí Set Œ±) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : outParam <| Filter Œ±) : Prop where
  tendsto_Ixx : Tendsto (fun p : Œ± √ó Œ± => Ixx p.1 p.2) (l‚ÇÅ √óÀ¢ l‚ÇÅ) l‚ÇÇ.smallSets
theorem tendstoIxxClass_principal {s t : Set Œ±} {Ixx : Œ± ‚Üí Œ± ‚Üí Set Œ±} :
    TendstoIxxClass Ixx (ùìü s) (ùìü t) ‚Üî ‚àÄ·µâ (x ‚àà s) (y ‚àà s), Ixx x y ‚äÜ t :=
  Iff.trans ‚ü®fun h => h.1, fun h => ‚ü®h‚ü©‚ü© <| by
    simp only [smallSets_principal, prod_principal_principal, tendsto_principal_principal,
      forall_prod_set, mem_powerset_iff, mem_principal]
theorem tendstoIxxClass_inf {l‚ÇÅ l‚ÇÅ' l‚ÇÇ l‚ÇÇ' : Filter Œ±} {Ixx} [h : TendstoIxxClass Ixx l‚ÇÅ l‚ÇÇ]
    [h' : TendstoIxxClass Ixx l‚ÇÅ' l‚ÇÇ'] : TendstoIxxClass Ixx (l‚ÇÅ ‚äì l‚ÇÅ') (l‚ÇÇ ‚äì l‚ÇÇ') :=
  ‚ü®by simpa only [prod_inf_prod, smallSets_inf] using h.1.inf h'.1‚ü©
theorem tendstoIxxClass_of_subset {l‚ÇÅ l‚ÇÇ : Filter Œ±} {Ixx Ixx' : Œ± ‚Üí Œ± ‚Üí Set Œ±}
    (h : ‚àÄ a b, Ixx a b ‚äÜ Ixx' a b) [h' : TendstoIxxClass Ixx' l‚ÇÅ l‚ÇÇ] : TendstoIxxClass Ixx l‚ÇÅ l‚ÇÇ :=
  ‚ü®h'.1.smallSets_mono <| Eventually.of_forall <| Prod.forall.2 h‚ü©
theorem HasBasis.tendstoIxxClass {Œπ : Type*} {p : Œπ ‚Üí Prop} {s} {l : Filter Œ±}
    (hl : l.HasBasis p s) {Ixx : Œ± ‚Üí Œ± ‚Üí Set Œ±}
    (H : ‚àÄ i, p i ‚Üí ‚àÄ x ‚àà s i, ‚àÄ y ‚àà s i, Ixx x y ‚äÜ s i) : TendstoIxxClass Ixx l l :=
  ‚ü®(hl.prod_self.tendsto_iff hl.smallSets).2 fun i hi => ‚ü®i, hi, fun _ h => H i hi _ h.1 _ h.2‚ü©‚ü©
variable [Preorder Œ±]
protected theorem Tendsto.Icc {l‚ÇÅ l‚ÇÇ : Filter Œ±} [TendstoIxxClass Icc l‚ÇÅ l‚ÇÇ] {lb : Filter Œ≤}
    {u‚ÇÅ u‚ÇÇ : Œ≤ ‚Üí Œ±} (h‚ÇÅ : Tendsto u‚ÇÅ lb l‚ÇÅ) (h‚ÇÇ : Tendsto u‚ÇÇ lb l‚ÇÅ) :
    Tendsto (fun x => Icc (u‚ÇÅ x) (u‚ÇÇ x)) lb l‚ÇÇ.smallSets :=
  (@TendstoIxxClass.tendsto_Ixx Œ± Set.Icc _ _ _).comp <| h‚ÇÅ.prod_mk h‚ÇÇ
protected theorem Tendsto.Ioc {l‚ÇÅ l‚ÇÇ : Filter Œ±} [TendstoIxxClass Ioc l‚ÇÅ l‚ÇÇ] {lb : Filter Œ≤}
    {u‚ÇÅ u‚ÇÇ : Œ≤ ‚Üí Œ±} (h‚ÇÅ : Tendsto u‚ÇÅ lb l‚ÇÅ) (h‚ÇÇ : Tendsto u‚ÇÇ lb l‚ÇÅ) :
    Tendsto (fun x => Ioc (u‚ÇÅ x) (u‚ÇÇ x)) lb l‚ÇÇ.smallSets :=
  (@TendstoIxxClass.tendsto_Ixx Œ± Set.Ioc _ _ _).comp <| h‚ÇÅ.prod_mk h‚ÇÇ
protected theorem Tendsto.Ico {l‚ÇÅ l‚ÇÇ : Filter Œ±} [TendstoIxxClass Ico l‚ÇÅ l‚ÇÇ] {lb : Filter Œ≤}
    {u‚ÇÅ u‚ÇÇ : Œ≤ ‚Üí Œ±} (h‚ÇÅ : Tendsto u‚ÇÅ lb l‚ÇÅ) (h‚ÇÇ : Tendsto u‚ÇÇ lb l‚ÇÅ) :
    Tendsto (fun x => Ico (u‚ÇÅ x) (u‚ÇÇ x)) lb l‚ÇÇ.smallSets :=
  (@TendstoIxxClass.tendsto_Ixx Œ± Set.Ico _ _ _).comp <| h‚ÇÅ.prod_mk h‚ÇÇ
protected theorem Tendsto.Ioo {l‚ÇÅ l‚ÇÇ : Filter Œ±} [TendstoIxxClass Ioo l‚ÇÅ l‚ÇÇ] {lb : Filter Œ≤}
    {u‚ÇÅ u‚ÇÇ : Œ≤ ‚Üí Œ±} (h‚ÇÅ : Tendsto u‚ÇÅ lb l‚ÇÅ) (h‚ÇÇ : Tendsto u‚ÇÇ lb l‚ÇÅ) :
    Tendsto (fun x => Ioo (u‚ÇÅ x) (u‚ÇÇ x)) lb l‚ÇÇ.smallSets :=
  (@TendstoIxxClass.tendsto_Ixx Œ± Set.Ioo _ _ _).comp <| h‚ÇÅ.prod_mk h‚ÇÇ
instance tendsto_Icc_atTop_atTop : TendstoIxxClass Icc (atTop : Filter Œ±) atTop :=
  (hasBasis_iInf_principal_finite _).tendstoIxxClass fun _ _ =>
    Set.OrdConnected.out <| ordConnected_biInter fun _ _ => ordConnected_Ici
instance tendsto_Ico_atTop_atTop : TendstoIxxClass Ico (atTop : Filter Œ±) atTop :=
  tendstoIxxClass_of_subset fun _ _ => Ico_subset_Icc_self
instance tendsto_Ioc_atTop_atTop : TendstoIxxClass Ioc (atTop : Filter Œ±) atTop :=
  tendstoIxxClass_of_subset fun _ _ => Ioc_subset_Icc_self
instance tendsto_Ioo_atTop_atTop : TendstoIxxClass Ioo (atTop : Filter Œ±) atTop :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Icc_self
instance tendsto_Icc_atBot_atBot : TendstoIxxClass Icc (atBot : Filter Œ±) atBot :=
  (hasBasis_iInf_principal_finite _).tendstoIxxClass fun _ _ =>
    Set.OrdConnected.out <| ordConnected_biInter fun _ _ => ordConnected_Iic
instance tendsto_Ico_atBot_atBot : TendstoIxxClass Ico (atBot : Filter Œ±) atBot :=
  tendstoIxxClass_of_subset fun _ _ => Ico_subset_Icc_self
instance tendsto_Ioc_atBot_atBot : TendstoIxxClass Ioc (atBot : Filter Œ±) atBot :=
  tendstoIxxClass_of_subset fun _ _ => Ioc_subset_Icc_self
instance tendsto_Ioo_atBot_atBot : TendstoIxxClass Ioo (atBot : Filter Œ±) atBot :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Icc_self
instance OrdConnected.tendsto_Icc {s : Set Œ±} [hs : OrdConnected s] :
    TendstoIxxClass Icc (ùìü s) (ùìü s) :=
  tendstoIxxClass_principal.2 hs.out
instance tendsto_Ico_Ici_Ici {a : Œ±} : TendstoIxxClass Ico (ùìü (Ici a)) (ùìü (Ici a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ico_subset_Icc_self
instance tendsto_Ico_Ioi_Ioi {a : Œ±} : TendstoIxxClass Ico (ùìü (Ioi a)) (ùìü (Ioi a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ico_subset_Icc_self
instance tendsto_Ico_Iic_Iio {a : Œ±} : TendstoIxxClass Ico (ùìü (Iic a)) (ùìü (Iio a)) :=
  tendstoIxxClass_principal.2 fun _ _ _ h‚ÇÅ _ h‚ÇÇ => lt_of_lt_of_le h‚ÇÇ.2 h‚ÇÅ
instance tendsto_Ico_Iio_Iio {a : Œ±} : TendstoIxxClass Ico (ùìü (Iio a)) (ùìü (Iio a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ico_subset_Icc_self
instance tendsto_Ioc_Ici_Ioi {a : Œ±} : TendstoIxxClass Ioc (ùìü (Ici a)) (ùìü (Ioi a)) :=
  tendstoIxxClass_principal.2 fun _ h‚ÇÅ _ _ _ h‚ÇÇ => lt_of_le_of_lt h‚ÇÅ h‚ÇÇ.1
instance tendsto_Ioc_Iic_Iic {a : Œ±} : TendstoIxxClass Ioc (ùìü (Iic a)) (ùìü (Iic a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioc_subset_Icc_self
instance tendsto_Ioc_Iio_Iio {a : Œ±} : TendstoIxxClass Ioc (ùìü (Iio a)) (ùìü (Iio a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioc_subset_Icc_self
instance tendsto_Ioc_Ioi_Ioi {a : Œ±} : TendstoIxxClass Ioc (ùìü (Ioi a)) (ùìü (Ioi a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioc_subset_Icc_self
instance tendsto_Ioo_Ici_Ioi {a : Œ±} : TendstoIxxClass Ioo (ùìü (Ici a)) (ùìü (Ioi a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Ioc_self
instance tendsto_Ioo_Iic_Iio {a : Œ±} : TendstoIxxClass Ioo (ùìü (Iic a)) (ùìü (Iio a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Ico_self
instance tendsto_Ioo_Ioi_Ioi {a : Œ±} : TendstoIxxClass Ioo (ùìü (Ioi a)) (ùìü (Ioi a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Ioc_self
instance tendsto_Ioo_Iio_Iio {a : Œ±} : TendstoIxxClass Ioo (ùìü (Iio a)) (ùìü (Iio a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Ioc_self
instance tendsto_Icc_Icc_Icc {a b : Œ±} : TendstoIxxClass Icc (ùìü (Icc a b)) (ùìü (Icc a b)) :=
  tendstoIxxClass_principal.mpr fun _x hx _y hy => Icc_subset_Icc hx.1 hy.2
instance tendsto_Ioc_Icc_Icc {a b : Œ±} : TendstoIxxClass Ioc (ùìü (Icc a b)) (ùìü (Icc a b)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioc_subset_Icc_self
end Preorder
section PartialOrder
variable [PartialOrder Œ±]
instance tendsto_Icc_pure_pure {a : Œ±} : TendstoIxxClass Icc (pure a) (pure a : Filter Œ±) := by
  rw [‚Üê principal_singleton]
  exact tendstoIxxClass_principal.2 ordConnected_singleton.out
instance tendsto_Ico_pure_bot {a : Œ±} : TendstoIxxClass Ico (pure a) ‚ä• :=
  ‚ü®by simp‚ü©
instance tendsto_Ioc_pure_bot {a : Œ±} : TendstoIxxClass Ioc (pure a) ‚ä• :=
  ‚ü®by simp‚ü©
instance tendsto_Ioo_pure_bot {a : Œ±} : TendstoIxxClass Ioo (pure a) ‚ä• :=
  ‚ü®by simp‚ü©
end PartialOrder
section LinearOrder
open Interval
variable [LinearOrder Œ±]
instance tendsto_Icc_uIcc_uIcc {a b : Œ±} : TendstoIxxClass Icc (ùìü [[a, b]]) (ùìü [[a, b]]) :=
  Filter.tendsto_Icc_Icc_Icc
instance tendsto_Ioc_uIcc_uIcc {a b : Œ±} : TendstoIxxClass Ioc (ùìü [[a, b]]) (ùìü [[a, b]]) :=
  Filter.tendsto_Ioc_Icc_Icc
instance tendsto_uIcc_of_Icc {l : Filter Œ±} [TendstoIxxClass Icc l l] :
    TendstoIxxClass uIcc l l := by
  refine ‚ü®fun s hs => mem_map.2 <| mem_prod_self_iff.2 ?_‚ü©
  obtain ‚ü®t, htl, hts‚ü© : ‚àÉ t ‚àà l, ‚àÄ p ‚àà (t : Set Œ±) √óÀ¢ t, Icc (p : Œ± √ó Œ±).1 p.2 ‚àà s :=
    mem_prod_self_iff.1 (mem_map.1 (tendsto_fst.Icc tendsto_snd hs))
  refine ‚ü®t, htl, fun p hp => ?_‚ü©
  rcases le_total p.1 p.2 with h | h
  ¬∑ rw [mem_preimage, uIcc_of_le h]
    exact hts p hp
  ¬∑ rw [mem_preimage, uIcc_of_ge h]
    exact hts ‚ü®p.2, p.1‚ü© ‚ü®hp.2, hp.1‚ü©
protected theorem Tendsto.uIcc {l : Filter Œ±} [TendstoIxxClass Icc l l] {f g : Œ≤ ‚Üí Œ±}
    {lb : Filter Œ≤} (hf : Tendsto f lb l) (hg : Tendsto g lb l) :
    Tendsto (fun x => [[f x, g x]]) lb l.smallSets :=
  (@TendstoIxxClass.tendsto_Ixx Œ± Set.uIcc _ _ _).comp <| hf.prod_mk hg
end LinearOrder
end Filter