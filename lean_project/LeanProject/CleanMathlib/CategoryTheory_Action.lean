import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.IsConnected
import Mathlib.CategoryTheory.SingleObj
import Mathlib.GroupTheory.GroupAction.Quotient
import Mathlib.GroupTheory.SemidirectProduct
open MulAction SemidirectProduct
namespace CategoryTheory
universe u
variable (M : Type*) [Monoid M] (X : Type u) [MulAction M X]
@[simps]
def actionAsFunctor : SingleObj M ‚•§ Type u where
  obj _ := X
  map := (¬∑ ‚Ä¢ ¬∑)
  map_id _ := funext <| MulAction.one_smul
  map_comp f g := funext fun x => (smul_smul g f x).symm
def ActionCategory :=
  (actionAsFunctor M X).Elements
instance : Category (ActionCategory M X) := by
  dsimp only [ActionCategory]
  infer_instance
namespace ActionCategory
def œÄ : ActionCategory M X ‚•§ SingleObj M :=
  CategoryOfElements.œÄ _
@[simp]
theorem œÄ_map (p q : ActionCategory M X) (f : p ‚ü∂ q) : (œÄ M X).map f = f.val :=
  rfl
@[simp]
theorem œÄ_obj (p : ActionCategory M X) : (œÄ M X).obj p = SingleObj.star M :=
  Unit.ext _ _
variable {M X}
protected def back : ActionCategory M X ‚Üí X := fun x => x.snd
instance : CoeTC X (ActionCategory M X) :=
  ‚ü®fun x => ‚ü®(), x‚ü©‚ü©
@[simp]
theorem coe_back (x : X) : ActionCategory.back (x : ActionCategory M X) = x :=
  rfl
@[simp]
theorem back_coe (x : ActionCategory M X) : ‚Üëx.back = x := by cases x; rfl
variable (M X)
def objEquiv : X ‚âÉ ActionCategory M X where
  toFun x := x
  invFun x := x.back
  left_inv := coe_back
  right_inv := back_coe
theorem hom_as_subtype (p q : ActionCategory M X) : (p ‚ü∂ q) = { m : M // m ‚Ä¢ p.back = q.back } :=
  rfl
instance [Inhabited X] : Inhabited (ActionCategory M X) :=
  ‚ü®show X from default‚ü©
instance [Nonempty X] : Nonempty (ActionCategory M X) :=
  Nonempty.map (objEquiv M X) inferInstance
variable {X} (x : X)
def stabilizerIsoEnd : stabilizerSubmonoid M x ‚âÉ* @End (ActionCategory M X) _ x :=
  MulEquiv.refl _
@[simp]
theorem stabilizerIsoEnd_apply (f : stabilizerSubmonoid M x) :
    (stabilizerIsoEnd M x) f = f :=
  rfl
@[simp 1100]
theorem stabilizerIsoEnd_symm_apply (f : End _) : (stabilizerIsoEnd M x).symm f = f :=
  rfl
variable {M}
@[simp]
protected theorem id_val (x : ActionCategory M X) : Subtype.val (ùüô x) = 1 :=
  rfl
@[simp]
protected theorem comp_val {x y z : ActionCategory M X} (f : x ‚ü∂ y) (g : y ‚ü∂ z) :
    (f ‚â´ g).val = g.val * f.val :=
  rfl
instance [IsPretransitive M X] [Nonempty X] : IsConnected (ActionCategory M X) :=
  zigzag_isConnected fun x y =>
    Relation.ReflTransGen.single <|
      Or.inl <| nonempty_subtype.mpr (show _ from exists_smul_eq M x.back y.back)
section Group
variable {G : Type*} [Group G] [MulAction G X]
instance : Groupoid (ActionCategory G X) :=
  CategoryTheory.groupoidOfElements _
def endMulEquivSubgroup (H : Subgroup G) : End (objEquiv G (G ‚ß∏ H) ‚Üë(1 : G)) ‚âÉ* H :=
  MulEquiv.trans (stabilizerIsoEnd G ((1 : G) : G ‚ß∏ H)).symm
    (MulEquiv.subgroupCongr <| stabilizer_quotient H)
def homOfPair (t : X) (g : G) : @Quiver.Hom (ActionCategory G X) _ (g‚Åª¬π ‚Ä¢ t :) t :=
  Subtype.mk g (smul_inv_smul g t)
@[simp]
theorem homOfPair.val (t : X) (g : G) : (homOfPair t g).val = g :=
  rfl
protected def cases {P : ‚àÄ ‚¶Éa b : ActionCategory G X‚¶Ñ, (a ‚ü∂ b) ‚Üí Sort*}
    (hyp : ‚àÄ t g, P (homOfPair t g)) ‚¶Éa b‚¶Ñ (f : a ‚ü∂ b) : P f := by
  refine cast ?_ (hyp b.back f.val)
  rcases a with ‚ü®‚ü®‚ü©, a : X‚ü©
  rcases b with ‚ü®‚ü®‚ü©, b : X‚ü©
  rcases f with ‚ü®g : G, h : g ‚Ä¢ a = b‚ü©
  cases inv_smul_eq_iff.mpr h.symm
  rfl
lemma cases' ‚¶Éa' b' : ActionCategory G X‚¶Ñ (f : a' ‚ü∂ b') :
    ‚àÉ (a b : X) (g : G) (ha : a' = a) (hb : b' = b) (hg : a = g‚Åª¬π ‚Ä¢ b),
      f = eqToHom (by rw [ha, hg]) ‚â´ homOfPair b g ‚â´ eqToHom (by rw [hb]) := by
  revert a' b' f
  exact ActionCategory.cases (fun t g => ‚ü®g‚Åª¬π ‚Ä¢ t, t, g, rfl, rfl, rfl, by simp‚ü©)
variable {H : Type*} [Group H]
@[simps]
def curry (F : ActionCategory G X ‚•§ SingleObj H) : G ‚Üí* (X ‚Üí H) ‚ãä[mulAutArrow] G :=
  have F_map_eq : ‚àÄ {a b} {f : a ‚ü∂ b}, F.map f = (F.map (homOfPair b.back f.val) : H) := by
    apply ActionCategory.cases
    intros
    rfl
  { toFun := fun g => ‚ü®fun b => F.map (homOfPair b g), g‚ü©
    map_one' := by
      dsimp
      ext1
      ¬∑ ext b
        exact F_map_eq.symm.trans (F.map_id b)
      rfl
    map_mul' := by
      intro g h
      ext b
      ¬∑ exact F_map_eq.symm.trans (F.map_comp (homOfPair (g‚Åª¬π ‚Ä¢ b) h) (homOfPair b g))
      rfl }
@[simps]
def uncurry (F : G ‚Üí* (X ‚Üí H) ‚ãä[mulAutArrow] G) (sane : ‚àÄ g, (F g).right = g) :
    ActionCategory G X ‚•§ SingleObj H where
  obj _ := ()
  map {_ b} f := (F f.val).left b.back
  map_id x := by
    dsimp
    rw [F.map_one]
    rfl
  map_comp f g := by
    obtain ‚ü®_, z, Œ≥‚ÇÅ, rfl, rfl, rfl, rfl‚ü© := ActionCategory.cases' g
    obtain ‚ü®_, y, Œ≥‚ÇÇ, rfl, hy, rfl, rfl‚ü© := ActionCategory.cases' f
    obtain rfl : y = Œ≥‚ÇÅ‚Åª¬π ‚Ä¢ z := congr_arg Sigma.snd hy.symm
    simp [sane]
    rfl
end Group
end ActionCategory
end CategoryTheory