import Mathlib.CategoryTheory.Sites.Sheaf
universe v u
namespace CategoryTheory
open scoped Classical
open CategoryTheory Category Limits Sieve
variable {C : Type u} [Category.{v} C]
namespace Sheaf
variable {P : C·µí·µñ ‚•§ Type v} {X : C} (J : GrothendieckTopology C)
theorem isSheafFor_bind (P : C·µí·µñ ‚•§ Type v) (U : Sieve X) (B : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, U f ‚Üí Sieve Y)
    (hU : Presieve.IsSheafFor P (U : Presieve X))
    (hB : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : U f), Presieve.IsSheafFor P (B hf : Presieve Y))
    (hB' : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (h : U f) ‚¶ÉZ‚¶Ñ (g : Z ‚ü∂ Y),
      Presieve.IsSeparatedFor P (((B h).pullback g) : Presieve Z)) :
    Presieve.IsSheafFor P (Sieve.bind (U : Presieve X) B : Presieve X) := by
  intro s hs
  let y : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : U f), Presieve.FamilyOfElements P (B hf : Presieve Y) :=
    fun Y f hf Z g hg => s _ (Presieve.bind_comp _ _ hg)
  have hy : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : U f), (y hf).Compatible := by
    intro Y f H Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ comm
    apply hs
    apply reassoc_of% comm
  let t : Presieve.FamilyOfElements P (U : Presieve X) :=
    fun Y f hf => (hB hf).amalgamate (y hf) (hy hf)
  have ht : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : U f), (y hf).IsAmalgamation (t f hf) := fun Y f hf =>
    (hB hf).isAmalgamation _
  have hT : t.Compatible := by
    rw [Presieve.compatible_iff_sieveCompatible]
    intro Z W f h hf
    apply (hB (U.downward_closed hf h)).isSeparatedFor.ext
    intro Y l hl
    apply (hB' hf (l ‚â´ h)).ext
    intro M m hm
    have : bind U B (m ‚â´ l ‚â´ h ‚â´ f) := by simpa using (Presieve.bind_comp f hf hm : bind U B _)
    trans s (m ‚â´ l ‚â´ h ‚â´ f) this
    ¬∑ have := ht (U.downward_closed hf h) _ ((B _).downward_closed hl m)
      rw [op_comp, FunctorToTypes.map_comp_apply] at this
      rw [this]
      change s _ _ = s _ _
      congr 1
      simp only [assoc]
    ¬∑ have h : s _ _ = _ := (ht hf _ hm).symm
      conv_lhs at h => congr; rw [assoc, assoc]
      rw [h]
      simp only [op_comp, assoc, FunctorToTypes.map_comp_apply]
  refine ‚ü®hU.amalgamate t hT, ?_, ?_‚ü©
  ¬∑ rintro Z _ ‚ü®Y, f, g, hg, hf, rfl‚ü©
    rw [op_comp, FunctorToTypes.map_comp_apply, Presieve.IsSheafFor.valid_glue _ _ _ hg]
    apply ht hg _ hf
  ¬∑ intro y hy
    apply hU.isSeparatedFor.ext
    intro Y f hf
    apply (hB hf).isSeparatedFor.ext
    intro Z g hg
    rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, hy _ (Presieve.bind_comp _ _ hg),
      hU.valid_glue _ _ hf, ht hf _ hg]
theorem isSheafFor_trans (P : C·µí·µñ ‚•§ Type v) (R S : Sieve X)
    (hR : Presieve.IsSheafFor P (R : Presieve X))
    (hR' : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (_ : S f), Presieve.IsSeparatedFor P (R.pullback f : Presieve Y))
    (hS : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (_ : R f), Presieve.IsSheafFor P (S.pullback f : Presieve Y)) :
    Presieve.IsSheafFor P (S : Presieve X) := by
  have : (bind R fun Y f _ => S.pullback f : Presieve X) ‚â§ S := by
    rintro Z f ‚ü®W, f, g, hg, hf : S _, rfl‚ü©
    apply hf
  apply Presieve.isSheafFor_subsieve_aux P this
  ¬∑ apply isSheafFor_bind _ _ _ hR hS
    intro Y f hf Z g
    rw [‚Üê pullback_comp]
    apply (hS (R.downward_closed hf _)).isSeparatedFor
  ¬∑ intro Y f hf
    have : Sieve.pullback f (bind R fun T (k : T ‚ü∂ X) (_ : R k) => pullback k S) =
        R.pullback f := by
      ext Z g
      constructor
      ¬∑ rintro ‚ü®W, k, l, hl, _, comm‚ü©
        rw [pullback_apply, ‚Üê comm]
        simp [hl]
      ¬∑ intro a
        refine ‚ü®Z, ùüô Z, _, a, ?_‚ü©
        simp [hf]
    rw [this]
    apply hR' hf
def finestTopologySingle (P : C·µí·µñ ‚•§ Type v) : GrothendieckTopology C where
  sieves X S := ‚àÄ (Y) (f : Y ‚ü∂ X), Presieve.IsSheafFor P (S.pullback f : Presieve Y)
  top_mem' X Y f := by
    rw [Sieve.pullback_top]
    exact Presieve.isSheafFor_top_sieve P
  pullback_stable' X Y S f hS Z g := by
    rw [‚Üê pullback_comp]
    apply hS
  transitive' X S hS R hR Z g := by
    refine isSheafFor_trans P (pullback g S) _ (hS Z g) ?_ ?_
    ¬∑ intro Y f _
      rw [‚Üê pullback_comp]
      apply (hS _ _).isSeparatedFor
    ¬∑ intro Y f hf
      have := hR hf _ (ùüô _)
      rw [pullback_id, pullback_comp] at this
      apply this
def finestTopology (Ps : Set (C·µí·µñ ‚•§ Type v)) : GrothendieckTopology C :=
  sInf (finestTopologySingle '' Ps)
theorem sheaf_for_finestTopology (Ps : Set (C·µí·µñ ‚•§ Type v)) (h : P ‚àà Ps) :
    Presieve.IsSheaf (finestTopology Ps) P := fun X S hS => by
  simpa using hS _ ‚ü®‚ü®_, _, ‚ü®_, h, rfl‚ü©, rfl‚ü©, rfl‚ü© _ (ùüô _)
theorem le_finestTopology (Ps : Set (C·µí·µñ ‚•§ Type v)) (J : GrothendieckTopology C)
    (hJ : ‚àÄ P ‚àà Ps, Presieve.IsSheaf J P) : J ‚â§ finestTopology Ps := by
  rintro X S hS _ ‚ü®‚ü®_, _, ‚ü®P, hP, rfl‚ü©, rfl‚ü©, rfl‚ü©
  intro Y f
  exact hJ P hP (S.pullback f) (J.pullback_stable f hS)
def canonicalTopology (C : Type u) [Category.{v} C] : GrothendieckTopology C :=
  finestTopology (Set.range yoneda.obj)
theorem isSheaf_yoneda_obj (X : C) : Presieve.IsSheaf (canonicalTopology C) (yoneda.obj X) :=
  fun _ _ hS => sheaf_for_finestTopology _ (Set.mem_range_self _) _ hS
theorem isSheaf_of_isRepresentable (P : C·µí·µñ ‚•§ Type v) [P.IsRepresentable] :
    Presieve.IsSheaf (canonicalTopology C) P :=
  Presieve.isSheaf_iso (canonicalTopology C) P.reprW (isSheaf_yoneda_obj _)
end Sheaf
namespace GrothendieckTopology
open Sheaf
class Subcanonical (J : GrothendieckTopology C) : Prop where
  le_canonical : J ‚â§ canonicalTopology C
lemma le_canonical (J : GrothendieckTopology C) [Subcanonical J] : J ‚â§ canonicalTopology C :=
  Subcanonical.le_canonical
instance : (canonicalTopology C).Subcanonical where
  le_canonical := le_rfl
namespace Subcanonical
theorem of_isSheaf_yoneda_obj (J : GrothendieckTopology C)
    (h : ‚àÄ X, Presieve.IsSheaf J (yoneda.obj X)) : Subcanonical J where
  le_canonical := le_finestTopology _ _ (by rintro P ‚ü®X, rfl‚ü©; apply h)
theorem isSheaf_of_isRepresentable {J : GrothendieckTopology C} [Subcanonical J]
    (P : C·µí·µñ ‚•§ Type v) [P.IsRepresentable] : Presieve.IsSheaf J P :=
  Presieve.isSheaf_of_le _ J.le_canonical (Sheaf.isSheaf_of_isRepresentable P)
variable {J : GrothendieckTopology C}
end Subcanonical
variable (J : GrothendieckTopology C)
@[simps]
def yoneda [J.Subcanonical] : C ‚•§ Sheaf J (Type v) where
  obj X := ‚ü®CategoryTheory.yoneda.obj X, by
    rw [isSheaf_iff_isSheaf_of_type]
    apply Subcanonical.isSheaf_of_isRepresentable‚ü©
  map f := ‚ü®CategoryTheory.yoneda.map f‚ü©
variable [Subcanonical J]
def yonedaCompSheafToPresheaf :
    J.yoneda ‚ãô sheafToPresheaf J (Type v) ‚âÖ CategoryTheory.yoneda :=
  Iso.refl _
def yonedaFullyFaithful : (J.yoneda).FullyFaithful :=
  Functor.FullyFaithful.ofCompFaithful (G := sheafToPresheaf J (Type v)) Yoneda.fullyFaithful
instance : (J.yoneda).Full := (J.yonedaFullyFaithful).full
instance : (J.yoneda).Faithful := (J.yonedaFullyFaithful).faithful
end GrothendieckTopology
@[deprecated (since := "2024-10-29")] alias Sheaf.Subcanonical := GrothendieckTopology.Subcanonical
@[deprecated (since := "2024-10-29")] alias Sheaf.Subcanonical.of_isSheaf_yoneda_obj :=
  GrothendieckTopology.Subcanonical.of_isSheaf_yoneda_obj
@[deprecated (since := "2024-10-29")] alias Sheaf.Subcanonical.isSheaf_of_isRepresentable :=
  GrothendieckTopology.Subcanonical.isSheaf_of_isRepresentable
@[deprecated (since := "2024-10-29")] alias Sheaf.Subcanonical.yoneda :=
  GrothendieckTopology.yoneda
@[deprecated (since := "2024-10-29")] alias Sheaf.Subcanonical.yonedaCompSheafToPresheaf :=
  GrothendieckTopology.yonedaCompSheafToPresheaf
@[deprecated (since := "2024-10-29")] alias Sheaf.Subcanonical.yonedaFullyFaithful :=
  GrothendieckTopology.yonedaFullyFaithful
end CategoryTheory