import Mathlib.CategoryTheory.Localization.DerivabilityStructure.Basic
namespace CategoryTheory
open Category Localization
variable {C‚ÇÅ C‚ÇÇ : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ]
  {W‚ÇÅ : MorphismProperty C‚ÇÅ} {W‚ÇÇ : MorphismProperty C‚ÇÇ}
namespace LocalizerMorphism
namespace IsRightDerivabilityStructure
section
variable (Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ)
  [W‚ÇÅ.IsMultiplicative] [‚àÄ X‚ÇÇ, IsConnected (Œ¶.RightResolution X‚ÇÇ)]
  [Œ¶.arrow.HasRightResolutions] [W‚ÇÇ.ContainsIdentities]
namespace Constructor
variable {D : Type*} [Category D] (L : C‚ÇÇ ‚•§ D) [L.IsLocalization W‚ÇÇ]
  {X‚ÇÇ : C‚ÇÇ} {X‚ÇÉ : D} (y : L.obj X‚ÇÇ ‚ü∂ X‚ÇÉ)
@[simps]
noncomputable def fromRightResolution :
    Œ¶.RightResolution X‚ÇÇ ‚•§ (TwoSquare.mk Œ¶.functor (Œ¶.functor ‚ãô L) L (ùü≠ _)
      (Functor.rightUnitor _).inv).CostructuredArrowDownwards y where
  obj R := CostructuredArrow.mk (Y := StructuredArrow.mk R.w)
    (StructuredArrow.homMk ((isoOfHom L W‚ÇÇ R.w R.hw).inv ‚â´ y))
  map {R R'} œÜ := CostructuredArrow.homMk (StructuredArrow.homMk œÜ.f) (by
    ext
    dsimp
    rw [‚Üê assoc, ‚Üê cancel_epi (isoOfHom L W‚ÇÇ R.w R.hw).hom,
      isoOfHom_hom, isoOfHom_hom_inv_id_assoc, assoc, ‚Üê L.map_comp_assoc,
      œÜ.comm, isoOfHom_hom_inv_id_assoc])
lemma isConnected :
    IsConnected ((TwoSquare.mk Œ¶.functor (Œ¶.functor ‚ãô L) L (ùü≠ _)
      (Functor.rightUnitor _).inv).CostructuredArrowDownwards y) := by
  let w := (TwoSquare.mk Œ¶.functor (Œ¶.functor ‚ãô L) L (ùü≠ _) (Functor.rightUnitor _).inv)
  have : Nonempty (w.CostructuredArrowDownwards y) :=
    ‚ü®(fromRightResolution Œ¶ L y).obj (Classical.arbitrary _)‚ü©
  suffices ‚àÄ (X : w.CostructuredArrowDownwards y),
      ‚àÉ Y, Zigzag X ((fromRightResolution Œ¶ L y).obj Y) by
    refine zigzag_isConnected (fun X X' => ?_)
    obtain ‚ü®Y, hX‚ü© := this X
    obtain ‚ü®Y', hX'‚ü© := this X'
    exact hX.trans ((zigzag_obj_of_zigzag _ (isPreconnected_zigzag Y Y')).trans hX'.symm)
  intro X
  obtain ‚ü®c, g, x, fac, rfl‚ü© := TwoSquare.CostructuredArrowDownwards.mk_surjective X
  dsimp [w] at x fac
  rw [id_comp] at fac
  let œÅ : Œ¶.arrow.RightResolution (Arrow.mk g) := Classical.arbitrary _
  refine ‚ü®RightResolution.mk œÅ.w.left œÅ.hw.1, ?_‚ü©
  have := zigzag_obj_of_zigzag
    (fromRightResolution Œ¶ L x ‚ãô w.costructuredArrowDownwardsPrecomp x y g fac)
      (isPreconnected_zigzag (RightResolution.mk (ùüô _) (W‚ÇÇ.id_mem _))
        (RightResolution.mk œÅ.w.right œÅ.hw.2))
  refine Zigzag.trans ?_ (Zigzag.trans this ?_)
  ¬∑ exact Zigzag.of_hom (eqToHom (by aesop))
  ¬∑ apply Zigzag.of_inv
    refine CostructuredArrow.homMk (StructuredArrow.homMk œÅ.X‚ÇÅ.hom (by simp)) ?_
    ext
    dsimp
    rw [‚Üê cancel_epi (isoOfHom L W‚ÇÇ œÅ.w.left œÅ.hw.1).hom, isoOfHom_hom,
      isoOfHom_hom_inv_id_assoc, ‚Üê L.map_comp_assoc, Arrow.w_mk_right, Arrow.mk_hom,
      L.map_comp, assoc, isoOfHom_hom_inv_id_assoc, fac]
end Constructor
lemma mk' [Œ¶.IsLocalizedEquivalence] : Œ¶.IsRightDerivabilityStructure := by
  rw [Œ¶.isRightDerivabilityStructure_iff (Œ¶.functor ‚ãô W‚ÇÇ.Q) W‚ÇÇ.Q (ùü≠ _)
    (Functor.rightUnitor _).symm, TwoSquare.guitartExact_iff_isConnected_downwards]
  intro X‚ÇÇ X‚ÇÉ g
  apply Constructor.isConnected
end
end IsRightDerivabilityStructure
end LocalizerMorphism
end CategoryTheory