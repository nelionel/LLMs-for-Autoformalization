import Mathlib.Analysis.Normed.Field.Basic
import Mathlib.Topology.Instances.Nat
import Mathlib.Topology.MetricSpace.PiNat
import Mathlib.Topology.MetricSpace.Isometry
import Mathlib.Topology.MetricSpace.Gluing
import Mathlib.Topology.Sets.Opens
noncomputable section
open Filter Function Metric TopologicalSpace Set Topology
open scoped Uniformity
variable {Œ± : Type*} {Œ≤ : Type*}
class PolishSpace (Œ± : Type*) [h : TopologicalSpace Œ±]
    extends SecondCountableTopology Œ± : Prop where
  complete : ‚àÉ m : MetricSpace Œ±, m.toUniformSpace.toTopologicalSpace = h ‚àß
    @CompleteSpace Œ± m.toUniformSpace
class UpgradedPolishSpace (Œ± : Type*) extends MetricSpace Œ±, SecondCountableTopology Œ±,
  CompleteSpace Œ±
instance (priority := 100) PolishSpace.of_separableSpace_completeSpace_metrizable [UniformSpace Œ±]
    [SeparableSpace Œ±] [CompleteSpace Œ±] [(ùì§ Œ±).IsCountablyGenerated] [T0Space Œ±] :
    PolishSpace Œ± where
  toSecondCountableTopology := UniformSpace.secondCountable_of_separable Œ±
  complete := ‚ü®UniformSpace.metricSpace Œ±, rfl, ‚Äπ_‚Ä∫‚ü©
def polishSpaceMetric (Œ± : Type*) [TopologicalSpace Œ±] [h : PolishSpace Œ±] : MetricSpace Œ± :=
  h.complete.choose.replaceTopology h.complete.choose_spec.1.symm
theorem complete_polishSpaceMetric (Œ± : Type*) [ht : TopologicalSpace Œ±] [h : PolishSpace Œ±] :
    @CompleteSpace Œ± (polishSpaceMetric Œ±).toUniformSpace := by
  convert h.complete.choose_spec.2
  exact MetricSpace.replaceTopology_eq _ _
def upgradePolishSpace (Œ± : Type*) [TopologicalSpace Œ±] [PolishSpace Œ±] :
    UpgradedPolishSpace Œ± :=
  letI := polishSpaceMetric Œ±
  { complete_polishSpaceMetric Œ± with }
namespace PolishSpace
instance (priority := 100) instMetrizableSpace (Œ± : Type*) [TopologicalSpace Œ±] [PolishSpace Œ±] :
    MetrizableSpace Œ± := by
  letI := upgradePolishSpace Œ±
  infer_instance
@[deprecated "No deprecation message was provided." (since := "2024-02-23")]
theorem t2Space (Œ± : Type*) [TopologicalSpace Œ±] [PolishSpace Œ±] : T2Space Œ± := inferInstance
instance pi_countable {Œπ : Type*} [Countable Œπ] {E : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (E i)]
    [‚àÄ i, PolishSpace (E i)] : PolishSpace (‚àÄ i, E i) := by
  letI := fun i => upgradePolishSpace (E i)
  infer_instance
instance sigma {Œπ : Type*} [Countable Œπ] {E : Œπ ‚Üí Type*} [‚àÄ n, TopologicalSpace (E n)]
    [‚àÄ n, PolishSpace (E n)] : PolishSpace (Œ£n, E n) :=
  letI := fun n => upgradePolishSpace (E n)
  letI : MetricSpace (Œ£n, E n) := Sigma.metricSpace
  haveI : CompleteSpace (Œ£n, E n) := Sigma.completeSpace
  inferInstance
instance prod [TopologicalSpace Œ±] [PolishSpace Œ±] [TopologicalSpace Œ≤] [PolishSpace Œ≤] :
    PolishSpace (Œ± √ó Œ≤) :=
  letI := upgradePolishSpace Œ±
  letI := upgradePolishSpace Œ≤
  inferInstance
instance sum [TopologicalSpace Œ±] [PolishSpace Œ±] [TopologicalSpace Œ≤] [PolishSpace Œ≤] :
    PolishSpace (Œ± ‚äï Œ≤) :=
  letI := upgradePolishSpace Œ±
  letI := upgradePolishSpace Œ≤
  inferInstance
theorem exists_nat_nat_continuous_surjective (Œ± : Type*) [TopologicalSpace Œ±] [PolishSpace Œ±]
    [Nonempty Œ±] : ‚àÉ f : (‚Ñï ‚Üí ‚Ñï) ‚Üí Œ±, Continuous f ‚àß Surjective f :=
  letI := upgradePolishSpace Œ±
  exists_nat_nat_continuous_surjective_of_completeSpace Œ±
theorem _root_.Topology.IsClosedEmbedding.polishSpace [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
    [PolishSpace Œ≤] {f : Œ± ‚Üí Œ≤} (hf : IsClosedEmbedding f) : PolishSpace Œ± := by
  letI := upgradePolishSpace Œ≤
  letI : MetricSpace Œ± := hf.isEmbedding.comapMetricSpace f
  haveI : SecondCountableTopology Œ± := hf.isEmbedding.secondCountableTopology
  have : CompleteSpace Œ± := by
    rw [completeSpace_iff_isComplete_range hf.isEmbedding.to_isometry.isUniformInducing]
    exact hf.isClosed_range.isComplete
  infer_instance
@[deprecated (since := "2024-10-20")]
alias _root_.ClosedEmbedding.polishSpace := IsClosedEmbedding.polishSpace
instance (priority := 50) polish_of_countable [TopologicalSpace Œ±]
    [h : Countable Œ±] [DiscreteTopology Œ±] : PolishSpace Œ± := by
  obtain ‚ü®f, hf‚ü© := h.exists_injective_nat
  have : IsClosedEmbedding f :=
    .of_continuous_injective_isClosedMap continuous_of_discreteTopology hf
      fun t _ ‚Ü¶ isClosed_discrete _
  exact this.polishSpace
theorem _root_.Equiv.polishSpace_induced [t : TopologicalSpace Œ≤] [PolishSpace Œ≤] (f : Œ± ‚âÉ Œ≤) :
    @PolishSpace Œ± (t.induced f) :=
  letI : TopologicalSpace Œ± := t.induced f
  (f.toHomeomorphOfIsInducing ‚ü®rfl‚ü©).isClosedEmbedding.polishSpace
theorem _root_.IsClosed.polishSpace [TopologicalSpace Œ±] [PolishSpace Œ±] {s : Set Œ±}
    (hs : IsClosed s) : PolishSpace s :=
  hs.isClosedEmbedding_subtypeVal.polishSpace
instance instPolishSpaceUniv [TopologicalSpace Œ±] [PolishSpace Œ±] :
    PolishSpace (univ : Set Œ±) :=
  isClosed_univ.polishSpace
protected theorem _root_.CompletePseudometrizable.iInf {Œπ : Type*} [Countable Œπ]
    {t : Œπ ‚Üí TopologicalSpace Œ±} (ht‚ÇÄ : ‚àÉ t‚ÇÄ, @T2Space Œ± t‚ÇÄ ‚àß ‚àÄ i, t i ‚â§ t‚ÇÄ)
    (ht : ‚àÄ i, ‚àÉ u : UniformSpace Œ±, CompleteSpace Œ± ‚àß ùì§[u].IsCountablyGenerated ‚àß
      u.toTopologicalSpace = t i) :
    ‚àÉ u : UniformSpace Œ±, CompleteSpace Œ± ‚àß
      ùì§[u].IsCountablyGenerated ‚àß u.toTopologicalSpace = ‚®Ö i, t i := by
  choose u hcomp hcount hut using ht
  obtain rfl : t = fun i ‚Ü¶ (u i).toTopologicalSpace := (funext hut).symm
  refine ‚ü®‚®Ö i, u i, .iInf hcomp ht‚ÇÄ, ?_, UniformSpace.toTopologicalSpace_iInf‚ü©
  rw [iInf_uniformity]
  infer_instance
protected theorem iInf {Œπ : Type*} [Countable Œπ] {t : Œπ ‚Üí TopologicalSpace Œ±}
    (ht‚ÇÄ : ‚àÉ i‚ÇÄ, ‚àÄ i, t i ‚â§ t i‚ÇÄ) (ht : ‚àÄ i, @PolishSpace Œ± (t i)) : @PolishSpace Œ± (‚®Ö i, t i) := by
  rcases ht‚ÇÄ with ‚ü®i‚ÇÄ, hi‚ÇÄ‚ü©
  rcases CompletePseudometrizable.iInf ‚ü®t i‚ÇÄ, letI := t i‚ÇÄ; haveI := ht i‚ÇÄ; inferInstance, hi‚ÇÄ‚ü©
    fun i ‚Ü¶
      letI := t i; haveI := ht i; letI := upgradePolishSpace Œ±
      ‚ü®inferInstance, inferInstance, inferInstance, rfl‚ü©
    with ‚ü®u, hcomp, hcount, htop‚ü©
  rw [‚Üê htop]
  have : @SecondCountableTopology Œ± u.toTopologicalSpace :=
    htop.symm ‚ñ∏ secondCountableTopology_iInf fun i ‚Ü¶ letI := t i; (ht i).toSecondCountableTopology
  have : @T1Space Œ± u.toTopologicalSpace :=
    htop.symm ‚ñ∏ t1Space_antitone (iInf_le _ i‚ÇÄ) (by letI := t i‚ÇÄ; haveI := ht i‚ÇÄ; infer_instance)
  infer_instance
theorem exists_polishSpace_forall_le {Œπ : Type*} [Countable Œπ] [t : TopologicalSpace Œ±]
    [p : PolishSpace Œ±] (m : Œπ ‚Üí TopologicalSpace Œ±) (hm : ‚àÄ n, m n ‚â§ t)
    (h'm : ‚àÄ n, @PolishSpace Œ± (m n)) :
    ‚àÉ t' : TopologicalSpace Œ±, (‚àÄ n, t' ‚â§ m n) ‚àß t' ‚â§ t ‚àß @PolishSpace Œ± t' :=
  ‚ü®‚®Ö i : Option Œπ, i.elim t m, fun i ‚Ü¶ iInf_le _ (some i), iInf_le _ none,
    .iInf ‚ü®none, Option.forall.2 ‚ü®le_rfl, hm‚ü©‚ü© <| Option.forall.2 ‚ü®p, h'm‚ü©‚ü©
instance : PolishSpace ENNReal :=
  ENNReal.orderIsoUnitIntervalBirational.toHomeomorph.isClosedEmbedding.polishSpace
end PolishSpace
namespace TopologicalSpace.Opens
variable [MetricSpace Œ±] {s : Opens Œ±}
def CompleteCopy {Œ± : Type*} [MetricSpace Œ±] (s : Opens Œ±) : Type _ := s
namespace CompleteCopy
instance instDist : Dist (CompleteCopy s) where
  dist x y := dist x.1 y.1 + abs (1 / infDist x.1 s·∂ú - 1 / infDist y.1 s·∂ú)
theorem dist_eq (x y : CompleteCopy s) :
    dist x y = dist x.1 y.1 + abs (1 / infDist x.1 s·∂ú - 1 / infDist y.1 s·∂ú) :=
  rfl
theorem dist_val_le_dist (x y : CompleteCopy s) : dist x.1 y.1 ‚â§ dist x y :=
  le_add_of_nonneg_right (abs_nonneg _)
instance : TopologicalSpace (CompleteCopy s) := inferInstanceAs (TopologicalSpace s)
instance [SecondCountableTopology Œ±] : SecondCountableTopology (CompleteCopy s) :=
  inferInstanceAs (SecondCountableTopology s)
instance : T0Space (CompleteCopy s) := inferInstanceAs (T0Space s)
instance instMetricSpace : MetricSpace (CompleteCopy s) := by
  refine @MetricSpace.ofT0PseudoMetricSpace (CompleteCopy s)
    (.ofDistTopology dist (fun _ ‚Ü¶ ?_) (fun _ _ ‚Ü¶ ?_) (fun x y z ‚Ü¶ ?_) fun t ‚Ü¶ ?_) _
  ¬∑ simp only [dist_eq, dist_self, one_div, sub_self, abs_zero, add_zero]
  ¬∑ simp only [dist_eq, dist_comm, abs_sub_comm]
  ¬∑ calc
      dist x z = dist x.1 z.1 + |1 / infDist x.1 s·∂ú - 1 / infDist z.1 s·∂ú| := rfl
      _ ‚â§ dist x.1 y.1 + dist y.1 z.1 + (|1 / infDist x.1 s·∂ú - 1 / infDist y.1 s·∂ú| +
            |1 / infDist y.1 s·∂ú - 1 / infDist z.1 s·∂ú|) :=
        add_le_add (dist_triangle _ _ _) (dist_triangle (1 / infDist _ _) _ _)
      _ = dist x y + dist y z := add_add_add_comm ..
  ¬∑ refine ‚ü®fun h x hx ‚Ü¶ ?_, fun h ‚Ü¶ isOpen_iff_mem_nhds.2 fun x hx ‚Ü¶ ?_‚ü©
    ¬∑ rcases (Metric.isOpen_iff (Œ± := s)).1 h x hx with ‚ü®Œµ, Œµ0, hŒµ‚ü©
      exact ‚ü®Œµ, Œµ0, fun y hy ‚Ü¶ hŒµ <| (dist_comm _ _).trans_lt <| (dist_val_le_dist _ _).trans_lt hy‚ü©
    ¬∑ rcases h x hx with ‚ü®Œµ, Œµ0, hŒµ‚ü©
      simp only [dist_eq, one_div] at hŒµ
      have : Tendsto (fun y : s ‚Ü¶ dist x.1 y.1 + |(infDist x.1 s·∂ú)‚Åª¬π - (infDist y.1 s·∂ú)‚Åª¬π|)
          (ùìù x) (ùìù (dist x.1 x.1 + |(infDist x.1 s·∂ú)‚Åª¬π - (infDist x.1 s·∂ú)‚Åª¬π|)) := by
        refine (tendsto_const_nhds.dist continuous_subtype_val.continuousAt).add
          (tendsto_const_nhds.sub <| ?_).abs
        refine (continuousAt_inv_infDist_pt ?_).comp continuous_subtype_val.continuousAt
        rw [s.isOpen.isClosed_compl.closure_eq, mem_compl_iff, not_not]
        exact x.2
      simp only [dist_self, sub_self, abs_zero, zero_add] at this
      exact mem_of_superset (this <| gt_mem_nhds Œµ0) hŒµ
instance instCompleteSpace [CompleteSpace Œ±] : CompleteSpace (CompleteCopy s) := by
  refine Metric.complete_of_convergent_controlled_sequences ((1 / 2) ^ ¬∑) (by simp) fun u hu ‚Ü¶ ?_
  have A : CauchySeq fun n => (u n).1 := by
    refine cauchySeq_of_le_tendsto_0 (fun n : ‚Ñï => (1 / 2) ^ n) (fun n m N hNn hNm => ?_) ?_
    ¬∑ exact (dist_val_le_dist (u n) (u m)).trans (hu N n m hNn hNm).le
    ¬∑ exact tendsto_pow_atTop_nhds_zero_of_lt_one (by norm_num) (by norm_num)
  obtain ‚ü®x, xlim‚ü© : ‚àÉ x, Tendsto (fun n => (u n).1) atTop (ùìù x) := cauchySeq_tendsto_of_complete A
  by_cases xs : x ‚àà s
  ¬∑ exact ‚ü®‚ü®x, xs‚ü©, tendsto_subtype_rng.2 xlim‚ü©
  obtain ‚ü®C, hC‚ü© : ‚àÉ C, ‚àÄ n, 1 / infDist (u n).1 s·∂ú < C := by
    refine ‚ü®(1 / 2) ^ 0 + 1 / infDist (u 0).1 s·∂ú, fun n ‚Ü¶ ?_‚ü©
    rw [‚Üê sub_lt_iff_lt_add]
    calc
      _ ‚â§ |1 / infDist (u n).1 s·∂ú - 1 / infDist (u 0).1 s·∂ú| := le_abs_self _
      _ = |1 / infDist (u 0).1 s·∂ú - 1 / infDist (u n).1 s·∂ú| := abs_sub_comm _ _
      _ ‚â§ dist (u 0) (u n) := le_add_of_nonneg_left dist_nonneg
      _ < (1 / 2) ^ 0 := hu 0 0 n le_rfl n.zero_le
  have Cpos : 0 < C := lt_of_le_of_lt (div_nonneg zero_le_one infDist_nonneg) (hC 0)
  have Hmem : ‚àÄ {y}, y ‚àà s ‚Üî 0 < infDist y s·∂ú := fun {y} ‚Ü¶ by
    rw [‚Üê s.isOpen.isClosed_compl.not_mem_iff_infDist_pos ‚ü®x, xs‚ü©]; exact not_not.symm
  have I : ‚àÄ n, 1 / C ‚â§ infDist (u n).1 s·∂ú := fun n ‚Ü¶ by
    have : 0 < infDist (u n).1 s·∂ú := Hmem.1 (u n).2
    rw [div_le_iff‚ÇÄ' Cpos]
    exact (div_le_iff‚ÇÄ this).1 (hC n).le
  have I' : 1 / C ‚â§ infDist x s·∂ú :=
    have : Tendsto (fun n => infDist (u n).1 s·∂ú) atTop (ùìù (infDist x s·∂ú)) :=
      ((continuous_infDist_pt (s·∂ú : Set Œ±)).tendsto x).comp xlim
    ge_of_tendsto' this I
  exact absurd (Hmem.2 <| lt_of_lt_of_le (div_pos one_pos Cpos) I') xs
theorem _root_.IsOpen.polishSpace {Œ± : Type*} [TopologicalSpace Œ±] [PolishSpace Œ±] {s : Set Œ±}
    (hs : IsOpen s) : PolishSpace s := by
  letI := upgradePolishSpace Œ±
  lift s to Opens Œ± using hs
  exact inferInstanceAs (PolishSpace s.CompleteCopy)
end CompleteCopy
end TopologicalSpace.Opens
namespace PolishSpace
def IsClopenable [t : TopologicalSpace Œ±] (s : Set Œ±) : Prop :=
  ‚àÉ t' : TopologicalSpace Œ±, t' ‚â§ t ‚àß @PolishSpace Œ± t' ‚àß IsClosed[t'] s ‚àß IsOpen[t'] s
theorem _root_.IsClosed.isClopenable [TopologicalSpace Œ±] [PolishSpace Œ±] {s : Set Œ±}
    (hs : IsClosed s) : IsClopenable s := by
  classical
  haveI : PolishSpace s := hs.polishSpace
  let t : Set Œ± := s·∂ú
  haveI : PolishSpace t := hs.isOpen_compl.polishSpace
  let f : s ‚äï t ‚âÉ Œ± := Equiv.Set.sumCompl s
  have hle : TopologicalSpace.coinduced f instTopologicalSpaceSum ‚â§ ‚Äπ_‚Ä∫ := by
    simp only [instTopologicalSpaceSum, coinduced_sup, coinduced_compose, sup_le_iff,
      ‚Üê continuous_iff_coinduced_le]
    exact ‚ü®continuous_subtype_val, continuous_subtype_val‚ü©
  refine ‚ü®.coinduced f instTopologicalSpaceSum, hle, ?_, hs.mono hle, ?_‚ü©
  ¬∑ rw [‚Üê f.induced_symm]
    exact f.symm.polishSpace_induced
  ¬∑ rw [isOpen_coinduced, isOpen_sum_iff]
    simp only [preimage_preimage, f]
    have inl (x : s) : (Equiv.Set.sumCompl s) (Sum.inl x) = x := Equiv.Set.sumCompl_apply_inl ..
    have inr (x : ‚Üës·∂ú) : (Equiv.Set.sumCompl s) (Sum.inr x) = x := Equiv.Set.sumCompl_apply_inr ..
    simp_rw [inl, inr, Subtype.coe_preimage_self]
    simp only [isOpen_univ, true_and]
    rw [Subtype.preimage_coe_compl']
    simp
theorem IsClopenable.compl [TopologicalSpace Œ±] {s : Set Œ±} (hs : IsClopenable s) :
    IsClopenable s·∂ú := by
  rcases hs with ‚ü®t, t_le, t_polish, h, h'‚ü©
  exact ‚ü®t, t_le, t_polish, @IsOpen.isClosed_compl Œ± t s h', @IsClosed.isOpen_compl Œ± t s h‚ü©
theorem _root_.IsOpen.isClopenable [TopologicalSpace Œ±] [PolishSpace Œ±] {s : Set Œ±}
    (hs : IsOpen s) : IsClopenable s := by
  simpa using hs.isClosed_compl.isClopenable.compl
theorem IsClopenable.iUnion [t : TopologicalSpace Œ±] [PolishSpace Œ±] {s : ‚Ñï ‚Üí Set Œ±}
    (hs : ‚àÄ n, IsClopenable (s n)) : IsClopenable (‚ãÉ n, s n) := by
  choose m mt m_polish _ m_open using hs
  obtain ‚ü®t', t'm, -, t'_polish‚ü© :
      ‚àÉ t' : TopologicalSpace Œ±, (‚àÄ n : ‚Ñï, t' ‚â§ m n) ‚àß t' ‚â§ t ‚àß @PolishSpace Œ± t' :=
    exists_polishSpace_forall_le m mt m_polish
  have A : IsOpen[t'] (‚ãÉ n, s n) := by
    apply isOpen_iUnion
    intro n
    apply t'm n
    exact m_open n
  obtain ‚ü®t'', t''_le, t''_polish, h1, h2‚ü© : ‚àÉ t'' : TopologicalSpace Œ±,
      t'' ‚â§ t' ‚àß @PolishSpace Œ± t'' ‚àß IsClosed[t''] (‚ãÉ n, s n) ‚àß IsOpen[t''] (‚ãÉ n, s n) :=
    @IsOpen.isClopenable Œ± t' t'_polish _ A
  exact ‚ü®t'', t''_le.trans ((t'm 0).trans (mt 0)), t''_polish, h1, h2‚ü©
end PolishSpace