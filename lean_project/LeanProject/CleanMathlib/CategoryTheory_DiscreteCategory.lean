import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Pi.Basic
import Mathlib.Data.ULift
namespace CategoryTheory
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÅ' u‚ÇÇ u‚ÇÉ
@[ext, aesop safe cases (rule_sets := [CategoryTheory])]
structure Discrete (Œ± : Type u‚ÇÅ) where
  as : Œ±
@[simp]
theorem Discrete.mk_as {Œ± : Type u‚ÇÅ} (X : Discrete Œ±) : Discrete.mk X.as = X := by
  rfl
@[simps]
def discreteEquiv {Œ± : Type u‚ÇÅ} : Discrete Œ± ‚âÉ Œ± where
  toFun := Discrete.as
  invFun := Discrete.mk
  left_inv := by aesop_cat
  right_inv := by aesop_cat
instance {Œ± : Type u‚ÇÅ} [DecidableEq Œ±] : DecidableEq (Discrete Œ±) :=
  discreteEquiv.decidableEq
instance discreteCategory (Œ± : Type u‚ÇÅ) : SmallCategory (Discrete Œ±) where
  Hom X Y := ULift (PLift (X.as = Y.as))
  id _ := ULift.up (PLift.up rfl)
  comp {X Y Z} g f := by
    cases X
    cases Y
    cases Z
    rcases f with ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©
    exact g
namespace Discrete
variable {Œ± : Type u‚ÇÅ}
instance [Inhabited Œ±] : Inhabited (Discrete Œ±) :=
  ‚ü®‚ü®default‚ü©‚ü©
instance [Subsingleton Œ±] : Subsingleton (Discrete Œ±) :=
  ‚ü®by aesop_cat‚ü©
instance instSubsingletonDiscreteHom (X Y : Discrete Œ±) : Subsingleton (X ‚ü∂ Y) :=
  show Subsingleton (ULift (PLift _)) from inferInstance
macro "discrete_cases" : tactic =>
  `(tactic| fail_if_no_progress casesm* Discrete _, (_ : Discrete _) ‚ü∂ (_ : Discrete _), PLift _)
open Lean Elab Tactic in
def discreteCases : TacticM Unit := do
  evalTactic (‚Üê `(tactic| discrete_cases))
instance [Unique Œ±] : Unique (Discrete Œ±) :=
  Unique.mk' (Discrete Œ±)
theorem eq_of_hom {X Y : Discrete Œ±} (i : X ‚ü∂ Y) : X.as = Y.as :=
  i.down.down
protected abbrev eqToHom {X Y : Discrete Œ±} (h : X.as = Y.as) : X ‚ü∂ Y :=
  eqToHom (by aesop_cat)
protected abbrev eqToIso {X Y : Discrete Œ±} (h : X.as = Y.as) : X ‚âÖ Y :=
  eqToIso (by aesop_cat)
abbrev eqToHom' {a b : Œ±} (h : a = b) : Discrete.mk a ‚ü∂ Discrete.mk b :=
  Discrete.eqToHom h
abbrev eqToIso' {a b : Œ±} (h : a = b) : Discrete.mk a ‚âÖ Discrete.mk b :=
  Discrete.eqToIso h
@[simp]
theorem id_def (X : Discrete Œ±) : ULift.up (PLift.up (Eq.refl X.as)) = ùüô X :=
  rfl
variable {C : Type u‚ÇÇ} [Category.{v‚ÇÇ} C]
instance {I : Type u‚ÇÅ} {i j : Discrete I} (f : i ‚ü∂ j) : IsIso f :=
  ‚ü®‚ü®Discrete.eqToHom (eq_of_hom f).symm, by aesop_cat‚ü©‚ü©
attribute [local aesop safe tactic (rule_sets := [CategoryTheory])]
  CategoryTheory.Discrete.discreteCases
def functor {I : Type u‚ÇÅ} (F : I ‚Üí C) : Discrete I ‚•§ C where
  obj := F ‚àò Discrete.as
  map {X Y} f := by
    dsimp
    rcases f with ‚ü®‚ü®h‚ü©‚ü©
    exact eqToHom (congrArg _ h)
@[simp]
theorem functor_obj {I : Type u‚ÇÅ} (F : I ‚Üí C) (i : I) :
    (Discrete.functor F).obj (Discrete.mk i) = F i :=
  rfl
@[simp]
theorem functor_map {I : Type u‚ÇÅ} (F : I ‚Üí C) {i : Discrete I} (f : i ‚ü∂ i) :
    (Discrete.functor F).map f = ùüô (F i.as) := by aesop_cat
@[deprecated (since := "2024-07-16")]
alias CategoryTheory.FreeMonoidalCategory.discrete_functor_map_eq_id := functor_map
@[simp]
theorem functor_obj_eq_as {I : Type u‚ÇÅ} (F : I ‚Üí C) (X : Discrete I) :
    (Discrete.functor F).obj X = F X.as :=
  rfl
@[deprecated (since := "2024-07-16")]
alias CategoryTheory.FreeMonoidalCategory.discrete_functor_obj_eq_as := functor_obj_eq_as
@[simps!]
def functorComp {I : Type u‚ÇÅ} {J : Type u‚ÇÅ'} (f : J ‚Üí C) (g : I ‚Üí J) :
    Discrete.functor (f ‚àò g) ‚âÖ Discrete.functor (Discrete.mk ‚àò g) ‚ãô Discrete.functor f :=
  NatIso.ofComponents fun _ => Iso.refl _
@[simps]
def natTrans {I : Type u‚ÇÅ} {F G : Discrete I ‚•§ C} (f : ‚àÄ i : Discrete I, F.obj i ‚ü∂ G.obj i) :
    F ‚ü∂ G where
  app := f
  naturality := fun {X Y} ‚ü®‚ü®g‚ü©‚ü© => by
    discrete_cases
    rcases g
    change F.map (ùüô _) ‚â´ _ = _ ‚â´ G.map (ùüô _)
    simp
@[simps!]
def natIso {I : Type u‚ÇÅ} {F G : Discrete I ‚•§ C} (f : ‚àÄ i : Discrete I, F.obj i ‚âÖ G.obj i) :
    F ‚âÖ G :=
  NatIso.ofComponents f fun ‚ü®‚ü®g‚ü©‚ü© => by
    discrete_cases
    rcases g
    change F.map (ùüô _) ‚â´ _ = _ ‚â´ G.map (ùüô _)
    simp
instance {I : Type*} {F G : Discrete I ‚•§ C} (f : ‚àÄ i, F.obj i ‚ü∂ G.obj i) [‚àÄ i, IsIso (f i)] :
    IsIso (Discrete.natTrans f) := by
  change IsIso (Discrete.natIso (fun i => asIso (f i))).hom
  infer_instance
@[simp]
theorem natIso_app {I : Type u‚ÇÅ} {F G : Discrete I ‚•§ C} (f : ‚àÄ i : Discrete I, F.obj i ‚âÖ G.obj i)
    (i : Discrete I) : (Discrete.natIso f).app i = f i := by aesop_cat
@[simp]
def natIsoFunctor {I : Type u‚ÇÅ} {F : Discrete I ‚•§ C} : F ‚âÖ Discrete.functor (F.obj ‚àò Discrete.mk) :=
  natIso fun _ => Iso.refl _
@[simp]
def compNatIsoDiscrete {I : Type u‚ÇÅ} {D : Type u‚ÇÉ} [Category.{v‚ÇÉ} D] (F : I ‚Üí C) (G : C ‚•§ D) :
    Discrete.functor F ‚ãô G ‚âÖ Discrete.functor (G.obj ‚àò F) :=
  natIso fun _ => Iso.refl _
@[simps]
def equivalence {I : Type u‚ÇÅ} {J : Type u‚ÇÇ} (e : I ‚âÉ J) : Discrete I ‚âå Discrete J where
  functor := Discrete.functor (Discrete.mk ‚àò (e : I ‚Üí J))
  inverse := Discrete.functor (Discrete.mk ‚àò (e.symm : J ‚Üí I))
  unitIso :=
    Discrete.natIso fun i => eqToIso (by aesop_cat)
  counitIso :=
    Discrete.natIso fun j => eqToIso (by aesop_cat)
@[simps]
def equivOfEquivalence {Œ± : Type u‚ÇÅ} {Œ≤ : Type u‚ÇÇ} (h : Discrete Œ± ‚âå Discrete Œ≤) : Œ± ‚âÉ Œ≤ where
  toFun := Discrete.as ‚àò h.functor.obj ‚àò Discrete.mk
  invFun := Discrete.as ‚àò h.inverse.obj ‚àò Discrete.mk
  left_inv a := by simpa using eq_of_hom (h.unitIso.app (Discrete.mk a)).2
  right_inv a := by simpa using eq_of_hom (h.counitIso.app (Discrete.mk a)).1
end Discrete
namespace Discrete
variable {J : Type v‚ÇÅ}
open Opposite
@[simps! functor_obj_as inverse_obj]
protected def opposite (Œ± : Type u‚ÇÅ) : (Discrete Œ±)·µí·µñ ‚âå Discrete Œ± :=
  let F : Discrete Œ± ‚•§ (Discrete Œ±)·µí·µñ := Discrete.functor fun x => op (Discrete.mk x)
  { functor := F.leftOp
    inverse := F
    unitIso := NatIso.ofComponents fun ‚ü®_‚ü© => Iso.refl _
    counitIso := Discrete.natIso fun ‚ü®_‚ü© => Iso.refl _ }
variable {C : Type u‚ÇÇ} [Category.{v‚ÇÇ} C]
@[simp]
theorem functor_map_id (F : Discrete J ‚•§ C) {j : Discrete J} (f : j ‚ü∂ j) :
    F.map f = ùüô (F.obj j) := by
  have h : f = ùüô j := by aesop_cat
  rw [h]
  simp
end Discrete
@[simps]
def piEquivalenceFunctorDiscrete (J : Type u‚ÇÇ) (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] :
    (J ‚Üí C) ‚âå (Discrete J ‚•§ C) where
  functor :=
    { obj := fun F => Discrete.functor F
      map := fun f => Discrete.natTrans (fun j => f j.as) }
  inverse :=
    { obj := fun F j => F.obj ‚ü®j‚ü©
      map := fun f j => f.app ‚ü®j‚ü© }
  unitIso := Iso.refl _
  counitIso := NatIso.ofComponents (fun F => (NatIso.ofComponents (fun _ => Iso.refl _)
    (by
      rintro ‚ü®x‚ü© ‚ü®y‚ü© f
      obtain rfl : x = y := Discrete.eq_of_hom f
      obtain rfl : f = ùüô _ := rfl
      simp))) (by aesop_cat)
class IsDiscrete (C : Type*) [Category C] : Prop where
  subsingleton (X Y : C) : Subsingleton (X ‚ü∂ Y) := by infer_instance
  eq_of_hom {X Y : C} (f : X ‚ü∂ Y) : X = Y
attribute [instance] IsDiscrete.subsingleton
lemma obj_ext_of_isDiscrete {C : Type*} [Category C] [IsDiscrete C]
    {X Y : C} (f : X ‚ü∂ Y) : X = Y := IsDiscrete.eq_of_hom f
instance Discrete.isDiscrete (C : Type*) : IsDiscrete (Discrete C) where
  eq_of_hom := by rintro ‚ü®_‚ü© ‚ü®_‚ü© ‚ü®‚ü®rfl‚ü©‚ü©; rfl
instance (C : Type*) [Category C] [IsDiscrete C] : IsDiscrete C·µí·µñ where
  eq_of_hom := by
    rintro ‚ü®_‚ü© ‚ü®_‚ü© ‚ü®f‚ü©
    obtain rfl := obj_ext_of_isDiscrete f
    rfl
end CategoryTheory