import Mathlib.CategoryTheory.Category.Basic
universe u v
namespace CategoryTheory
@[nolint unusedArguments]
def KleisliCat (_ : Type u ‚Üí Type v) :=
  Type u
def KleisliCat.mk (m) (Œ± : Type u) : KleisliCat m :=
  Œ±
instance KleisliCat.categoryStruct {m} [Monad.{u, v} m] :
    CategoryStruct (KleisliCat m) where
  Hom Œ± Œ≤ := Œ± ‚Üí m Œ≤
  id _ x := pure x
  comp f g := f >=> g
instance KleisliCat.category {m} [Monad.{u, v} m] [LawfulMonad m] : Category (KleisliCat m) := by
  refine { id_comp := ?_, comp_id := ?_, assoc := ?_ } <;> intros <;>
  refine funext (fun x => ?_) <;>
  simp (config := { unfoldPartialApp := true }) [CategoryStruct.id, CategoryStruct.comp, (¬∑ >=> ¬∑)]
@[simp]
theorem KleisliCat.id_def {m} [Monad m] (Œ± : KleisliCat m) : ùüô Œ± = @pure m _ Œ± :=
  rfl
theorem KleisliCat.comp_def {m} [Monad m] (Œ± Œ≤ Œ≥ : KleisliCat m) (xs : Œ± ‚ü∂ Œ≤) (ys : Œ≤ ‚ü∂ Œ≥) (a : Œ±) :
    (xs ‚â´ ys) a = xs a >>= ys :=
  rfl
instance : Inhabited (KleisliCat id) :=
  ‚ü®PUnit‚ü©
instance {Œ± : Type u} [Inhabited Œ±] : Inhabited (KleisliCat.mk id Œ±) :=
  ‚ü®show Œ± from default‚ü©
end CategoryTheory