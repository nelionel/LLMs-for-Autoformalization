import Mathlib.CategoryTheory.Abelian.Exact
import Mathlib.CategoryTheory.Comma.Over
import Mathlib.Algebra.Category.ModuleCat.EpiMono
open CategoryTheory
open CategoryTheory.Limits
open CategoryTheory.Abelian
open CategoryTheory.Preadditive
universe v u
namespace CategoryTheory.Abelian
variable {C : Type u} [Category.{v} C]
attribute [local instance] Over.coeFromHom
def app {P Q : C} (f : P ‚ü∂ Q) (a : Over P) : Over Q :=
  a.hom ‚â´ f
@[simp]
theorem app_hom {P Q : C} (f : P ‚ü∂ Q) (a : Over P) : (app f a).hom = a.hom ‚â´ f := rfl
def PseudoEqual (P : C) (f g : Over P) : Prop :=
  ‚àÉ (R : C) (p : R ‚ü∂ f.1) (q : R ‚ü∂ g.1) (_ : Epi p) (_ : Epi q), p ‚â´ f.hom = q ‚â´ g.hom
theorem pseudoEqual_refl {P : C} : Reflexive (PseudoEqual P) :=
  fun f => ‚ü®f.1, ùüô f.1, ùüô f.1, inferInstance, inferInstance, by simp‚ü©
theorem pseudoEqual_symm {P : C} : Symmetric (PseudoEqual P) :=
  fun _ _ ‚ü®R, p, q, ep, Eq, comm‚ü© => ‚ü®R, q, p, Eq, ep, comm.symm‚ü©
variable [Abelian.{v} C]
section
theorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by
  intro f g h ‚ü®R, p, q, ep, Eq, comm‚ü© ‚ü®R', p', q', ep', eq', comm'‚ü©
  refine ‚ü®pullback q p', pullback.fst _ _ ‚â´ p, pullback.snd _ _ ‚â´ q',
    epi_comp _ _, epi_comp _ _, ?_‚ü©
  rw [Category.assoc, comm, ‚Üê Category.assoc, pullback.condition, Category.assoc, comm',
    Category.assoc]
end
def Pseudoelement.setoid (P : C) : Setoid (Over P) :=
  ‚ü®_, ‚ü®pseudoEqual_refl, @pseudoEqual_symm _ _ _, @pseudoEqual_trans _ _ _ _‚ü©‚ü©
attribute [local instance] Pseudoelement.setoid
def Pseudoelement (P : C) : Type max u v :=
  Quotient (Pseudoelement.setoid P)
namespace Pseudoelement
def objectToSort : CoeSort C (Type max u v) :=
  ‚ü®fun P => Pseudoelement P‚ü©
attribute [local instance] objectToSort
scoped[Pseudoelement] attribute [instance] CategoryTheory.Abelian.Pseudoelement.objectToSort
def overToSort {P : C} : Coe (Over P) (Pseudoelement P) :=
  ‚ü®Quot.mk (PseudoEqual P)‚ü©
attribute [local instance] overToSort
theorem over_coe_def {P Q : C} (a : Q ‚ü∂ P) : (a : Pseudoelement P) = ‚ü¶‚Üëa‚üß := rfl
theorem pseudoApply_aux {P Q : C} (f : P ‚ü∂ Q) (a b : Over P) : a ‚âà b ‚Üí app f a ‚âà app f b :=
  fun ‚ü®R, p, q, ep, Eq, comm‚ü© =>
  ‚ü®R, p, q, ep, Eq, show p ‚â´ a.hom ‚â´ f = q ‚â´ b.hom ‚â´ f by rw [reassoc_of% comm]‚ü©
def pseudoApply {P Q : C} (f : P ‚ü∂ Q) : P ‚Üí Q :=
  Quotient.map (fun g : Over P => app f g) (pseudoApply_aux f)
def homToFun {P Q : C} : CoeFun (P ‚ü∂ Q) fun _ => P ‚Üí Q :=
  ‚ü®pseudoApply‚ü©
attribute [local instance] homToFun
scoped[Pseudoelement] attribute [instance] CategoryTheory.Abelian.Pseudoelement.homToFun
theorem pseudoApply_mk' {P Q : C} (f : P ‚ü∂ Q) (a : Over P) : f ‚ü¶a‚üß = ‚ü¶‚Üë(a.hom ‚â´ f)‚üß := rfl
theorem comp_apply {P Q R : C} (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) (a : P) : (f ‚â´ g) a = g (f a) :=
  Quotient.inductionOn a fun x =>
    Quotient.sound <| by
      simp only [app]
      rw [‚Üê Category.assoc, Over.coe_hom]
theorem comp_comp {P Q R : C} (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) : g ‚àò f = f ‚â´ g :=
  funext fun _ => (comp_apply _ _ _).symm
section Zero
section
attribute [local instance] HasBinaryBiproducts.of_hasBinaryProducts
theorem pseudoZero_aux {P : C} (Q : C) (f : Over P) : f ‚âà (0 : Q ‚ü∂ P) ‚Üî f.hom = 0 :=
  ‚ü®fun ‚ü®R, p, q, _, _, comm‚ü© => zero_of_epi_comp p (by simp [comm]), fun hf =>
    ‚ü®biprod f.1 Q, biprod.fst, biprod.snd, inferInstance, inferInstance, by
      rw [hf, Over.coe_hom, HasZeroMorphisms.comp_zero, HasZeroMorphisms.comp_zero]‚ü©‚ü©
end
theorem zero_eq_zero' {P Q R : C} :
    (‚ü¶((0 : Q ‚ü∂ P) : Over P)‚üß : Pseudoelement P) = ‚ü¶((0 : R ‚ü∂ P) : Over P)‚üß :=
  Quotient.sound <| (pseudoZero_aux R _).2 rfl
def pseudoZero {P : C} : P :=
  ‚ü¶(0 : P ‚ü∂ P)‚üß
instance hasZero {P : C} : Zero P :=
  ‚ü®pseudoZero‚ü©
instance {P : C} : Inhabited P :=
  ‚ü®0‚ü©
theorem pseudoZero_def {P : C} : (0 : Pseudoelement P) = ‚ü¶‚Üë(0 : P ‚ü∂ P)‚üß := rfl
@[simp]
theorem zero_eq_zero {P Q : C} : ‚ü¶((0 : Q ‚ü∂ P) : Over P)‚üß = (0 : Pseudoelement P) :=
  zero_eq_zero'
theorem pseudoZero_iff {P : C} (a : Over P) : a = (0 : P) ‚Üî a.hom = 0 := by
  rw [‚Üê pseudoZero_aux P a]
  exact Quotient.eq'
end Zero
open Pseudoelement
@[simp]
theorem apply_zero {P Q : C} (f : P ‚ü∂ Q) : f 0 = 0 := by
  rw [pseudoZero_def, pseudoApply_mk']
  simp
@[simp]
theorem zero_apply {P : C} (Q : C) (a : P) : (0 : P ‚ü∂ Q) a = 0 :=
  Quotient.inductionOn a fun a' => by
    rw [pseudoZero_def, pseudoApply_mk']
    simp
theorem zero_morphism_ext {P Q : C} (f : P ‚ü∂ Q) : (‚àÄ a, f a = 0) ‚Üí f = 0 := fun h => by
  rw [‚Üê Category.id_comp f]
  exact (pseudoZero_iff (ùüô P ‚â´ f : Over Q)).1 (h (ùüô P))
theorem zero_morphism_ext' {P Q : C} (f : P ‚ü∂ Q) : (‚àÄ a, f a = 0) ‚Üí 0 = f :=
  Eq.symm ‚àò zero_morphism_ext f
theorem eq_zero_iff {P Q : C} (f : P ‚ü∂ Q) : f = 0 ‚Üî ‚àÄ a, f a = 0 :=
  ‚ü®fun h a => by simp [h], zero_morphism_ext _‚ü©
theorem pseudo_injective_of_mono {P Q : C} (f : P ‚ü∂ Q) [Mono f] : Function.Injective f := by
  intro abar abar'
  refine Quotient.inductionOn‚ÇÇ abar abar' fun a a' ha => ?_
  apply Quotient.sound
  have : (‚ü¶(a.hom ‚â´ f : Over Q)‚üß : Quotient (setoid Q)) = ‚ü¶‚Üë(a'.hom ‚â´ f)‚üß := by convert ha
  have ‚ü®R, p, q, ep, Eq, comm‚ü© := Quotient.exact this
  exact ‚ü®R, p, q, ep, Eq, (cancel_mono f).1 <| by
    simp only [Category.assoc]
    exact comm‚ü©
theorem zero_of_map_zero {P Q : C} (f : P ‚ü∂ Q) : Function.Injective f ‚Üí ‚àÄ a, f a = 0 ‚Üí a = 0 :=
  fun h a ha => by
  rw [‚Üê apply_zero f] at ha
  exact h ha
theorem mono_of_zero_of_map_zero {P Q : C} (f : P ‚ü∂ Q) : (‚àÄ a, f a = 0 ‚Üí a = 0) ‚Üí Mono f :=
  fun h => (mono_iff_cancel_zero _).2 fun _ g hg =>
    (pseudoZero_iff (g : Over P)).1 <|
      h _ <| show f g = 0 from (pseudoZero_iff (g ‚â´ f : Over Q)).2 hg
section
theorem pseudo_surjective_of_epi {P Q : C} (f : P ‚ü∂ Q) [Epi f] : Function.Surjective f :=
  fun qbar =>
  Quotient.inductionOn qbar fun q =>
    ‚ü®(pullback.fst f q.hom : Over P),
      Quotient.sound <|
        ‚ü®pullback f q.hom, ùüô (pullback f q.hom), pullback.snd _ _, inferInstance, inferInstance, by
          rw [Category.id_comp, ‚Üê pullback.condition, app_hom, Over.coe_hom]‚ü©‚ü©
end
theorem epi_of_pseudo_surjective {P Q : C} (f : P ‚ü∂ Q) : Function.Surjective f ‚Üí Epi f := by
  intro h
  have ‚ü®pbar, hpbar‚ü© := h (ùüô Q)
  have ‚ü®p, hp‚ü© := Quotient.exists_rep pbar
  have : (‚ü¶(p.hom ‚â´ f : Over Q)‚üß : Quotient (setoid Q)) = ‚ü¶‚Üë(ùüô Q)‚üß := by
    rw [‚Üê hp] at hpbar
    exact hpbar
  have ‚ü®R, x, y, _, ey, comm‚ü© := Quotient.exact this
  apply @epi_of_epi_fac _ _ _ _ _ (x ‚â´ p.hom) f y ey
  dsimp at comm
  rw [Category.assoc, comm]
  apply Category.comp_id
section
theorem pseudo_exact_of_exact {S : ShortComplex C} (hS : S.Exact) :
    ‚àÄ b, S.g b = 0 ‚Üí ‚àÉ a, S.f a = b :=
  fun b' =>
    Quotient.inductionOn b' fun b hb => by
      have hb' : b.hom ‚â´ S.g = 0 := (pseudoZero_iff _).1 hb
      obtain ‚ü®c, hc‚ü© := KernelFork.IsLimit.lift' hS.isLimitImage _ hb'
      use pullback.fst (Abelian.factorThruImage S.f) c
      apply Quotient.sound
      refine ‚ü®pullback (Abelian.factorThruImage S.f) c, ùüô _,
              pullback.snd _ _, inferInstance, inferInstance, ?_‚ü©
      calc
        ùüô (pullback (Abelian.factorThruImage S.f) c) ‚â´ pullback.fst _ _ ‚â´ S.f =
          pullback.fst _ _ ‚â´ S.f :=
          Category.id_comp _
        _ = pullback.fst _ _ ‚â´ Abelian.factorThruImage S.f ‚â´ kernel.Œπ (cokernel.œÄ S.f) := by
          rw [Abelian.image.fac]
        _ = (pullback.snd _ _ ‚â´ c) ‚â´ kernel.Œπ (cokernel.œÄ S.f) := by
          rw [‚Üê Category.assoc, pullback.condition]
        _ = pullback.snd _ _ ‚â´ b.hom := by
          rw [Category.assoc]
          congr
end
theorem apply_eq_zero_of_comp_eq_zero {P Q R : C} (f : Q ‚ü∂ R) (a : P ‚ü∂ Q) : a ‚â´ f = 0 ‚Üí f a = 0 :=
  fun h => by simp [over_coe_def, pseudoApply_mk', Over.coe_hom, h]
section
theorem exact_of_pseudo_exact (S : ShortComplex C)
    (hS : ‚àÄ b, S.g b = 0 ‚Üí ‚àÉ a, S.f a = b) : S.Exact :=
  (S.exact_iff_kernel_Œπ_comp_cokernel_œÄ_zero).2 (by
      have : S.g (kernel.Œπ S.g) = 0 := apply_eq_zero_of_comp_eq_zero _ _ (kernel.condition _)
      obtain ‚ü®a', ha‚ü© := hS _ this
      obtain ‚ü®a, ha'‚ü© := Quotient.exists_rep a'
      rw [‚Üê ha'] at ha
      obtain ‚ü®Z, r, q, _, eq, comm‚ü© := Quotient.exact ha
      obtain ‚ü®z, _, hz‚ÇÇ‚ü© := @pullback.lift' _ _ _ _ _ _ (kernel.Œπ (cokernel.œÄ S.f))
        (kernel.Œπ S.g) _ (r ‚â´ a.hom ‚â´ Abelian.factorThruImage S.f) q (by
          simp only [Category.assoc, Abelian.image.fac]
          exact comm)
      let j : pullback (kernel.Œπ (cokernel.œÄ S.f)) (kernel.Œπ S.g) ‚ü∂ kernel S.g := pullback.snd _ _
      haveI pe : Epi j := epi_of_epi_fac hz‚ÇÇ
      haveI : IsIso j := isIso_of_mono_of_epi _
      rw [(Iso.eq_inv_comp (asIso j)).2 pullback.condition.symm]
      simp only [Category.assoc, kernel.condition, HasZeroMorphisms.comp_zero])
end
theorem sub_of_eq_image {P Q : C} (f : P ‚ü∂ Q) (x y : P) :
    f x = f y ‚Üí ‚àÉ z, f z = 0 ‚àß ‚àÄ (R : C) (g : P ‚ü∂ R), (g : P ‚ü∂ R) y = 0 ‚Üí g z = g x :=
  Quotient.inductionOn‚ÇÇ x y fun a a' h =>
    match Quotient.exact h with
    | ‚ü®R, p, q, ep, _, comm‚ü© =>
      let a'' : R ‚ü∂ P := ‚Üë(p ‚â´ a.hom) - ‚Üë(q ‚â´ a'.hom)
      ‚ü®a'',
        ‚ü®show ‚ü¶(a'' ‚â´ f : Over Q)‚üß = ‚ü¶‚Üë(0 : Q ‚ü∂ Q)‚üß by
            dsimp at comm
            simp [a'', sub_eq_zero.2 comm],
          fun Z g hh => by
          obtain ‚ü®X, p', q', ep', _, comm'‚ü© := Quotient.exact hh
          have : a'.hom ‚â´ g = 0 := by
            apply (epi_iff_cancel_zero _).1 ep' _ (a'.hom ‚â´ g)
            simpa using comm'
          apply Quotient.sound
          change app g (a'' : Over P) ‚âà app g a
          exact ‚ü®R, ùüô R, p, inferInstance, ep, by simp [a'', sub_eq_add_neg, this]‚ü©‚ü©‚ü©
variable [Limits.HasPullbacks C]
theorem pseudo_pullback {P Q R : C} {f : P ‚ü∂ R} {g : Q ‚ü∂ R} {p : P} {q : Q} :
    f p = g q ‚Üí
      ‚àÉ s, pullback.fst f g s = p ‚àß pullback.snd f g s = q :=
  Quotient.inductionOn‚ÇÇ p q fun x y h => by
    obtain ‚ü®Z, a, b, ea, eb, comm‚ü© := Quotient.exact h
    obtain ‚ü®l, hl‚ÇÅ, hl‚ÇÇ‚ü© := @pullback.lift' _ _ _ _ _ _ f g _ (a ‚â´ x.hom) (b ‚â´ y.hom) (by
      simp only [Category.assoc]
      exact comm)
    exact ‚ü®l, ‚ü®Quotient.sound ‚ü®Z, ùüô Z, a, inferInstance, ea, by rwa [Category.id_comp]‚ü©,
      Quotient.sound ‚ü®Z, ùüô Z, b, inferInstance, eb, by rwa [Category.id_comp]‚ü©‚ü©‚ü©
section Module
theorem ModuleCat.eq_range_of_pseudoequal {R : Type*} [CommRing R] {G : ModuleCat R} {x y : Over G}
    (h : PseudoEqual G x y) : LinearMap.range x.hom = LinearMap.range y.hom := by
  obtain ‚ü®P, p, q, hp, hq, H‚ü© := h
  refine Submodule.ext fun a => ‚ü®fun ha => ?_, fun ha => ?_‚ü©
  ¬∑ obtain ‚ü®a', ha'‚ü© := ha
    obtain ‚ü®a'', ha''‚ü© := (ModuleCat.epi_iff_surjective p).1 hp a'
    refine ‚ü®q a'', ?_‚ü©
    erw [‚Üê LinearMap.comp_apply, ‚Üê ModuleCat.comp_def, ‚Üê H,
      ModuleCat.comp_def, LinearMap.comp_apply, ha'', ha']
  ¬∑ obtain ‚ü®a', ha'‚ü© := ha
    obtain ‚ü®a'', ha''‚ü© := (ModuleCat.epi_iff_surjective q).1 hq a'
    refine ‚ü®p a'', ?_‚ü©
    erw [‚Üê LinearMap.comp_apply, ‚Üê ModuleCat.comp_def, H, ModuleCat.comp_def, LinearMap.comp_apply,
      ha'', ha']
end Module
end Pseudoelement
end CategoryTheory.Abelian