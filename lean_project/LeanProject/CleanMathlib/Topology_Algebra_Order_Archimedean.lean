import Mathlib.GroupTheory.Archimedean
import Mathlib.Topology.Order.Basic
open Set
theorem Rat.denseRange_cast {ùïú} [LinearOrderedField ùïú] [TopologicalSpace ùïú] [OrderTopology ùïú]
    [Archimedean ùïú] : DenseRange ((‚Üë) : ‚Ñö ‚Üí ùïú) :=
  dense_of_exists_between fun _ _ h => Set.exists_range_iff.2 <| exists_rat_btwn h
namespace AddSubgroup
variable {G : Type*} [LinearOrderedAddCommGroup G] [TopologicalSpace G] [OrderTopology G]
  [Archimedean G]
theorem dense_of_not_isolated_zero (S : AddSubgroup G) (hS : ‚àÄ Œµ > 0, ‚àÉ g ‚àà S, g ‚àà Ioo 0 Œµ) :
    Dense (S : Set G) := by
  cases subsingleton_or_nontrivial G
  ¬∑ refine fun x => _root_.subset_closure ?_
    rw [Subsingleton.elim x 0]
    exact zero_mem S
  refine dense_of_exists_between fun a b hlt => ?_
  rcases hS (b - a) (sub_pos.2 hlt) with ‚ü®g, hgS, hg0, hg‚ü©
  rcases (existsUnique_add_zsmul_mem_Ioc hg0 0 a).exists with ‚ü®m, hm‚ü©
  rw [zero_add] at hm
  refine ‚ü®m ‚Ä¢ g, zsmul_mem hgS _, hm.1, hm.2.trans_lt ?_‚ü©
  rwa [lt_sub_iff_add_lt'] at hg
theorem dense_of_no_min (S : AddSubgroup G) (hbot : S ‚â† ‚ä•)
    (H : ¬¨‚àÉ a : G, IsLeast { g : G | g ‚àà S ‚àß 0 < g } a) : Dense (S : Set G) := by
  refine S.dense_of_not_isolated_zero fun Œµ Œµ0 => ?_
  contrapose! H
  exact exists_isLeast_pos hbot Œµ0 (disjoint_left.2 H)
theorem dense_or_cyclic (S : AddSubgroup G) : Dense (S : Set G) ‚à® ‚àÉ a : G, S = closure {a} := by
  refine (em _).imp (dense_of_not_isolated_zero S) fun h => ?_
  push_neg at h
  rcases h with ‚ü®Œµ, Œµ0, hŒµ‚ü©
  exact cyclic_of_isolated_zero Œµ0 (disjoint_left.2 hŒµ)
end AddSubgroup