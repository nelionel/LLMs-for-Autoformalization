import Mathlib.Algebra.Category.Ring.Constructions
import Mathlib.Geometry.RingedSpace.Basic
import Mathlib.Geometry.RingedSpace.Stalks
import Mathlib.RingTheory.Nilpotent.Defs
universe u
open CategoryTheory
open TopCat
open TopologicalSpace Topology
open Opposite
open CategoryTheory.Category CategoryTheory.Functor
namespace AlgebraicGeometry
structure LocallyRingedSpace extends SheafedSpace CommRingCat.{u} where
  isLocalRing : ‚àÄ x, IsLocalRing (presheaf.stalk x)
attribute [instance] LocallyRingedSpace.isLocalRing
namespace LocallyRingedSpace
variable (X : LocallyRingedSpace.{u})
def toRingedSpace : RingedSpace :=
  X.toSheafedSpace
def toTopCat : TopCat :=
  X.1.carrier
instance : CoeSort LocallyRingedSpace (Type u) :=
  ‚ü®fun X : LocallyRingedSpace => (X.toTopCat : Type _)‚ü©
instance (x : X) : IsLocalRing (X.presheaf.stalk x) :=
  X.isLocalRing x
def ùí™ : Sheaf CommRingCat X.toTopCat :=
  X.sheaf
@[ext]
structure Hom (X Y : LocallyRingedSpace.{u})
    extends X.toPresheafedSpace.Hom Y.toPresheafedSpace : Type _ where
  prop : ‚àÄ x, IsLocalHom (toHom.stalkMap x)
abbrev Hom.toShHom {X Y : LocallyRingedSpace.{u}} (f : X.Hom Y) :
  X.toSheafedSpace ‚ü∂ Y.toSheafedSpace := f.1
@[simp, nolint simpVarHead]
lemma Hom.toShHom_mk {X Y : LocallyRingedSpace.{u}}
    (f : X.toPresheafedSpace.Hom Y.toPresheafedSpace) (hf) :
  Hom.toShHom ‚ü®f, hf‚ü© = f := rfl
instance : Quiver LocallyRingedSpace :=
  ‚ü®Hom‚ü©
@[ext] lemma Hom.ext' {X Y : LocallyRingedSpace.{u}} {f g : X ‚ü∂ Y} (h : f.toShHom = g.toShHom) :
    f = g := by cases f; cases g; congr
def Hom.Simps.toShHom {X Y : LocallyRingedSpace.{u}} (f : X.Hom Y) :
    X.toSheafedSpace ‚ü∂ Y.toSheafedSpace :=
  f.toShHom
initialize_simps_projections Hom (toHom ‚Üí toShHom)
noncomputable def Hom.stalkMap {X Y : LocallyRingedSpace.{u}} (f : Hom X Y) (x : X) :
    Y.presheaf.stalk (f.1.1 x) ‚ü∂ X.presheaf.stalk x :=
  f.toShHom.stalkMap x
@[instance]
theorem isLocalHomStalkMap {X Y : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y) (x : X) :
    IsLocalHom (f.stalkMap x) :=
  f.2 x
@[instance]
theorem isLocalHomValStalkMap {X Y : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y) (x : X) :
    IsLocalHom (f.toShHom.stalkMap x) :=
  f.2 x
@[deprecated (since := "2024-10-10")]
alias isLocalRingHomValStalkMap := isLocalHomValStalkMap
@[simps! toShHom]
def id (X : LocallyRingedSpace.{u}) : Hom X X :=
  ‚ü®ùüô X.toSheafedSpace, fun x => by erw [PresheafedSpace.stalkMap.id]; infer_instance‚ü©
instance (X : LocallyRingedSpace.{u}) : Inhabited (Hom X X) :=
  ‚ü®id X‚ü©
def comp {X Y Z : LocallyRingedSpace.{u}} (f : Hom X Y) (g : Hom Y Z) : Hom X Z :=
  ‚ü®f.toShHom ‚â´ g.toShHom, fun x => by
    erw [PresheafedSpace.stalkMap.comp]
    infer_instance‚ü©
instance : Category LocallyRingedSpace.{u} where
  Hom := Hom
  id := id
  comp {_ _ _} f g := comp f g
  comp_id {X Y} f := Hom.ext' <| by simp [comp]
  id_comp {X Y} f := Hom.ext' <| by simp [comp]
  assoc {_ _ _ _} f g h := Hom.ext' <| by simp [comp]
@[simps]
def forgetToSheafedSpace : LocallyRingedSpace.{u} ‚•§ SheafedSpace CommRingCat.{u} where
  obj X := X.toSheafedSpace
  map {_ _} f := f.1
instance : forgetToSheafedSpace.Faithful where
  map_injective {_ _} _ _ h := Hom.ext' h
@[simps!]
def forgetToTop : LocallyRingedSpace.{u} ‚•§ TopCat.{u} :=
  forgetToSheafedSpace ‚ãô SheafedSpace.forget _
@[simp]
theorem comp_toShHom {X Y Z : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).toShHom = f.toShHom ‚â´ g.toShHom :=
  rfl
@[simp] theorem id_toShHom' (X : LocallyRingedSpace.{u}) :
    Hom.toShHom (ùüô X) = ùüô X.toSheafedSpace :=
  rfl
theorem comp_base {X Y Z : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).base = f.base ‚â´ g.base :=
  rfl
theorem comp_c {X Y Z : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).c = g.c ‚â´ (Presheaf.pushforward _ g.base).map f.c :=
  rfl
theorem comp_c_app {X Y Z : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U : (Opens Z)·µí·µñ) :
    (f ‚â´ g).c.app U = g.c.app U ‚â´ f.c.app (op <| (Opens.map g.base).obj U.unop) :=
  rfl
@[simps! toShHom]
def homOfSheafedSpaceHomOfIsIso {X Y : LocallyRingedSpace.{u}}
    (f : X.toSheafedSpace ‚ü∂ Y.toSheafedSpace) [IsIso f] : X ‚ü∂ Y :=
  Hom.mk f fun _ =>
    inferInstance
def isoOfSheafedSpaceIso {X Y : LocallyRingedSpace.{u}} (f : X.toSheafedSpace ‚âÖ Y.toSheafedSpace) :
    X ‚âÖ Y where
  hom := homOfSheafedSpaceHomOfIsIso f.hom
  inv := homOfSheafedSpaceHomOfIsIso f.inv
  hom_inv_id := Hom.ext' f.hom_inv_id
  inv_hom_id := Hom.ext' f.inv_hom_id
instance : forgetToSheafedSpace.ReflectsIsomorphisms where reflects {_ _} f i :=
  { out :=
      ‚ü®homOfSheafedSpaceHomOfIsIso (CategoryTheory.inv (forgetToSheafedSpace.map f)),
        Hom.ext' (IsIso.hom_inv_id (I := i)), Hom.ext' (IsIso.inv_hom_id (I := i))‚ü© }
instance is_sheafedSpace_iso {X Y : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y) [IsIso f] :
    IsIso f.toShHom :=
  LocallyRingedSpace.forgetToSheafedSpace.map_isIso f
@[simps!]
def restrict {U : TopCat} (X : LocallyRingedSpace.{u}) {f : U ‚ü∂ X.toTopCat}
    (h : IsOpenEmbedding f) : LocallyRingedSpace where
  isLocalRing := by
    intro x
    apply @RingEquiv.isLocalRing _ _ _ (X.isLocalRing (f x))
    exact (X.restrictStalkIso h x).symm.commRingCatIsoToRingEquiv
  toSheafedSpace := X.toSheafedSpace.restrict h
def ofRestrict {U : TopCat} (X : LocallyRingedSpace.{u})
    {f : U ‚ü∂ X.toTopCat} (h : IsOpenEmbedding f) : X.restrict h ‚ü∂ X :=
  ‚ü®X.toPresheafedSpace.ofRestrict h, fun _ => inferInstance‚ü©
def restrictTopIso (X : LocallyRingedSpace.{u}) :
    X.restrict (Opens.isOpenEmbedding ‚ä§) ‚âÖ X :=
  isoOfSheafedSpaceIso X.toSheafedSpace.restrictTopIso
def Œì : LocallyRingedSpace.{u}·µí·µñ ‚•§ CommRingCat.{u} :=
  forgetToSheafedSpace.op ‚ãô SheafedSpace.Œì
theorem Œì_def : Œì = forgetToSheafedSpace.op ‚ãô SheafedSpace.Œì :=
  rfl
@[simp]
theorem Œì_obj (X : LocallyRingedSpace.{u}·µí·µñ) : Œì.obj X = X.unop.presheaf.obj (op ‚ä§) :=
  rfl
theorem Œì_obj_op (X : LocallyRingedSpace.{u}) : Œì.obj (op X) = X.presheaf.obj (op ‚ä§) :=
  rfl
@[simp]
theorem Œì_map {X Y : LocallyRingedSpace.{u}·µí·µñ} (f : X ‚ü∂ Y) : Œì.map f = f.unop.c.app (op ‚ä§) :=
  rfl
theorem Œì_map_op {X Y : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y) : Œì.map f.op = f.c.app (op ‚ä§) :=
  rfl
def empty : LocallyRingedSpace.{u} where
  carrier := TopCat.of PEmpty
  presheaf := (CategoryTheory.Functor.const _).obj (CommRingCat.of PUnit)
  IsSheaf := Presheaf.isSheaf_of_isTerminal _ CommRingCat.punitIsTerminal
  isLocalRing x := PEmpty.elim x
instance : EmptyCollection LocallyRingedSpace.{u} := ‚ü®LocallyRingedSpace.empty‚ü©
def emptyTo (X : LocallyRingedSpace) : ‚àÖ ‚ü∂ X :=
  ‚ü®‚ü®‚ü®fun x => PEmpty.elim x, by fun_prop‚ü©,
    { app := fun U => by refine ‚ü®‚ü®‚ü®0, ?_‚ü©, ?_‚ü©, ?_, ?_‚ü© <;> intros <;> rfl }‚ü©,
    fun x => PEmpty.elim x‚ü©
noncomputable
instance {X : LocallyRingedSpace} : Unique (‚àÖ ‚ü∂ X) where
  default := LocallyRingedSpace.emptyTo X
  uniq f := by ext ‚ü®‚ü© x; aesop_cat
noncomputable
def emptyIsInitial : Limits.IsInitial (‚àÖ : LocallyRingedSpace.{u}) := Limits.IsInitial.ofUnique _
theorem basicOpen_zero (X : LocallyRingedSpace.{u}) (U : Opens X.carrier) :
    X.toRingedSpace.basicOpen (0 : X.presheaf.obj <| op U) = ‚ä• := by
  ext x
  simp only [RingedSpace.basicOpen, Opens.coe_mk, Set.mem_image, Set.mem_setOf_eq, Subtype.exists,
    exists_and_right, exists_eq_right, Opens.coe_bot, Set.mem_empty_iff_false,
    iff_false, not_exists]
  intros hx
  rw [map_zero, isUnit_zero_iff]
  change (0 : X.presheaf.stalk x) ‚â† (1 : X.presheaf.stalk x)
  exact zero_ne_one
@[simp]
lemma basicOpen_eq_bot_of_isNilpotent (X : LocallyRingedSpace.{u}) (U : Opens X.carrier)
    (f : (X.presheaf.obj <| op U)) (hf : IsNilpotent f) :
    X.toRingedSpace.basicOpen f = ‚ä• := by
  obtain ‚ü®n, hn‚ü© := hf
  cases n.eq_zero_or_pos with
  | inr h =>
    rw [‚Üê  X.toRingedSpace.basicOpen_pow f n h, hn]
    simp [basicOpen_zero]
  | inl h =>
    rw [h, pow_zero] at hn
    simp [eq_zero_of_zero_eq_one hn.symm f, basicOpen_zero]
instance component_nontrivial (X : LocallyRingedSpace.{u}) (U : Opens X.carrier) [hU : Nonempty U] :
    Nontrivial (X.presheaf.obj <| op U) :=
  (X.presheaf.germ _ _ hU.some.2).domain_nontrivial
@[simp]
lemma iso_hom_base_inv_base {X Y : LocallyRingedSpace.{u}} (e : X ‚âÖ Y) :
    e.hom.base ‚â´ e.inv.base = ùüô _ := by
  rw [‚Üê SheafedSpace.comp_base, ‚Üê LocallyRingedSpace.comp_toShHom]
  simp
@[simp]
lemma iso_hom_base_inv_base_apply {X Y : LocallyRingedSpace.{u}} (e : X ‚âÖ Y) (x : X) :
    (e.inv.base (e.hom.base x)) = x := by
  show (e.hom.base ‚â´ e.inv.base) x = ùüô X.toPresheafedSpace x
  simp
@[simp]
lemma iso_inv_base_hom_base {X Y : LocallyRingedSpace.{u}} (e : X ‚âÖ Y) :
    e.inv.base ‚â´ e.hom.base = ùüô _ := by
  rw [‚Üê SheafedSpace.comp_base, ‚Üê LocallyRingedSpace.comp_toShHom]
  simp
@[simp]
lemma iso_inv_base_hom_base_apply {X Y : LocallyRingedSpace.{u}} (e : X ‚âÖ Y) (y : Y) :
    (e.hom.base (e.inv.base y)) = y := by
  show (e.inv.base ‚â´ e.hom.base) y = ùüô Y.toPresheafedSpace y
  simp
section Stalks
variable {X Y Z : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
@[simp]
lemma stalkMap_id (X : LocallyRingedSpace.{u}) (x : X) :
    (ùüô X : X ‚ü∂ X).stalkMap x = ùüô (X.presheaf.stalk x) :=
  PresheafedSpace.stalkMap.id _ x
lemma stalkMap_comp (x : X) :
    (f ‚â´ g : X ‚ü∂ Z).stalkMap x = g.stalkMap (f.base x) ‚â´ f.stalkMap x :=
  PresheafedSpace.stalkMap.comp f.toShHom g.toShHom x
@[reassoc]
lemma stalkSpecializes_stalkMap (x x' : X) (h : x ‚§≥ x') :
    Y.presheaf.stalkSpecializes (f.base.map_specializes h) ‚â´ f.stalkMap x =
      f.stalkMap x' ‚â´ X.presheaf.stalkSpecializes h :=
  PresheafedSpace.stalkMap.stalkSpecializes_stalkMap f.toShHom h
lemma stalkSpecializes_stalkMap_apply (x x' : X) (h : x ‚§≥ x') (y) :
    f.stalkMap x (Y.presheaf.stalkSpecializes (f.base.map_specializes h) y) =
      (X.presheaf.stalkSpecializes h (f.stalkMap x' y)) :=
  DFunLike.congr_fun (stalkSpecializes_stalkMap f x x' h) y
@[reassoc]
lemma stalkMap_congr (f g : X ‚ü∂ Y) (hfg : f = g) (x x' : X) (hxx' : x = x') :
    f.stalkMap x ‚â´ X.presheaf.stalkSpecializes (specializes_of_eq hxx'.symm) =
      Y.presheaf.stalkSpecializes (specializes_of_eq <| hfg ‚ñ∏ hxx' ‚ñ∏ rfl) ‚â´ g.stalkMap x' := by
  subst hfg
  subst hxx'
  simp
@[reassoc]
lemma stalkMap_congr_hom (f g : X ‚ü∂ Y) (hfg : f = g) (x : X) :
    f.stalkMap x = Y.presheaf.stalkSpecializes (specializes_of_eq <| hfg ‚ñ∏ rfl) ‚â´
      g.stalkMap x := by
  subst hfg
  simp
@[reassoc]
lemma stalkMap_congr_point {X Y : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y) (x x' : X) (hxx' : x = x') :
    f.stalkMap x ‚â´ X.presheaf.stalkSpecializes (specializes_of_eq hxx'.symm) =
      Y.presheaf.stalkSpecializes (specializes_of_eq <| hxx' ‚ñ∏ rfl) ‚â´ f.stalkMap x' := by
  subst hxx'
  simp
@[reassoc (attr := simp)]
lemma stalkMap_hom_inv (e : X ‚âÖ Y) (y : Y) :
    e.hom.stalkMap (e.inv.base y) ‚â´ e.inv.stalkMap y =
      Y.presheaf.stalkSpecializes (specializes_of_eq <| by simp) := by
  rw [‚Üê stalkMap_comp, LocallyRingedSpace.stalkMap_congr_hom (e.inv ‚â´ e.hom) (ùüô _) (by simp)]
  simp
@[simp]
lemma stalkMap_hom_inv_apply (e : X ‚âÖ Y) (y : Y) (z) :
    e.inv.stalkMap y (e.hom.stalkMap (e.inv.base y) z) =
      Y.presheaf.stalkSpecializes (specializes_of_eq <| by simp) z :=
  DFunLike.congr_fun (stalkMap_hom_inv e y) z
@[reassoc (attr := simp)]
lemma stalkMap_inv_hom (e : X ‚âÖ Y) (x : X) :
    e.inv.stalkMap (e.hom.base x) ‚â´ e.hom.stalkMap x =
      X.presheaf.stalkSpecializes (specializes_of_eq <| by simp) := by
  rw [‚Üê stalkMap_comp, LocallyRingedSpace.stalkMap_congr_hom (e.hom ‚â´ e.inv) (ùüô _) (by simp)]
  simp
@[simp]
lemma stalkMap_inv_hom_apply (e : X ‚âÖ Y) (x : X) (y) :
    e.hom.stalkMap x (e.inv.stalkMap (e.hom.base x) y) =
      X.presheaf.stalkSpecializes (specializes_of_eq <| by simp) y :=
  DFunLike.congr_fun (stalkMap_inv_hom e x) y
@[reassoc (attr := simp)]
lemma stalkMap_germ (U : Opens Y) (x : X) (hx : f.base x ‚àà U) :
    Y.presheaf.germ U (f.base x) hx ‚â´ f.stalkMap x =
      f.c.app (op U) ‚â´ X.presheaf.germ ((Opens.map f.base).obj U) x hx :=
  PresheafedSpace.stalkMap_germ f.toShHom U x hx
lemma stalkMap_germ_apply (U : Opens Y) (x : X) (hx : f.base x ‚àà U) (y) :
    f.stalkMap x (Y.presheaf.germ U (f.base x) hx y) =
      X.presheaf.germ ((Opens.map f.base).obj U) x hx (f.c.app (op U) y) :=
  PresheafedSpace.stalkMap_germ_apply f.toShHom U x hx y
theorem preimage_basicOpen {X Y : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y) {U : Opens Y}
    (s : Y.presheaf.obj (op U)) :
    (Opens.map f.base).obj (Y.toRingedSpace.basicOpen s) =
      @RingedSpace.basicOpen X.toRingedSpace ((Opens.map f.base).obj U) (f.c.app _ s) := by
  ext x
  constructor
  ¬∑ rintro ‚ü®hxU, hx‚ü©
    rw [SetLike.mem_coe, X.toRingedSpace.mem_basicOpen _ _ hxU]
    delta toRingedSpace
    rw [‚Üê stalkMap_germ_apply]
    exact (f.stalkMap _).isUnit_map hx
  ¬∑ rintro ‚ü®hxU, hx‚ü©
    simp only [Opens.map_coe, Set.mem_preimage, SetLike.mem_coe, toRingedSpace] at hx ‚ä¢
    rw [RingedSpace.mem_basicOpen _ s (f.base x) hxU]
    rw [‚Üê stalkMap_germ_apply] at hx
    exact (isUnit_map_iff (f.toShHom.stalkMap _) _).mp hx
variable {U : TopCat} (X : LocallyRingedSpace.{u}) {f : U ‚ü∂ X.toTopCat} (h : IsOpenEmbedding f)
  (V : Opens U) (x : U) (hx : x ‚àà V)
noncomputable
def restrictStalkIso : (X.restrict h).presheaf.stalk x ‚âÖ X.presheaf.stalk (f x) :=
  X.toPresheafedSpace.restrictStalkIso h x
@[reassoc (attr := simp)]
lemma restrictStalkIso_hom_eq_germ :
    (X.restrict h).presheaf.germ _ x hx ‚â´ (X.restrictStalkIso h x).hom =
      X.presheaf.germ (h.isOpenMap.functor.obj V) (f x) ‚ü®x, hx, rfl‚ü© :=
  PresheafedSpace.restrictStalkIso_hom_eq_germ X.toPresheafedSpace h V x hx
lemma restrictStalkIso_hom_eq_germ_apply (y) :
    (X.restrictStalkIso h x).hom ((X.restrict h).presheaf.germ _ x hx y) =
      X.presheaf.germ (h.isOpenMap.functor.obj V) (f x) ‚ü®x, hx, rfl‚ü© y :=
  PresheafedSpace.restrictStalkIso_hom_eq_germ_apply X.toPresheafedSpace h V x hx y
@[reassoc (attr := simp)]
lemma restrictStalkIso_inv_eq_germ :
    X.presheaf.germ (h.isOpenMap.functor.obj V) (f x) ‚ü®x, hx, rfl‚ü© ‚â´
      (X.restrictStalkIso h x).inv = (X.restrict h).presheaf.germ _ x hx :=
  PresheafedSpace.restrictStalkIso_inv_eq_germ X.toPresheafedSpace h V x hx
lemma restrictStalkIso_inv_eq_germ_apply (y) :
    (X.restrictStalkIso h x).inv
      (X.presheaf.germ (h.isOpenMap.functor.obj V) (f x) ‚ü®x, hx, rfl‚ü© y) =
        (X.restrict h).presheaf.germ _ x hx y :=
  PresheafedSpace.restrictStalkIso_inv_eq_germ_apply X.toPresheafedSpace h V x hx y
lemma restrictStalkIso_inv_eq_ofRestrict :
    (X.restrictStalkIso h x).inv = (X.ofRestrict h).stalkMap x :=
  PresheafedSpace.restrictStalkIso_inv_eq_ofRestrict X.toPresheafedSpace h x
instance ofRestrict_stalkMap_isIso : IsIso ((X.ofRestrict h).stalkMap x) :=
  PresheafedSpace.ofRestrict_stalkMap_isIso X.toPresheafedSpace h x
end Stalks
end LocallyRingedSpace
end AlgebraicGeometry