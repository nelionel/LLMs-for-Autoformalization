import Mathlib.Combinatorics.Quiver.Cast
import Mathlib.Combinatorics.Quiver.Symmetric
namespace Quiver
@[nolint unusedArguments]
def SingleObj (_ : Type*) : Type :=
  Unit
instance {Œ± : Type*} : Unique (SingleObj Œ±) where
  default := ‚ü®‚ü©
  uniq := fun _ => rfl
namespace SingleObj
variable (Œ± Œ≤ Œ≥ : Type*)
instance : Quiver (SingleObj Œ±) :=
  ‚ü®fun _ _ => Œ±‚ü©
def star : SingleObj Œ± :=
  Unit.unit
instance : Inhabited (SingleObj Œ±) :=
  ‚ü®star Œ±‚ü©
variable {Œ± Œ≤ Œ≥}
lemma ext {x y : SingleObj Œ±} : x = y := Unit.ext x y
abbrev hasReverse (rev : Œ± ‚Üí Œ±) : HasReverse (SingleObj Œ±) := ‚ü®rev‚ü©
abbrev hasInvolutiveReverse (rev : Œ± ‚Üí Œ±) (h : Function.Involutive rev) :
    HasInvolutiveReverse (SingleObj Œ±) where
  toHasReverse := hasReverse rev
  inv' := h
@[simps!]
def toHom : Œ± ‚âÉ (star Œ± ‚ü∂ star Œ±) :=
  Equiv.refl _
@[simps]
def toPrefunctor : (Œ± ‚Üí Œ≤) ‚âÉ SingleObj Œ± ‚•§q SingleObj Œ≤ where
  toFun f := ‚ü®id, f‚ü©
  invFun f a := f.map (toHom a)
  left_inv _ := rfl
  right_inv _ := rfl
theorem toPrefunctor_id : toPrefunctor id = ùü≠q (SingleObj Œ±) :=
  rfl
@[simp]
theorem toPrefunctor_symm_id : toPrefunctor.symm (ùü≠q (SingleObj Œ±)) = id :=
  rfl
theorem toPrefunctor_comp (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) :
    toPrefunctor (g ‚àò f) = toPrefunctor f ‚ãôq toPrefunctor g :=
  rfl
@[simp]
theorem toPrefunctor_symm_comp (f : SingleObj Œ± ‚•§q SingleObj Œ≤) (g : SingleObj Œ≤ ‚•§q SingleObj Œ≥) :
    toPrefunctor.symm (f ‚ãôq g) = toPrefunctor.symm g ‚àò toPrefunctor.symm f := by
  simp only [Equiv.symm_apply_eq, toPrefunctor_comp, Equiv.apply_symm_apply]
def pathToList : ‚àÄ {x : SingleObj Œ±}, Path (star Œ±) x ‚Üí List Œ±
  | _, Path.nil => []
  | _, Path.cons p a => a :: pathToList p
@[simp]
def listToPath : List Œ± ‚Üí Path (star Œ±) (star Œ±)
  | [] => Path.nil
  | a :: l => (listToPath l).cons a
theorem listToPath_pathToList {x : SingleObj Œ±} (p : Path (star Œ±) x) :
    listToPath (pathToList p) = p.cast rfl ext := by
  induction p with
  | nil => rfl
  | cons _ _ ih => dsimp at *; rw [ih]
theorem pathToList_listToPath (l : List Œ±) : pathToList (listToPath l) = l := by
  induction l with
  | nil => rfl
  | cons a l ih => change a :: pathToList (listToPath l) = a :: l; rw [ih]
def pathEquivList : Path (star Œ±) (star Œ±) ‚âÉ List Œ± :=
  ‚ü®pathToList, listToPath, fun p => listToPath_pathToList p, pathToList_listToPath‚ü©
@[simp]
theorem pathEquivList_nil : pathEquivList Path.nil = ([] : List Œ±) :=
  rfl
@[simp]
theorem pathEquivList_cons (p : Path (star Œ±) (star Œ±)) (a : star Œ± ‚ü∂ star Œ±) :
    pathEquivList (Path.cons p a) = a :: pathToList p :=
  rfl
@[simp]
theorem pathEquivList_symm_nil : pathEquivList.symm ([] : List Œ±) = Path.nil :=
  rfl
@[simp]
theorem pathEquivList_symm_cons (l : List Œ±) (a : Œ±) :
    pathEquivList.symm (a :: l) = Path.cons (pathEquivList.symm l) a :=
  rfl
end SingleObj
end Quiver