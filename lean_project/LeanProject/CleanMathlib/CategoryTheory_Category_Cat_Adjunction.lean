import Mathlib.CategoryTheory.Category.Cat
import Mathlib.CategoryTheory.Adjunction.Basic
import Mathlib.CategoryTheory.ConnectedComponents
universe v u
namespace CategoryTheory.Cat
variable (X : Type u) (C : Cat)
private def typeToCatObjectsAdjHomEquiv : (typeToCat.obj X ‚ü∂ C) ‚âÉ (X ‚ü∂ Cat.objects.obj C) where
  toFun f x := f.obj ‚ü®x‚ü©
  invFun := Discrete.functor
  left_inv F := Functor.ext (fun _ ‚Ü¶ rfl) (fun ‚ü®_‚ü© ‚ü®_‚ü© f => by
    obtain rfl := Discrete.eq_of_hom f
    simp)
  right_inv _ := rfl
private def typeToCatObjectsAdjCounitApp : (Cat.objects ‚ãô typeToCat).obj C ‚•§ C where
  obj := Discrete.as
  map := eqToHom ‚àò Discrete.eq_of_hom
def typeToCatObjectsAdj : typeToCat ‚ä£ Cat.objects :=
  Adjunction.mk' {
    homEquiv := typeToCatObjectsAdjHomEquiv
    unit := { app:= fun _  ‚Ü¶ Discrete.mk }
    counit := {
      app := typeToCatObjectsAdjCounitApp
      naturality := fun _ _ _  ‚Ü¶  Functor.hext (fun _ ‚Ü¶ rfl)
        (by intro ‚ü®_‚ü© ‚ü®_‚ü© f
            obtain rfl := Discrete.eq_of_hom f
            aesop_cat ) } }
def connectedComponents : Cat.{v, u} ‚•§ Type u where
  obj C := ConnectedComponents C
  map F := Functor.mapConnectedComponents F
  map_id _ := funext fun x ‚Ü¶ (Quotient.exists_rep x).elim (fun _ h ‚Ü¶ by subst h; rfl)
  map_comp _ _ := funext fun x ‚Ü¶ (Quotient.exists_rep x).elim (fun _ h => by subst h; rfl)
def connectedComponentsTypeToCatAdj : connectedComponents ‚ä£ typeToCat :=
  Adjunction.mk' {
    homEquiv := fun C X ‚Ü¶ ConnectedComponents.typeToCatHomEquiv C X
    unit :=
      { app:= fun C  ‚Ü¶ ConnectedComponents.functorToDiscrete _ (ùüô (connectedComponents.obj C)) }
    counit :=  {
        app := fun X => ConnectedComponents.liftFunctor _ (ùüô typeToCat.obj X)
        naturality := fun _ _ _ =>
          funext (fun xcc => by
            obtain ‚ü®x,h‚ü© := Quotient.exists_rep xcc
            aesop_cat) }
    homEquiv_counit := fun {C X G} => by
      funext cc
      obtain ‚ü®_,_‚ü© := Quotient.exists_rep cc
      aesop_cat }
end CategoryTheory.Cat