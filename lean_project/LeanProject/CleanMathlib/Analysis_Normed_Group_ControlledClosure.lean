import Mathlib.Analysis.Normed.Group.Hom
import Mathlib.Analysis.SpecificLimits.Normed
open Filter Finset
open Topology
variable {G : Type*} [NormedAddCommGroup G] [CompleteSpace G]
variable {H : Type*} [NormedAddCommGroup H]
theorem controlled_closure_of_complete {f : NormedAddGroupHom G H} {K : AddSubgroup H} {C Œµ : ‚Ñù}
    (hC : 0 < C) (hŒµ : 0 < Œµ) (hyp : f.SurjectiveOnWith K C) :
    f.SurjectiveOnWith K.topologicalClosure (C + Œµ) := by
  rintro (h : H) (h_in : h ‚àà K.topologicalClosure)
  by_cases hyp_h : h = 0
  ¬∑ rw [hyp_h]
    use 0
    simp
  set b : ‚Ñï ‚Üí ‚Ñù := fun i => (1 / 2) ^ i * (Œµ * ‚Äñh‚Äñ / 2) / C
  have b_pos (i) : 0 < b i := by field_simp [b, hC, hyp_h]
  obtain
    ‚ü®v : ‚Ñï ‚Üí H, lim_v : Tendsto (fun n : ‚Ñï => ‚àë k ‚àà range (n + 1), v k) atTop (ùìù h), v_in :
      ‚àÄ n, v n ‚àà K, hv‚ÇÄ : ‚Äñv 0 - h‚Äñ < b 0, hv : ‚àÄ n > 0, ‚Äñv n‚Äñ < b n‚ü© :=
    controlled_sum_of_mem_closure h_in b_pos
  have : ‚àÄ n, ‚àÉ m' : G, f m' = v n ‚àß ‚Äñm'‚Äñ ‚â§ C * ‚Äñv n‚Äñ := fun n : ‚Ñï => hyp (v n) (v_in n)
  choose u hu hnorm_u using this
  set s : ‚Ñï ‚Üí G := fun n => ‚àë k ‚àà range (n + 1), u k
  have : CauchySeq s := by
    apply NormedAddCommGroup.cauchy_series_of_le_geometric'' (by norm_num) one_half_lt_one
    ¬∑ rintro n (hn : n ‚â• 1)
      calc
        ‚Äñu n‚Äñ ‚â§ C * ‚Äñv n‚Äñ := hnorm_u n
        _ ‚â§ C * b n := by gcongr; exact (hv _ <| Nat.succ_le_iff.mp hn).le
        _ = (1 / 2) ^ n * (Œµ * ‚Äñh‚Äñ / 2) := by simp [mul_div_cancel‚ÇÄ _ hC.ne.symm]
        _ = Œµ * ‚Äñh‚Äñ / 2 * (1 / 2) ^ n := mul_comm _ _
  obtain ‚ü®g : G, hg‚ü© := cauchySeq_tendsto_of_complete this
  refine ‚ü®g, ?_, ?_‚ü©
  ¬∑ 
    have : f ‚àò s = fun n => ‚àë k ‚àà range (n + 1), v k := by
      ext n
      simp [s, map_sum, hu]
    rw [‚Üê this] at lim_v
    exact tendsto_nhds_unique ((f.continuous.tendsto g).comp hg) lim_v
  ¬∑ 
    suffices ‚àÄ n, ‚Äñs n‚Äñ ‚â§ (C + Œµ) * ‚Äñh‚Äñ from
      le_of_tendsto' (continuous_norm.continuousAt.tendsto.comp hg) this
    intro n
    have hnorm‚ÇÄ : ‚Äñu 0‚Äñ ‚â§ C * b 0 + C * ‚Äñh‚Äñ := by
      have :=
        calc
          ‚Äñv 0‚Äñ ‚â§ ‚Äñh‚Äñ + ‚Äñv 0 - h‚Äñ := norm_le_insert' _ _
          _ ‚â§ ‚Äñh‚Äñ + b 0 := by gcongr
      calc
        ‚Äñu 0‚Äñ ‚â§ C * ‚Äñv 0‚Äñ := hnorm_u 0
        _ ‚â§ C * (‚Äñh‚Äñ + b 0) := by gcongr
        _ = C * b 0 + C * ‚Äñh‚Äñ := by rw [add_comm, mul_add]
    have : (‚àë k ‚àà range (n + 1), C * b k) ‚â§ Œµ * ‚Äñh‚Äñ :=
      calc (‚àë k ‚àà range (n + 1), C * b k)
        _ = (‚àë k ‚àà range (n + 1), (1 / 2 : ‚Ñù) ^ k) * (Œµ * ‚Äñh‚Äñ / 2) := by
          simp only [mul_div_cancel‚ÇÄ _ hC.ne.symm, ‚Üê sum_mul]
        _ ‚â§ 2 * (Œµ * ‚Äñh‚Äñ / 2) := by gcongr; apply sum_geometric_two_le
        _ = Œµ * ‚Äñh‚Äñ := mul_div_cancel‚ÇÄ _ two_ne_zero
    calc
      ‚Äñs n‚Äñ ‚â§ ‚àë k ‚àà range (n + 1), ‚Äñu k‚Äñ := norm_sum_le _ _
      _ = (‚àë k ‚àà range n, ‚Äñu (k + 1)‚Äñ) + ‚Äñu 0‚Äñ := sum_range_succ' _ _
      _ ‚â§ (‚àë k ‚àà range n, C * ‚Äñv (k + 1)‚Äñ) + ‚Äñu 0‚Äñ := by gcongr; apply hnorm_u
      _ ‚â§ (‚àë k ‚àà range n, C * b (k + 1)) + (C * b 0 + C * ‚Äñh‚Äñ) := by
        gcongr with k; exact (hv _ k.succ_pos).le
      _ = (‚àë k ‚àà range (n + 1), C * b k) + C * ‚Äñh‚Äñ := by rw [‚Üê add_assoc, sum_range_succ']
      _ ‚â§ (C + Œµ) * ‚Äñh‚Äñ := by
        rw [add_comm, add_mul]
        apply add_le_add_left this
theorem controlled_closure_range_of_complete {f : NormedAddGroupHom G H} {K : Type*}
    [SeminormedAddCommGroup K] {j : NormedAddGroupHom K H} (hj : ‚àÄ x, ‚Äñj x‚Äñ = ‚Äñx‚Äñ) {C Œµ : ‚Ñù}
    (hC : 0 < C) (hŒµ : 0 < Œµ) (hyp : ‚àÄ k, ‚àÉ g, f g = j k ‚àß ‚Äñg‚Äñ ‚â§ C * ‚Äñk‚Äñ) :
    f.SurjectiveOnWith j.range.topologicalClosure (C + Œµ) := by
  replace hyp : ‚àÄ h ‚àà j.range, ‚àÉ g, f g = h ‚àß ‚Äñg‚Äñ ‚â§ C * ‚Äñh‚Äñ := by
    intro h h_in
    rcases (j.mem_range _).mp h_in with ‚ü®k, rfl‚ü©
    rw [hj]
    exact hyp k
  exact controlled_closure_of_complete hC hŒµ hyp