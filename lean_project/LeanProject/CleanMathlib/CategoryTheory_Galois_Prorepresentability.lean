import Mathlib.Algebra.Category.Grp.Limits
import Mathlib.CategoryTheory.CofilteredSystem
import Mathlib.CategoryTheory.Galois.Decomposition
import Mathlib.CategoryTheory.Limits.IndYoneda
import Mathlib.CategoryTheory.Limits.Preserves.Ulift
universe u‚ÇÅ u‚ÇÇ w
namespace CategoryTheory
namespace PreGaloisCategory
open Limits Functor
variable {C : Type u‚ÇÅ} [Category.{u‚ÇÇ} C] [GaloisCategory C]
structure PointedGaloisObject (F : C ‚•§ FintypeCat.{w}) : Type (max u‚ÇÅ u‚ÇÇ w) where
  obj : C
  pt : F.obj obj
  isGalois : IsGalois obj := by infer_instance
namespace PointedGaloisObject
section General
variable (F : C ‚•§ FintypeCat.{w})
attribute [instance] isGalois
instance (X : PointedGaloisObject F) : CoeDep (PointedGaloisObject F) X C where
  coe := X.obj
variable {F} in
@[ext]
structure Hom (A B : PointedGaloisObject F) where
  val : A.obj ‚ü∂ B.obj
  comp : F.map val A.pt = B.pt := by simp
attribute [simp] Hom.comp
instance : Category.{u‚ÇÇ} (PointedGaloisObject F) where
  Hom A B := Hom A B
  id A := { val := ùüô (A : C) }
  comp {A B C} f g := { val := f.val ‚â´ g.val }
instance {A B : PointedGaloisObject F} : Coe (Hom A B) (A.obj ‚ü∂ B.obj) where
  coe f := f.val
variable {F}
@[ext]
lemma hom_ext {A B : PointedGaloisObject F} {f g : A ‚ü∂ B} (h : f.val = g.val) : f = g :=
  Hom.ext h
@[simp]
lemma id_val (A : PointedGaloisObject F) : ùüô A = ùüô A.obj :=
  rfl
@[simp, reassoc]
lemma comp_val {A B C : PointedGaloisObject F} (f : A ‚ü∂ B) (g : B ‚ü∂ C) :
    (f ‚â´ g).val = f.val ‚â´ g.val :=
  rfl
variable (F)
def incl : PointedGaloisObject F ‚•§ C where
  obj := fun A ‚Ü¶ A
  map := fun ‚ü®f, _‚ü© ‚Ü¶ f
@[simp]
lemma incl_obj (A : PointedGaloisObject F) : (incl F).obj A = A :=
  rfl
@[simp]
lemma incl_map {A B : PointedGaloisObject F} (f : A ‚ü∂ B) : (incl F).map f = f.val :=
  rfl
end General
section Specialized
variable (F : C ‚•§ FintypeCat.{u‚ÇÇ})
def cocone : Cocone ((incl F).op ‚ãô coyoneda) where
  pt := F ‚ãô FintypeCat.incl
  Œπ := {
    app := fun ‚ü®A, a, _‚ü© ‚Ü¶ { app := fun X (f : (A : C) ‚ü∂ X) ‚Ü¶ F.map f a }
    naturality := fun ‚ü®A, a, _‚ü© ‚ü®B, b, _‚ü© ‚ü®f, (hf : F.map f b = a)‚ü© ‚Ü¶ by
      ext Y (g : (A : C) ‚ü∂ Y)
      suffices h : F.map g (F.map f b) = F.map g a by simpa
      rw [hf]
  }
@[simp]
lemma cocone_app (A : PointedGaloisObject F) (B : C) (f : (A : C) ‚ü∂ B) :
    ((cocone F).Œπ.app ‚ü®A‚ü©).app B f = F.map f A.pt :=
  rfl
variable [FiberFunctor F]
instance : IsCofilteredOrEmpty (PointedGaloisObject F) where
  cone_objs := fun ‚ü®A, a, _‚ü© ‚ü®B, b, _‚ü© ‚Ü¶ by
    obtain ‚ü®Z, f, z, hgal, hfz‚ü© := exists_hom_from_galois_of_fiber F (A ‚®Ø B)
      <| (fiberBinaryProductEquiv F A B).symm (a, b)
    refine ‚ü®‚ü®Z, z, hgal‚ü©, ‚ü®f ‚â´ prod.fst, ?_‚ü©, ‚ü®f ‚â´ prod.snd, ?_‚ü©, trivial‚ü©
    ¬∑ simp only [F.map_comp, hfz, FintypeCat.comp_apply, fiberBinaryProductEquiv_symm_fst_apply]
    ¬∑ simp only [F.map_comp, hfz, FintypeCat.comp_apply, fiberBinaryProductEquiv_symm_snd_apply]
  cone_maps := fun ‚ü®A, a, _‚ü© ‚ü®B, b, _‚ü© ‚ü®f, hf‚ü© ‚ü®g, hg‚ü© ‚Ü¶ by
    obtain ‚ü®Z, h, z, hgal, hhz‚ü© := exists_hom_from_galois_of_fiber F A a
    refine ‚ü®‚ü®Z, z, hgal‚ü©, ‚ü®h, hhz‚ü©, hom_ext ?_‚ü©
    apply evaluation_injective_of_isConnected F Z B z
    simp [hhz, hf, hg]
noncomputable def isColimit : IsColimit (cocone F) := by
  refine evaluationJointlyReflectsColimits _ (fun X ‚Ü¶ ?_)
  refine Types.FilteredColimit.isColimitOf _ _ ?_ ?_
  ¬∑ intro (x : F.obj X)
    obtain ‚ü®Y, i, y, h1, _, _‚ü© := fiber_in_connected_component F X x
    obtain ‚ü®Z, f, z, hgal, hfz‚ü© := exists_hom_from_galois_of_fiber F Y y
    refine ‚ü®‚ü®Z, z, hgal‚ü©, f ‚â´ i, ?_‚ü©
    simp only [mapCocone_Œπ_app, evaluation_obj_map, cocone_app, map_comp,
      ‚Üê h1, FintypeCat.comp_apply, hfz]
  ¬∑ intro ‚ü®A, a, _‚ü© ‚ü®B, b, _‚ü© (u : (A : C) ‚ü∂ X) (v : (B : C) ‚ü∂ X) (h : F.map u a = F.map v b)
    obtain ‚ü®‚ü®Z, z, _‚ü©, ‚ü®f, hf‚ü©, ‚ü®g, hg‚ü©, _‚ü© :=
      IsFilteredOrEmpty.cocone_objs (C := (PointedGaloisObject F)·µí·µñ)
        ‚ü®{ obj := A, pt := a}‚ü© ‚ü®{obj := B, pt := b}‚ü©
    refine ‚ü®‚ü®{ obj := Z, pt := z }‚ü©, ‚ü®f, hf‚ü©, ‚ü®g, hg‚ü©, ?_‚ü©
    apply evaluation_injective_of_isConnected F Z X z
    change F.map (f ‚â´ u) z = F.map (g ‚â´ v) z
    rw [map_comp, FintypeCat.comp_apply, hf, map_comp, FintypeCat.comp_apply, hg, h]
instance : HasColimit ((incl F).op ‚ãô coyoneda) where
  exists_colimit := ‚ü®cocone F, isColimit F‚ü©
end Specialized
end PointedGaloisObject
open PointedGaloisObject
section Specialized
variable (F : C ‚•§ FintypeCat.{u‚ÇÇ})
@[simps]
noncomputable def autGaloisSystem : PointedGaloisObject F ‚•§ Grp.{u‚ÇÇ} where
  obj := fun A ‚Ü¶ Grp.of <| Aut (A : C)
  map := fun {A B} f ‚Ü¶ (autMapHom f : Aut (A : C) ‚Üí* Aut (B : C))
  map_id := fun A ‚Ü¶ by
    ext (œÉ : Aut A.obj)
    simp
  map_comp {A B C} f g := by
    ext (œÉ : Aut A.obj)
    simp
noncomputable def AutGalois : Type (max u‚ÇÅ u‚ÇÇ) :=
  (autGaloisSystem F ‚ãô forget _).sections
noncomputable instance : Group (AutGalois F) :=
  inferInstanceAs <| Group (autGaloisSystem F ‚ãô forget _).sections
noncomputable def AutGalois.œÄ (A : PointedGaloisObject F) : AutGalois F ‚Üí* Aut (A : C) :=
  Grp.sectionsœÄMonoidHom (autGaloisSystem F) A
lemma AutGalois.œÄ_apply (A : PointedGaloisObject F) (x : AutGalois F) :
    AutGalois.œÄ F A x = x.val A :=
  rfl
lemma autGaloisSystem_map_surjective ‚¶ÉA B : PointedGaloisObject F‚¶Ñ (f : A ‚ü∂ B) :
    Function.Surjective ((autGaloisSystem F).map f) := by
  intro (œÜ : Aut B.obj)
  obtain ‚ü®œà, hœà‚ü© := autMap_surjective_of_isGalois f.val œÜ
  use œà
  simp only [autGaloisSystem_map]
  exact hœà
lemma AutGalois.ext {f g : AutGalois F}
    (h : ‚àÄ (A : PointedGaloisObject F), AutGalois.œÄ F A f = AutGalois.œÄ F A g) : f = g := by
  dsimp only [AutGalois]
  ext A
  exact h A
variable [FiberFunctor F]
theorem AutGalois.œÄ_surjective (A : PointedGaloisObject F) :
    Function.Surjective (AutGalois.œÄ F A) := fun (œÉ : Aut A.obj) ‚Ü¶ by
  have (i : PointedGaloisObject F) : Finite ((autGaloisSystem F ‚ãô forget _).obj i) :=
    inferInstanceAs <| Finite (Aut (i.obj))
  exact eval_section_surjective_of_surjective
    (autGaloisSystem F ‚ãô forget _) (autGaloisSystem_map_surjective F) A œÉ
section EndAutGaloisIsomorphism
local notation "F'" => F ‚ãô FintypeCat.incl
noncomputable def endEquivSectionsFibers : End F ‚âÉ (incl F ‚ãô F').sections :=
  let i1 : End F ‚âÉ End F' :=
    (FullyFaithful.whiskeringRight (FullyFaithful.ofFullyFaithful FintypeCat.incl) C).homEquiv
  let i2 : End F' ‚âÖ (colimit ((incl F).op ‚ãô coyoneda) ‚ü∂ F') :=
    (yoneda.obj (F ‚ãô FintypeCat.incl)).mapIso (colimit.isoColimitCocone ‚ü®cocone F, isColimit F‚ü©).op
  let i3 : (colimit ((incl F).op ‚ãô coyoneda) ‚ü∂ F') ‚âÖ limit ((incl F ‚ãô F') ‚ãô uliftFunctor.{u‚ÇÅ}) :=
    colimitCoyonedaHomIsoLimit' (incl F) F'
  let i4 : limit (incl F ‚ãô F' ‚ãô uliftFunctor.{u‚ÇÅ}) ‚âÉ ((incl F ‚ãô F') ‚ãô uliftFunctor.{u‚ÇÅ}).sections :=
    Types.limitEquivSections (incl F ‚ãô (F ‚ãô FintypeCat.incl) ‚ãô uliftFunctor.{u‚ÇÅ, u‚ÇÇ})
  let i5 : ((incl F ‚ãô F') ‚ãô uliftFunctor.{u‚ÇÅ}).sections ‚âÉ (incl F ‚ãô F').sections :=
    (Types.sectionsEquiv (incl F ‚ãô F')).symm
  i1.trans <| i2.toEquiv.trans <| i3.toEquiv.trans <| i4.trans i5
@[simp]
lemma endEquivSectionsFibers_œÄ (f : End F) (A : PointedGaloisObject F) :
    (endEquivSectionsFibers F f).val A = f.app A A.pt := by
  dsimp [endEquivSectionsFibers, Types.sectionsEquiv]
  erw [Types.limitEquivSections_apply]
  simp only [colimitCoyonedaHomIsoLimit'_œÄ_apply, incl_obj, comp_obj, FintypeCat.incl_obj, op_obj,
    FunctorToTypes.comp]
  change (((FullyFaithful.whiskeringRight (FullyFaithful.ofFullyFaithful
      FintypeCat.incl) C).homEquiv) f).app A
    (((colimit.Œπ _ _) ‚â´ (colimit.isoColimitCocone ‚ü®cocone F, isColimit F‚ü©).hom).app
      A _) = f.app A A.pt
  simp
  rfl
noncomputable def autIsoFibers :
    autGaloisSystem F ‚ãô forget Grp ‚âÖ incl F ‚ãô F' :=
  NatIso.ofComponents (fun A ‚Ü¶ ((evaluationEquivOfIsGalois F A A.pt).toIso))
    (fun {A B} f ‚Ü¶ by
      ext (œÜ : Aut A.obj)
      dsimp
      erw [evaluationEquivOfIsGalois_apply, evaluationEquivOfIsGalois_apply]
      simp [-Hom.comp, ‚Üê f.comp])
lemma autIsoFibers_inv_app (A : PointedGaloisObject F) (b : F.obj A) :
    (autIsoFibers F).inv.app A b = (evaluationEquivOfIsGalois F A A.pt).symm b :=
  rfl
noncomputable def endEquivAutGalois : End F ‚âÉ AutGalois F :=
  let e1 := endEquivSectionsFibers F
  let e2 := ((Functor.sectionsFunctor _).mapIso (autIsoFibers F).symm).toEquiv
  e1.trans e2
lemma endEquivAutGalois_œÄ (f : End F) (A : PointedGaloisObject F) :
    F.map (AutGalois.œÄ F A (endEquivAutGalois F f)).hom A.pt = f.app A A.pt := by
  dsimp [endEquivAutGalois, AutGalois.œÄ_apply]
  change F.map ((((sectionsFunctor _).map (autIsoFibers F).inv) _).val A).hom A.pt = _
  dsimp [autIsoFibers]
  simp only [endEquivSectionsFibers_œÄ]
  erw [evaluationEquivOfIsGalois_symm_fiber]
@[simp]
theorem endEquivAutGalois_mul (f g : End F) :
    (endEquivAutGalois F) (g ‚â´ f) = (endEquivAutGalois F g) * (endEquivAutGalois F f) := by
  refine AutGalois.ext F (fun A ‚Ü¶ evaluation_aut_injective_of_isConnected F A A.pt ?_)
  simp only [map_mul, endEquivAutGalois_œÄ, Aut.Aut_mul_def, NatTrans.comp_app, Iso.trans_hom]
  simp only [map_comp, FintypeCat.comp_apply, endEquivAutGalois_œÄ]
  change f.app A (g.app A A.pt) =
    (f.app A ‚â´ F.map ((AutGalois.œÄ F A) ((endEquivAutGalois F) g)).hom) A.pt
  rw [‚Üê f.naturality, FintypeCat.comp_apply, endEquivAutGalois_œÄ]
noncomputable def endMulEquivAutGalois : End F ‚âÉ* (AutGalois F)·µê·µí·µñ :=
  MulEquiv.mk (Equiv.trans (endEquivAutGalois F) MulOpposite.opEquiv) (by simp)
lemma endMulEquivAutGalois_pi (f : End F) (A : PointedGaloisObject F) :
    F.map (AutGalois.œÄ F A (endMulEquivAutGalois F f).unop).hom A.2 = f.app A A.pt :=
  endEquivAutGalois_œÄ F f A
theorem FibreFunctor.end_isUnit (f : End F) : IsUnit f :=
  (isUnit_map_iff (endMulEquivAutGalois F) _).mp
    (Group.isUnit ((endMulEquivAutGalois F) f))
instance FibreFunctor.end_isIso (f : End F) : IsIso f := by
  rw [‚Üê isUnit_iff_isIso]
  exact FibreFunctor.end_isUnit F f
noncomputable def autMulEquivAutGalois : Aut F ‚âÉ* (AutGalois F)·µê·µí·µñ where
  toFun := MonoidHom.comp (endMulEquivAutGalois F) (Aut.toEnd F)
  invFun t := asIso ((endMulEquivAutGalois F).symm t)
  left_inv t := by
    simp only [MonoidHom.coe_comp, MonoidHom.coe_coe, Function.comp_apply,
      MulEquiv.symm_apply_apply]
    exact Aut.ext rfl
  right_inv t := by
    simp only [MonoidHom.coe_comp, MonoidHom.coe_coe, Function.comp_apply, Aut.toEnd_apply]
    exact (MulEquiv.eq_symm_apply (endMulEquivAutGalois F)).mp rfl
  map_mul' := by simp [map_mul]
lemma autMulEquivAutGalois_œÄ (f : Aut F) (A : C) [IsGalois A] (a : F.obj A) :
    F.map (AutGalois.œÄ F { obj := A, pt := a } (autMulEquivAutGalois F f).unop).hom a =
      f.hom.app A a := by
  dsimp [autMulEquivAutGalois, endMulEquivAutGalois]
  rw [endEquivAutGalois_œÄ]
  rfl
@[simp]
lemma autMulEquivAutGalois_symm_app (x : AutGalois F) (A : C) [IsGalois A] (a : F.obj A) :
    ((autMulEquivAutGalois F).symm ‚ü®x‚ü©).hom.app A a =
      F.map (AutGalois.œÄ F ‚ü®A, a, inferInstance‚ü© x).hom a := by
  rw [‚Üê autMulEquivAutGalois_œÄ, MulEquiv.apply_symm_apply]
  rfl
end EndAutGaloisIsomorphism
theorem FiberFunctor.isPretransitive_of_isGalois (X : C) [IsGalois X] :
    MulAction.IsPretransitive (Aut F) (F.obj X) := by
  refine ‚ü®fun x y ‚Ü¶ ?_‚ü©
  obtain ‚ü®(œÜ : Aut X), h‚ü© := MulAction.IsPretransitive.exists_smul_eq (M := Aut X) x y
  obtain ‚ü®a, ha‚ü© := AutGalois.œÄ_surjective F ‚ü®X, x, inferInstance‚ü© œÜ
  use (autMulEquivAutGalois F).symm ‚ü®a‚ü©
  simpa [mulAction_def, ha]
private instance FiberFunctor.isPretransitive_of_isConnected' (X : C) [IsConnected X] :
    MulAction.IsPretransitive (Aut F) (F.obj X) := by
  obtain ‚ü®A, f, hgal‚ü© := exists_hom_from_galois_of_connected F X
  have hs : Function.Surjective (F.map f) := surjective_of_nonempty_fiber_of_isConnected F f
  refine ‚ü®fun x y ‚Ü¶ ?_‚ü©
  obtain ‚ü®a, ha‚ü© := hs x
  obtain ‚ü®b, hb‚ü© := hs y
  have : MulAction.IsPretransitive (Aut F) (F.obj A) := isPretransitive_of_isGalois F A
  obtain ‚ü®œÉ, (hœÉ : œÉ.hom.app A a = b)‚ü© := MulAction.exists_smul_eq (Aut F) a b
  use œÉ
  rw [‚Üê ha, ‚Üê hb]
  show (F.map f ‚â´ œÉ.hom.app X) a = F.map f b
  rw [œÉ.hom.naturality, FintypeCat.comp_apply, hœÉ]
end Specialized
section General
variable (F : C ‚•§ FintypeCat.{w}) [FiberFunctor F]
instance FiberFunctor.isPretransitive_of_isConnected (X : C) [IsConnected X] :
    MulAction.IsPretransitive (Aut F) (F.obj X) where
  exists_smul_eq x y := by
    let F' : C ‚•§ FintypeCat.{u‚ÇÇ} := F ‚ãô FintypeCat.uSwitch.{w, u‚ÇÇ}
    letI : FiberFunctor F' := FiberFunctor.comp_right _
    let e (Y : C) : F'.obj Y ‚âÉ F.obj Y := (F.obj Y).uSwitchEquiv
    set x' : F'.obj X := (e X).symm x with hx'
    set y' : F'.obj X := (e X).symm y with hy'
    obtain ‚ü®g', (hg' : g'.hom.app X x' = y')‚ü© := MulAction.exists_smul_eq (Aut F') x' y'
    let gapp (Y : C) : F.obj Y ‚âÖ F.obj Y := FintypeCat.equivEquivIso <|
      (e Y).symm.trans <| (FintypeCat.equivEquivIso.symm (g'.app Y)).trans (e Y)
    let g : F ‚âÖ F := NatIso.ofComponents gapp <| fun {X Y} f ‚Ü¶ by
      ext x
      simp only [FintypeCat.comp_apply, FintypeCat.equivEquivIso_apply_hom,
        Equiv.trans_apply, FintypeCat.equivEquivIso_symm_apply_apply, Iso.app_hom, gapp, e]
      erw [FintypeCat.uSwitchEquiv_naturality (F.map f)]
      rw [‚Üê Functor.comp_map, ‚Üê FunctorToFintypeCat.naturality]
      simp only [comp_obj, Functor.comp_map, F']
      rw [FintypeCat.uSwitchEquiv_symm_naturality (F.map f)]
    refine ‚ü®g, show (gapp X).hom x = y from ?_‚ü©
    simp only [FintypeCat.equivEquivIso_apply_hom, Equiv.trans_apply,
      FintypeCat.equivEquivIso_symm_apply_apply, Iso.app_hom, gapp]
    rw [‚Üê hx', hg', hy', Equiv.apply_symm_apply]
end General
end PreGaloisCategory
end CategoryTheory