import Mathlib.Algebra.Order.AbsoluteValue
import Mathlib.Algebra.Ring.Prod
import Mathlib.Algebra.Ring.Subring.Basic
import Mathlib.Topology.Algebra.Group.Basic
assert_not_exists Cardinal
open Set Filter TopologicalSpace Function Topology Filter
section TopologicalSemiring
variable (Œ± : Type*)
class TopologicalSemiring [TopologicalSpace Œ±] [NonUnitalNonAssocSemiring Œ±] extends
  ContinuousAdd Œ±, ContinuousMul Œ± : Prop
class TopologicalRing [TopologicalSpace Œ±] [NonUnitalNonAssocRing Œ±] extends TopologicalSemiring Œ±,
  ContinuousNeg Œ± : Prop
variable {Œ±}
theorem TopologicalSemiring.continuousNeg_of_mul [TopologicalSpace Œ±] [NonAssocRing Œ±]
    [ContinuousMul Œ±] : ContinuousNeg Œ± where
  continuous_neg := by
    simpa using (continuous_const.mul continuous_id : Continuous fun x : Œ± => -1 * x)
theorem TopologicalSemiring.toTopologicalRing [TopologicalSpace Œ±] [NonAssocRing Œ±]
    (_ : TopologicalSemiring Œ±) : TopologicalRing Œ± where
  toContinuousNeg := TopologicalSemiring.continuousNeg_of_mul
instance (priority := 100) TopologicalRing.to_topologicalAddGroup [NonUnitalNonAssocRing Œ±]
    [TopologicalSpace Œ±] [TopologicalRing Œ±] : TopologicalAddGroup Œ± := ‚ü®‚ü©
instance (priority := 50) DiscreteTopology.topologicalSemiring [TopologicalSpace Œ±]
    [NonUnitalNonAssocSemiring Œ±] [DiscreteTopology Œ±] : TopologicalSemiring Œ± := ‚ü®‚ü©
instance (priority := 50) DiscreteTopology.topologicalRing [TopologicalSpace Œ±]
    [NonUnitalNonAssocRing Œ±] [DiscreteTopology Œ±] : TopologicalRing Œ± := ‚ü®‚ü©
section
namespace NonUnitalSubsemiring
variable [TopologicalSpace Œ±] [NonUnitalSemiring Œ±] [TopologicalSemiring Œ±]
instance instTopologicalSemiring (S : NonUnitalSubsemiring Œ±) : TopologicalSemiring S :=
  { S.toSubsemigroup.continuousMul, S.toAddSubmonoid.continuousAdd with }
def topologicalClosure (s : NonUnitalSubsemiring Œ±) : NonUnitalSubsemiring Œ± :=
  { s.toSubsemigroup.topologicalClosure, s.toAddSubmonoid.topologicalClosure with
    carrier := _root_.closure (s : Set Œ±) }
@[simp]
theorem topologicalClosure_coe (s : NonUnitalSubsemiring Œ±) :
    (s.topologicalClosure : Set Œ±) = _root_.closure (s : Set Œ±) :=
  rfl
theorem le_topologicalClosure (s : NonUnitalSubsemiring Œ±) : s ‚â§ s.topologicalClosure :=
  _root_.subset_closure
theorem isClosed_topologicalClosure (s : NonUnitalSubsemiring Œ±) :
    IsClosed (s.topologicalClosure : Set Œ±) := isClosed_closure
theorem topologicalClosure_minimal (s : NonUnitalSubsemiring Œ±) {t : NonUnitalSubsemiring Œ±}
    (h : s ‚â§ t) (ht : IsClosed (t : Set Œ±)) : s.topologicalClosure ‚â§ t :=
  closure_minimal h ht
abbrev nonUnitalCommSemiringTopologicalClosure [T2Space Œ±] (s : NonUnitalSubsemiring Œ±)
    (hs : ‚àÄ x y : s, x * y = y * x) : NonUnitalCommSemiring s.topologicalClosure :=
  { NonUnitalSubsemiringClass.toNonUnitalSemiring s.topologicalClosure,
    s.toSubsemigroup.commSemigroupTopologicalClosure hs with }
end NonUnitalSubsemiring
variable [TopologicalSpace Œ±] [Semiring Œ±] [TopologicalSemiring Œ±]
instance : TopologicalSemiring (ULift Œ±) where
namespace Subsemiring
instance topologicalSemiring (S : Subsemiring Œ±) : TopologicalSemiring S :=
  { S.toSubmonoid.continuousMul, S.toAddSubmonoid.continuousAdd with }
end Subsemiring
def Subsemiring.topologicalClosure (s : Subsemiring Œ±) : Subsemiring Œ± :=
  { s.toSubmonoid.topologicalClosure, s.toAddSubmonoid.topologicalClosure with
    carrier := _root_.closure (s : Set Œ±) }
@[simp]
theorem Subsemiring.topologicalClosure_coe (s : Subsemiring Œ±) :
    (s.topologicalClosure : Set Œ±) = _root_.closure (s : Set Œ±) :=
  rfl
theorem Subsemiring.le_topologicalClosure (s : Subsemiring Œ±) : s ‚â§ s.topologicalClosure :=
  _root_.subset_closure
theorem Subsemiring.isClosed_topologicalClosure (s : Subsemiring Œ±) :
    IsClosed (s.topologicalClosure : Set Œ±) := isClosed_closure
theorem Subsemiring.topologicalClosure_minimal (s : Subsemiring Œ±) {t : Subsemiring Œ±} (h : s ‚â§ t)
    (ht : IsClosed (t : Set Œ±)) : s.topologicalClosure ‚â§ t :=
  closure_minimal h ht
abbrev Subsemiring.commSemiringTopologicalClosure [T2Space Œ±] (s : Subsemiring Œ±)
    (hs : ‚àÄ x y : s, x * y = y * x) : CommSemiring s.topologicalClosure :=
  { s.topologicalClosure.toSemiring, s.toSubmonoid.commMonoidTopologicalClosure hs with }
end
section
variable {Œ≤ : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
instance [NonUnitalNonAssocSemiring Œ±] [NonUnitalNonAssocSemiring Œ≤] [TopologicalSemiring Œ±]
    [TopologicalSemiring Œ≤] : TopologicalSemiring (Œ± √ó Œ≤) where
instance [NonUnitalNonAssocRing Œ±] [NonUnitalNonAssocRing Œ≤] [TopologicalRing Œ±]
    [TopologicalRing Œ≤] : TopologicalRing (Œ± √ó Œ≤) where
end
#adaptation_note 
instance {Œ≤ : Type*} {C : Œ≤ ‚Üí Type*} [‚àÄ b, TopologicalSpace (C b)]
    [‚àÄ b, NonUnitalNonAssocSemiring (C b)] [‚àÄ b, TopologicalSemiring (C b)] :
    ContinuousAdd ((b : Œ≤) ‚Üí C b) :=
  inferInstance
instance Pi.instTopologicalSemiring {Œ≤ : Type*} {C : Œ≤ ‚Üí Type*} [‚àÄ b, TopologicalSpace (C b)]
    [‚àÄ b, NonUnitalNonAssocSemiring (C b)] [‚àÄ b, TopologicalSemiring (C b)] :
    TopologicalSemiring (‚àÄ b, C b) where
instance Pi.instTopologicalRing {Œ≤ : Type*} {C : Œ≤ ‚Üí Type*} [‚àÄ b, TopologicalSpace (C b)]
    [‚àÄ b, NonUnitalNonAssocRing (C b)] [‚àÄ b, TopologicalRing (C b)] :
    TopologicalRing (‚àÄ b, C b) := ‚ü®‚ü©
section MulOpposite
open MulOpposite
instance [NonUnitalNonAssocSemiring Œ±] [TopologicalSpace Œ±] [ContinuousAdd Œ±] :
    ContinuousAdd Œ±·µê·µí·µñ :=
  continuousAdd_induced opAddEquiv.symm
instance [NonUnitalNonAssocSemiring Œ±] [TopologicalSpace Œ±] [TopologicalSemiring Œ±] :
    TopologicalSemiring Œ±·µê·µí·µñ := ‚ü®‚ü©
instance [NonUnitalNonAssocRing Œ±] [TopologicalSpace Œ±] [ContinuousNeg Œ±] : ContinuousNeg Œ±·µê·µí·µñ :=
  opHomeomorph.symm.isInducing.continuousNeg fun _ => rfl
instance [NonUnitalNonAssocRing Œ±] [TopologicalSpace Œ±] [TopologicalRing Œ±] :
    TopologicalRing Œ±·µê·µí·µñ := ‚ü®‚ü©
end MulOpposite
section AddOpposite
open AddOpposite
instance [NonUnitalNonAssocSemiring Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] :
    ContinuousMul Œ±·µÉ·µí·µñ :=
  continuousMul_induced opMulEquiv.symm
instance [NonUnitalNonAssocSemiring Œ±] [TopologicalSpace Œ±] [TopologicalSemiring Œ±] :
    TopologicalSemiring Œ±·µÉ·µí·µñ := ‚ü®‚ü©
instance [NonUnitalNonAssocRing Œ±] [TopologicalSpace Œ±] [TopologicalRing Œ±] :
    TopologicalRing Œ±·µÉ·µí·µñ := ‚ü®‚ü©
end AddOpposite
section
variable {R : Type*} [NonUnitalNonAssocRing R] [TopologicalSpace R]
theorem TopologicalRing.of_addGroup_of_nhds_zero [TopologicalAddGroup R]
    (hmul : Tendsto (uncurry ((¬∑ * ¬∑) : R ‚Üí R ‚Üí R)) (ùìù 0 √óÀ¢ ùìù 0) <| ùìù 0)
    (hmul_left : ‚àÄ x‚ÇÄ : R, Tendsto (fun x : R => x‚ÇÄ * x) (ùìù 0) <| ùìù 0)
    (hmul_right : ‚àÄ x‚ÇÄ : R, Tendsto (fun x : R => x * x‚ÇÄ) (ùìù 0) <| ùìù 0) : TopologicalRing R where
  continuous_mul := by
    refine continuous_of_continuousAt_zero‚ÇÇ (AddMonoidHom.mul (R := R)) ?_ ?_ ?_ <;>
      simpa only [ContinuousAt, mul_zero, zero_mul, nhds_prod_eq, AddMonoidHom.mul_apply]
theorem TopologicalRing.of_nhds_zero
    (hadd : Tendsto (uncurry ((¬∑ + ¬∑) : R ‚Üí R ‚Üí R)) (ùìù 0 √óÀ¢ ùìù 0) <| ùìù 0)
    (hneg : Tendsto (fun x => -x : R ‚Üí R) (ùìù 0) (ùìù 0))
    (hmul : Tendsto (uncurry ((¬∑ * ¬∑) : R ‚Üí R ‚Üí R)) (ùìù 0 √óÀ¢ ùìù 0) <| ùìù 0)
    (hmul_left : ‚àÄ x‚ÇÄ : R, Tendsto (fun x : R => x‚ÇÄ * x) (ùìù 0) <| ùìù 0)
    (hmul_right : ‚àÄ x‚ÇÄ : R, Tendsto (fun x : R => x * x‚ÇÄ) (ùìù 0) <| ùìù 0)
    (hleft : ‚àÄ x‚ÇÄ : R, ùìù x‚ÇÄ = map (fun x => x‚ÇÄ + x) (ùìù 0)) : TopologicalRing R :=
  have := TopologicalAddGroup.of_comm_of_nhds_zero hadd hneg hleft
  TopologicalRing.of_addGroup_of_nhds_zero hmul hmul_left hmul_right
end
variable [TopologicalSpace Œ±]
section
variable [NonUnitalNonAssocRing Œ±] [TopologicalRing Œ±]
instance : TopologicalRing (ULift Œ±) where
theorem mulLeft_continuous (x : Œ±) : Continuous (AddMonoidHom.mulLeft x) :=
  continuous_const.mul continuous_id
theorem mulRight_continuous (x : Œ±) : Continuous (AddMonoidHom.mulRight x) :=
  continuous_id.mul continuous_const
end
namespace NonUnitalSubring
variable [NonUnitalRing Œ±] [TopologicalRing Œ±]
instance instTopologicalRing (S : NonUnitalSubring Œ±) : TopologicalRing S :=
  { S.toSubsemigroup.continuousMul, inferInstanceAs (TopologicalAddGroup S.toAddSubgroup) with }
def topologicalClosure (S : NonUnitalSubring Œ±) : NonUnitalSubring Œ± :=
  { S.toSubsemigroup.topologicalClosure, S.toAddSubgroup.topologicalClosure with
    carrier := _root_.closure (S : Set Œ±) }
theorem le_topologicalClosure (s : NonUnitalSubring Œ±) : s ‚â§ s.topologicalClosure :=
  _root_.subset_closure
theorem isClosed_topologicalClosure (s : NonUnitalSubring Œ±) :
    IsClosed (s.topologicalClosure : Set Œ±) := isClosed_closure
theorem topologicalClosure_minimal (s : NonUnitalSubring Œ±) {t : NonUnitalSubring Œ±} (h : s ‚â§ t)
    (ht : IsClosed (t : Set Œ±)) : s.topologicalClosure ‚â§ t :=
  closure_minimal h ht
abbrev nonUnitalCommRingTopologicalClosure [T2Space Œ±] (s : NonUnitalSubring Œ±)
    (hs : ‚àÄ x y : s, x * y = y * x) : NonUnitalCommRing s.topologicalClosure :=
  { s.topologicalClosure.toNonUnitalRing, s.toSubsemigroup.commSemigroupTopologicalClosure hs with }
end NonUnitalSubring
variable [Ring Œ±] [TopologicalRing Œ±]
instance Subring.instTopologicalRing (S : Subring Œ±) : TopologicalRing S :=
  { S.toSubmonoid.continuousMul, inferInstanceAs (TopologicalAddGroup S.toAddSubgroup) with }
def Subring.topologicalClosure (S : Subring Œ±) : Subring Œ± :=
  { S.toSubmonoid.topologicalClosure, S.toAddSubgroup.topologicalClosure with
    carrier := _root_.closure (S : Set Œ±) }
theorem Subring.le_topologicalClosure (s : Subring Œ±) : s ‚â§ s.topologicalClosure :=
  _root_.subset_closure
theorem Subring.isClosed_topologicalClosure (s : Subring Œ±) :
    IsClosed (s.topologicalClosure : Set Œ±) := isClosed_closure
theorem Subring.topologicalClosure_minimal (s : Subring Œ±) {t : Subring Œ±} (h : s ‚â§ t)
    (ht : IsClosed (t : Set Œ±)) : s.topologicalClosure ‚â§ t :=
  closure_minimal h ht
abbrev Subring.commRingTopologicalClosure [T2Space Œ±] (s : Subring Œ±)
    (hs : ‚àÄ x y : s, x * y = y * x) : CommRing s.topologicalClosure :=
  { s.topologicalClosure.toRing, s.toSubmonoid.commMonoidTopologicalClosure hs with }
end TopologicalSemiring
universe u v
structure RingTopology (Œ± : Type u) [Ring Œ±] extends TopologicalSpace Œ±, TopologicalRing Œ± : Type u
namespace RingTopology
variable {Œ± : Type*} [Ring Œ±]
instance inhabited {Œ± : Type u} [Ring Œ±] : Inhabited (RingTopology Œ±) :=
  ‚ü®let _ : TopologicalSpace Œ± := ‚ä§;
    { continuous_add := continuous_top
      continuous_mul := continuous_top
      continuous_neg := continuous_top }‚ü©
theorem toTopologicalSpace_injective :
    Injective (toTopologicalSpace : RingTopology Œ± ‚Üí TopologicalSpace Œ±) := by
  intro f g _; cases f; cases g; congr
@[ext]
theorem ext {f g : RingTopology Œ±} (h : f.IsOpen = g.IsOpen) : f = g :=
  toTopologicalSpace_injective <| TopologicalSpace.ext h
instance : PartialOrder (RingTopology Œ±) :=
  PartialOrder.lift RingTopology.toTopologicalSpace toTopologicalSpace_injective
private def def_sInf (S : Set (RingTopology Œ±)) : RingTopology Œ± :=
  let _ := sInf (toTopologicalSpace '' S)
  { toContinuousAdd := continuousAdd_sInf <| forall_mem_image.2 fun t _ =>
      let _ := t.1; t.toContinuousAdd
    toContinuousMul := continuousMul_sInf <| forall_mem_image.2 fun t _ =>
      let _ := t.1; t.toContinuousMul
    toContinuousNeg := continuousNeg_sInf <| forall_mem_image.2 fun t _ =>
      let _ := t.1; t.toContinuousNeg }
instance : CompleteSemilatticeInf (RingTopology Œ±) where
  sInf := def_sInf
  sInf_le := fun _ a haS => sInf_le (Œ± := TopologicalSpace Œ±) ‚ü®a, ‚ü®haS, rfl‚ü©‚ü©
  le_sInf := fun _ _ h => le_sInf (Œ± := TopologicalSpace Œ±) <| forall_mem_image.2 h
instance : CompleteLattice (RingTopology Œ±) :=
  completeLatticeOfCompleteSemilatticeInf _
def coinduced {Œ± Œ≤ : Type*} [t : TopologicalSpace Œ±] [Ring Œ≤] (f : Œ± ‚Üí Œ≤) : RingTopology Œ≤ :=
  sInf { b : RingTopology Œ≤ | t.coinduced f ‚â§ b.toTopologicalSpace }
theorem coinduced_continuous {Œ± Œ≤ : Type*} [t : TopologicalSpace Œ±] [Ring Œ≤] (f : Œ± ‚Üí Œ≤) :
    Continuous[t, (coinduced f).toTopologicalSpace] f :=
  continuous_sInf_rng.2 <| forall_mem_image.2 fun _ => continuous_iff_coinduced_le.2
def toAddGroupTopology (t : RingTopology Œ±) : AddGroupTopology Œ± where
  toTopologicalSpace := t.toTopologicalSpace
  toTopologicalAddGroup :=
    @TopologicalRing.to_topologicalAddGroup _ _ t.toTopologicalSpace t.toTopologicalRing
def toAddGroupTopology.orderEmbedding : OrderEmbedding (RingTopology Œ±) (AddGroupTopology Œ±) :=
  OrderEmbedding.ofMapLEIff toAddGroupTopology fun _ _ => Iff.rfl
end RingTopology
section AbsoluteValue
def AbsoluteValue.comp {R S T : Type*} [Semiring T] [Semiring R] [OrderedSemiring S]
    (v : AbsoluteValue R S) {f : T ‚Üí+* R} (hf : Function.Injective f) : AbsoluteValue T S where
  toMulHom := v.1.comp f
  nonneg' _ := v.nonneg _
  eq_zero' _ := v.eq_zero.trans (map_eq_zero_iff f hf)
  add_le' _ _ := (congr_arg v (map_add f _ _)).trans_le (v.add_le _ _)
end AbsoluteValue