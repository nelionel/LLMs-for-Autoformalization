import Mathlib.CategoryTheory.Bicategory.Coherence
import Mathlib.Tactic.CategoryTheory.BicategoricalComp
noncomputable section
universe w v u
open CategoryTheory CategoryTheory.FreeBicategory
open scoped Bicategory
variable {B : Type u} [Bicategory.{w, v} B] {a b c d : B}
namespace Mathlib.Tactic.BicategoryCoherence
class LiftHom {a b : B} (f : a ‚ü∂ b) where
  lift : of.obj a ‚ü∂ of.obj b
instance liftHomId : LiftHom (ùüô a) where lift := ùüô (of.obj a)
instance liftHomComp (f : a ‚ü∂ b) (g : b ‚ü∂ c) [LiftHom f] [LiftHom g] : LiftHom (f ‚â´ g) where
  lift := LiftHom.lift f ‚â´ LiftHom.lift g
instance (priority := 100) liftHomOf (f : a ‚ü∂ b) : LiftHom f where lift := of.map f
class LiftHom‚ÇÇ {f g : a ‚ü∂ b} [LiftHom f] [LiftHom g] (Œ∑ : f ‚ü∂ g) where
  lift : LiftHom.lift f ‚ü∂ LiftHom.lift g
instance liftHom‚ÇÇId (f : a ‚ü∂ b) [LiftHom f] : LiftHom‚ÇÇ (ùüô f) where
  lift := ùüô _
instance liftHom‚ÇÇLeftUnitorHom (f : a ‚ü∂ b) [LiftHom f] : LiftHom‚ÇÇ (Œª_ f).hom where
  lift := (Œª_ (LiftHom.lift f)).hom
instance liftHom‚ÇÇLeftUnitorInv (f : a ‚ü∂ b) [LiftHom f] : LiftHom‚ÇÇ (Œª_ f).inv where
  lift := (Œª_ (LiftHom.lift f)).inv
instance liftHom‚ÇÇRightUnitorHom (f : a ‚ü∂ b) [LiftHom f] : LiftHom‚ÇÇ (œÅ_ f).hom where
  lift := (œÅ_ (LiftHom.lift f)).hom
instance liftHom‚ÇÇRightUnitorInv (f : a ‚ü∂ b) [LiftHom f] : LiftHom‚ÇÇ (œÅ_ f).inv where
  lift := (œÅ_ (LiftHom.lift f)).inv
instance liftHom‚ÇÇAssociatorHom (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) [LiftHom f] [LiftHom g]
    [LiftHom h] : LiftHom‚ÇÇ (Œ±_ f g h).hom where
  lift := (Œ±_ (LiftHom.lift f) (LiftHom.lift g) (LiftHom.lift h)).hom
instance liftHom‚ÇÇAssociatorInv (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) [LiftHom f] [LiftHom g]
    [LiftHom h] : LiftHom‚ÇÇ (Œ±_ f g h).inv where
  lift := (Œ±_ (LiftHom.lift f) (LiftHom.lift g) (LiftHom.lift h)).inv
instance liftHom‚ÇÇComp {f g h : a ‚ü∂ b} [LiftHom f] [LiftHom g] [LiftHom h] (Œ∑ : f ‚ü∂ g) (Œ∏ : g ‚ü∂ h)
    [LiftHom‚ÇÇ Œ∑] [LiftHom‚ÇÇ Œ∏] : LiftHom‚ÇÇ (Œ∑ ‚â´ Œ∏) where
  lift := LiftHom‚ÇÇ.lift Œ∑ ‚â´ LiftHom‚ÇÇ.lift Œ∏
instance liftHom‚ÇÇWhiskerLeft (f : a ‚ü∂ b) [LiftHom f] {g h : b ‚ü∂ c} (Œ∑ : g ‚ü∂ h) [LiftHom g]
    [LiftHom h] [LiftHom‚ÇÇ Œ∑] : LiftHom‚ÇÇ (f ‚óÅ Œ∑) where
  lift := LiftHom.lift f ‚óÅ LiftHom‚ÇÇ.lift Œ∑
instance liftHom‚ÇÇWhiskerRight {f g : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) [LiftHom f] [LiftHom g] [LiftHom‚ÇÇ Œ∑]
    {h : b ‚ü∂ c} [LiftHom h] : LiftHom‚ÇÇ (Œ∑ ‚ñ∑ h) where
  lift := LiftHom‚ÇÇ.lift Œ∑ ‚ñ∑ LiftHom.lift h
open Lean Elab Tactic Meta
def exception {Œ± : Type} (g : MVarId) (msg : MessageData) : MetaM Œ± :=
  throwTacticEx `bicategorical_coherence g msg
def exception' (msg : MessageData) : TacticM Unit := do
  try
    liftMetaTactic (exception (msg := msg))
  catch _ =>
    throwError msg
set_option quotPrecheck false in
def mkLiftMap‚ÇÇLiftExpr (e : Expr) : TermElabM Expr := do
  Term.elabTerm
    (‚Üê ``((FreeBicategory.lift (Prefunctor.id _)).map‚ÇÇ (LiftHom‚ÇÇ.lift $(‚Üê Term.exprToSyntax e))))
    none
def bicategory_coherence (g : MVarId) : TermElabM Unit := g.withContext do
  withOptions (fun opts => synthInstance.maxSize.set opts
    (max 256 (synthInstance.maxSize.get opts))) do
  let thms := [``BicategoricalCoherence.iso, ``Iso.trans, ``Iso.symm, ``Iso.refl,
    ``Bicategory.whiskerRightIso, ``Bicategory.whiskerLeftIso].foldl
    (¬∑.addDeclToUnfoldCore ¬∑) {}
  let (ty, _) ‚Üê dsimp (‚Üê g.getType) (‚Üê Simp.mkContext (simpTheorems := #[thms]))
  let some (_, lhs, rhs) := (‚Üê whnfR ty).eq? | exception g "Not an equation of morphisms."
  let lift_lhs ‚Üê mkLiftMap‚ÇÇLiftExpr lhs
  let lift_rhs ‚Üê mkLiftMap‚ÇÇLiftExpr rhs
  let g‚ÇÅ ‚Üê g.change (‚Üê mkEq lift_lhs lift_rhs)
  let [g‚ÇÇ] ‚Üê g‚ÇÅ.applyConst ``congrArg
    | exception g "congrArg failed in coherence"
  let [] ‚Üê g‚ÇÇ.applyConst ``Subsingleton.elim
    | exception g "This shouldn't happen; Subsingleton.elim does not create goals."
elab "bicategory_coherence" : tactic => do bicategory_coherence (‚Üê getMainGoal)
open Lean.Parser.Tactic
syntax (name := whisker_simps) "whisker_simps" optConfig : tactic
@[inherit_doc whisker_simps]
elab_rules : tactic
| `(tactic| whisker_simps $cfg) => do
  evalTactic (‚Üê `(tactic|
    simp $cfg only [Category.assoc,
      Bicategory.comp_whiskerLeft, Bicategory.id_whiskerLeft,
      Bicategory.whiskerRight_comp, Bicategory.whiskerRight_id,
      Bicategory.whiskerLeft_comp, Bicategory.whiskerLeft_id,
      Bicategory.comp_whiskerRight, Bicategory.id_whiskerRight, Bicategory.whisker_assoc]
    ))
@[nolint unusedArguments]
theorem assoc_liftHom‚ÇÇ {f g h i : a ‚ü∂ b} [LiftHom f] [LiftHom g] [LiftHom h]
    (Œ∑ : f ‚ü∂ g) (Œ∏ : g ‚ü∂ h) (Œπ : h ‚ü∂ i) [LiftHom‚ÇÇ Œ∑] [LiftHom‚ÇÇ Œ∏] : Œ∑ ‚â´ Œ∏ ‚â´ Œπ = (Œ∑ ‚â´ Œ∏) ‚â´ Œπ :=
  (Category.assoc _ _ _).symm
end Mathlib.Tactic.BicategoryCoherence