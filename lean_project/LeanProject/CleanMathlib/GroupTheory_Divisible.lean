import Mathlib.Algebra.Group.ULift
import Mathlib.Algebra.Group.Subgroup.Pointwise
import Mathlib.Algebra.Module.NatInt
import Mathlib.GroupTheory.QuotientGroup.Defs
import Mathlib.Tactic.NormNum.Eq
open Pointwise
section AddMonoid
variable (A Œ± : Type*) [AddMonoid A] [SMul Œ± A] [Zero Œ±]
class DivisibleBy where
  div : A ‚Üí Œ± ‚Üí A
  div_zero : ‚àÄ a, div a 0 = 0
  div_cancel : ‚àÄ {n : Œ±} (a : A), n ‚â† 0 ‚Üí n ‚Ä¢ div a n = a
end AddMonoid
section Monoid
variable (A Œ± : Type*) [Monoid A] [Pow A Œ±] [Zero Œ±]
@[to_additive]
class RootableBy where
  root : A ‚Üí Œ± ‚Üí A
  root_zero : ‚àÄ a, root a 0 = 1
  root_cancel : ‚àÄ {n : Œ±} (a : A), n ‚â† 0 ‚Üí root a n ^ n = a
@[to_additive smul_right_surj_of_divisibleBy]
theorem pow_left_surj_of_rootableBy [RootableBy A Œ±] {n : Œ±} (hn : n ‚â† 0) :
    Function.Surjective (fun a => a ^ n : A ‚Üí A) := fun x =>
  ‚ü®RootableBy.root x n, RootableBy.root_cancel _ hn‚ü©
@[to_additive divisibleByOfSMulRightSurj
      "An `AddMonoid A` is `Œ±`-divisible iff `n ‚Ä¢ _` is a surjective function, i.e. the constructive
      version implies the textbook approach."]
noncomputable def rootableByOfPowLeftSurj
    (H : ‚àÄ {n : Œ±}, n ‚â† 0 ‚Üí Function.Surjective (fun a => a ^ n : A ‚Üí A)) : RootableBy A Œ± where
  root a n := @dite _ (n = 0) (Classical.dec _) (fun _ => (1 : A)) fun hn => (H hn a).choose
  root_zero _ := by classical exact dif_pos rfl
  root_cancel a hn := by
    dsimp only
    rw [dif_neg hn]
    exact (H hn a).choose_spec
section Pi
variable {Œπ Œ≤ : Type*} (B : Œπ ‚Üí Type*) [‚àÄ i : Œπ, Pow (B i) Œ≤]
variable [Zero Œ≤] [‚àÄ i : Œπ, Monoid (B i)] [‚àÄ i, RootableBy (B i) Œ≤]
@[to_additive]
instance Pi.rootableBy : RootableBy (‚àÄ i, B i) Œ≤ where
  root x n i := RootableBy.root (x i) n
  root_zero _x := funext fun _i => RootableBy.root_zero _
  root_cancel _x hn := funext fun _i => RootableBy.root_cancel _ hn
end Pi
section Prod
variable {Œ≤ B B' : Type*} [Pow B Œ≤] [Pow B' Œ≤]
variable [Zero Œ≤] [Monoid B] [Monoid B'] [RootableBy B Œ≤] [RootableBy B' Œ≤]
@[to_additive]
instance Prod.rootableBy : RootableBy (B √ó B') Œ≤ where
  root p n := (RootableBy.root p.1 n, RootableBy.root p.2 n)
  root_zero _p := Prod.ext (RootableBy.root_zero _) (RootableBy.root_zero _)
  root_cancel _p hn := Prod.ext (RootableBy.root_cancel _ hn) (RootableBy.root_cancel _ hn)
end Prod
section ULift
@[to_additive]
instance ULift.instRootableBy [RootableBy A Œ±] : RootableBy (ULift A) Œ± where
  root x a := ULift.up <| RootableBy.root x.down a
  root_zero x := ULift.ext _ _ <| RootableBy.root_zero x.down
  root_cancel _ h := ULift.ext _ _ <| RootableBy.root_cancel _ h
end ULift
end Monoid
namespace AddCommGroup
variable (A : Type*) [AddCommGroup A]
theorem smul_top_eq_top_of_divisibleBy_int [DivisibleBy A ‚Ñ§] {n : ‚Ñ§} (hn : n ‚â† 0) :
    n ‚Ä¢ (‚ä§ : AddSubgroup A) = ‚ä§ :=
  AddSubgroup.map_top_of_surjective _ fun a => ‚ü®DivisibleBy.div a n, DivisibleBy.div_cancel _ hn‚ü©
noncomputable def divisibleByIntOfSMulTopEqTop
    (H : ‚àÄ {n : ‚Ñ§} (_hn : n ‚â† 0), n ‚Ä¢ (‚ä§ : AddSubgroup A) = ‚ä§) : DivisibleBy A ‚Ñ§ where
  div a n :=
    if hn : n = 0 then 0 else (show a ‚àà n ‚Ä¢ (‚ä§ : AddSubgroup A) by rw [H hn]; trivial).choose
  div_zero _ := dif_pos rfl
  div_cancel a hn := by
    simp_rw [dif_neg hn]
    generalize_proofs h1
    exact h1.choose_spec.2
end AddCommGroup
instance (priority := 100) divisibleByIntOfCharZero {ùïú} [DivisionRing ùïú] [CharZero ùïú] :
    DivisibleBy ùïú ‚Ñ§ where
  div q n := q / n
  div_zero q := by norm_num
  div_cancel {n} q hn := by
    rw [zsmul_eq_mul, (Int.cast_commute n _).eq, div_mul_cancel‚ÇÄ q (Int.cast_ne_zero.mpr hn)]
namespace Group
variable (A : Type*) [Group A]
open Int in
@[to_additive "An additive group is `‚Ñ§`-divisible if it is `‚Ñï`-divisible."]
def rootableByIntOfRootableByNat [RootableBy A ‚Ñï] : RootableBy A ‚Ñ§ where
  root a z :=
    match z with
    | (n : ‚Ñï) => RootableBy.root a n
    | -[n+1] => (RootableBy.root a (n + 1))‚Åª¬π
  root_zero a := RootableBy.root_zero a
  root_cancel {n} a hn := by
    induction n
    ¬∑ change RootableBy.root a _ ^ _ = a
      norm_num
      rw [RootableBy.root_cancel]
      rw [Int.ofNat_eq_coe] at hn
      exact mod_cast hn
    ¬∑ change (RootableBy.root a _)‚Åª¬π ^ _ = a
      norm_num
      rw [RootableBy.root_cancel]
      norm_num
@[to_additive "An additive group is `‚Ñï`-divisible if it `‚Ñ§`-divisible."]
def rootableByNatOfRootableByInt [RootableBy A ‚Ñ§] : RootableBy A ‚Ñï where
  root a n := RootableBy.root a (n : ‚Ñ§)
  root_zero a := RootableBy.root_zero a
  root_cancel {n} a hn := by
    simpa only [zpow_natCast] using RootableBy.root_cancel a (show (n : ‚Ñ§) ‚â† 0 from mod_cast hn)
end Group
section Hom
variable {A B Œ± : Type*}
variable [Zero Œ±] [Monoid A] [Monoid B] [Pow A Œ±] [Pow B Œ±] [RootableBy A Œ±]
variable (f : A ‚Üí B)
@[to_additive
      "If `f : A ‚Üí B` is a surjective homomorphism and `A` is `Œ±`-divisible, then `B` is also
      `Œ±`-divisible."]
noncomputable def Function.Surjective.rootableBy (hf : Function.Surjective f)
    (hpow : ‚àÄ (a : A) (n : Œ±), f (a ^ n) = f a ^ n) : RootableBy B Œ± :=
  rootableByOfPowLeftSurj _ _ fun {n} hn x =>
    let ‚ü®y, hy‚ü© := hf x
    ‚ü®f <| RootableBy.root y n,
      (by rw [‚Üê hpow (RootableBy.root y n) n, RootableBy.root_cancel _ hn, hy] : _ ^ n = x)‚ü©
@[to_additive DivisibleBy.surjective_smul]
theorem RootableBy.surjective_pow (A Œ± : Type*) [Monoid A] [Pow A Œ±] [Zero Œ±] [RootableBy A Œ±]
    {n : Œ±} (hn : n ‚â† 0) : Function.Surjective fun a : A => a ^ n := fun a =>
  ‚ü®RootableBy.root a n, RootableBy.root_cancel a hn‚ü©
end Hom
section Quotient
variable (Œ± : Type*) {A : Type*} [CommGroup A] (B : Subgroup A)
@[to_additive "Any quotient group of a divisible group is divisible"]
noncomputable instance QuotientGroup.rootableBy [RootableBy A ‚Ñï] : RootableBy (A ‚ß∏ B) ‚Ñï :=
  QuotientGroup.mk_surjective.rootableBy _ fun _ _ => rfl
end Quotient