import Mathlib.CategoryTheory.Sites.Sheaf
import Mathlib.CategoryTheory.Sites.CoverLifting
import Mathlib.CategoryTheory.Sites.CoverPreserving
import Mathlib.CategoryTheory.Adjunction.FullyFaithful
import Mathlib.CategoryTheory.Sites.LocallyFullyFaithful
universe w v u
namespace CategoryTheory
variable {C : Type*} [Category C] {D : Type*} [Category D] {E : Type*} [Category E]
variable (J : GrothendieckTopology C) (K : GrothendieckTopology D)
variable {L : GrothendieckTopology E}
structure Presieve.CoverByImageStructure (G : C ‚•§ D) {V U : D} (f : V ‚ü∂ U) where
  obj : C
  lift : V ‚ü∂ G.obj obj
  map : G.obj obj ‚ü∂ U
  fac : lift ‚â´ map = f := by aesop_cat
attribute [nolint docBlame] Presieve.CoverByImageStructure.obj Presieve.CoverByImageStructure.lift
  Presieve.CoverByImageStructure.map Presieve.CoverByImageStructure.fac
attribute [reassoc (attr := simp)] Presieve.CoverByImageStructure.fac
def Presieve.coverByImage (G : C ‚•§ D) (U : D) : Presieve U := fun _ f =>
  Nonempty (Presieve.CoverByImageStructure G f)
def Sieve.coverByImage (G : C ‚•§ D) (U : D) : Sieve U :=
  ‚ü®Presieve.coverByImage G U, fun ‚ü®‚ü®Z, f‚ÇÅ, f‚ÇÇ, (e : _ = _)‚ü©‚ü© g =>
    ‚ü®‚ü®Z, g ‚â´ f‚ÇÅ, f‚ÇÇ, show (g ‚â´ f‚ÇÅ) ‚â´ f‚ÇÇ = g ‚â´ _ by rw [Category.assoc, ‚Üê e]‚ü©‚ü©‚ü©
theorem Presieve.in_coverByImage (G : C ‚•§ D) {X : D} {Y : C} (f : G.obj Y ‚ü∂ X) :
    Presieve.coverByImage G X f :=
  ‚ü®‚ü®Y, ùüô _, f, by simp‚ü©‚ü©
class Functor.IsCoverDense (G : C ‚•§ D) (K : GrothendieckTopology D) : Prop where
  is_cover : ‚àÄ U : D, Sieve.coverByImage G U ‚àà K U
lemma Functor.is_cover_of_isCoverDense (G : C ‚•§ D) (K : GrothendieckTopology D)
    [G.IsCoverDense K] (U : D) : Sieve.coverByImage G U ‚àà K U := by
  apply Functor.IsCoverDense.is_cover
lemma Functor.isCoverDense_of_generate_singleton_functor_œÄ_mem (G : C ‚•§ D)
    (K : GrothendieckTopology D)
    (h : ‚àÄ B, ‚àÉ (X : C) (f : G.obj X ‚ü∂ B), Sieve.generate (Presieve.singleton f) ‚àà K B) :
    G.IsCoverDense K where
  is_cover B := by
    obtain ‚ü®X, f, h‚ü© := h B
    refine K.superset_covering ?_ h
    intro Y f ‚ü®Z, g, _, h, w‚ü©
    cases h
    exact ‚ü®‚ü®_, g, _, w‚ü©‚ü©
attribute [nolint docBlame] CategoryTheory.Functor.IsCoverDense.is_cover
open Presieve Opposite
namespace Functor
namespace IsCoverDense
variable {K}
variable {A : Type*} [Category A] (G : C ‚•§ D)
theorem ext [G.IsCoverDense K] (‚Ñ± : Sheaf K (Type _)) (X : D) {s t : ‚Ñ±.val.obj (op X)}
    (h : ‚àÄ ‚¶ÉY : C‚¶Ñ (f : G.obj Y ‚ü∂ X), ‚Ñ±.val.map f.op s = ‚Ñ±.val.map f.op t) : s = t := by
  apply ((isSheaf_iff_isSheaf_of_type _ _ ).1 ‚Ñ±.cond
    (Sieve.coverByImage G X) (G.is_cover_of_isCoverDense K X)).isSeparatedFor.ext
  rintro Y _ ‚ü®Z, f‚ÇÅ, f‚ÇÇ, ‚ü®rfl‚ü©‚ü©
  simp [h f‚ÇÇ]
variable {G}
theorem functorPullback_pushforward_covering [G.IsCoverDense K] [G.IsLocallyFull K] {X : C}
    (T : K (G.obj X)) : (T.val.functorPullback G).functorPushforward G ‚àà K (G.obj X) := by
  refine K.transitive T.2 _ fun Y iYX hiYX ‚Ü¶ ?_
  apply K.transitive (G.is_cover_of_isCoverDense _ _) _
  rintro W _ ‚ü®Z, iWZ, iZY, rfl‚ü©
  rw [Sieve.pullback_comp]; apply K.pullback_stable; clear W iWZ
  apply K.superset_covering ?_ (G.functorPushforward_imageSieve_mem _ (iZY ‚â´ iYX))
  rintro W _ ‚ü®V, iVZ, iWV, ‚ü®iVX, e‚ü©, rfl‚ü©
  exact ‚ü®_, iVX, iWV, by simpa [e] using T.1.downward_closed hiYX (G.map iVZ ‚â´ iZY), by simp [e]‚ü©
@[simps!]
def homOver {‚Ñ± : D·µí·µñ ‚•§ A} {‚Ñ±' : Sheaf K A} (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) (X : A) :
    G.op ‚ãô ‚Ñ± ‚ãô coyoneda.obj (op X) ‚ü∂ G.op ‚ãô (sheafOver ‚Ñ±' X).val :=
  whiskerRight Œ± (coyoneda.obj (op X))
@[simps!]
def isoOver {‚Ñ± ‚Ñ±' : Sheaf K A} (Œ± : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) (X : A) :
    G.op ‚ãô (sheafOver ‚Ñ± X).val ‚âÖ G.op ‚ãô (sheafOver ‚Ñ±' X).val :=
  isoWhiskerRight Œ± (coyoneda.obj (op X))
theorem sheaf_eq_amalgamation (‚Ñ± : Sheaf K A) {X : A} {U : D} {T : Sieve U} (hT)
    (x : FamilyOfElements _ T) (hx) (t) (h : x.IsAmalgamation t) :
    t = (‚Ñ±.cond X T hT).amalgamate x hx :=
  (‚Ñ±.cond X T hT).isSeparatedFor x t _ h ((‚Ñ±.cond X T hT).isAmalgamation hx)
namespace Types
variable {‚Ñ± : D·µí·µñ ‚•§ Type v} {‚Ñ±' : Sheaf K (Type v)} (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val)
theorem naturality_apply [G.IsLocallyFull K] {X Y : C} (i : G.obj X ‚ü∂ G.obj Y) (x) :
    ‚Ñ±'.1.map i.op (Œ±.app _ x) = Œ±.app _ (‚Ñ±.map i.op x) := by
  have {X Y} (i : X ‚ü∂ Y) (x) :
      ‚Ñ±'.1.map (G.map i).op (Œ±.app _ x) = Œ±.app _ (‚Ñ±.map (G.map i).op x) := by
    exact congr_fun (Œ±.naturality i.op).symm x
  refine IsLocallyFull.ext G _ i fun V iVX iVY e ‚Ü¶ ?_
  simp only [comp_obj, types_comp_apply, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, ‚Üê e, this]
@[reassoc]
theorem naturality [G.IsLocallyFull K] {X Y : C} (i : G.obj X ‚ü∂ G.obj Y) :
    Œ±.app _ ‚â´ ‚Ñ±'.1.map i.op = ‚Ñ±.map i.op ‚â´ Œ±.app _ := types_ext _ _ (naturality_apply Œ± i)
noncomputable def pushforwardFamily {X} (x : ‚Ñ±.obj (op X)) :
    FamilyOfElements ‚Ñ±'.val (coverByImage G X) := fun _ _ hf =>
  ‚Ñ±'.val.map hf.some.lift.op <| Œ±.app (op _) (‚Ñ±.map hf.some.map.op x : _)
@[simp] theorem pushforwardFamily_def {X} (x : ‚Ñ±.obj (op X)) :
    pushforwardFamily Œ± x = fun _ _ hf =>
  ‚Ñ±'.val.map hf.some.lift.op <| Œ±.app (op _) (‚Ñ±.map hf.some.map.op x : _) := rfl
@[simp]
theorem pushforwardFamily_apply [G.IsLocallyFull K]
    {X} (x : ‚Ñ±.obj (op X)) {Y : C} (f : G.obj Y ‚ü∂ X) :
    pushforwardFamily Œ± x f (Presieve.in_coverByImage G f) = Œ±.app (op Y) (‚Ñ±.map f.op x) := by
  simp only [pushforwardFamily_def, op_obj]
  generalize Nonempty.some (Presieve.in_coverByImage G f) = l
  obtain ‚ü®W, iYW, iWX, rfl‚ü© := l
  simp only [‚Üê op_comp, ‚Üê FunctorToTypes.map_comp_apply, naturality_apply]
variable [G.IsCoverDense K] [G.IsLocallyFull K]
theorem pushforwardFamily_compatible {X} (x : ‚Ñ±.obj (op X)) :
    (pushforwardFamily Œ± x).Compatible := by
  suffices ‚àÄ {Z W‚ÇÅ W‚ÇÇ} (iWX‚ÇÅ : G.obj W‚ÇÅ ‚ü∂ X) (iWX‚ÇÇ : G.obj W‚ÇÇ ‚ü∂ X) (iZW‚ÇÅ : Z ‚ü∂ G.obj W‚ÇÅ)
      (iZW‚ÇÇ : Z ‚ü∂ G.obj W‚ÇÇ), iZW‚ÇÅ ‚â´ iWX‚ÇÅ = iZW‚ÇÇ ‚â´ iWX‚ÇÇ ‚Üí
      ‚Ñ±'.1.map iZW‚ÇÅ.op (Œ±.app _ (‚Ñ±.map iWX‚ÇÅ.op x)) = ‚Ñ±'.1.map iZW‚ÇÇ.op (Œ±.app _ (‚Ñ±.map iWX‚ÇÇ.op x)) by
    rintro Y‚ÇÅ Y‚ÇÇ Z iZY‚ÇÅ iZY‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ e
    simp only [pushforwardFamily, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
    generalize Nonempty.some h‚ÇÅ = l‚ÇÅ
    generalize Nonempty.some h‚ÇÇ = l‚ÇÇ
    obtain ‚ü®W‚ÇÅ, iYW‚ÇÅ, iWX‚ÇÅ, rfl‚ü© := l‚ÇÅ
    obtain ‚ü®W‚ÇÇ, iYW‚ÇÇ, iWX‚ÇÇ, rfl‚ü© := l‚ÇÇ
    exact this _ _ _ _ (by simpa only [Category.assoc] using e)
  introv e
  refine ext G _ _ fun V iVZ ‚Ü¶ ?_
  simp only [‚Üê op_comp, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê Functor.map_comp, naturality_apply,
    Category.assoc, e]
noncomputable def appHom (X : D) : ‚Ñ±.obj (op X) ‚ü∂ ‚Ñ±'.val.obj (op X) := fun x =>
  ((isSheaf_iff_isSheaf_of_type _ _ ).1 ‚Ñ±'.cond _
    (G.is_cover_of_isCoverDense _ X)).amalgamate (pushforwardFamily Œ± x)
      (pushforwardFamily_compatible Œ± x)
@[simp]
theorem appHom_restrict {X : D} {Y : C} (f : op X ‚ü∂ op (G.obj Y)) (x) :
    ‚Ñ±'.val.map f (appHom Œ± X x) = Œ±.app (op Y) (‚Ñ±.map f x) :=
  (((isSheaf_iff_isSheaf_of_type _ _ ).1 ‚Ñ±'.cond _ (G.is_cover_of_isCoverDense _ X)).valid_glue
      (pushforwardFamily_compatible Œ± x) f.unop
          (Presieve.in_coverByImage G f.unop)).trans (pushforwardFamily_apply _ _ _)
@[simp]
theorem appHom_valid_glue {X : D} {Y : C} (f : op X ‚ü∂ op (G.obj Y)) :
    appHom Œ± X ‚â´ ‚Ñ±'.val.map f = ‚Ñ±.map f ‚â´ Œ±.app (op Y) := by
  ext
  apply appHom_restrict
@[simps]
noncomputable def appIso {‚Ñ± ‚Ñ±' : Sheaf K (Type v)} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val)
    (X : D) : ‚Ñ±.val.obj (op X) ‚âÖ ‚Ñ±'.val.obj (op X) where
  hom := appHom i.hom X
  inv := appHom i.inv X
  hom_inv_id := by
    ext x
    apply Functor.IsCoverDense.ext G
    intro Y f
    simp
  inv_hom_id := by
    ext x
    apply Functor.IsCoverDense.ext G
    intro Y f
    simp
@[simps]
noncomputable def presheafHom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ± ‚ü∂ ‚Ñ±'.val where
  app X := appHom Œ± (unop X)
  naturality X Y f := by
    ext x
    apply Functor.IsCoverDense.ext G
    intro Y' f'
    simp only [appHom_restrict, types_comp_apply, ‚Üê FunctorToTypes.map_comp_apply]
@[simps!]
noncomputable def presheafIso {‚Ñ± ‚Ñ±' : Sheaf K (Type v)} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) :
    ‚Ñ±.val ‚âÖ ‚Ñ±'.val :=
  NatIso.ofComponents (fun X => appIso i (unop X)) @(presheafHom i.hom).naturality
@[simps]
noncomputable def sheafIso {‚Ñ± ‚Ñ±' : Sheaf K (Type v)} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) :
    ‚Ñ± ‚âÖ ‚Ñ±' where
  hom := ‚ü®(presheafIso i).hom‚ü©
  inv := ‚ü®(presheafIso i).inv‚ü©
  hom_inv_id := by
    ext1
    apply (presheafIso i).hom_inv_id
  inv_hom_id := by
    ext1
    apply (presheafIso i).inv_hom_id
end Types
open Types
variable [G.IsCoverDense K] [G.IsLocallyFull K] {‚Ñ± : D·µí·µñ ‚•§ A} {‚Ñ±' : Sheaf K A}
@[simps]
noncomputable def sheafCoyonedaHom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) :
    coyoneda ‚ãô (whiskeringLeft D·µí·µñ A (Type _)).obj ‚Ñ± ‚ü∂
      coyoneda ‚ãô (whiskeringLeft D·µí·µñ A (Type _)).obj ‚Ñ±'.val where
  app X := presheafHom (homOver Œ± (unop X))
  naturality X Y f := by
    ext U x
    change
      appHom (homOver Œ± (unop Y)) (unop U) (f.unop ‚â´ x) =
        f.unop ‚â´ appHom (homOver Œ± (unop X)) (unop U) x
    symm
    apply sheaf_eq_amalgamation
    ¬∑ apply G.is_cover_of_isCoverDense
    ¬∑ exact pushforwardFamily_compatible (homOver Œ± Y.unop) (f.unop ‚â´ x)
    intro Y' f' hf'
    change unop X ‚ü∂ ‚Ñ±.obj (op (unop _)) at x
    dsimp
    simp only [pushforwardFamily, Functor.comp_map, coyoneda_obj_map, homOver_app, Category.assoc]
    congr 1
    conv_lhs => rw [‚Üê hf'.some.fac]
    simp only [‚Üê Category.assoc, op_comp, Functor.map_comp]
    congr 1
    exact (appHom_restrict (homOver Œ± (unop X)) hf'.some.map.op x).trans (by simp)
noncomputable def sheafYonedaHom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) :
    ‚Ñ± ‚ãô yoneda ‚ü∂ ‚Ñ±'.val ‚ãô yoneda where
  app U :=
    let Œ± := (sheafCoyonedaHom Œ±)
    { app := fun X => (Œ±.app X).app U
      naturality := fun X Y f => by simpa using congr_app (Œ±.naturality f) U }
  naturality U V i := by
    ext X x
    exact congr_fun (((sheafCoyonedaHom Œ±).app X).naturality i) x
noncomputable def sheafHom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ± ‚ü∂ ‚Ñ±'.val :=
  let Œ±' := sheafYonedaHom Œ±
  { app := fun X => yoneda.preimage (Œ±'.app X)
    naturality := fun X Y f => yoneda.map_injective (by simpa using Œ±'.naturality f) }
@[simps!]
noncomputable def presheafIso {‚Ñ± ‚Ñ±' : Sheaf K A} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) :
    ‚Ñ±.val ‚âÖ ‚Ñ±'.val := by
  have : ‚àÄ X : D·µí·µñ, IsIso ((sheafHom i.hom).app X) := by
    intro X
    rw [‚Üê isIso_iff_of_reflects_iso _ yoneda]
    use (sheafYonedaHom i.inv).app X
    constructor <;> ext x : 2 <;>
      simp only [sheafHom, NatTrans.comp_app, NatTrans.id_app, Functor.map_preimage]
    ¬∑ exact ((Types.presheafIso (isoOver i (unop x))).app X).hom_inv_id
    ¬∑ exact ((Types.presheafIso (isoOver i (unop x))).app X).inv_hom_id
  haveI : IsIso (sheafHom i.hom) := by apply NatIso.isIso_of_isIso_app
  apply asIso (sheafHom i.hom)
@[simps]
noncomputable def sheafIso {‚Ñ± ‚Ñ±' : Sheaf K A} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ± ‚âÖ ‚Ñ±' where
  hom := ‚ü®(presheafIso i).hom‚ü©
  inv := ‚ü®(presheafIso i).inv‚ü©
  hom_inv_id := by
    ext1
    apply (presheafIso i).hom_inv_id
  inv_hom_id := by
    ext1
    apply (presheafIso i).inv_hom_id
theorem sheafHom_restrict_eq (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) :
    whiskerLeft G.op (sheafHom Œ±) = Œ± := by
  ext X
  apply yoneda.map_injective
  ext U
  erw [yoneda.map_preimage]
  symm
  change (show (‚Ñ±'.val ‚ãô coyoneda.obj (op (unop U))).obj (op (G.obj (unop X))) from _) = _
  apply sheaf_eq_amalgamation ‚Ñ±' (G.is_cover_of_isCoverDense _ _)
  ¬∑ exact (pushforwardFamily_compatible _ _)
  intro Y f hf
  conv_lhs => rw [‚Üê hf.some.fac]
  simp only [pushforwardFamily, Functor.comp_map, yoneda_map_app, coyoneda_obj_map, op_comp,
    FunctorToTypes.map_comp_apply, homOver_app, ‚Üê Category.assoc]
  congr 1
  simp only [Category.assoc]
  congr 1
  have := naturality_apply (G := G) (‚Ñ± := ‚Ñ± ‚ãô coyoneda.obj (op <| (G.op ‚ãô ‚Ñ±).obj X))
    (‚Ñ±' := ‚ü®_, Presheaf.isSheaf_comp_of_isSheaf K ‚Ñ±'.val
      (coyoneda.obj (op ((G.op ‚ãô ‚Ñ±).obj X))) ‚Ñ±'.cond‚ü©)
    (whiskerRight Œ± (coyoneda.obj _)) hf.some.map (ùüô _)
  simpa using this
variable (G)
theorem sheafHom_eq (Œ± : ‚Ñ± ‚ü∂ ‚Ñ±'.val) : sheafHom (whiskerLeft G.op Œ±) = Œ± := by
  ext X
  apply yoneda.map_injective
  ext U
  erw [yoneda.map_preimage]
  symm
  change (show (‚Ñ±'.val ‚ãô coyoneda.obj (op (unop U))).obj (op (unop X)) from _) = _
  apply sheaf_eq_amalgamation ‚Ñ±' (G.is_cover_of_isCoverDense _ _)
  ¬∑ exact (pushforwardFamily_compatible _ _)
  intro Y f hf
  conv_lhs => rw [‚Üê hf.some.fac]
  dsimp
  simp
variable {G}
noncomputable def restrictHomEquivHom : (G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) ‚âÉ (‚Ñ± ‚ü∂ ‚Ñ±'.val) where
  toFun := sheafHom
  invFun := whiskerLeft G.op
  left_inv := sheafHom_restrict_eq
  right_inv := sheafHom_eq _
theorem iso_of_restrict_iso {‚Ñ± ‚Ñ±' : Sheaf K A} (Œ± : ‚Ñ± ‚ü∂ ‚Ñ±') (i : IsIso (whiskerLeft G.op Œ±.val)) :
    IsIso Œ± := by
  convert (sheafIso (asIso (whiskerLeft G.op Œ±.val))).isIso_hom using 1
  ext1
  apply (sheafHom_eq _ _).symm
variable (G K)
lemma compatiblePreserving [G.IsLocallyFaithful K] : CompatiblePreserving K G := by
  constructor
  intro ‚Ñ± Z T x hx Y‚ÇÅ Y‚ÇÇ X f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ hg‚ÇÅ hg‚ÇÇ eq
  apply Functor.IsCoverDense.ext G
  intro W i
  refine IsLocallyFull.ext G _ (i ‚â´ f‚ÇÅ) fun V‚ÇÅ iVW iV‚ÇÅY‚ÇÅ e‚ÇÅ ‚Ü¶ ?_
  refine IsLocallyFull.ext G _ (G.map iVW ‚â´ i ‚â´ f‚ÇÇ) fun V‚ÇÇ iV‚ÇÇV‚ÇÅ iV‚ÇÇY‚ÇÇ e‚ÇÇ ‚Ü¶ ?_
  refine IsLocallyFaithful.ext G _ (iV‚ÇÇV‚ÇÅ ‚â´ iV‚ÇÅY‚ÇÅ ‚â´ g‚ÇÅ) (iV‚ÇÇY‚ÇÇ ‚â´ g‚ÇÇ) (by simp [e‚ÇÅ, e‚ÇÇ, eq]) ?_
  intro V‚ÇÉ iV‚ÇÉ e‚ÇÑ
  simp only [‚Üê op_comp, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê e‚ÇÅ, ‚Üê e‚ÇÇ, ‚Üê Functor.map_comp]
  apply hx
  simpa using e‚ÇÑ
lemma isContinuous [G.IsLocallyFaithful K] (Hp : CoverPreserving J K G) : G.IsContinuous J K :=
  isContinuous_of_coverPreserving (compatiblePreserving K G) Hp
instance full_sheafPushforwardContinuous [G.IsContinuous J K] :
    Full (G.sheafPushforwardContinuous A J K) where
  map_surjective Œ± := ‚ü®‚ü®sheafHom Œ±.val‚ü©, Sheaf.Hom.ext <| sheafHom_restrict_eq Œ±.val‚ü©
instance faithful_sheafPushforwardContinuous [G.IsContinuous J K] :
    Faithful (G.sheafPushforwardContinuous A J K) where
  map_injective := by
    intro ‚Ñ± ‚Ñ±' Œ± Œ≤ e
    ext1
    apply_fun fun e => e.val at e
    dsimp [sheafPushforwardContinuous] at e
    rw [‚Üê sheafHom_eq G Œ±.val, ‚Üê sheafHom_eq G Œ≤.val, e]
end IsCoverDense
lemma whiskerLeft_obj_map_bijective_of_isCoverDense (G : C ‚•§ D)
    [G.IsCoverDense K] [G.IsLocallyFull K] {A : Type*} [Category A]
    (P Q : D·µí·µñ ‚•§ A) (hQ : Presheaf.IsSheaf K Q) :
    Function.Bijective (((whiskeringLeft C·µí·µñ D·µí·µñ A).obj G.op).map : (P ‚ü∂ Q) ‚Üí _) :=
  (IsCoverDense.restrictHomEquivHom (‚Ñ±' := ‚ü®Q, hQ‚ü©)).symm.bijective
variable {A : Type*} [Category A] (G : C ‚•§ D)
class IsDenseSubsite : Prop where
  isCoverDense' : G.IsCoverDense K := by infer_instance
  isLocallyFull' : G.IsLocallyFull K := by infer_instance
  isLocallyFaithful' : G.IsLocallyFaithful K := by infer_instance
  functorPushforward_mem_iff : ‚àÄ {X : C} {S : Sieve X}, S.functorPushforward G ‚àà K _ ‚Üî S ‚àà J _
lemma functorPushforward_mem_iff {X : C} {S : Sieve X} [G.IsDenseSubsite J K]:
    S.functorPushforward G ‚àà K _ ‚Üî S ‚àà J _ := IsDenseSubsite.functorPushforward_mem_iff
namespace IsDenseSubsite
variable [G.IsDenseSubsite J K]
include J K
lemma isCoverDense : G.IsCoverDense K := isCoverDense' J
lemma isLocallyFull : G.IsLocallyFull K := isLocallyFull' J
lemma isLocallyFaithful : G.IsLocallyFaithful K := isLocallyFaithful' J
lemma coverPreserving : CoverPreserving J K G :=
  ‚ü®functorPushforward_mem_iff.mpr‚ü©
instance (priority := 900) : G.IsContinuous J K :=
  letI := IsDenseSubsite.isCoverDense J K G
  letI := IsDenseSubsite.isLocallyFull J K G
  letI := IsDenseSubsite.isLocallyFaithful J K G
  IsCoverDense.isContinuous J K G (IsDenseSubsite.coverPreserving J K G)
instance (priority := 900) : G.IsCocontinuous J K where
  cover_lift hS :=
    letI := IsDenseSubsite.isCoverDense J K G
    letI := IsDenseSubsite.isLocallyFull J K G
    IsDenseSubsite.functorPushforward_mem_iff.mp
      (IsCoverDense.functorPullback_pushforward_covering ‚ü®_, hS‚ü©)
instance full_sheafPushforwardContinuous :
    Full (G.sheafPushforwardContinuous A J K) :=
  letI := IsDenseSubsite.isCoverDense J K G
  letI := IsDenseSubsite.isLocallyFull J K G
  inferInstance
instance faithful_sheafPushforwardContinuous :
    Faithful (G.sheafPushforwardContinuous A J K) :=
  letI := IsDenseSubsite.isCoverDense J K G
  letI := IsDenseSubsite.isLocallyFull J K G
  inferInstance
lemma imageSieve_mem {U V} (f : G.obj U ‚ü∂ G.obj V) :
    G.imageSieve f ‚àà J _ :=
  letI := IsDenseSubsite.isLocallyFull J K G
  IsDenseSubsite.functorPushforward_mem_iff.mp (G.functorPushforward_imageSieve_mem K f)
lemma equalizer_mem {U V} (f‚ÇÅ f‚ÇÇ : U ‚ü∂ V) (e : G.map f‚ÇÅ = G.map f‚ÇÇ) :
    Sieve.equalizer f‚ÇÅ f‚ÇÇ ‚àà J _ :=
  letI := IsDenseSubsite.isLocallyFaithful J K G
  IsDenseSubsite.functorPushforward_mem_iff.mp (G.functorPushforward_equalizer_mem K f‚ÇÅ f‚ÇÇ e)
end IsDenseSubsite
end Functor
end CategoryTheory