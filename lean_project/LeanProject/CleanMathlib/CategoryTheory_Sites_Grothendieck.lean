import Mathlib.CategoryTheory.Sites.Sieves
import Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer
import Mathlib.CategoryTheory.Category.Preorder
import Mathlib.Order.Copy
import Mathlib.Data.Set.Subsingleton
universe v‚ÇÅ u‚ÇÅ v u
namespace CategoryTheory
open Category
variable (C : Type u) [Category.{v} C]
structure GrothendieckTopology where
  sieves : ‚àÄ X : C, Set (Sieve X)
  top_mem' : ‚àÄ X, ‚ä§ ‚àà sieves X
  pullback_stable' : ‚àÄ ‚¶ÉX Y : C‚¶Ñ ‚¶ÉS : Sieve X‚¶Ñ (f : Y ‚ü∂ X), S ‚àà sieves X ‚Üí S.pullback f ‚àà sieves Y
  transitive' :
    ‚àÄ ‚¶ÉX‚¶Ñ ‚¶ÉS : Sieve X‚¶Ñ (_ : S ‚àà sieves X) (R : Sieve X),
      (‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, S f ‚Üí R.pullback f ‚àà sieves Y) ‚Üí R ‚àà sieves X
namespace GrothendieckTopology
instance : DFunLike (GrothendieckTopology C) C (fun X ‚Ü¶ Set (Sieve X)) where
  coe J X := sieves J X
  coe_injective' J‚ÇÅ J‚ÇÇ h := by cases J‚ÇÅ; cases J‚ÇÇ; congr
variable {C}
variable {X Y : C} {S R : Sieve X}
variable (J : GrothendieckTopology C)
@[ext]
theorem ext {J‚ÇÅ J‚ÇÇ : GrothendieckTopology C} (h : (J‚ÇÅ : ‚àÄ X : C, Set (Sieve X)) = J‚ÇÇ) : J‚ÇÅ = J‚ÇÇ :=
  DFunLike.coe_injective h
@[simp]
theorem mem_sieves_iff_coe : S ‚àà J.sieves X ‚Üî S ‚àà J X :=
  Iff.rfl
@[simp]
theorem top_mem (X : C) : ‚ä§ ‚àà J X :=
  J.top_mem' X
@[simp]
theorem pullback_stable (f : Y ‚ü∂ X) (hS : S ‚àà J X) : S.pullback f ‚àà J Y :=
  J.pullback_stable' f hS
variable {J} in
@[simp]
lemma pullback_mem_iff_of_isIso {i : X ‚ü∂ Y} [IsIso i] {S : Sieve Y} :
    S.pullback i ‚àà J _ ‚Üî S ‚àà J _ := by
  refine ‚ü®fun H ‚Ü¶ ?_, J.pullback_stable i‚ü©
  convert J.pullback_stable (inv i) H
  rw [‚Üê Sieve.pullback_comp, IsIso.inv_hom_id, Sieve.pullback_id]
theorem transitive (hS : S ‚àà J X) (R : Sieve X) (h : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, S f ‚Üí R.pullback f ‚àà J Y) :
    R ‚àà J X :=
  J.transitive' hS R h
theorem covering_of_eq_top : S = ‚ä§ ‚Üí S ‚àà J X := fun h => h.symm ‚ñ∏ J.top_mem X
theorem superset_covering (Hss : S ‚â§ R) (sjx : S ‚àà J X) : R ‚àà J X := by
  apply J.transitive sjx R fun Y f hf => _
  intros Y f hf
  apply covering_of_eq_top
  rw [‚Üê top_le_iff, ‚Üê S.pullback_eq_top_of_mem hf]
  apply Sieve.pullback_monotone _ Hss
theorem intersection_covering (rj : R ‚àà J X) (sj : S ‚àà J X) : R ‚äì S ‚àà J X := by
  apply J.transitive rj _ fun Y f Hf => _
  intros Y f hf
  rw [Sieve.pullback_inter, R.pullback_eq_top_of_mem hf]
  simp [sj]
@[simp]
theorem intersection_covering_iff : R ‚äì S ‚àà J X ‚Üî R ‚àà J X ‚àß S ‚àà J X :=
  ‚ü®fun h => ‚ü®J.superset_covering inf_le_left h, J.superset_covering inf_le_right h‚ü©, fun t =>
    intersection_covering _ t.1 t.2‚ü©
theorem bind_covering {S : Sieve X} {R : ‚àÄ ‚¶ÉY : C‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, S f ‚Üí Sieve Y} (hS : S ‚àà J X)
    (hR : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (H : S f), R H ‚àà J Y) : Sieve.bind S R ‚àà J X :=
  J.transitive hS _ fun _ f hf => superset_covering J (Sieve.le_pullback_bind S R f hf) (hR hf)
def Covers (S : Sieve X) (f : Y ‚ü∂ X) : Prop :=
  S.pullback f ‚àà J Y
theorem covers_iff (S : Sieve X) (f : Y ‚ü∂ X) : J.Covers S f ‚Üî S.pullback f ‚àà J Y :=
  Iff.rfl
theorem covering_iff_covers_id (S : Sieve X) : S ‚àà J X ‚Üî J.Covers S (ùüô X) := by simp [covers_iff]
theorem arrow_max (f : Y ‚ü∂ X) (S : Sieve X) (hf : S f) : J.Covers S f := by
  rw [Covers, (Sieve.pullback_eq_top_iff_mem f).1 hf]
  apply J.top_mem
theorem arrow_stable (f : Y ‚ü∂ X) (S : Sieve X) (h : J.Covers S f) {Z : C} (g : Z ‚ü∂ Y) :
    J.Covers S (g ‚â´ f) := by
  rw [covers_iff] at h ‚ä¢
  simp [h, Sieve.pullback_comp]
theorem arrow_trans (f : Y ‚ü∂ X) (S R : Sieve X) (h : J.Covers S f) :
    (‚àÄ {Z : C} (g : Z ‚ü∂ X), S g ‚Üí J.Covers R g) ‚Üí J.Covers R f := by
  intro k
  apply J.transitive h
  intro Z g hg
  rw [‚Üê Sieve.pullback_comp]
  apply k (g ‚â´ f) hg
theorem arrow_intersect (f : Y ‚ü∂ X) (S R : Sieve X) (hS : J.Covers S f) (hR : J.Covers R f) :
    J.Covers (S ‚äì R) f := by simpa [covers_iff] using And.intro hS hR
variable (C)
def trivial : GrothendieckTopology C where
  sieves _ := {‚ä§}
  top_mem' _ := rfl
  pullback_stable' X Y S f hf := by
    rw [Set.mem_singleton_iff] at hf ‚ä¢
    simp [hf]
  transitive' X S hS R hR := by
    rw [Set.mem_singleton_iff, ‚Üê Sieve.id_mem_iff_eq_top] at hS
    simpa using hR hS
def discrete : GrothendieckTopology C where
  sieves _ := Set.univ
  top_mem' := by simp
  pullback_stable' X Y f := by simp
  transitive' := by simp
variable {C}
theorem trivial_covering : S ‚àà trivial C X ‚Üî S = ‚ä§ :=
  Set.mem_singleton_iff
instance instLEGrothendieckTopology : LE (GrothendieckTopology C) where
  le J‚ÇÅ J‚ÇÇ := (J‚ÇÅ : ‚àÄ X : C, Set (Sieve X)) ‚â§ (J‚ÇÇ : ‚àÄ X : C, Set (Sieve X))
theorem le_def {J‚ÇÅ J‚ÇÇ : GrothendieckTopology C} : J‚ÇÅ ‚â§ J‚ÇÇ ‚Üî (J‚ÇÅ : ‚àÄ X : C, Set (Sieve X)) ‚â§ J‚ÇÇ :=
  Iff.rfl
instance : PartialOrder (GrothendieckTopology C) :=
  { instLEGrothendieckTopology with
    le_refl := fun _ => le_def.mpr le_rfl
    le_trans := fun _ _ _ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ => le_def.mpr (le_trans h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ)
    le_antisymm := fun _ _ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ => GrothendieckTopology.ext (le_antisymm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ) }
instance : InfSet (GrothendieckTopology C) where
  sInf T :=
    { sieves := sInf (sieves '' T)
      top_mem' := by
        rintro X S ‚ü®‚ü®_, J, hJ, rfl‚ü©, rfl‚ü©
        simp
      pullback_stable' := by
        rintro X Y S hS f _ ‚ü®‚ü®_, J, hJ, rfl‚ü©, rfl‚ü©
        apply J.pullback_stable _ (f _ ‚ü®‚ü®_, _, hJ, rfl‚ü©, rfl‚ü©)
      transitive' := by
        rintro X S hS R h _ ‚ü®‚ü®_, J, hJ, rfl‚ü©, rfl‚ü©
        apply
          J.transitive (hS _ ‚ü®‚ü®_, _, hJ, rfl‚ü©, rfl‚ü©) _ fun Y f hf => h hf _ ‚ü®‚ü®_, _, hJ, rfl‚ü©, rfl‚ü© }
lemma mem_sInf (s : Set (GrothendieckTopology C)) {X : C} (S : Sieve X) :
    S ‚àà sInf s X ‚Üî ‚àÄ t ‚àà s, S ‚àà t X := by
  show S ‚àà sInf (sieves '' s) X ‚Üî _
  simp
theorem isGLB_sInf (s : Set (GrothendieckTopology C)) : IsGLB s (sInf s) := by
  refine @IsGLB.of_image _ _ _ _ sieves ?_ _ _ ?_
  ¬∑ #adaptation_note
    exact Iff.rfl
  ¬∑ exact _root_.isGLB_sInf _
instance : CompleteLattice (GrothendieckTopology C) :=
  CompleteLattice.copy (completeLatticeOfInf _ isGLB_sInf) _ rfl (discrete C)
    (by
      apply le_antisymm
      ¬∑ exact @CompleteLattice.le_top _ (completeLatticeOfInf _ isGLB_sInf) (discrete C)
      ¬∑ intro X S _
        apply Set.mem_univ)
    (trivial C)
    (by
      apply le_antisymm
      ¬∑ intro X S hS
        rw [trivial_covering] at hS
        apply covering_of_eq_top _ hS
      ¬∑ exact @CompleteLattice.bot_le _ (completeLatticeOfInf _ isGLB_sInf) (trivial C))
    _ rfl _ rfl _ rfl sInf rfl
instance : Inhabited (GrothendieckTopology C) :=
  ‚ü®‚ä§‚ü©
@[simp]
theorem trivial_eq_bot : trivial C = ‚ä• :=
  rfl
@[simp]
theorem discrete_eq_top : discrete C = ‚ä§ :=
  rfl
@[simp]
theorem bot_covering : S ‚àà (‚ä• : GrothendieckTopology C) X ‚Üî S = ‚ä§ :=
  trivial_covering
@[simp]
theorem top_covering : S ‚àà (‚ä§ : GrothendieckTopology C) X :=
  ‚ü®‚ü©
theorem bot_covers (S : Sieve X) (f : Y ‚ü∂ X) : (‚ä• : GrothendieckTopology C).Covers S f ‚Üî S f := by
  rw [covers_iff, bot_covering, ‚Üê Sieve.pullback_eq_top_iff_mem]
@[simp]
theorem top_covers (S : Sieve X) (f : Y ‚ü∂ X) : (‚ä§ : GrothendieckTopology C).Covers S f := by
  simp [covers_iff]
def dense : GrothendieckTopology C where
  sieves X S := ‚àÄ {Y : C} (f : Y ‚ü∂ X), ‚àÉ (Z : _) (g : Z ‚ü∂ Y), S (g ‚â´ f)
  top_mem' _ Y _ := ‚ü®Y, ùüô Y, ‚ü®‚ü©‚ü©
  pullback_stable' := by
    intro X Y S h H Z f
    rcases H (f ‚â´ h) with ‚ü®W, g, H'‚ü©
    exact ‚ü®W, g, by simpa‚ü©
  transitive' := by
    intro X S H‚ÇÅ R H‚ÇÇ Y f
    rcases H‚ÇÅ f with ‚ü®Z, g, H‚ÇÉ‚ü©
    rcases H‚ÇÇ H‚ÇÉ (ùüô Z) with ‚ü®W, h, H‚ÇÑ‚ü©
    exact ‚ü®W, h ‚â´ g, by simpa using H‚ÇÑ‚ü©
theorem dense_covering : S ‚àà dense X ‚Üî ‚àÄ {Y} (f : Y ‚ü∂ X), ‚àÉ (Z : _) (g : Z ‚ü∂ Y), S (g ‚â´ f) :=
  Iff.rfl
def RightOreCondition (C : Type u) [Category.{v} C] : Prop :=
  ‚àÄ {X Y Z : C} (yx : Y ‚ü∂ X) (zx : Z ‚ü∂ X), ‚àÉ (W : _) (wy : W ‚ü∂ Y) (wz : W ‚ü∂ Z), wy ‚â´ yx = wz ‚â´ zx
theorem right_ore_of_pullbacks [Limits.HasPullbacks C] : RightOreCondition C := fun _ _ =>
  ‚ü®_, _, _, Limits.pullback.condition‚ü©
def atomic (hro : RightOreCondition C) : GrothendieckTopology C where
  sieves X S := ‚àÉ (Y : _) (f : Y ‚ü∂ X), S f
  top_mem' _ := ‚ü®_, ùüô _, ‚ü®‚ü©‚ü©
  pullback_stable' := by
    rintro X Y S h ‚ü®Z, f, hf‚ü©
    rcases hro h f with ‚ü®W, g, k, comm‚ü©
    refine ‚ü®_, g, ?_‚ü©
    simp [comm, hf]
  transitive' := by
    rintro X S ‚ü®Y, f, hf‚ü© R h
    rcases h hf with ‚ü®Z, g, hg‚ü©
    exact ‚ü®_, _, hg‚ü©
def Cover (X : C) : Type max u v :=
  { S : Sieve X // S ‚àà J X } 
instance (X : C) : Preorder (J.Cover X) :=
  show Preorder {S : Sieve X // S ‚àà J X} from inferInstance
namespace Cover
variable {J}
instance : CoeOut (J.Cover X) (Sieve X) := ‚ü®fun S => S.1‚ü©
instance : CoeFun (J.Cover X) fun _ => ‚àÄ ‚¶ÉY‚¶Ñ (_ : Y ‚ü∂ X), Prop := ‚ü®fun S => (S : Sieve X)‚ü©
theorem condition (S : J.Cover X) : (S : Sieve X) ‚àà J X := S.2
@[ext]
theorem ext (S T : J.Cover X) (h : ‚àÄ ‚¶ÉY‚¶Ñ (f : Y ‚ü∂ X), S f ‚Üî T f) : S = T :=
  Subtype.ext <| Sieve.ext h
instance : OrderTop (J.Cover X) :=
  { (inferInstance : Preorder (J.Cover X)) with
    top := ‚ü®‚ä§, J.top_mem _‚ü©
    le_top := fun _ _ _ _ => by tauto }
instance : SemilatticeInf (J.Cover X) :=
  { (inferInstance : Preorder _) with
    inf := fun S T => ‚ü®S ‚äì T, J.intersection_covering S.condition T.condition‚ü©
    le_antisymm := fun _ _ h1 h2 => ext _ _ fun {Y} f => ‚ü®by apply h1, by apply h2‚ü©
    inf_le_left := fun _ _ _ _ hf => hf.1
    inf_le_right := fun _ _ _ _ hf => hf.2
    le_inf := fun _ _ _ h1 h2 _ _ h => ‚ü®h1 _ h, h2 _ h‚ü© }
instance : Inhabited (J.Cover X) :=
  ‚ü®‚ä§‚ü©
@[ext]
structure Arrow (S : J.Cover X) where
  Y : C
  f : Y ‚ü∂ X
  hf : S f
@[ext]
structure Arrow.Relation {S : J.Cover X} (I‚ÇÅ I‚ÇÇ : S.Arrow) where
  Z : C
  g‚ÇÅ : Z ‚ü∂ I‚ÇÅ.Y
  g‚ÇÇ : Z ‚ü∂ I‚ÇÇ.Y
  w : g‚ÇÅ ‚â´ I‚ÇÅ.f = g‚ÇÇ ‚â´ I‚ÇÇ.f := by aesop_cat
attribute [reassoc] Arrow.Relation.w
@[simps]
def Arrow.precomp {S : J.Cover X} (I : S.Arrow) {Z : C} (g : Z ‚ü∂ I.Y) : S.Arrow :=
  ‚ü®Z, g ‚â´ I.f, S.1.downward_closed I.hf g‚ü©
@[simps]
def Arrow.precompRelation {S : J.Cover X} (I : S.Arrow) {Z : C} (g : Z ‚ü∂ I.Y) :
    (I.precomp g).Relation I where
  g‚ÇÅ := ùüô _
  g‚ÇÇ := g
@[simps]
def Arrow.map {S T : J.Cover X} (I : S.Arrow) (f : S ‚ü∂ T) : T.Arrow :=
  ‚ü®I.Y, I.f, f.le _ I.hf‚ü©
@[simps]
def Arrow.Relation.map {S T : J.Cover X} {I‚ÇÅ I‚ÇÇ : S.Arrow}
    (r : I‚ÇÅ.Relation I‚ÇÇ) (f : S ‚ü∂ T) : (I‚ÇÅ.map f).Relation (I‚ÇÇ.map f) where
  w := r.w
def pullback (S : J.Cover X) (f : Y ‚ü∂ X) : J.Cover Y :=
  ‚ü®Sieve.pullback f S, J.pullback_stable _ S.condition‚ü©
@[simps]
def Arrow.base {f : Y ‚ü∂ X} {S : J.Cover X} (I : (S.pullback f).Arrow) : S.Arrow :=
  ‚ü®I.Y, I.f ‚â´ f, I.hf‚ü©
def Arrow.Relation.base
    {f : Y ‚ü∂ X} {S : J.Cover X} {I‚ÇÅ I‚ÇÇ : (S.pullback f).Arrow}
    (r : I‚ÇÅ.Relation I‚ÇÇ) : I‚ÇÅ.base.Relation I‚ÇÇ.base where
  g‚ÇÅ := r.g‚ÇÅ
  g‚ÇÇ := r.g‚ÇÇ
  w := by simp [r.w_assoc]
@[simp]
theorem coe_pullback {Z : C} (f : Y ‚ü∂ X) (g : Z ‚ü∂ Y) (S : J.Cover X) :
    (S.pullback f) g ‚Üî S (g ‚â´ f) :=
  Iff.rfl
def pullbackId (S : J.Cover X) : S.pullback (ùüô X) ‚âÖ S :=
  eqToIso <| Cover.ext _ _ fun Y f => by simp
def pullbackComp {X Y Z : C} (S : J.Cover X) (f : Z ‚ü∂ Y) (g : Y ‚ü∂ X) :
    S.pullback (f ‚â´ g) ‚âÖ (S.pullback g).pullback f :=
  eqToIso <| Cover.ext _ _ fun Y f => by simp
def bind {X : C} (S : J.Cover X) (T : ‚àÄ I : S.Arrow, J.Cover I.Y) : J.Cover X :=
  ‚ü®Sieve.bind S fun Y f hf => T ‚ü®Y, f, hf‚ü©,
    J.bind_covering S.condition fun _ _ _ => (T { Y := _, f := _, hf := _ }).condition‚ü©
def bindToBase {X : C} (S : J.Cover X) (T : ‚àÄ I : S.Arrow, J.Cover I.Y) : S.bind T ‚ü∂ S :=
  homOfLE <| by
    rintro Y f ‚ü®Z, e1, e2, h1, _, h3‚ü©
    rw [‚Üê h3]
    apply Sieve.downward_closed
    exact h1
noncomputable def Arrow.middle {X : C} {S : J.Cover X} {T : ‚àÄ I : S.Arrow, J.Cover I.Y}
    (I : (S.bind T).Arrow) : C :=
  I.hf.choose
noncomputable def Arrow.toMiddleHom {X : C} {S : J.Cover X} {T : ‚àÄ I : S.Arrow, J.Cover I.Y}
    (I : (S.bind T).Arrow) : I.Y ‚ü∂ I.middle :=
  I.hf.choose_spec.choose
noncomputable def Arrow.fromMiddleHom {X : C} {S : J.Cover X} {T : ‚àÄ I : S.Arrow, J.Cover I.Y}
    (I : (S.bind T).Arrow) : I.middle ‚ü∂ X :=
  I.hf.choose_spec.choose_spec.choose
theorem Arrow.from_middle_condition {X : C} {S : J.Cover X} {T : ‚àÄ I : S.Arrow, J.Cover I.Y}
    (I : (S.bind T).Arrow) : S I.fromMiddleHom :=
  I.hf.choose_spec.choose_spec.choose_spec.choose
noncomputable def Arrow.fromMiddle {X : C} {S : J.Cover X} {T : ‚àÄ I : S.Arrow, J.Cover I.Y}
    (I : (S.bind T).Arrow) : S.Arrow :=
  ‚ü®_, I.fromMiddleHom, I.from_middle_condition‚ü©
theorem Arrow.to_middle_condition {X : C} {S : J.Cover X} {T : ‚àÄ I : S.Arrow, J.Cover I.Y}
    (I : (S.bind T).Arrow) : (T I.fromMiddle) I.toMiddleHom :=
  I.hf.choose_spec.choose_spec.choose_spec.choose_spec.1
noncomputable def Arrow.toMiddle {X : C} {S : J.Cover X} {T : ‚àÄ I : S.Arrow, J.Cover I.Y}
    (I : (S.bind T).Arrow) : (T I.fromMiddle).Arrow :=
  ‚ü®_, I.toMiddleHom, I.to_middle_condition‚ü©
theorem Arrow.middle_spec {X : C} {S : J.Cover X} {T : ‚àÄ I : S.Arrow, J.Cover I.Y}
    (I : (S.bind T).Arrow) : I.toMiddleHom ‚â´ I.fromMiddleHom = I.f :=
  I.hf.choose_spec.choose_spec.choose_spec.choose_spec.2
@[ext]
structure Relation (S : J.Cover X) where
  fst : S.Arrow
  snd : S.Arrow
  r : fst.Relation snd
@[simps]
def Relation.mk' {S : J.Cover X} {fst snd : S.Arrow} (r : fst.Relation snd) :
    S.Relation where
  r := r
@[simps]
def index {D : Type u‚ÇÅ} [Category.{v‚ÇÅ} D] (S : J.Cover X) (P : C·µí·µñ ‚•§ D) :
    Limits.MulticospanIndex D where
  L := S.Arrow
  R := S.Relation
  fstTo I := I.fst
  sndTo I := I.snd
  left I := P.obj (Opposite.op I.Y)
  right I := P.obj (Opposite.op I.r.Z)
  fst I := P.map I.r.g‚ÇÅ.op
  snd I := P.map I.r.g‚ÇÇ.op
abbrev multifork {D : Type u‚ÇÅ} [Category.{v‚ÇÅ} D] (S : J.Cover X) (P : C·µí·µñ ‚•§ D) :
    Limits.Multifork (S.index P) :=
  Limits.Multifork.ofŒπ _ (P.obj (Opposite.op X)) (fun I => P.map I.f.op)
    (by
      intro I
      dsimp
      simp only [‚Üê P.map_comp, ‚Üê op_comp, I.r.w])
noncomputable abbrev toMultiequalizer {D : Type u‚ÇÅ} [Category.{v‚ÇÅ} D] (S : J.Cover X)
    (P : C·µí·µñ ‚•§ D) [Limits.HasMultiequalizer (S.index P)] :
    P.obj (Opposite.op X) ‚ü∂ Limits.multiequalizer (S.index P) :=
  Limits.Multiequalizer.lift _ _ (fun I => P.map I.f.op)
    (by
      intro I
      dsimp only [index, Relation.fst, Relation.snd]
      simp only [‚Üê P.map_comp, ‚Üê op_comp, I.r.w])
end Cover
@[simps obj]
def pullback (f : Y ‚ü∂ X) : J.Cover X ‚•§ J.Cover Y where
  obj S := S.pullback f
  map f := (Sieve.pullback_monotone _ f.le).hom
def pullbackId (X : C) : J.pullback (ùüô X) ‚âÖ ùü≠ _ :=
  NatIso.ofComponents fun S => S.pullbackId
def pullbackComp {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    J.pullback (f ‚â´ g) ‚âÖ J.pullback g ‚ãô J.pullback f :=
  NatIso.ofComponents fun S => S.pullbackComp f g
end GrothendieckTopology
end CategoryTheory