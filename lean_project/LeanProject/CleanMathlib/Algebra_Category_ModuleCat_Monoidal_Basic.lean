import Mathlib.Algebra.Category.ModuleCat.Basic
import Mathlib.LinearAlgebra.TensorProduct.Basic
import Mathlib.CategoryTheory.Monoidal.Linear
suppress_compilation
universe v w x u
open CategoryTheory
namespace ModuleCat
variable {R : Type u} [CommRing R]
namespace MonoidalCategory
open TensorProduct
attribute [local ext] TensorProduct.ext
def tensorObj (M N : ModuleCat R) : ModuleCat R :=
  ModuleCat.of R (M ‚äó[R] N)
def tensorHom {M N M' N' : ModuleCat R} (f : M ‚ü∂ N) (g : M' ‚ü∂ N') :
    tensorObj M M' ‚ü∂ tensorObj N N' :=
  TensorProduct.map f g
def whiskerLeft (M : ModuleCat R) {N‚ÇÅ N‚ÇÇ : ModuleCat R} (f : N‚ÇÅ ‚ü∂ N‚ÇÇ) :
    tensorObj M N‚ÇÅ ‚ü∂ tensorObj M N‚ÇÇ :=
  f.lTensor M
def whiskerRight {M‚ÇÅ M‚ÇÇ : ModuleCat R} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (N : ModuleCat R) :
    tensorObj M‚ÇÅ N ‚ü∂ tensorObj M‚ÇÇ N :=
  f.rTensor N
theorem tensor_id (M N : ModuleCat R) : tensorHom (ùüô M) (ùüô N) = ùüô (ModuleCat.of R (M ‚äó N)) := by
  apply TensorProduct.ext
  rfl
theorem tensor_comp {X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ : ModuleCat R} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ)
    (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) : tensorHom (f‚ÇÅ ‚â´ g‚ÇÅ) (f‚ÇÇ ‚â´ g‚ÇÇ) = tensorHom f‚ÇÅ f‚ÇÇ ‚â´ tensorHom g‚ÇÅ g‚ÇÇ := by
  apply TensorProduct.ext
  rfl
def associator (M : ModuleCat.{v} R) (N : ModuleCat.{w} R) (K : ModuleCat.{x} R) :
    tensorObj (tensorObj M N) K ‚âÖ tensorObj M (tensorObj N K) :=
  (TensorProduct.assoc R M N K).toModuleIso
def leftUnitor (M : ModuleCat.{u} R) : ModuleCat.of R (R ‚äó[R] M) ‚âÖ M :=
  (LinearEquiv.toModuleIso (TensorProduct.lid R M) : of R (R ‚äó M) ‚âÖ of R M).trans (ofSelfIso M)
def rightUnitor (M : ModuleCat.{u} R) : ModuleCat.of R (M ‚äó[R] R) ‚âÖ M :=
  (LinearEquiv.toModuleIso (TensorProduct.rid R M) : of R (M ‚äó R) ‚âÖ of R M).trans (ofSelfIso M)
@[simps (config := .lemmasOnly)]
instance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where
  tensorObj := tensorObj
  whiskerLeft := whiskerLeft
  whiskerRight := whiskerRight
  tensorHom f g := TensorProduct.map f g
  tensorUnit := ModuleCat.of R R
  associator := associator
  leftUnitor := leftUnitor
  rightUnitor := rightUnitor
section
open TensorProduct (assoc map)
private theorem associator_naturality_aux {X‚ÇÅ X‚ÇÇ X‚ÇÉ : Type*} [AddCommMonoid X‚ÇÅ] [AddCommMonoid X‚ÇÇ]
    [AddCommMonoid X‚ÇÉ] [Module R X‚ÇÅ] [Module R X‚ÇÇ] [Module R X‚ÇÉ] {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Type*}
    [AddCommMonoid Y‚ÇÅ] [AddCommMonoid Y‚ÇÇ] [AddCommMonoid Y‚ÇÉ] [Module R Y‚ÇÅ] [Module R Y‚ÇÇ]
    [Module R Y‚ÇÉ] (f‚ÇÅ : X‚ÇÅ ‚Üí‚Çó[R] Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚Üí‚Çó[R] Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚Üí‚Çó[R] Y‚ÇÉ) :
    ‚Üë(assoc R Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ) ‚àò‚Çó map (map f‚ÇÅ f‚ÇÇ) f‚ÇÉ = map f‚ÇÅ (map f‚ÇÇ f‚ÇÉ) ‚àò‚Çó ‚Üë(assoc R X‚ÇÅ X‚ÇÇ X‚ÇÉ) := by
  apply TensorProduct.ext_threefold
  intro x y z
  rfl
variable (R)
private theorem pentagon_aux (W X Y Z : Type*) [AddCommMonoid W] [AddCommMonoid X]
    [AddCommMonoid Y] [AddCommMonoid Z] [Module R W] [Module R X] [Module R Y] [Module R Z] :
    (((assoc R X Y Z).toLinearMap.lTensor W).comp
            (assoc R W (X ‚äó[R] Y) Z).toLinearMap).comp
        ((assoc R W X Y).toLinearMap.rTensor Z) =
      (assoc R W X (Y ‚äó[R] Z)).toLinearMap.comp (assoc R (W ‚äó[R] X) Y Z).toLinearMap := by
  apply TensorProduct.ext_fourfold
  intro w x y z
  rfl
end
theorem associator_naturality {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : ModuleCat R} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ)
    (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
    tensorHom (tensorHom f‚ÇÅ f‚ÇÇ) f‚ÇÉ ‚â´ (associator Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom =
      (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ tensorHom f‚ÇÅ (tensorHom f‚ÇÇ f‚ÇÉ) := by
  convert associator_naturality_aux f‚ÇÅ f‚ÇÇ f‚ÇÉ using 1
theorem pentagon (W X Y Z : ModuleCat R) :
    whiskerRight (associator W X Y).hom Z ‚â´
        (associator W (tensorObj X Y) Z).hom ‚â´ whiskerLeft W (associator X Y Z).hom =
      (associator (tensorObj W X) Y Z).hom ‚â´ (associator W X (tensorObj Y Z)).hom := by
  convert pentagon_aux R W X Y Z using 1
theorem leftUnitor_naturality {M N : ModuleCat R} (f : M ‚ü∂ N) :
    tensorHom (ùüô (ModuleCat.of R R)) f ‚â´ (leftUnitor N).hom = (leftUnitor M).hom ‚â´ f := by
  apply TensorProduct.ext
  apply LinearMap.ext_ring
  apply LinearMap.ext; intro x
  change ((leftUnitor N).hom) ((tensorHom (ùüô (of R R)) f) ((1 : R) ‚äó‚Çú[R] x)) =
    f (((leftUnitor M).hom) (1 ‚äó‚Çú[R] x))
  erw [TensorProduct.lid_tmul, TensorProduct.lid_tmul]
  rw [LinearMap.map_smul]
  rfl
theorem rightUnitor_naturality {M N : ModuleCat R} (f : M ‚ü∂ N) :
    tensorHom f (ùüô (ModuleCat.of R R)) ‚â´ (rightUnitor N).hom = (rightUnitor M).hom ‚â´ f := by
  apply TensorProduct.ext
  apply LinearMap.ext; intro x
  apply LinearMap.ext_ring
  change ((rightUnitor N).hom) ((tensorHom f (ùüô (of R R))) (x ‚äó‚Çú[R] (1 : R))) =
    f (((rightUnitor M).hom) (x ‚äó‚Çú[R] 1))
  erw [TensorProduct.rid_tmul, TensorProduct.rid_tmul]
  rw [LinearMap.map_smul]
  rfl
theorem triangle (M N : ModuleCat.{u} R) :
    (associator M (ModuleCat.of R R) N).hom ‚â´ tensorHom (ùüô M) (leftUnitor N).hom =
      tensorHom (rightUnitor M).hom (ùüô N) := by
  apply TensorProduct.ext_threefold
  intro x y z
  change R at y
  change x ‚äó‚Çú[R] ((leftUnitor N).hom) (y ‚äó‚Çú[R] z) = ((rightUnitor M).hom) (x ‚äó‚Çú[R] y) ‚äó‚Çú[R] z
  erw [TensorProduct.lid_tmul, TensorProduct.rid_tmul]
  exact (TensorProduct.smul_tmul _ _ _).symm
end MonoidalCategory
open MonoidalCategory
instance monoidalCategory : MonoidalCategory (ModuleCat.{u} R) := MonoidalCategory.ofTensorHom
  (tensor_id := fun M N ‚Ü¶ tensor_id M N)
  (tensor_comp := fun f g h ‚Ü¶ MonoidalCategory.tensor_comp f g h)
  (associator_naturality := fun f g h ‚Ü¶ MonoidalCategory.associator_naturality f g h)
  (leftUnitor_naturality := fun f ‚Ü¶ MonoidalCategory.leftUnitor_naturality f)
  (rightUnitor_naturality := fun f ‚Ü¶ rightUnitor_naturality f)
  (pentagon := fun M N K L ‚Ü¶ pentagon M N K L)
  (triangle := fun M N ‚Ü¶ triangle M N)
instance : CommRing ((ùüô_ (ModuleCat.{u} R) : ModuleCat.{u} R) : Type u) :=
  inferInstanceAs <| CommRing R
namespace MonoidalCategory
@[simp]
theorem tensorHom_tmul {K L M N : ModuleCat.{u} R} (f : K ‚ü∂ L) (g : M ‚ü∂ N) (k : K) (m : M) :
    (f ‚äó g) (k ‚äó‚Çú m) = f k ‚äó‚Çú g m :=
  rfl
@[deprecated (since := "2024-09-30")] alias hom_apply := tensorHom_tmul
@[simp]
theorem whiskerLeft_apply (L : ModuleCat.{u} R) {M N : ModuleCat.{u} R} (f : M ‚ü∂ N)
    (l : L) (m : M) :
    (L ‚óÅ f) (l ‚äó‚Çú m) = l ‚äó‚Çú f m :=
  rfl
@[simp]
theorem whiskerRight_apply {L M : ModuleCat.{u} R} (f : L ‚ü∂ M) (N : ModuleCat.{u} R)
    (l : L) (n : N) :
    (f ‚ñ∑ N) (l ‚äó‚Çú n) = f l ‚äó‚Çú n :=
  rfl
@[simp]
theorem leftUnitor_hom_apply {M : ModuleCat.{u} R} (r : R) (m : M) :
    ((Œª_ M).hom : ùüô_ (ModuleCat R) ‚äó M ‚ü∂ M) (r ‚äó‚Çú[R] m) = r ‚Ä¢ m :=
  TensorProduct.lid_tmul m r
@[simp]
theorem leftUnitor_inv_apply {M : ModuleCat.{u} R} (m : M) :
    ((Œª_ M).inv : M ‚ü∂ ùüô_ (ModuleCat.{u} R) ‚äó M) m = 1 ‚äó‚Çú[R] m :=
  TensorProduct.lid_symm_apply m
@[simp]
theorem rightUnitor_hom_apply {M : ModuleCat.{u} R} (m : M) (r : R) :
    ((œÅ_ M).hom : M ‚äó ùüô_ (ModuleCat R) ‚ü∂ M) (m ‚äó‚Çú r) = r ‚Ä¢ m :=
  TensorProduct.rid_tmul m r
@[simp]
theorem rightUnitor_inv_apply {M : ModuleCat.{u} R} (m : M) :
    ((œÅ_ M).inv : M ‚ü∂ M ‚äó ùüô_ (ModuleCat.{u} R)) m = m ‚äó‚Çú[R] 1 :=
  TensorProduct.rid_symm_apply m
@[simp]
theorem associator_hom_apply {M N K : ModuleCat.{u} R} (m : M) (n : N) (k : K) :
    ((Œ±_ M N K).hom : (M ‚äó N) ‚äó K ‚ü∂ M ‚äó N ‚äó K) (m ‚äó‚Çú n ‚äó‚Çú k) = m ‚äó‚Çú (n ‚äó‚Çú k) :=
  rfl
@[simp]
theorem associator_inv_apply {M N K : ModuleCat.{u} R} (m : M) (n : N) (k : K) :
    ((Œ±_ M N K).inv : M ‚äó N ‚äó K ‚ü∂ (M ‚äó N) ‚äó K) (m ‚äó‚Çú (n ‚äó‚Çú k)) = m ‚äó‚Çú n ‚äó‚Çú k :=
  rfl
variable {M‚ÇÅ M‚ÇÇ M‚ÇÉ M‚ÇÑ : ModuleCat.{u} R}
section
variable (f : M‚ÇÅ ‚Üí M‚ÇÇ ‚Üí M‚ÇÉ) (h‚ÇÅ : ‚àÄ m‚ÇÅ m‚ÇÇ n, f (m‚ÇÅ + m‚ÇÇ) n = f m‚ÇÅ n + f m‚ÇÇ n)
  (h‚ÇÇ : ‚àÄ (a : R) m n, f (a ‚Ä¢ m) n = a ‚Ä¢ f m n)
  (h‚ÇÉ : ‚àÄ m n‚ÇÅ n‚ÇÇ, f m (n‚ÇÅ + n‚ÇÇ) = f m n‚ÇÅ + f m n‚ÇÇ)
  (h‚ÇÑ : ‚àÄ (a : R) m n, f m (a ‚Ä¢ n) = a ‚Ä¢ f m n)
noncomputable def tensorLift : M‚ÇÅ ‚äó M‚ÇÇ ‚ü∂ M‚ÇÉ :=
  TensorProduct.lift (LinearMap.mk‚ÇÇ R f h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ)
@[simp]
lemma tensorLift_tmul (m : M‚ÇÅ) (n : M‚ÇÇ) :
    tensorLift f h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ (m ‚äó‚Çú n) = f m n := rfl
end
lemma tensor_ext {f g : M‚ÇÅ ‚äó M‚ÇÇ ‚ü∂ M‚ÇÉ} (h : ‚àÄ m n, f (m ‚äó‚Çú n) = g (m ‚äó‚Çú n)) :
    f = g :=
  TensorProduct.ext (by ext; apply h)
lemma tensor_ext‚ÇÉ' {f g : (M‚ÇÅ ‚äó M‚ÇÇ) ‚äó M‚ÇÉ ‚ü∂ M‚ÇÑ}
    (h : ‚àÄ m‚ÇÅ m‚ÇÇ m‚ÇÉ, f (m‚ÇÅ ‚äó‚Çú m‚ÇÇ ‚äó‚Çú m‚ÇÉ) = g (m‚ÇÅ ‚äó‚Çú m‚ÇÇ ‚äó‚Çú m‚ÇÉ)) :
    f = g :=
  TensorProduct.ext_threefold h
lemma tensor_ext‚ÇÉ {f g : M‚ÇÅ ‚äó (M‚ÇÇ ‚äó M‚ÇÉ) ‚ü∂ M‚ÇÑ}
    (h : ‚àÄ m‚ÇÅ m‚ÇÇ m‚ÇÉ, f (m‚ÇÅ ‚äó‚Çú (m‚ÇÇ ‚äó‚Çú m‚ÇÉ)) = g (m‚ÇÅ ‚äó‚Çú (m‚ÇÇ ‚äó‚Çú m‚ÇÉ))) :
    f = g := by
  rw [‚Üê cancel_epi (Œ±_ _ _ _).hom]
  exact tensor_ext‚ÇÉ' h
end MonoidalCategory
open Opposite
instance : MonoidalPreadditive (ModuleCat.{u} R) := by
  refine ‚ü®?_, ?_, ?_, ?_‚ü©
  ¬∑ intros
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.zero_apply]
    erw [MonoidalCategory.whiskerLeft_apply]
    rw [LinearMap.zero_apply, TensorProduct.tmul_zero]
  ¬∑ intros
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.zero_apply]
    erw [MonoidalCategory.whiskerRight_apply]
    rw [LinearMap.zero_apply, TensorProduct.zero_tmul]
  ¬∑ intros
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.add_apply]
    erw [MonoidalCategory.whiskerLeft_apply, MonoidalCategory.whiskerLeft_apply]
    erw [MonoidalCategory.whiskerLeft_apply]
    rw [LinearMap.add_apply, TensorProduct.tmul_add]
  ¬∑ intros
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.add_apply]
    erw [MonoidalCategory.whiskerRight_apply, MonoidalCategory.whiskerRight_apply]
    erw [MonoidalCategory.whiskerRight_apply]
    rw [LinearMap.add_apply, TensorProduct.add_tmul]
instance : MonoidalLinear R (ModuleCat.{u} R) := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intros
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.smul_apply]
    erw [MonoidalCategory.whiskerLeft_apply, MonoidalCategory.whiskerLeft_apply]
    rw [LinearMap.smul_apply, TensorProduct.tmul_smul]
  ¬∑ intros
    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)
    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply]
    rw [LinearMap.smul_apply]
    erw [MonoidalCategory.whiskerRight_apply, MonoidalCategory.whiskerRight_apply]
    rw [LinearMap.smul_apply, TensorProduct.smul_tmul, TensorProduct.tmul_smul]
end ModuleCat