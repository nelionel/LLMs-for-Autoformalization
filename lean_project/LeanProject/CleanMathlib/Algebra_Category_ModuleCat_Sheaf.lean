import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Limits
import Mathlib.CategoryTheory.Sites.LocallyBijective
import Mathlib.CategoryTheory.Sites.Whiskering
universe v v‚ÇÅ u‚ÇÅ u w
open CategoryTheory
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {J : GrothendieckTopology C}
  (R : Sheaf J RingCat.{u})
structure SheafOfModules where
  val : PresheafOfModules.{v} R.val
  isSheaf : Presheaf.IsSheaf J val.presheaf
namespace SheafOfModules
variable {R}
@[ext]
structure Hom (X Y : SheafOfModules.{v} R) where
  val : X.val ‚ü∂ Y.val
instance : Category (SheafOfModules.{v} R) where
  Hom := Hom
  id _ := ‚ü®ùüô _‚ü©
  comp f g := ‚ü®f.val ‚â´ g.val‚ü©
@[ext]
lemma hom_ext {X Y : SheafOfModules.{v} R} {f g : X ‚ü∂ Y} (h : f.val = g.val) : f = g :=
  Hom.ext h
@[simp]
lemma id_val (X : SheafOfModules.{v} R) : Hom.val (ùüô X) = ùüô X.val := rfl
@[simp, reassoc]
lemma comp_val {X Y Z : SheafOfModules.{v} R} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).val = f.val ‚â´ g.val := rfl
variable (R)
@[simps]
def forget : SheafOfModules.{v} R ‚•§ PresheafOfModules R.val where
  obj F := F.val
  map œÜ := œÜ.val
@[simps]
def fullyFaithfulForget : (forget.{v} R).FullyFaithful where
  preimage œÜ := ‚ü®œÜ‚ü©
instance : (forget.{v} R).Faithful := (fullyFaithfulForget R).faithful
instance : (forget.{v} R).Full := (fullyFaithfulForget R).full
instance : (forget.{v} R).ReflectsIsomorphisms := (fullyFaithfulForget R).reflectsIsomorphisms
def evaluation (X : C·µí·µñ) : SheafOfModules.{v} R ‚•§ ModuleCat.{v} (R.val.obj X) :=
  forget _ ‚ãô PresheafOfModules.evaluation _ X
@[simps]
def toSheaf : SheafOfModules.{v} R ‚•§ Sheaf J AddCommGrp.{v} where
  obj M := ‚ü®_, M.isSheaf‚ü©
  map f := { val := (forget R ‚ãô PresheafOfModules.toPresheaf R.val).map f }
@[simps]
noncomputable def forgetToSheafModuleCat
      (X : C·µí·µñ) (hX : Limits.IsInitial X)  :
    SheafOfModules.{w} R ‚•§ Sheaf J (ModuleCat.{w} (R.1.obj X)) where
  obj M := ‚ü®(PresheafOfModules.forgetToPresheafModuleCat X hX).obj M.1,
    Presheaf.isSheaf_of_isSheaf_comp _ _
      (forget‚ÇÇ (ModuleCat.{w} (R.1.obj X)) AddCommGrp.{w}) M.isSheaf‚ü©
  map f := { val := (PresheafOfModules.forgetToPresheafModuleCat X hX).map f.1 }
def toSheafCompSheafToPresheafIso :
    toSheaf R ‚ãô sheafToPresheaf J AddCommGrp.{v} ‚âÖ
      forget R ‚ãô PresheafOfModules.toPresheaf R.val := Iso.refl _
instance : (toSheaf.{v} R).Faithful :=
  Functor.Faithful.of_comp_iso (toSheafCompSheafToPresheafIso.{v} R)
instance (M N : SheafOfModules.{v} R) : AddCommGroup (M ‚ü∂ N) :=
  (fullyFaithfulForget R).homEquiv.addCommGroup
@[simp]
lemma add_val {M N : SheafOfModules.{v} R} (f g : M ‚ü∂ N) :
    (f + g).val = f.val + g.val := rfl
instance : Preadditive (SheafOfModules.{v} R) where
  add_comp := by intros; ext1; dsimp; simp only [Preadditive.add_comp]
  comp_add := by intros; ext1; dsimp; simp only [Preadditive.comp_add]
instance : (forget R).Additive where
instance : (toSheaf R).Additive where
variable {R}
abbrev sections (M : SheafOfModules.{v} R) : Type _ := M.val.sections
abbrev sectionsMap {M N : SheafOfModules.{v} R} (f : M ‚ü∂ N) (s : M.sections) : N.sections :=
  PresheafOfModules.sectionsMap f.val s
@[simp]
lemma sectionsMap_comp {M N P : SheafOfModules.{v} R} (f : M ‚ü∂ N) (g : N ‚ü∂ P) (s : M.sections) :
    sectionsMap (f ‚â´ g) s = sectionsMap g (sectionsMap f s) := rfl
@[simp]
lemma sectionsMap_id {M : SheafOfModules.{v} R} (s : M.sections) :
    sectionsMap (ùüô M) s = s := rfl
variable (R) in
@[simps]
def sectionsFunctor : SheafOfModules.{v} R ‚•§ Type _ where
  obj := sections
  map f := sectionsMap f
variable [J.HasSheafCompose (forget‚ÇÇ RingCat.{u} AddCommGrp.{u})]
variable (R) in
@[simps]
def unit : SheafOfModules R where
  val := PresheafOfModules.unit R.val
  isSheaf := ((sheafCompose J (forget‚ÇÇ RingCat.{u} AddCommGrp.{u})).obj R).cond
def unitHomEquiv (M : SheafOfModules R) :
    (unit R ‚ü∂ M) ‚âÉ M.sections :=
  (fullyFaithfulForget R).homEquiv.trans M.val.unitHomEquiv
@[simp]
lemma unitHomEquiv_apply_coe (M : SheafOfModules R) (f : unit R ‚ü∂ M) (X : C·µí·µñ) :
    (M.unitHomEquiv f).val X = f.val.app X (1 : R.val.obj X) := rfl
lemma unitHomEquiv_comp_apply {M N : SheafOfModules.{u} R}
    (f : unit R ‚ü∂ M) (p : M ‚ü∂ N) :
    N.unitHomEquiv (f ‚â´ p) = sectionsMap p (M.unitHomEquiv f) := rfl
lemma unitHomEquiv_symm_comp {M N : SheafOfModules.{u} R} (s : M.sections) (p : M ‚ü∂ N) :
    M.unitHomEquiv.symm s ‚â´ p = N.unitHomEquiv.symm (sectionsMap p s) :=
  N.unitHomEquiv.injective (by simp [unitHomEquiv_comp_apply])
end SheafOfModules
namespace PresheafOfModules
variable (J)
variable {R : C·µí·µñ ‚•§ RingCat.{u}} {M‚ÇÅ M‚ÇÇ : PresheafOfModules.{v} R} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ)
abbrev IsLocallySurjective : Prop :=
  Presheaf.IsLocallySurjective J ((PresheafOfModules.toPresheaf R).map f)
abbrev IsLocallyInjective : Prop :=
  Presheaf.IsLocallyInjective J ((PresheafOfModules.toPresheaf R).map f)
variable {N : PresheafOfModules.{v} R} (hN : Presheaf.IsSheaf J N.presheaf)
  [J.WEqualsLocallyBijective AddCommGrp.{v}]
  [IsLocallySurjective J f] [IsLocallyInjective J f]
variable {J}
@[simps]
noncomputable def homEquivOfIsLocallyBijective : (M‚ÇÇ ‚ü∂ N) ‚âÉ (M‚ÇÅ ‚ü∂ N) where
  toFun œÜ := f ‚â´ œÜ
  invFun œà := homMk (((J.W_of_isLocallyBijective
      ((PresheafOfModules.toPresheaf R).map f)).homEquiv _ hN).symm
      ((PresheafOfModules.toPresheaf R).map œà)) (by
        obtain ‚ü®œÜ, hœÜ‚ü© := ((J.W_of_isLocallyBijective
          ((PresheafOfModules.toPresheaf R).map f)).homEquiv _ hN).surjective
          ((PresheafOfModules.toPresheaf R).map œà)
        simp only [‚Üê hœÜ, Equiv.symm_apply_apply]
        replace hœÜ : ‚àÄ (Z : C·µí·µñ) (x : M‚ÇÅ.obj Z), œÜ.app Z (f.app Z x) = œà.app Z x :=
          fun Z x ‚Ü¶ congr_fun ((forget _).congr_map (congr_app hœÜ Z)) x
        intro X r y
        apply hN.isSeparated _ _
          (Presheaf.imageSieve_mem J ((toPresheaf R).map f) y)
        rintro Y p ‚ü®x : M‚ÇÅ.obj _, hx : f.app _ x = M‚ÇÇ.map p.op y‚ü©
        have hœÜ' : ‚àÄ (z : M‚ÇÇ.obj X), œÜ.app _ (M‚ÇÇ.map p.op z) =
            N.map p.op (œÜ.app _ z) := congr_fun ((forget _).congr_map (œÜ.naturality p.op))
        change N.map p.op (œÜ.app X (r ‚Ä¢ y)) = N.map p.op (r ‚Ä¢ œÜ.app X y)
        rw [‚Üê hœÜ', M‚ÇÇ.map_smul, ‚Üê hx, ‚Üê (f.app _).map_smul, hœÜ, (œà.app _).map_smul,
          ‚Üê hœÜ, hx, N.map_smul, hœÜ'])
  left_inv œÜ := (toPresheaf _).map_injective
    (((J.W_of_isLocallyBijective
      ((PresheafOfModules.toPresheaf R).map f)).homEquiv _ hN).left_inv
      ((PresheafOfModules.toPresheaf R).map œÜ))
  right_inv œà := (toPresheaf _).map_injective
    (((J.W_of_isLocallyBijective
      ((PresheafOfModules.toPresheaf R).map f)).homEquiv _ hN).right_inv
      ((PresheafOfModules.toPresheaf R).map œà))
end PresheafOfModules