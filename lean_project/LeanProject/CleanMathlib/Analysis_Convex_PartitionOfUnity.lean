import Mathlib.Topology.PartitionOfUnity
import Mathlib.Analysis.Convex.Combination
open Set Function
open Topology
variable {Œπ X E : Type*} [TopologicalSpace X] [AddCommGroup E] [Module ‚Ñù E]
theorem PartitionOfUnity.finsum_smul_mem_convex {s : Set X} (f : PartitionOfUnity Œπ X s)
    {g : Œπ ‚Üí X ‚Üí E} {t : Set E} {x : X} (hx : x ‚àà s) (hg : ‚àÄ i, f i x ‚â† 0 ‚Üí g i x ‚àà t)
    (ht : Convex ‚Ñù t) : (‚àë·∂† i, f i x ‚Ä¢ g i x) ‚àà t :=
  ht.finsum_mem (fun _ => f.nonneg _ _) (f.sum_eq_one hx) hg
variable [NormalSpace X] [ParacompactSpace X] [TopologicalSpace E] [ContinuousAdd E]
  [ContinuousSMul ‚Ñù E] {t : X ‚Üí Set E}
theorem exists_continuous_forall_mem_convex_of_local (ht : ‚àÄ x, Convex ‚Ñù (t x))
    (H : ‚àÄ x : X, ‚àÉ U ‚àà ùìù x, ‚àÉ g : X ‚Üí E, ContinuousOn g U ‚àß ‚àÄ y ‚àà U, g y ‚àà t y) :
    ‚àÉ g : C(X, E), ‚àÄ x, g x ‚àà t x := by
  choose U hU g hgc hgt using H
  obtain ‚ü®f, hf‚ü© := PartitionOfUnity.exists_isSubordinate isClosed_univ (fun x => interior (U x))
    (fun x => isOpen_interior) fun x _ => mem_iUnion.2 ‚ü®x, mem_interior_iff_mem_nhds.2 (hU x)‚ü©
  refine ‚ü®‚ü®fun x => ‚àë·∂† i, f i x ‚Ä¢ g i x,
    hf.continuous_finsum_smul (fun i => isOpen_interior) fun i => (hgc i).mono interior_subset‚ü©,
    fun x => f.finsum_smul_mem_convex (mem_univ x) (fun i hi => hgt _ _ ?_) (ht _)‚ü©
  exact interior_subset (hf _ <| subset_closure hi)
theorem exists_continuous_forall_mem_convex_of_local_const (ht : ‚àÄ x, Convex ‚Ñù (t x))
    (H : ‚àÄ x : X, ‚àÉ c : E, ‚àÄ·∂† y in ùìù x, c ‚àà t y) : ‚àÉ g : C(X, E), ‚àÄ x, g x ‚àà t x :=
  exists_continuous_forall_mem_convex_of_local ht fun x =>
    let ‚ü®c, hc‚ü© := H x
    ‚ü®_, hc, fun _ => c, continuousOn_const, fun _ => id‚ü©