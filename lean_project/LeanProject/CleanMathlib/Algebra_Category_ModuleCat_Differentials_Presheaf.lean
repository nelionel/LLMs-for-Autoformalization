import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Differentials.Basic
universe v u v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ
open CategoryTheory
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
namespace PresheafOfModules
variable {S : C·µí·µñ ‚•§ CommRingCat.{u}} {F : C ‚•§ D} {S' R : D·µí·µñ ‚•§ CommRingCat.{u}}
   (M N : PresheafOfModules.{v} (R ‚ãô forget‚ÇÇ _ _))
   (œÜ : S ‚ü∂ F.op ‚ãô R) (œÜ' : S' ‚ü∂ R)
@[ext]
structure Derivation where
  d {X : D·µí·µñ} : R.obj X ‚Üí+ M.obj X
  d_mul {X : D·µí·µñ} (a b : R.obj X) : d (a * b) = a ‚Ä¢ d b + b ‚Ä¢ d a := by aesop_cat
  d_map {X Y : D·µí·µñ} (f : X ‚ü∂ Y) (x : R.obj X) :
    d (R.map f x) = M.map f (d x) := by aesop_cat
  d_app {X : C·µí·µñ} (a : S.obj X) : d (œÜ.app X a) = 0 := by aesop_cat
namespace Derivation
attribute [simp] d_mul d_map
variable {M N œÜ}
lemma congr_d {d d' : M.Derivation œÜ} (h : d = d') {X : D·µí·µñ} (b : R.obj X) :
    d.d b = d'.d b := by rw [h]
variable (d : M.Derivation œÜ)
@[simp] lemma d_one (X : D·µí·µñ) : d.d (X := X) 1 = 0 := by
  simpa using d.d_mul (X := X) 1 1
@[simps! d_apply]
def postcomp (f : M ‚ü∂ N) : N.Derivation œÜ where
  d := (f.app _).toAddMonoidHom.comp d.d
  d_map {X Y} g x := by simpa using naturality_apply f g (d.d x)
  d_app {X} a := by
    dsimp
    erw [d_app, map_zero]
structure Universal where
  desc {M' : PresheafOfModules (R ‚ãô forget‚ÇÇ CommRingCat RingCat)}
    (d' : M'.Derivation œÜ) : M ‚ü∂ M'
  fac {M' : PresheafOfModules (R ‚ãô forget‚ÇÇ CommRingCat RingCat)}
    (d' : M'.Derivation œÜ) : d.postcomp (desc d') = d' := by aesop_cat
  postcomp_injective {M' : PresheafOfModules (R ‚ãô forget‚ÇÇ CommRingCat RingCat)}
    (œÜ œÜ' : M ‚ü∂ M') (h : d.postcomp œÜ = d.postcomp œÜ') : œÜ = œÜ' := by aesop_cat
attribute [simp] Universal.fac
instance : Subsingleton d.Universal where
  allEq h‚ÇÅ h‚ÇÇ := by
    suffices ‚àÄ {M' : PresheafOfModules (R ‚ãô forget‚ÇÇ CommRingCat RingCat)}
      (d' : M'.Derivation œÜ), h‚ÇÅ.desc d' = h‚ÇÇ.desc d' by
        cases h‚ÇÅ
        cases h‚ÇÇ
        simp only [Universal.mk.injEq]
        ext : 2
        apply this
    intro M' d'
    apply h‚ÇÅ.postcomp_injective
    simp
end Derivation
class HasDifferentials : Prop where
  exists_universal_derivation : ‚àÉ (M : PresheafOfModules.{u} (R ‚ãô forget‚ÇÇ _ _))
      (d : M.Derivation œÜ), Nonempty d.Universal
abbrev Derivation' : Type _ := M.Derivation (F := ùü≠ D) œÜ'
namespace Derivation'
variable {M œÜ'}
@[simp]
nonrec lemma d_app (d : M.Derivation' œÜ') {X : D·µí·µñ} (a : S'.obj X) :
    d.d (œÜ'.app X a) = 0 :=
  d.d_app _
noncomputable def app (d : M.Derivation' œÜ') (X : D·µí·µñ) : (M.obj X).Derivation (œÜ'.app X) :=
  ModuleCat.Derivation.mk (fun b ‚Ü¶ d.d b)
@[simp]
lemma app_apply (d : M.Derivation' œÜ') {X : D·µí·µñ} (b : R.obj X) :
    (d.app X).d b = d.d b := rfl
section
variable (d : ‚àÄ (X : D·µí·µñ), (M.obj X).Derivation (œÜ'.app X))
def mk (d_map : ‚àÄ ‚¶ÉX Y : D·µí·µñ‚¶Ñ (f : X ‚ü∂ Y) (x : R.obj X),
    (d Y).d ((R.map f) x) = (M.map f) ((d X).d x)) : M.Derivation' œÜ' where
  d {X} := AddMonoidHom.mk' (d X).d (by simp)
variable (d_map : ‚àÄ ‚¶ÉX Y : D·µí·µñ‚¶Ñ (f : X ‚ü∂ Y) (x : R.obj X),
      (d Y).d ((R.map f) x) = (M.map f) ((d X).d x))
@[simp]
lemma mk_app (X : D·µí·µñ) : (mk d d_map).app X = d X := rfl
def Universal.mk {d : M.Derivation' œÜ'}
    (desc : ‚àÄ {M' : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)}
      (_ : M'.Derivation' œÜ'), M ‚ü∂ M')
    (fac : ‚àÄ {M' : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)}
      (d' : M'.Derivation' œÜ'), d.postcomp (desc d') = d')
    (postcomp_injective : ‚àÄ {M' : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)}
      (Œ± Œ≤ : M ‚ü∂ M'), d.postcomp Œ± = d.postcomp Œ≤ ‚Üí Œ± = Œ≤) : d.Universal where
  desc := desc
  fac := fac
  postcomp_injective := postcomp_injective
end
end Derivation'
namespace DifferentialsConstruction
@[simps (config := .lemmasOnly)]
noncomputable def relativeDifferentials' :
    PresheafOfModules.{u} (R ‚ãô forget‚ÇÇ _ _) where
  obj X := CommRingCat.KaehlerDifferential (œÜ'.app X)
  map f := CommRingCat.KaehlerDifferential.map (œÜ'.naturality f)
  map_id _ := by ext; simp; rfl
  map_comp _ _ := by ext; simp
attribute [simp] relativeDifferentials'_obj
@[simp]
lemma relativeDifferentials'_map_d {X Y : D·µí·µñ} (f : X ‚ü∂ Y) (x : R.obj X) :
    DFunLike.coe (Œ± := CommRingCat.KaehlerDifferential (œÜ'.app X))
      (Œ≤ := fun _ ‚Ü¶ CommRingCat.KaehlerDifferential (œÜ'.app Y))
      ((relativeDifferentials' œÜ').map f) (CommRingCat.KaehlerDifferential.d x) =
        CommRingCat.KaehlerDifferential.d (R.map f x) :=
  CommRingCat.KaehlerDifferential.map_d (œÜ'.naturality f) _
noncomputable def derivation' : (relativeDifferentials' œÜ').Derivation' œÜ' :=
  Derivation'.mk (fun X ‚Ü¶ CommRingCat.KaehlerDifferential.D (œÜ'.app X))
    (fun _ _ f x ‚Ü¶ (relativeDifferentials'_map_d œÜ' f x).symm)
noncomputable def isUniversal' : (derivation' œÜ').Universal :=
  Derivation'.Universal.mk
    (fun {M'} d' ‚Ü¶
      { app := fun X ‚Ü¶ (d'.app X).desc
        naturality := fun {X Y} f ‚Ü¶ CommRingCat.KaehlerDifferential.ext (fun b ‚Ü¶ by
          dsimp
          rw [ModuleCat.Derivation.desc_d, Derivation'.app_apply]
          erw [relativeDifferentials'_map_d œÜ' f]
          rw [ModuleCat.Derivation.desc_d]
          dsimp
          rw [Derivation.d_map]
          dsimp) })
    (fun {M'} d' ‚Ü¶ by
      ext X b
      apply ModuleCat.Derivation.desc_d)
    (fun {M} Œ± Œ≤ h ‚Ü¶ by
      ext1 X
      exact CommRingCat.KaehlerDifferential.ext (Derivation.congr_d h))
instance : HasDifferentials (F := ùü≠ D) œÜ' := ‚ü®_, _,  ‚ü®isUniversal' œÜ'‚ü©‚ü©
end DifferentialsConstruction
end PresheafOfModules