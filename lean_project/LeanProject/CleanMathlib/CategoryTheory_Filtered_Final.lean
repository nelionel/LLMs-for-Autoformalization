import Mathlib.CategoryTheory.Filtered.Connected
import Mathlib.CategoryTheory.Limits.TypesFiltered
import Mathlib.CategoryTheory.Limits.Final
universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ
namespace CategoryTheory
open CategoryTheory.Limits CategoryTheory.Functor Opposite
section ArbitraryUniverses
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (F : C ‚•§ D)
theorem Functor.final_of_isFiltered_structuredArrow [‚àÄ d, IsFiltered (StructuredArrow d F)] :
    Final F where
  out _ := IsFiltered.isConnected _
theorem Functor.initial_of_isCofiltered_costructuredArrow
    [‚àÄ d, IsCofiltered (CostructuredArrow F d)] : Initial F where
  out _ := IsCofiltered.isConnected _
theorem isFiltered_structuredArrow_of_isFiltered_of_exists [IsFilteredOrEmpty C]
    (h‚ÇÅ : ‚àÄ d, ‚àÉ c, Nonempty (d ‚ü∂ F.obj c)) (h‚ÇÇ : ‚àÄ {d : D} {c : C} (s s' : d ‚ü∂ F.obj c),
      ‚àÉ (c' : C) (t : c ‚ü∂ c'), s ‚â´ F.map t = s' ‚â´ F.map t) (d : D) :
    IsFiltered (StructuredArrow d F) := by
  have : Nonempty (StructuredArrow d F) := by
    obtain ‚ü®c, ‚ü®f‚ü©‚ü© := h‚ÇÅ d
    exact ‚ü®.mk f‚ü©
  suffices IsFilteredOrEmpty (StructuredArrow d F) from IsFiltered.mk
  refine ‚ü®fun f g => ?_, fun f g Œ∑ Œº => ?_‚ü©
  ¬∑ obtain ‚ü®c, ‚ü®t, ht‚ü©‚ü© := h‚ÇÇ (f.hom ‚â´ F.map (IsFiltered.leftToMax f.right g.right))
        (g.hom ‚â´ F.map (IsFiltered.rightToMax f.right g.right))
    refine ‚ü®.mk (f.hom ‚â´ F.map (IsFiltered.leftToMax f.right g.right ‚â´ t)), ?_, ?_, trivial‚ü©
    ¬∑ exact StructuredArrow.homMk (IsFiltered.leftToMax _ _ ‚â´ t) rfl
    ¬∑ exact StructuredArrow.homMk (IsFiltered.rightToMax _ _ ‚â´ t) (by simpa using ht.symm)
  ¬∑ refine ‚ü®.mk (f.hom ‚â´ F.map (Œ∑.right ‚â´ IsFiltered.coeqHom Œ∑.right Œº.right)),
      StructuredArrow.homMk (IsFiltered.coeqHom Œ∑.right Œº.right) (by simp), ?_‚ü©
    simpa using IsFiltered.coeq_condition _ _
theorem isCofiltered_costructuredArrow_of_isCofiltered_of_exists [IsCofilteredOrEmpty C]
    (h‚ÇÅ : ‚àÄ d, ‚àÉ c, Nonempty (F.obj c ‚ü∂ d)) (h‚ÇÇ : ‚àÄ {d : D} {c : C} (s s' : F.obj c ‚ü∂ d),
      ‚àÉ (c' : C) (t : c' ‚ü∂ c), F.map t ‚â´ s = F.map t ‚â´ s') (d : D) :
    IsCofiltered (CostructuredArrow F d) := by
  suffices IsFiltered (CostructuredArrow F d)·µí·µñ from isCofiltered_of_isFiltered_op _
  suffices IsFiltered (StructuredArrow (op d) F.op) from
    IsFiltered.of_equivalence (costructuredArrowOpEquivalence _ _).symm
  apply isFiltered_structuredArrow_of_isFiltered_of_exists
  ¬∑ intro d
    obtain ‚ü®c, ‚ü®t‚ü©‚ü© := h‚ÇÅ d.unop
    exact ‚ü®op c, ‚ü®Quiver.Hom.op t‚ü©‚ü©
  ¬∑ intro d c s s'
    obtain ‚ü®c', t, ht‚ü© := h‚ÇÇ s.unop s'.unop
    exact ‚ü®op c', Quiver.Hom.op t, Quiver.Hom.unop_inj ht‚ü©
theorem Functor.final_of_exists_of_isFiltered [IsFilteredOrEmpty C]
    (h‚ÇÅ : ‚àÄ d, ‚àÉ c, Nonempty (d ‚ü∂ F.obj c)) (h‚ÇÇ : ‚àÄ {d : D} {c : C} (s s' : d ‚ü∂ F.obj c),
      ‚àÉ (c' : C) (t : c ‚ü∂ c'), s ‚â´ F.map t = s' ‚â´ F.map t) : Functor.Final F := by
  suffices ‚àÄ d, IsFiltered (StructuredArrow d F) from final_of_isFiltered_structuredArrow F
  exact isFiltered_structuredArrow_of_isFiltered_of_exists F h‚ÇÅ h‚ÇÇ
theorem Functor.final_const_of_isTerminal [IsFiltered C] {X : D} (hX : IsTerminal X) :
    ((Functor.const C).obj X).Final :=
  Functor.final_of_exists_of_isFiltered _ (fun _ => ‚ü®IsFiltered.nonempty.some, ‚ü®hX.from _‚ü©‚ü©)
    (fun {_ c} _ _ => ‚ü®c, ùüô _, hX.hom_ext _ _‚ü©)
theorem Functor.final_const_terminal [IsFiltered C] [HasTerminal D] :
    ((Functor.const C).obj (‚ä§_ D)).Final :=
  Functor.final_const_of_isTerminal terminalIsTerminal
theorem Functor.initial_of_exists_of_isCofiltered [IsCofilteredOrEmpty C]
    (h‚ÇÅ : ‚àÄ d, ‚àÉ c, Nonempty (F.obj c ‚ü∂ d)) (h‚ÇÇ : ‚àÄ {d : D} {c : C} (s s' : F.obj c ‚ü∂ d),
      ‚àÉ (c' : C) (t : c' ‚ü∂ c), F.map t ‚â´ s = F.map t ‚â´ s') : Functor.Initial F := by
  suffices ‚àÄ d, IsCofiltered (CostructuredArrow F d) from
    initial_of_isCofiltered_costructuredArrow F
  exact isCofiltered_costructuredArrow_of_isCofiltered_of_exists F h‚ÇÅ h‚ÇÇ
theorem Functor.initial_const_of_isInitial [IsCofiltered C] {X : D} (hX : IsInitial X) :
    ((Functor.const C).obj X).Initial :=
  Functor.initial_of_exists_of_isCofiltered _ (fun _ => ‚ü®IsCofiltered.nonempty.some, ‚ü®hX.to _‚ü©‚ü©)
    (fun {_ c} _ _ => ‚ü®c, ùüô _, hX.hom_ext _ _‚ü©)
theorem Functor.initial_const_initial [IsCofiltered C] [HasInitial D] :
    ((Functor.const C).obj (‚ä•_ D)).Initial :=
  Functor.initial_const_of_isInitial initialIsInitial
theorem IsFilteredOrEmpty.of_exists_of_isFiltered_of_fullyFaithful [IsFilteredOrEmpty D] [F.Full]
    [F.Faithful] (h : ‚àÄ d, ‚àÉ c, Nonempty (d ‚ü∂ F.obj c)) : IsFilteredOrEmpty C where
  cocone_objs c c' := by
    obtain ‚ü®c‚ÇÄ, ‚ü®f‚ü©‚ü© := h (IsFiltered.max (F.obj c) (F.obj c'))
    exact ‚ü®c‚ÇÄ, F.preimage (IsFiltered.leftToMax _ _ ‚â´ f),
      F.preimage (IsFiltered.rightToMax _ _ ‚â´ f), trivial‚ü©
  cocone_maps {c c'} f g := by
    obtain ‚ü®c‚ÇÄ, ‚ü®f‚ÇÄ‚ü©‚ü© := h (IsFiltered.coeq (F.map f) (F.map g))
    refine ‚ü®_, F.preimage (IsFiltered.coeqHom (F.map f) (F.map g) ‚â´ f‚ÇÄ), F.map_injective ?_‚ü©
    simp [reassoc_of% (IsFiltered.coeq_condition (F.map f) (F.map g))]
theorem IsCofilteredOrEmpty.of_exists_of_isCofiltered_of_fullyFaithful [IsCofilteredOrEmpty D]
    [F.Full] [F.Faithful] (h : ‚àÄ d, ‚àÉ c, Nonempty (F.obj c ‚ü∂ d)) : IsCofilteredOrEmpty C := by
  suffices IsFilteredOrEmpty C·µí·µñ from isCofilteredOrEmpty_of_isFilteredOrEmpty_op _
  refine IsFilteredOrEmpty.of_exists_of_isFiltered_of_fullyFaithful F.op (fun d => ?_)
  obtain ‚ü®c, ‚ü®f‚ü©‚ü© := h d.unop
  exact ‚ü®op c, ‚ü®f.op‚ü©‚ü©
theorem IsFiltered.of_exists_of_isFiltered_of_fullyFaithful [IsFiltered D] [F.Full] [F.Faithful]
    (h : ‚àÄ d, ‚àÉ c, Nonempty (d ‚ü∂ F.obj c)) : IsFiltered C :=
  { IsFilteredOrEmpty.of_exists_of_isFiltered_of_fullyFaithful F h with
    nonempty := by
      have : Nonempty D := IsFiltered.nonempty
      obtain ‚ü®c, -‚ü© := h (Classical.arbitrary D)
      exact ‚ü®c‚ü© }
theorem IsCofiltered.of_exists_of_isCofiltered_of_fullyFaithful [IsCofiltered D] [F.Full]
    [F.Faithful] (h : ‚àÄ d, ‚àÉ c, Nonempty (F.obj c ‚ü∂ d)) : IsCofiltered C :=
  { IsCofilteredOrEmpty.of_exists_of_isCofiltered_of_fullyFaithful F h with
    nonempty := by
      have : Nonempty D := IsCofiltered.nonempty
      obtain ‚ü®c, -‚ü© := h (Classical.arbitrary D)
      exact ‚ü®c‚ü© }
theorem Functor.final_of_exists_of_isFiltered_of_fullyFaithful [IsFilteredOrEmpty D] [F.Full]
    [F.Faithful] (h : ‚àÄ d, ‚àÉ c, Nonempty (d ‚ü∂ F.obj c)) : Final F := by
  have := IsFilteredOrEmpty.of_exists_of_isFiltered_of_fullyFaithful F h
  refine Functor.final_of_exists_of_isFiltered F h (fun {d c} s s' => ?_)
  obtain ‚ü®c‚ÇÄ, ‚ü®f‚ü©‚ü© := h (IsFiltered.coeq s s')
  refine ‚ü®c‚ÇÄ, F.preimage (IsFiltered.coeqHom s s' ‚â´ f), ?_‚ü©
  simp [reassoc_of% (IsFiltered.coeq_condition s s')]
theorem Functor.initial_of_exists_of_isCofiltered_of_fullyFaithful [IsCofilteredOrEmpty D] [F.Full]
    [Faithful F] (h : ‚àÄ d, ‚àÉ c, Nonempty (F.obj c ‚ü∂ d)) : Initial F := by
  suffices Final F.op from initial_of_final_op _
  refine Functor.final_of_exists_of_isFiltered_of_fullyFaithful F.op (fun d => ?_)
  obtain ‚ü®c, ‚ü®f‚ü©‚ü© := h d.unop
  exact ‚ü®op c, ‚ü®f.op‚ü©‚ü©
instance IsFiltered.under [IsFilteredOrEmpty C] (c : C) : IsFiltered (Under c) :=
  isFiltered_structuredArrow_of_isFiltered_of_exists _
    (fun c' => ‚ü®c', ‚ü®ùüô _‚ü©‚ü©)
    (fun s s' => IsFilteredOrEmpty.cocone_maps s s') c
instance IsCofiltered.over [IsCofilteredOrEmpty C] (c : C) : IsCofiltered (Over c) :=
  isCofiltered_costructuredArrow_of_isCofiltered_of_exists _
    (fun c' => ‚ü®c', ‚ü®ùüô _‚ü©‚ü©)
    (fun s s' => IsCofilteredOrEmpty.cone_maps s s') c
instance Under.final_forget [IsFilteredOrEmpty C] (c : C) : Final (Under.forget c) :=
  final_of_exists_of_isFiltered _
    (fun c' => ‚ü®mk (IsFiltered.leftToMax c c'), ‚ü®IsFiltered.rightToMax c c'‚ü©‚ü©)
    (fun {_} {x} s s' => by
      use mk (x.hom ‚â´ IsFiltered.coeqHom s s')
      use homMk (IsFiltered.coeqHom s s') (by simp)
      simp only [forget_obj, id_obj, mk_right, const_obj_obj, forget_map, homMk_right]
      rw [IsFiltered.coeq_condition])
instance Over.initial_forget [IsCofilteredOrEmpty C] (c : C) : Initial (Over.forget c) :=
  initial_of_exists_of_isCofiltered _
    (fun c' => ‚ü®mk (IsCofiltered.minToLeft c c'), ‚ü®IsCofiltered.minToRight c c'‚ü©‚ü©)
    (fun {_} {x} s s' => by
      use mk (IsCofiltered.eqHom s s' ‚â´ x.hom)
      use homMk (IsCofiltered.eqHom s s') (by simp)
      simp only [forget_obj, mk_left, forget_map, homMk_left]
      rw [IsCofiltered.eq_condition])
end ArbitraryUniverses
section LocallySmall
variable {C : Type v‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÅ} D] (F : C ‚•§ D)
theorem Functor.final_iff_of_isFiltered [IsFilteredOrEmpty C] :
    Final F ‚Üî (‚àÄ d, ‚àÉ c, Nonempty (d ‚ü∂ F.obj c)) ‚àß (‚àÄ {d : D} {c : C} (s s' : d ‚ü∂ F.obj c),
      ‚àÉ (c' : C) (t : c ‚ü∂ c'), s ‚â´ F.map t = s' ‚â´ F.map t) := by
  refine ‚ü®fun hF => ‚ü®?_, ?_‚ü©, fun h => final_of_exists_of_isFiltered F h.1 h.2‚ü©
  ¬∑ intro d
    obtain ‚ü®f‚ü© : Nonempty (StructuredArrow d F) := IsConnected.is_nonempty
    exact ‚ü®_, ‚ü®f.hom‚ü©‚ü©
  ¬∑ intro d c s s'
    have : colimit.Œπ (F ‚ãô coyoneda.obj (op d)) c s = colimit.Œπ (F ‚ãô coyoneda.obj (op d)) c s' := by
      apply (Final.colimitCompCoyonedaIso F d).toEquiv.injective
      subsingleton
    obtain ‚ü®c', t‚ÇÅ, t‚ÇÇ, h‚ü© := (Types.FilteredColimit.colimit_eq_iff.{v‚ÇÅ, v‚ÇÅ, v‚ÇÅ} _).mp this
    refine ‚ü®IsFiltered.coeq t‚ÇÅ t‚ÇÇ, t‚ÇÅ ‚â´ IsFiltered.coeqHom t‚ÇÅ t‚ÇÇ, ?_‚ü©
    conv_rhs => rw [IsFiltered.coeq_condition t‚ÇÅ t‚ÇÇ]
    dsimp only [comp_obj, coyoneda_obj_obj, unop_op, Functor.comp_map, coyoneda_obj_map] at h
    simp [reassoc_of% h]
theorem Functor.initial_iff_of_isCofiltered [IsCofilteredOrEmpty C] :
    Initial F ‚Üî (‚àÄ d, ‚àÉ c, Nonempty (F.obj c ‚ü∂ d)) ‚àß (‚àÄ {d : D} {c : C} (s s' : F.obj c ‚ü∂ d),
      ‚àÉ (c' : C) (t : c' ‚ü∂ c), F.map t ‚â´ s = F.map t ‚â´ s') := by
  refine ‚ü®fun hF => ?_, fun h => initial_of_exists_of_isCofiltered F h.1 h.2‚ü©
  obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := F.op.final_iff_of_isFiltered.mp inferInstance
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro d
    obtain ‚ü®c, ‚ü®t‚ü©‚ü© := h‚ÇÅ (op d)
    exact ‚ü®c.unop, ‚ü®t.unop‚ü©‚ü©
  ¬∑ intro d c s s'
    obtain ‚ü®c', t, ht‚ü© := h‚ÇÇ (Quiver.Hom.op s) (Quiver.Hom.op s')
    exact ‚ü®c'.unop, t.unop, Quiver.Hom.op_inj ht‚ü©
theorem Functor.Final.exists_coeq [IsFilteredOrEmpty C] [Final F] {d : D} {c : C}
    (s s' : d ‚ü∂ F.obj c) : ‚àÉ (c' : C) (t : c ‚ü∂ c'), s ‚â´ F.map t = s' ‚â´ F.map t :=
  ((final_iff_of_isFiltered F).1 inferInstance).2 s s'
theorem Functor.Initial.exists_eq [IsCofilteredOrEmpty C] [Initial F] {d : D} {c : C}
    (s s' : F.obj c ‚ü∂ d) : ‚àÉ (c' : C) (t : c' ‚ü∂ c), F.map t ‚â´ s = F.map t ‚â´ s' :=
  ((initial_iff_of_isCofiltered F).1 inferInstance).2 s s'
theorem Functor.final_iff_isFiltered_structuredArrow [IsFilteredOrEmpty C] :
    Final F ‚Üî ‚àÄ d, IsFiltered (StructuredArrow d F) := by
  refine ‚ü®?_, fun h => final_of_isFiltered_structuredArrow F‚ü©
  rw [final_iff_of_isFiltered]
  exact fun h => isFiltered_structuredArrow_of_isFiltered_of_exists F h.1 h.2
theorem Functor.initial_iff_isCofiltered_costructuredArrow [IsCofilteredOrEmpty C] :
    Initial F ‚Üî ‚àÄ d, IsCofiltered (CostructuredArrow F d) := by
  refine ‚ü®?_, fun h => initial_of_isCofiltered_costructuredArrow F‚ü©
  rw [initial_iff_of_isCofiltered]
  exact fun h => isCofiltered_costructuredArrow_of_isCofiltered_of_exists F h.1 h.2
instance [IsFiltered C] (X : C √ó C) : IsFiltered (StructuredArrow X (diag C)) := by
  haveI : ‚àÄ Y, IsFiltered (StructuredArrow Y (Under.forget X.1)) := by
    rw [‚Üê final_iff_isFiltered_structuredArrow (Under.forget X.1)]
    infer_instance
  apply IsFiltered.of_equivalence (StructuredArrow.ofDiagEquivalence X).symm
instance Functor.final_diag_of_isFiltered [IsFiltered C] : Final (Functor.diag C) :=
  final_of_isFiltered_structuredArrow _
instance [IsCofiltered C] (X : C √ó C) : IsCofiltered (CostructuredArrow (diag C) X) := by
  haveI : ‚àÄ Y, IsCofiltered (CostructuredArrow (Over.forget X.1) Y) := by
    rw [‚Üê initial_iff_isCofiltered_costructuredArrow (Over.forget X.1)]
    infer_instance
  apply IsCofiltered.of_equivalence (CostructuredArrow.ofDiagEquivalence X).symm
instance Functor.initial_diag_of_isFiltered [IsCofiltered C] : Initial (Functor.diag C) :=
  initial_of_isCofiltered_costructuredArrow _
end LocallySmall
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
theorem Functor.final_of_isFiltered_of_pUnit [IsFiltered C] (F : C ‚•§ Discrete PUnit) :
    Final F := by
  refine final_of_exists_of_isFiltered F (fun _ => ?_) (fun {_} {c} _ _ => ?_)
  ¬∑ use Classical.choice IsFiltered.nonempty
    exact ‚ü®Discrete.eqToHom (by simp)‚ü©
  ¬∑ use c; use ùüô c
    apply Subsingleton.elim
theorem Functor.initial_of_isCofiltered_pUnit [IsCofiltered C] (F : C ‚•§ Discrete PUnit) :
    Initial F := by
  refine initial_of_exists_of_isCofiltered F (fun _ => ?_) (fun {_} {c} _ _ => ?_)
  ¬∑ use Classical.choice IsCofiltered.nonempty
    exact ‚ü®Discrete.eqToHom (by simp)‚ü©
  ¬∑ use c; use ùüô c
    apply Subsingleton.elim
instance StructuredArrow.final_proj_of_isFiltered [IsFilteredOrEmpty C]
    (T : C ‚•§ D) [Final T] (Y : D) : Final (StructuredArrow.proj Y T) := by
  refine ‚ü®fun X => ?_‚ü©
  rw [isConnected_iff_of_equivalence (ofStructuredArrowProjEquivalence T Y X)]
  exact (final_comp (Under.forget X) T).out _
instance CostructuredArrow.initial_proj_of_isCofiltered [IsCofilteredOrEmpty C]
    (T : C ‚•§ D) [Initial T] (Y : D) : Initial (CostructuredArrow.proj T Y) := by
  refine ‚ü®fun X => ?_‚ü©
  rw [isConnected_iff_of_equivalence (ofCostructuredArrowProjEquivalence T Y X)]
  exact (initial_comp (Over.forget X) T).out _
section Pi
variable {Œ± : Type u‚ÇÅ} {I : Œ± ‚Üí Type u‚ÇÇ} [‚àÄ s, Category.{v‚ÇÇ} (I s)]
open IsFiltered in
instance final_eval [‚àÄ s, IsFiltered (I s)] (s : Œ±) : (Pi.eval I s).Final := by
  classical
  apply Functor.final_of_exists_of_isFiltered
  ¬∑ exact fun i => ‚ü®Function.update (fun t => nonempty.some) s i, ‚ü®by simpa using ùüô _‚ü©‚ü©
  ¬∑ intro d c f g
    let c't : (‚àÄ s, (c' : I s) √ó (c s ‚ü∂ c')) := Function.update (fun t => ‚ü®c t, ùüô (c t)‚ü©)
      s ‚ü®coeq f g, coeqHom f g‚ü©
    refine ‚ü®fun t => (c't t).1, fun t => (c't t).2, ?_‚ü©
    dsimp only [Pi.eval_obj, Pi.eval_map, c't]
    rw [Function.update_same]
    simpa using coeq_condition _ _
open IsCofiltered in
instance initial_eval [‚àÄ s, IsCofiltered (I s)] (s : Œ±) : (Pi.eval I s).Initial := by
  classical
  apply Functor.initial_of_exists_of_isCofiltered
  ¬∑ exact fun i => ‚ü®Function.update (fun t => nonempty.some) s i, ‚ü®by simpa using ùüô _‚ü©‚ü©
  ¬∑ intro d c f g
    let c't : (‚àÄ s, (c' : I s) √ó (c' ‚ü∂ c s)) := Function.update (fun t => ‚ü®c t, ùüô (c t)‚ü©)
      s ‚ü®eq f g, eqHom f g‚ü©
    refine ‚ü®fun t => (c't t).1, fun t => (c't t).2, ?_‚ü©
    dsimp only [Pi.eval_obj, Pi.eval_map, c't]
    rw [Function.update_same]
    simpa using eq_condition _ _
end Pi
section Prod
open IsFiltered in
instance final_fst [IsFilteredOrEmpty C] [IsFiltered D] : (Prod.fst C D).Final := by
  apply Functor.final_of_exists_of_isFiltered
  ¬∑ exact fun c => ‚ü®(c, nonempty.some), ‚ü®ùüô c‚ü©‚ü©
  ¬∑ intro c ‚ü®c', d'‚ü© f g
    exact ‚ü®(coeq f g, d'), (coeqHom f g, ùüô d'), coeq_condition _ _‚ü©
instance final_snd [IsFiltered C] [IsFilteredOrEmpty D] : (Prod.snd C D).Final :=
  inferInstanceAs ((Prod.braiding C D).functor ‚ãô Prod.fst D C).Final
open IsCofiltered in
instance initial_fst [IsCofilteredOrEmpty C] [IsCofiltered D] : (Prod.fst C D).Initial := by
  apply Functor.initial_of_exists_of_isCofiltered
  ¬∑ exact fun c => ‚ü®(c, nonempty.some), ‚ü®ùüô c‚ü©‚ü©
  ¬∑ intro c ‚ü®c', d'‚ü© f g
    exact ‚ü®(eq f g, d'), (eqHom f g, ùüô d'), eq_condition _ _‚ü©
instance initial_snd [IsCofiltered C] [IsCofilteredOrEmpty D] : (Prod.snd C D).Initial :=
  inferInstanceAs ((Prod.braiding C D).functor ‚ãô Prod.fst D C).Initial
end Prod
end CategoryTheory