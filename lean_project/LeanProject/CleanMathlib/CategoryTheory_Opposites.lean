import Mathlib.CategoryTheory.Equivalence
universe vโ vโ uโ uโ
open Opposite
variable {C : Type uโ}
section Quiver
variable [Quiver.{vโ} C]
theorem Quiver.Hom.op_inj {X Y : C} :
    Function.Injective (Quiver.Hom.op : (X โถ Y) โ (Opposite.op Y โถ Opposite.op X)) := fun _ _ H =>
  congr_arg Quiver.Hom.unop H
theorem Quiver.Hom.unop_inj {X Y : Cแตแต} :
    Function.Injective (Quiver.Hom.unop : (X โถ Y) โ (Opposite.unop Y โถ Opposite.unop X)) :=
  fun _ _ H => congr_arg Quiver.Hom.op H
@[simp]
theorem Quiver.Hom.unop_op {X Y : C} (f : X โถ Y) : f.op.unop = f :=
  rfl
@[simp]
theorem Quiver.Hom.unop_op' {X Y : Cแตแต} {x} :
    @Quiver.Hom.unop C _ X Y no_index (Opposite.op (unop := x)) = x := rfl
@[simp]
theorem Quiver.Hom.op_unop {X Y : Cแตแต} (f : X โถ Y) : f.unop.op = f :=
  rfl
@[simp] theorem Quiver.Hom.unop_mk {X Y : Cแตแต} (f : X โถ Y) : Quiver.Hom.unop {unop := f} = f := rfl
end Quiver
namespace CategoryTheory
variable [Category.{vโ} C]
instance Category.opposite : Category.{vโ} Cแตแต where
  comp f g := (g.unop โซ f.unop).op
  id X := (๐ (unop X)).op
@[simp, reassoc]
theorem op_comp {X Y Z : C} {f : X โถ Y} {g : Y โถ Z} : (f โซ g).op = g.op โซ f.op :=
  rfl
@[simp]
theorem op_id {X : C} : (๐ X).op = ๐ (op X) :=
  rfl
@[simp, reassoc]
theorem unop_comp {X Y Z : Cแตแต} {f : X โถ Y} {g : Y โถ Z} : (f โซ g).unop = g.unop โซ f.unop :=
  rfl
@[simp]
theorem unop_id {X : Cแตแต} : (๐ X).unop = ๐ (unop X) :=
  rfl
@[simp]
theorem unop_id_op {X : C} : (๐ (op X)).unop = ๐ X :=
  rfl
@[simp]
theorem op_id_unop {X : Cแตแต} : (๐ (unop X)).op = ๐ X :=
  rfl
section
variable (C)
@[simps]
def unopUnop : Cแตแตแตแต โฅค C where
  obj X := unop (unop X)
  map f := f.unop.unop
@[simps]
def opOp : C โฅค Cแตแตแตแต where
  obj X := op (op X)
  map f := f.op.op
@[simps]
def opOpEquivalence : Cแตแตแตแต โ C where
  functor := unopUnop C
  inverse := opOp C
  unitIso := Iso.refl (๐ญ Cแตแตแตแต)
  counitIso := Iso.refl (opOp C โ unopUnop C)
end
instance isIso_op {X Y : C} (f : X โถ Y) [IsIso f] : IsIso f.op :=
  โจโจ(inv f).op, โจQuiver.Hom.unop_inj (by aesop_cat), Quiver.Hom.unop_inj (by aesop_cat)โฉโฉโฉ
theorem isIso_of_op {X Y : C} (f : X โถ Y) [IsIso f.op] : IsIso f :=
  โจโจ(inv f.op).unop, โจQuiver.Hom.op_inj (by simp), Quiver.Hom.op_inj (by simp)โฉโฉโฉ
theorem isIso_op_iff {X Y : C} (f : X โถ Y) : IsIso f.op โ IsIso f :=
  โจfun _ => isIso_of_op _, fun _ => inferInstanceโฉ
theorem isIso_unop_iff {X Y : Cแตแต} (f : X โถ Y) : IsIso f.unop โ IsIso f := by
  rw [โ isIso_op_iff f.unop, Quiver.Hom.op_unop]
instance isIso_unop {X Y : Cแตแต} (f : X โถ Y) [IsIso f] : IsIso f.unop :=
  (isIso_unop_iff _).2 inferInstance
@[simp]
theorem op_inv {X Y : C} (f : X โถ Y) [IsIso f] : (inv f).op = inv f.op := by
  apply IsIso.eq_inv_of_hom_inv_id
  rw [โ op_comp, IsIso.inv_hom_id, op_id]
@[simp]
theorem unop_inv {X Y : Cแตแต} (f : X โถ Y) [IsIso f] : (inv f).unop = inv f.unop := by
  apply IsIso.eq_inv_of_hom_inv_id
  rw [โ unop_comp, IsIso.inv_hom_id, unop_id]
namespace Functor
section
variable {D : Type uโ} [Category.{vโ} D]
@[simps]
protected def op (F : C โฅค D) : Cแตแต โฅค Dแตแต where
  obj X := op (F.obj (unop X))
  map f := (F.map f.unop).op
@[simps]
protected def unop (F : Cแตแต โฅค Dแตแต) : C โฅค D where
  obj X := unop (F.obj (op X))
  map f := (F.map f.op).unop
@[simps!]
def opUnopIso (F : C โฅค D) : F.op.unop โ F :=
  NatIso.ofComponents fun _ => Iso.refl _
@[simps!]
def unopOpIso (F : Cแตแต โฅค Dแตแต) : F.unop.op โ F :=
  NatIso.ofComponents fun _ => Iso.refl _
variable (C D)
@[simps]
def opHom : (C โฅค D)แตแต โฅค Cแตแต โฅค Dแตแต where
  obj F := (unop F).op
  map ฮฑ :=
    { app := fun X => (ฮฑ.unop.app (unop X)).op
      naturality := fun _ _ f => Quiver.Hom.unop_inj (ฮฑ.unop.naturality f.unop).symm }
@[simps]
def opInv : (Cแตแต โฅค Dแตแต) โฅค (C โฅค D)แตแต where
  obj F := op F.unop
  map ฮฑ :=
    Quiver.Hom.op
      { app := fun X => (ฮฑ.app (op X)).unop
        naturality := fun _ _ f => Quiver.Hom.op_inj <| (ฮฑ.naturality f.op).symm }
variable {C D}
@[simps]
protected def leftOp (F : C โฅค Dแตแต) : Cแตแต โฅค D where
  obj X := unop (F.obj (unop X))
  map f := (F.map f.unop).unop
@[simps]
protected def rightOp (F : Cแตแต โฅค D) : C โฅค Dแตแต where
  obj X := op (F.obj (op X))
  map f := (F.map f.op).op
lemma rightOp_map_unop {F : Cแตแต โฅค D} {X Y} (f : X โถ Y) :
    (F.rightOp.map f).unop = F.map f.op := rfl
instance {F : C โฅค D} [Full F] : Full F.op where
  map_surjective f := โจ(F.preimage f.unop).op, by simpโฉ
instance {F : C โฅค D} [Faithful F] : Faithful F.op where
  map_injective h := Quiver.Hom.unop_inj <| by simpa using map_injective F (Quiver.Hom.op_inj h)
instance rightOp_faithful {F : Cแตแต โฅค D} [Faithful F] : Faithful F.rightOp where
  map_injective h := Quiver.Hom.op_inj (map_injective F (Quiver.Hom.op_inj h))
instance leftOp_faithful {F : C โฅค Dแตแต} [Faithful F] : Faithful F.leftOp where
  map_injective h := Quiver.Hom.unop_inj (map_injective F (Quiver.Hom.unop_inj h))
instance rightOp_full {F : Cแตแต โฅค D} [Full F] : Full F.rightOp where
  map_surjective f := โจ(F.preimage f.unop).unop, by simpโฉ
instance leftOp_full {F : C โฅค Dแตแต} [Full F] : Full F.leftOp where
  map_surjective f := โจ(F.preimage f.op).op, by simpโฉ
@[simps!]
def leftOpRightOpIso (F : C โฅค Dแตแต) : F.leftOp.rightOp โ F :=
  NatIso.ofComponents fun _ => Iso.refl _
@[simps!]
def rightOpLeftOpIso (F : Cแตแต โฅค D) : F.rightOp.leftOp โ F :=
  NatIso.ofComponents fun _ => Iso.refl _
theorem rightOp_leftOp_eq (F : Cแตแต โฅค D) : F.rightOp.leftOp = F := by
  cases F
  rfl
end
end Functor
namespace NatTrans
variable {D : Type uโ} [Category.{vโ} D]
section
variable {F G : C โฅค D}
@[simps]
protected def op (ฮฑ : F โถ G) : G.op โถ F.op where
  app X := (ฮฑ.app (unop X)).op
  naturality X Y f := Quiver.Hom.unop_inj (by simp)
@[simp]
theorem op_id (F : C โฅค D) : NatTrans.op (๐ F) = ๐ F.op :=
  rfl
@[simps]
protected def unop {F G : Cแตแต โฅค Dแตแต} (ฮฑ : F โถ G) : G.unop โถ F.unop where
  app X := (ฮฑ.app (op X)).unop
  naturality X Y f := Quiver.Hom.op_inj (by simp)
@[simp]
theorem unop_id (F : Cแตแต โฅค Dแตแต) : NatTrans.unop (๐ F) = ๐ F.unop :=
  rfl
@[simps]
protected def removeOp (ฮฑ : F.op โถ G.op) : G โถ F where
  app X := (ฮฑ.app (op X)).unop
  naturality X Y f :=
    Quiver.Hom.op_inj <| by simpa only [Functor.op_map] using (ฮฑ.naturality f.op).symm
@[simp]
theorem removeOp_id (F : C โฅค D) : NatTrans.removeOp (๐ F.op) = ๐ F :=
  rfl
@[simps]
protected def removeUnop {F G : Cแตแต โฅค Dแตแต} (ฮฑ : F.unop โถ G.unop) : G โถ F where
  app X := (ฮฑ.app (unop X)).op
  naturality X Y f :=
    Quiver.Hom.unop_inj <| by simpa only [Functor.unop_map] using (ฮฑ.naturality f.unop).symm
@[simp]
theorem removeUnop_id (F : Cแตแต โฅค Dแตแต) : NatTrans.removeUnop (๐ F.unop) = ๐ F :=
  rfl
end
section
variable {F G H : C โฅค Dแตแต}
@[simps]
protected def leftOp (ฮฑ : F โถ G) : G.leftOp โถ F.leftOp where
  app X := (ฮฑ.app (unop X)).unop
  naturality X Y f := Quiver.Hom.op_inj (by simp)
@[simp]
theorem leftOp_id : NatTrans.leftOp (๐ F : F โถ F) = ๐ F.leftOp :=
  rfl
@[simp]
theorem leftOp_comp (ฮฑ : F โถ G) (ฮฒ : G โถ H) : NatTrans.leftOp (ฮฑ โซ ฮฒ) =
    NatTrans.leftOp ฮฒ โซ NatTrans.leftOp ฮฑ :=
  rfl
@[simps]
protected def removeLeftOp (ฮฑ : F.leftOp โถ G.leftOp) : G โถ F where
  app X := (ฮฑ.app (op X)).op
  naturality X Y f :=
    Quiver.Hom.unop_inj <| by simpa only [Functor.leftOp_map] using (ฮฑ.naturality f.op).symm
@[simp]
theorem removeLeftOp_id : NatTrans.removeLeftOp (๐ F.leftOp) = ๐ F :=
  rfl
end
section
variable {F G H : Cแตแต โฅค D}
@[simps]
protected def rightOp (ฮฑ : F โถ G) : G.rightOp โถ F.rightOp where
  app _ := (ฮฑ.app _).op
  naturality X Y f := Quiver.Hom.unop_inj (by simp)
@[simp]
theorem rightOp_id : NatTrans.rightOp (๐ F : F โถ F) = ๐ F.rightOp :=
  rfl
@[simp]
theorem rightOp_comp (ฮฑ : F โถ G) (ฮฒ : G โถ H) : NatTrans.rightOp (ฮฑ โซ ฮฒ) =
    NatTrans.rightOp ฮฒ โซ NatTrans.rightOp ฮฑ :=
  rfl
@[simps]
protected def removeRightOp (ฮฑ : F.rightOp โถ G.rightOp) : G โถ F where
  app X := (ฮฑ.app X.unop).unop
  naturality X Y f :=
    Quiver.Hom.op_inj <| by simpa only [Functor.rightOp_map] using (ฮฑ.naturality f.unop).symm
@[simp]
theorem removeRightOp_id : NatTrans.removeRightOp (๐ F.rightOp) = ๐ F :=
  rfl
end
end NatTrans
namespace Iso
variable {X Y : C}
@[simps]
protected def op (ฮฑ : X โ Y) : op Y โ op X where
  hom := ฮฑ.hom.op
  inv := ฮฑ.inv.op
  hom_inv_id := Quiver.Hom.unop_inj ฮฑ.inv_hom_id
  inv_hom_id := Quiver.Hom.unop_inj ฮฑ.hom_inv_id
@[simps]
def unop {X Y : Cแตแต} (f : X โ Y) : Y.unop โ X.unop where
  hom := f.hom.unop
  inv := f.inv.unop
  hom_inv_id := by simp only [โ unop_comp, f.inv_hom_id, unop_id]
  inv_hom_id := by simp only [โ unop_comp, f.hom_inv_id, unop_id]
@[simp]
theorem unop_op {X Y : Cแตแต} (f : X โ Y) : f.unop.op = f := by (ext; rfl)
@[simp]
theorem op_unop {X Y : C} (f : X โ Y) : f.op.unop = f := by (ext; rfl)
section
variable {D : Type*} [Category D] {F G : C โฅค Dแตแต} (e : F โ G) (X : C)
@[reassoc (attr := simp)]
lemma unop_hom_inv_id_app : (e.hom.app X).unop โซ (e.inv.app X).unop = ๐ _ := by
  rw [โ unop_comp, inv_hom_id_app, unop_id]
@[reassoc (attr := simp)]
lemma unop_inv_hom_id_app : (e.inv.app X).unop โซ (e.hom.app X).unop = ๐ _ := by
  rw [โ unop_comp, hom_inv_id_app, unop_id]
end
end Iso
namespace NatIso
variable {D : Type uโ} [Category.{vโ} D]
variable {F G : C โฅค D}
@[simps]
protected def op (ฮฑ : F โ G) : G.op โ F.op where
  hom := NatTrans.op ฮฑ.hom
  inv := NatTrans.op ฮฑ.inv
  hom_inv_id := by ext; dsimp; rw [โ op_comp]; rw [ฮฑ.inv_hom_id_app]; rfl
  inv_hom_id := by ext; dsimp; rw [โ op_comp]; rw [ฮฑ.hom_inv_id_app]; rfl
@[simps]
protected def removeOp (ฮฑ : F.op โ G.op) : G โ F where
  hom := NatTrans.removeOp ฮฑ.hom
  inv := NatTrans.removeOp ฮฑ.inv
@[simps]
protected def unop {F G : Cแตแต โฅค Dแตแต} (ฮฑ : F โ G) : G.unop โ F.unop where
  hom := NatTrans.unop ฮฑ.hom
  inv := NatTrans.unop ฮฑ.inv
end NatIso
namespace Equivalence
variable {D : Type uโ} [Category.{vโ} D]
@[simps]
def op (e : C โ D) : Cแตแต โ Dแตแต where
  functor := e.functor.op
  inverse := e.inverse.op
  unitIso := (NatIso.op e.unitIso).symm
  counitIso := (NatIso.op e.counitIso).symm
  functor_unitIso_comp X := by
    apply Quiver.Hom.unop_inj
    dsimp
    simp
@[simps]
def unop (e : Cแตแต โ Dแตแต) : C โ D where
  functor := e.functor.unop
  inverse := e.inverse.unop
  unitIso := (NatIso.unop e.unitIso).symm
  counitIso := (NatIso.unop e.counitIso).symm
  functor_unitIso_comp X := by
    apply Quiver.Hom.op_inj
    dsimp
    simp
end Equivalence
@[simps]
def opEquiv (A B : Cแตแต) : (A โถ B) โ (B.unop โถ A.unop) where
  toFun f := f.unop
  invFun g := g.op
  left_inv _ := rfl
  right_inv _ := rfl
instance subsingleton_of_unop (A B : Cแตแต) [Subsingleton (unop B โถ unop A)] : Subsingleton (A โถ B) :=
  (opEquiv A B).subsingleton
instance decidableEqOfUnop (A B : Cแตแต) [DecidableEq (unop B โถ unop A)] : DecidableEq (A โถ B) :=
  (opEquiv A B).decidableEq
@[simps]
def isoOpEquiv (A B : Cแตแต) : (A โ B) โ (B.unop โ A.unop) where
  toFun f := f.unop
  invFun g := g.op
  left_inv _ := by
    ext
    rfl
  right_inv _ := by
    ext
    rfl
namespace Functor
variable (C)
variable (D : Type uโ) [Category.{vโ} D]
@[simps]
def opUnopEquiv : (C โฅค D)แตแต โ Cแตแต โฅค Dแตแต where
  functor := opHom _ _
  inverse := opInv _ _
  unitIso :=
    NatIso.ofComponents (fun F => F.unop.opUnopIso.op)
      (by
        intro F G f
        dsimp [opUnopIso]
        rw [show f = f.unop.op by simp, โ op_comp, โ op_comp]
        congr 1
        aesop_cat)
  counitIso := NatIso.ofComponents fun F => F.unopOpIso
@[simps!]
def leftOpRightOpEquiv : (Cแตแต โฅค D)แตแต โ C โฅค Dแตแต where
  functor :=
    { obj := fun F => F.unop.rightOp
      map := fun ฮท => NatTrans.rightOp ฮท.unop }
  inverse :=
    { obj := fun F => op F.leftOp
      map := fun ฮท => ฮท.leftOp.op }
  unitIso :=
    NatIso.ofComponents (fun F => F.unop.rightOpLeftOpIso.op)
      (by
        intro F G ฮท
        dsimp
        rw [show ฮท = ฮท.unop.op by simp, โ op_comp, โ op_comp]
        congr 1
        aesop_cat)
  counitIso := NatIso.ofComponents fun F => F.leftOpRightOpIso
instance {F : C โฅค D} [EssSurj F] : EssSurj F.op where
  mem_essImage X := โจop _, โจ(F.objObjPreimageIso X.unop).op.symmโฉโฉ
instance {F : Cแตแต โฅค D} [EssSurj F] : EssSurj F.rightOp where
  mem_essImage X := โจ_, โจ(F.objObjPreimageIso X.unop).op.symmโฉโฉ
instance {F : C โฅค Dแตแต} [EssSurj F] : EssSurj F.leftOp where
  mem_essImage X := โจop _, โจ(F.objObjPreimageIso (op X)).unop.symmโฉโฉ
instance {F : C โฅค D} [IsEquivalence F] : IsEquivalence F.op where
instance {F : Cแตแต โฅค D} [IsEquivalence F] : IsEquivalence F.rightOp where
instance {F : C โฅค Dแตแต} [IsEquivalence F] : IsEquivalence F.leftOp where
end Functor
end CategoryTheory