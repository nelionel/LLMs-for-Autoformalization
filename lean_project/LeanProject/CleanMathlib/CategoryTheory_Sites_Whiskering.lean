import Mathlib.CategoryTheory.Sites.Sheaf
namespace CategoryTheory
open CategoryTheory.Limits
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
variable {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A]
variable {B : Type u‚ÇÉ} [Category.{v‚ÇÉ} B]
variable (J : GrothendieckTopology C)
variable {U : C} (R : Presieve U)
variable (F G H : A ‚•§ B) (Œ∑ : F ‚ü∂ G) (Œ≥ : G ‚ü∂ H)
class GrothendieckTopology.HasSheafCompose : Prop where
  isSheaf (P : C·µí·µñ ‚•§ A) (hP : Presheaf.IsSheaf J P) : Presheaf.IsSheaf J (P ‚ãô F)
variable [J.HasSheafCompose F] [J.HasSheafCompose G] [J.HasSheafCompose H]
@[simps]
def sheafCompose : Sheaf J A ‚•§ Sheaf J B where
  obj G := ‚ü®G.val ‚ãô F, GrothendieckTopology.HasSheafCompose.isSheaf G.val G.2‚ü©
  map Œ∑ := ‚ü®whiskerRight Œ∑.val _‚ü©
  map_id _ := Sheaf.Hom.ext <| whiskerRight_id _
  map_comp _ _ := Sheaf.Hom.ext <| whiskerRight_comp _ _ _
instance [F.Faithful] : (sheafCompose J F ‚ãô sheafToPresheaf _ _).Faithful :=
  show (sheafToPresheaf _ _ ‚ãô (whiskeringRight C·µí·µñ A B).obj F).Faithful from inferInstance
instance [F.Faithful] [F.Full] : (sheafCompose J F ‚ãô sheafToPresheaf _ _).Full :=
  show (sheafToPresheaf _ _ ‚ãô (whiskeringRight C·µí·µñ A B).obj F).Full from inferInstance
instance [F.Faithful] : (sheafCompose J F).Faithful :=
  Functor.Faithful.of_comp (sheafCompose J F) (sheafToPresheaf _ _)
instance [F.Full] [F.Faithful] : (sheafCompose J F).Full :=
  Functor.Full.of_comp_faithful (sheafCompose J F) (sheafToPresheaf _ _)
instance [F.ReflectsIsomorphisms] : (sheafCompose J F).ReflectsIsomorphisms where
  reflects {G‚ÇÅ G‚ÇÇ} f _ := by
    rw [‚Üê isIso_iff_of_reflects_iso _ (sheafToPresheaf _ _),
      ‚Üê isIso_iff_of_reflects_iso _ ((whiskeringRight C·µí·µñ A B).obj F)]
    change IsIso ((sheafToPresheaf _ _).map ((sheafCompose J F).map f))
    infer_instance
variable {F G}
def sheafCompose_map : sheafCompose J F ‚ü∂ sheafCompose J G where
  app := fun _ => .mk <| whiskerLeft _ Œ∑
@[simp]
lemma sheafCompose_id : sheafCompose_map (F := F) J (ùüô _) = ùüô _ := rfl
@[simp]
lemma sheafCompose_comp :
    sheafCompose_map J (Œ∑ ‚â´ Œ≥) = sheafCompose_map J Œ∑ ‚â´ sheafCompose_map J Œ≥ := rfl
namespace GrothendieckTopology.Cover
variable (F G) {J}
variable (P : C·µí·µñ ‚•§ A) {X : C} (S : J.Cover X)
@[simps!]
def multicospanComp : (S.index (P ‚ãô F)).multicospan ‚âÖ (S.index P).multicospan ‚ãô F :=
  NatIso.ofComponents
    (fun t =>
      match t with
      | WalkingMulticospan.left _ => Iso.refl _
      | WalkingMulticospan.right _ => Iso.refl _)
    (by
      rintro (a | b) (a | b) (f | f | f)
      all_goals aesop_cat)
def mapMultifork :
    F.mapCone (S.multifork P) ‚âÖ
      (Limits.Cones.postcompose (S.multicospanComp F P).hom).obj (S.multifork (P ‚ãô F)) :=
  Cones.ext (Iso.refl _)
end GrothendieckTopology.Cover
instance hasSheafCompose_of_preservesMulticospan (F : A ‚•§ B)
    [‚àÄ (X : C) (S : J.Cover X) (P : C·µí·µñ ‚•§ A), PreservesLimit (S.index P).multicospan F] :
    J.HasSheafCompose F where
  isSheaf P hP := by
    rw [Presheaf.isSheaf_iff_multifork] at hP ‚ä¢
    intro X S
    obtain ‚ü®h‚ü© := hP X S
    replace h := isLimitOfPreserves F h
    replace h := Limits.IsLimit.ofIsoLimit h (S.mapMultifork F P)
    exact ‚ü®Limits.IsLimit.postcomposeHomEquiv (S.multicospanComp F P) _ h‚ü©
instance hasSheafCompose_of_preservesLimitsOfSize [PreservesLimitsOfSize.{v‚ÇÅ, max u‚ÇÅ v‚ÇÅ} F] :
    J.HasSheafCompose F where
  isSheaf _ hP := Presheaf.isSheaf_comp_of_isSheaf J _ F hP
variable {J}
lemma Sheaf.isSeparated [ConcreteCategory A] [J.HasSheafCompose (forget A)]
    (F : Sheaf J A) : Presheaf.IsSeparated J F.val := by
  rintro X S hS x y h
  exact (Presieve.isSeparated_of_isSheaf _ _ ((isSheaf_iff_isSheaf_of_type _ _).1
    ((sheafCompose J (forget A)).obj F).2) S hS).ext (fun _ _ hf => h _ _ hf)
lemma Presheaf.IsSheaf.isSeparated {F : C·µí·µñ ‚•§ A} [ConcreteCategory A]
    [J.HasSheafCompose (forget A)] (hF : Presheaf.IsSheaf J F) :
    Presheaf.IsSeparated J F :=
  Sheaf.isSeparated ‚ü®F, hF‚ü©
end CategoryTheory