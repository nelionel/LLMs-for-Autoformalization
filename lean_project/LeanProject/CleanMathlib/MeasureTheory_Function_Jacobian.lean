import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.MeasureTheory.Constructions.BorelSpace.ContinuousLinearMap
import Mathlib.MeasureTheory.Covering.BesicovitchVectorSpace
import Mathlib.MeasureTheory.Measure.Lebesgue.EqHaar
import Mathlib.Analysis.NormedSpace.Pointwise
import Mathlib.MeasureTheory.Constructions.Polish.Basic
import Mathlib.Analysis.Calculus.InverseFunctionTheorem.ApproximatesLinearOn
open MeasureTheory MeasureTheory.Measure Metric Filter Set Module Asymptotics
  TopologicalSpace
open scoped NNReal ENNReal Topology Pointwise
variable {E F : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F] {s : Set E} {f : E ‚Üí E} {f' : E ‚Üí E ‚ÜíL[‚Ñù] E}
theorem exists_closed_cover_approximatesLinearOn_of_hasFDerivWithinAt [SecondCountableTopology F]
    (f : E ‚Üí F) (s : Set E) (f' : E ‚Üí E ‚ÜíL[‚Ñù] F) (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x)
    (r : (E ‚ÜíL[‚Ñù] F) ‚Üí ‚Ñù‚â•0) (rpos : ‚àÄ A, r A ‚â† 0) :
    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] F),
      (‚àÄ n, IsClosed (t n)) ‚àß
        (s ‚äÜ ‚ãÉ n, t n) ‚àß
          (‚àÄ n, ApproximatesLinearOn f (A n) (s ‚à© t n) (r (A n))) ‚àß
            (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) := by
  rcases eq_empty_or_nonempty s with (rfl | hs)
  ¬∑ refine ‚ü®fun _ => ‚àÖ, fun _ => 0, ?_, ?_, ?_, ?_‚ü© <;> simp
  obtain ‚ü®T, T_count, hT‚ü© :
    ‚àÉ T : Set s,
      T.Countable ‚àß ‚ãÉ x ‚àà T, ball (f' (x : E)) (r (f' x)) = ‚ãÉ x : s, ball (f' x) (r (f' x)) :=
    TopologicalSpace.isOpen_iUnion_countable _ fun x => isOpen_ball
  obtain ‚ü®u, _, u_pos, u_lim‚ü© :
    ‚àÉ u : ‚Ñï ‚Üí ‚Ñù, StrictAnti u ‚àß (‚àÄ n : ‚Ñï, 0 < u n) ‚àß Tendsto u atTop (ùìù 0) :=
    exists_seq_strictAnti_tendsto (0 : ‚Ñù)
  let M : ‚Ñï ‚Üí T ‚Üí Set E := fun n z =>
    {x | x ‚àà s ‚àß ‚àÄ y ‚àà s ‚à© ball x (u n), ‚Äñf y - f x - f' z (y - x)‚Äñ ‚â§ r (f' z) * ‚Äñy - x‚Äñ}
  have s_subset : ‚àÄ x ‚àà s, ‚àÉ (n : ‚Ñï) (z : T), x ‚àà M n z := by
    intro x xs
    obtain ‚ü®z, zT, hz‚ü© : ‚àÉ z ‚àà T, f' x ‚àà ball (f' (z : E)) (r (f' z)) := by
      have : f' x ‚àà ‚ãÉ z ‚àà T, ball (f' (z : E)) (r (f' z)) := by
        rw [hT]
        refine mem_iUnion.2 ‚ü®‚ü®x, xs‚ü©, ?_‚ü©
        simpa only [mem_ball, Subtype.coe_mk, dist_self] using (rpos (f' x)).bot_lt
      rwa [mem_iUnion‚ÇÇ, bex_def] at this
    obtain ‚ü®Œµ, Œµpos, hŒµ‚ü© : ‚àÉ Œµ : ‚Ñù, 0 < Œµ ‚àß ‚Äñf' x - f' z‚Äñ + Œµ ‚â§ r (f' z) := by
      refine ‚ü®r (f' z) - ‚Äñf' x - f' z‚Äñ, ?_, le_of_eq (by abel)‚ü©
      simpa only [sub_pos] using mem_ball_iff_norm.mp hz
    obtain ‚ü®Œ¥, Œ¥pos, hŒ¥‚ü© :
      ‚àÉ (Œ¥ : ‚Ñù), 0 < Œ¥ ‚àß ball x Œ¥ ‚à© s ‚äÜ {y | ‚Äñf y - f x - (f' x) (y - x)‚Äñ ‚â§ Œµ * ‚Äñy - x‚Äñ} :=
      Metric.mem_nhdsWithin_iff.1 ((hf' x xs).isLittleO.def Œµpos)
    obtain ‚ü®n, hn‚ü© : ‚àÉ n, u n < Œ¥ := ((tendsto_order.1 u_lim).2 _ Œ¥pos).exists
    refine ‚ü®n, ‚ü®z, zT‚ü©, ‚ü®xs, ?_‚ü©‚ü©
    intro y hy
    calc
      ‚Äñf y - f x - (f' z) (y - x)‚Äñ = ‚Äñf y - f x - (f' x) (y - x) + (f' x - f' z) (y - x)‚Äñ := by
        congr 1
        simp only [ContinuousLinearMap.coe_sub', map_sub, Pi.sub_apply]
        abel
      _ ‚â§ ‚Äñf y - f x - (f' x) (y - x)‚Äñ + ‚Äñ(f' x - f' z) (y - x)‚Äñ := norm_add_le _ _
      _ ‚â§ Œµ * ‚Äñy - x‚Äñ + ‚Äñf' x - f' z‚Äñ * ‚Äñy - x‚Äñ := by
        refine add_le_add (hŒ¥ ?_) (ContinuousLinearMap.le_opNorm _ _)
        rw [inter_comm]
        exact inter_subset_inter_right _ (ball_subset_ball hn.le) hy
      _ ‚â§ r (f' z) * ‚Äñy - x‚Äñ := by
        rw [‚Üê add_mul, add_comm]
        gcongr
  have closure_M_subset : ‚àÄ n z, s ‚à© closure (M n z) ‚äÜ M n z := by
    rintro n z x ‚ü®xs, hx‚ü©
    refine ‚ü®xs, fun y hy => ?_‚ü©
    obtain ‚ü®a, aM, a_lim‚ü© : ‚àÉ a : ‚Ñï ‚Üí E, (‚àÄ k, a k ‚àà M n z) ‚àß Tendsto a atTop (ùìù x) :=
      mem_closure_iff_seq_limit.1 hx
    have L1 :
      Tendsto (fun k : ‚Ñï => ‚Äñf y - f (a k) - (f' z) (y - a k)‚Äñ) atTop
        (ùìù ‚Äñf y - f x - (f' z) (y - x)‚Äñ) := by
      apply Tendsto.norm
      have L : Tendsto (fun k => f (a k)) atTop (ùìù (f x)) := by
        apply (hf' x xs).continuousWithinAt.tendsto.comp
        apply tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _ a_lim
        exact Eventually.of_forall fun k => (aM k).1
      apply Tendsto.sub (tendsto_const_nhds.sub L)
      exact ((f' z).continuous.tendsto _).comp (tendsto_const_nhds.sub a_lim)
    have L2 : Tendsto (fun k : ‚Ñï => (r (f' z) : ‚Ñù) * ‚Äñy - a k‚Äñ) atTop (ùìù (r (f' z) * ‚Äñy - x‚Äñ)) :=
      (tendsto_const_nhds.sub a_lim).norm.const_mul _
    have I : ‚àÄ·∂† k in atTop, ‚Äñf y - f (a k) - (f' z) (y - a k)‚Äñ ‚â§ r (f' z) * ‚Äñy - a k‚Äñ := by
      have L : Tendsto (fun k => dist y (a k)) atTop (ùìù (dist y x)) :=
        tendsto_const_nhds.dist a_lim
      filter_upwards [(tendsto_order.1 L).2 _ hy.2]
      intro k hk
      exact (aM k).2 y ‚ü®hy.1, hk‚ü©
    exact le_of_tendsto_of_tendsto L1 L2 I
  rcases TopologicalSpace.exists_dense_seq E with ‚ü®d, hd‚ü©
  let K : ‚Ñï ‚Üí T ‚Üí ‚Ñï ‚Üí Set E := fun n z p => closure (M n z) ‚à© closedBall (d p) (u n / 3)
  have K_approx : ‚àÄ (n) (z : T) (p), ApproximatesLinearOn f (f' z) (s ‚à© K n z p) (r (f' z)) := by
    intro n z p x hx y hy
    have yM : y ‚àà M n z := closure_M_subset _ _ ‚ü®hy.1, hy.2.1‚ü©
    refine yM.2 _ ‚ü®hx.1, ?_‚ü©
    calc
      dist x y ‚â§ dist x (d p) + dist y (d p) := dist_triangle_right _ _ _
      _ ‚â§ u n / 3 + u n / 3 := add_le_add hx.2.2 hy.2.2
      _ < u n := by linarith [u_pos n]
  have K_closed : ‚àÄ (n) (z : T) (p), IsClosed (K n z p) := fun n z p =>
    isClosed_closure.inter isClosed_ball
  obtain ‚ü®F, hF‚ü© : ‚àÉ F : ‚Ñï ‚Üí ‚Ñï √ó T √ó ‚Ñï, Function.Surjective F := by
    haveI : Encodable T := T_count.toEncodable
    have : Nonempty T := by
      rcases hs with ‚ü®x, xs‚ü©
      rcases s_subset x xs with ‚ü®n, z, _‚ü©
      exact ‚ü®z‚ü©
    inhabit ‚Ü•T
    exact ‚ü®_, Encodable.surjective_decode_iget (‚Ñï √ó T √ó ‚Ñï)‚ü©
  refine
    ‚ü®fun q => K (F q).1 (F q).2.1 (F q).2.2, fun q => f' (F q).2.1, fun n => K_closed _ _ _,
      fun x xs => ?_, fun q => K_approx _ _ _, fun _ q => ‚ü®(F q).2.1, (F q).2.1.1.2, rfl‚ü©‚ü©
  obtain ‚ü®n, z, hnz‚ü© : ‚àÉ (n : ‚Ñï) (z : T), x ‚àà M n z := s_subset x xs
  obtain ‚ü®p, hp‚ü© : ‚àÉ p : ‚Ñï, x ‚àà closedBall (d p) (u n / 3) := by
    have : Set.Nonempty (ball x (u n / 3)) := by simp only [nonempty_ball]; linarith [u_pos n]
    obtain ‚ü®p, hp‚ü© : ‚àÉ p : ‚Ñï, d p ‚àà ball x (u n / 3) := hd.exists_mem_open isOpen_ball this
    exact ‚ü®p, (mem_ball'.1 hp).le‚ü©
  obtain ‚ü®q, hq‚ü© : ‚àÉ q, F q = (n, z, p) := hF _
  apply mem_iUnion.2 ‚ü®q, _‚ü©
  simp (config := { zeta := false }) only [K, hq, mem_inter_iff, hp, and_true]
  exact subset_closure hnz
variable [MeasurableSpace E] [BorelSpace E] (Œº : Measure E) [IsAddHaarMeasure Œº]
theorem exists_partition_approximatesLinearOn_of_hasFDerivWithinAt [SecondCountableTopology F]
    (f : E ‚Üí F) (s : Set E) (f' : E ‚Üí E ‚ÜíL[‚Ñù] F) (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x)
    (r : (E ‚ÜíL[‚Ñù] F) ‚Üí ‚Ñù‚â•0) (rpos : ‚àÄ A, r A ‚â† 0) :
    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] F),
      Pairwise (Disjoint on t) ‚àß
        (‚àÄ n, MeasurableSet (t n)) ‚àß
          (s ‚äÜ ‚ãÉ n, t n) ‚àß
            (‚àÄ n, ApproximatesLinearOn f (A n) (s ‚à© t n) (r (A n))) ‚àß
              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) := by
  rcases exists_closed_cover_approximatesLinearOn_of_hasFDerivWithinAt f s f' hf' r rpos with
    ‚ü®t, A, t_closed, st, t_approx, ht‚ü©
  refine
    ‚ü®disjointed t, A, disjoint_disjointed _,
      MeasurableSet.disjointed fun n => (t_closed n).measurableSet, ?_, ?_, ht‚ü©
  ¬∑ rw [iUnion_disjointed]; exact st
  ¬∑ intro n; exact (t_approx n).mono_set (inter_subset_inter_right _ (disjointed_subset _ _))
namespace MeasureTheory
theorem addHaar_image_le_mul_of_det_lt (A : E ‚ÜíL[‚Ñù] E) {m : ‚Ñù‚â•0}
    (hm : ENNReal.ofReal |A.det| < m) :
    ‚àÄ·∂† Œ¥ in ùìù[>] (0 : ‚Ñù‚â•0),
      ‚àÄ (s : Set E) (f : E ‚Üí E), ApproximatesLinearOn f A s Œ¥ ‚Üí Œº (f '' s) ‚â§ m * Œº s := by
  apply nhdsWithin_le_nhds
  let d := ENNReal.ofReal |A.det|
  obtain ‚ü®Œµ, hŒµ, Œµpos‚ü© :
    ‚àÉ Œµ : ‚Ñù, Œº (closedBall 0 Œµ + A '' closedBall 0 1) < m * Œº (closedBall 0 1) ‚àß 0 < Œµ := by
    have HC : IsCompact (A '' closedBall 0 1) :=
      (ProperSpace.isCompact_closedBall _ _).image A.continuous
    have L0 :
      Tendsto (fun Œµ => Œº (cthickening Œµ (A '' closedBall 0 1))) (ùìù[>] 0)
        (ùìù (Œº (A '' closedBall 0 1))) := by
      apply Tendsto.mono_left _ nhdsWithin_le_nhds
      exact tendsto_measure_cthickening_of_isCompact HC
    have L1 :
      Tendsto (fun Œµ => Œº (closedBall 0 Œµ + A '' closedBall 0 1)) (ùìù[>] 0)
        (ùìù (Œº (A '' closedBall 0 1))) := by
      apply L0.congr' _
      filter_upwards [self_mem_nhdsWithin] with r hr
      rw [‚Üê HC.add_closedBall_zero (le_of_lt hr), add_comm]
    have L2 :
      Tendsto (fun Œµ => Œº (closedBall 0 Œµ + A '' closedBall 0 1)) (ùìù[>] 0)
        (ùìù (d * Œº (closedBall 0 1))) := by
      convert L1
      exact (addHaar_image_continuousLinearMap _ _ _).symm
    have I : d * Œº (closedBall 0 1) < m * Œº (closedBall 0 1) :=
      (ENNReal.mul_lt_mul_right (measure_closedBall_pos Œº _ zero_lt_one).ne'
            measure_closedBall_lt_top.ne).2
        hm
    have H :
      ‚àÄ·∂† b : ‚Ñù in ùìù[>] 0, Œº (closedBall 0 b + A '' closedBall 0 1) < m * Œº (closedBall 0 1) :=
      (tendsto_order.1 L2).2 _ I
    exact (H.and self_mem_nhdsWithin).exists
  have : Iio (‚ü®Œµ, Œµpos.le‚ü© : ‚Ñù‚â•0) ‚àà ùìù (0 : ‚Ñù‚â•0) := by apply Iio_mem_nhds; exact Œµpos
  filter_upwards [this]
  intro Œ¥ hŒ¥ s f hf
  simp only [mem_Iio, ‚Üê NNReal.coe_lt_coe, NNReal.coe_mk] at hŒ¥
  have I : ‚àÄ x r, x ‚àà s ‚Üí 0 ‚â§ r ‚Üí Œº (f '' (s ‚à© closedBall x r)) ‚â§ m * Œº (closedBall x r) := by
    intro x r xs r0
    have K : f '' (s ‚à© closedBall x r) ‚äÜ A '' closedBall 0 r + closedBall (f x) (Œµ * r) := by
      rintro y ‚ü®z, ‚ü®zs, zr‚ü©, rfl‚ü©
      rw [mem_closedBall_iff_norm] at zr
      apply Set.mem_add.2 ‚ü®A (z - x), _, f z - f x - A (z - x) + f x, _, _‚ü©
      ¬∑ apply mem_image_of_mem
        simpa only [dist_eq_norm, mem_closedBall, mem_closedBall_zero_iff, sub_zero] using zr
      ¬∑ rw [mem_closedBall_iff_norm, add_sub_cancel_right]
        calc
          ‚Äñf z - f x - A (z - x)‚Äñ ‚â§ Œ¥ * ‚Äñz - x‚Äñ := hf _ zs _ xs
          _ ‚â§ Œµ * r := by gcongr
      ¬∑ simp only [map_sub, Pi.sub_apply]
        abel
    have :
      A '' closedBall 0 r + closedBall (f x) (Œµ * r) =
        {f x} + r ‚Ä¢ (A '' closedBall 0 1 + closedBall 0 Œµ) := by
      rw [smul_add, ‚Üê add_assoc, add_comm {f x}, add_assoc, smul_closedBall _ _ Œµpos.le, smul_zero,
        singleton_add_closedBall_zero, ‚Üê image_smul_set ‚Ñù E E A,
        _root_.smul_closedBall _ _ zero_le_one, smul_zero, Real.norm_eq_abs, abs_of_nonneg r0,
        mul_one, mul_comm]
    rw [this] at K
    calc
      Œº (f '' (s ‚à© closedBall x r)) ‚â§ Œº ({f x} + r ‚Ä¢ (A '' closedBall 0 1 + closedBall 0 Œµ)) :=
        measure_mono K
      _ = ENNReal.ofReal (r ^ finrank ‚Ñù E) * Œº (A '' closedBall 0 1 + closedBall 0 Œµ) := by
        simp only [abs_of_nonneg r0, addHaar_smul, image_add_left, abs_pow, singleton_add,
          measure_preimage_add]
      _ ‚â§ ENNReal.ofReal (r ^ finrank ‚Ñù E) * (m * Œº (closedBall 0 1)) := by
        rw [add_comm]; gcongr
      _ = m * Œº (closedBall x r) := by simp only [addHaar_closedBall' Œº _ r0]; ring
  have J : ‚àÄ·∂† a in ùìù[>] (0 : ‚Ñù‚â•0‚àû), Œº (f '' s) ‚â§ m * (Œº s + a) := by
    filter_upwards [self_mem_nhdsWithin] with a ha
    rw [mem_Ioi] at ha
    obtain ‚ü®t, r, t_count, ts, rpos, st, Œºt‚ü© :
      ‚àÉ (t : Set E) (r : E ‚Üí ‚Ñù),
        t.Countable ‚àß
          t ‚äÜ s ‚àß
            (‚àÄ x : E, x ‚àà t ‚Üí 0 < r x) ‚àß
              (s ‚äÜ ‚ãÉ x ‚àà t, closedBall x (r x)) ‚àß
                (‚àë' x : ‚Ü•t, Œº (closedBall (‚Üëx) (r ‚Üëx))) ‚â§ Œº s + a :=
      Besicovitch.exists_closedBall_covering_tsum_measure_le Œº ha.ne' (fun _ => Ioi 0) s
        fun x _ Œ¥ Œ¥pos => ‚ü®Œ¥ / 2, by simp [half_pos Œ¥pos, Œ¥pos]‚ü©
    haveI : Encodable t := t_count.toEncodable
    calc
      Œº (f '' s) ‚â§ Œº (‚ãÉ x : t, f '' (s ‚à© closedBall x (r x))) := by
        rw [biUnion_eq_iUnion] at st
        apply measure_mono
        rw [‚Üê image_iUnion, ‚Üê inter_iUnion]
        exact image_subset _ (subset_inter (Subset.refl _) st)
      _ ‚â§ ‚àë' x : t, Œº (f '' (s ‚à© closedBall x (r x))) := measure_iUnion_le _
      _ ‚â§ ‚àë' x : t, m * Œº (closedBall x (r x)) :=
        (ENNReal.tsum_le_tsum fun x => I x (r x) (ts x.2) (rpos x x.2).le)
      _ ‚â§ m * (Œº s + a) := by rw [ENNReal.tsum_mul_left]; gcongr
  have L : Tendsto (fun a => (m : ‚Ñù‚â•0‚àû) * (Œº s + a)) (ùìù[>] 0) (ùìù (m * (Œº s + 0))) := by
    apply Tendsto.mono_left _ nhdsWithin_le_nhds
    apply ENNReal.Tendsto.const_mul (tendsto_const_nhds.add tendsto_id)
    simp only [ENNReal.coe_ne_top, Ne, or_true, not_false_iff]
  rw [add_zero] at L
  exact ge_of_tendsto L J
theorem mul_le_addHaar_image_of_lt_det (A : E ‚ÜíL[‚Ñù] E) {m : ‚Ñù‚â•0}
    (hm : (m : ‚Ñù‚â•0‚àû) < ENNReal.ofReal |A.det|) :
    ‚àÄ·∂† Œ¥ in ùìù[>] (0 : ‚Ñù‚â•0),
      ‚àÄ (s : Set E) (f : E ‚Üí E), ApproximatesLinearOn f A s Œ¥ ‚Üí (m : ‚Ñù‚â•0‚àû) * Œº s ‚â§ Œº (f '' s) := by
  apply nhdsWithin_le_nhds
  rcases eq_or_lt_of_le (zero_le m) with (rfl | mpos)
  ¬∑ filter_upwards
    simp only [forall_const, zero_mul, imp_true_iff, zero_le, ENNReal.coe_zero]
  have hA : A.det ‚â† 0 := by
    intro h; simp only [h, ENNReal.not_lt_zero, ENNReal.ofReal_zero, abs_zero] at hm
  let B := A.toContinuousLinearEquivOfDetNeZero hA
  have I : ENNReal.ofReal |(B.symm : E ‚ÜíL[‚Ñù] E).det| < (m‚Åª¬π : ‚Ñù‚â•0) := by
    simp only [ENNReal.ofReal, abs_inv, Real.toNNReal_inv, ContinuousLinearEquiv.det_coe_symm,
      ContinuousLinearMap.coe_toContinuousLinearEquivOfDetNeZero, ENNReal.coe_lt_coe] at hm ‚ä¢
    exact NNReal.inv_lt_inv mpos.ne' hm
  obtain ‚ü®Œ¥‚ÇÄ, Œ¥‚ÇÄpos, hŒ¥‚ÇÄ‚ü© :
    ‚àÉ Œ¥ : ‚Ñù‚â•0,
      0 < Œ¥ ‚àß
        ‚àÄ (t : Set E) (g : E ‚Üí E),
          ApproximatesLinearOn g (B.symm : E ‚ÜíL[‚Ñù] E) t Œ¥ ‚Üí Œº (g '' t) ‚â§ ‚Üëm‚Åª¬π * Œº t := by
    have :
      ‚àÄ·∂† Œ¥ : ‚Ñù‚â•0 in ùìù[>] 0,
        ‚àÄ (t : Set E) (g : E ‚Üí E),
          ApproximatesLinearOn g (B.symm : E ‚ÜíL[‚Ñù] E) t Œ¥ ‚Üí Œº (g '' t) ‚â§ ‚Üëm‚Åª¬π * Œº t :=
      addHaar_image_le_mul_of_det_lt Œº B.symm I
    rcases (this.and self_mem_nhdsWithin).exists with ‚ü®Œ¥‚ÇÄ, h, h'‚ü©
    exact ‚ü®Œ¥‚ÇÄ, h', h‚ü©
  have L1 : ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù‚â•0), Subsingleton E ‚à® Œ¥ < ‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä‚Åª¬π := by
    by_cases h : Subsingleton E
    ¬∑ simp only [h, true_or, eventually_const]
    simp only [h, false_or]
    apply Iio_mem_nhds
    simpa only [h, false_or, inv_pos] using B.subsingleton_or_nnnorm_symm_pos
  have L2 :
    ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù‚â•0), ‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä * (‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä‚Åª¬π - Œ¥)‚Åª¬π * Œ¥ < Œ¥‚ÇÄ := by
    have :
      Tendsto (fun Œ¥ => ‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä * (‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä‚Åª¬π - Œ¥)‚Åª¬π * Œ¥) (ùìù 0)
        (ùìù (‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä * (‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä‚Åª¬π - 0)‚Åª¬π * 0)) := by
      rcases eq_or_ne ‚Äñ(B.symm : E ‚ÜíL[‚Ñù] E)‚Äñ‚Çä 0 with (H | H)
      ¬∑ simpa only [H, zero_mul] using tendsto_const_nhds
      refine Tendsto.mul (tendsto_const_nhds.mul ?_) tendsto_id
      refine (Tendsto.sub tendsto_const_nhds tendsto_id).inv‚ÇÄ ?_
      simpa only [tsub_zero, inv_eq_zero, Ne] using H
    simp only [mul_zero] at this
    exact (tendsto_order.1 this).2 Œ¥‚ÇÄ Œ¥‚ÇÄpos
  filter_upwards [L1, L2]
  intro Œ¥ h1Œ¥ h2Œ¥ s f hf
  have hf' : ApproximatesLinearOn f (B : E ‚ÜíL[‚Ñù] E) s Œ¥ := by convert hf
  let F := hf'.toPartialEquiv h1Œ¥
  suffices H : Œº (F.symm '' F.target) ‚â§ (m‚Åª¬π : ‚Ñù‚â•0) * Œº F.target by
    change (m : ‚Ñù‚â•0‚àû) * Œº F.source ‚â§ Œº F.target
    rwa [‚Üê F.symm_image_target_eq_source, mul_comm, ‚Üê ENNReal.le_div_iff_mul_le, div_eq_mul_inv,
      mul_comm, ‚Üê ENNReal.coe_inv mpos.ne']
    ¬∑ apply Or.inl
      simpa only [ENNReal.coe_eq_zero, Ne] using mpos.ne'
    ¬∑ simp only [ENNReal.coe_ne_top, true_or, Ne, not_false_iff]
  exact hŒ¥‚ÇÄ _ _ ((hf'.to_inv h1Œ¥).mono_num h2Œ¥.le)
theorem _root_.ApproximatesLinearOn.norm_fderiv_sub_le {A : E ‚ÜíL[‚Ñù] E} {Œ¥ : ‚Ñù‚â•0}
    (hf : ApproximatesLinearOn f A s Œ¥) (hs : MeasurableSet s) (f' : E ‚Üí E ‚ÜíL[‚Ñù] E)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) : ‚àÄ·µê x ‚àÇŒº.restrict s, ‚Äñf' x - A‚Äñ‚Çä ‚â§ Œ¥ := by
  filter_upwards [Besicovitch.ae_tendsto_measure_inter_div Œº s, ae_restrict_mem hs]
  intro x hx xs
  apply ContinuousLinearMap.opNorm_le_bound _ Œ¥.2 fun z => ?_
  suffices H : ‚àÄ Œµ, 0 < Œµ ‚Üí ‚Äñ(f' x - A) z‚Äñ ‚â§ (Œ¥ + Œµ) * (‚Äñz‚Äñ + Œµ) + ‚Äñf' x - A‚Äñ * Œµ by
    have :
      Tendsto (fun Œµ : ‚Ñù => ((Œ¥ : ‚Ñù) + Œµ) * (‚Äñz‚Äñ + Œµ) + ‚Äñf' x - A‚Äñ * Œµ) (ùìù[>] 0)
        (ùìù ((Œ¥ + 0) * (‚Äñz‚Äñ + 0) + ‚Äñf' x - A‚Äñ * 0)) :=
      Tendsto.mono_left (Continuous.tendsto (by fun_prop) 0) nhdsWithin_le_nhds
    simp only [add_zero, mul_zero] at this
    apply le_of_tendsto_of_tendsto tendsto_const_nhds this
    filter_upwards [self_mem_nhdsWithin]
    exact H
  intro Œµ Œµpos
  have B‚ÇÅ : ‚àÄ·∂† r in ùìù[>] (0 : ‚Ñù), (s ‚à© ({x} + r ‚Ä¢ closedBall z Œµ)).Nonempty :=
    eventually_nonempty_inter_smul_of_density_one Œº s x hx _ measurableSet_closedBall
      (measure_closedBall_pos Œº z Œµpos).ne'
  obtain ‚ü®œÅ, œÅpos, hœÅ‚ü© :
    ‚àÉ œÅ > 0, ball x œÅ ‚à© s ‚äÜ {y : E | ‚Äñf y - f x - (f' x) (y - x)‚Äñ ‚â§ Œµ * ‚Äñy - x‚Äñ} :=
    mem_nhdsWithin_iff.1 ((hf' x xs).isLittleO.def Œµpos)
  have B‚ÇÇ : ‚àÄ·∂† r in ùìù[>] (0 : ‚Ñù), {x} + r ‚Ä¢ closedBall z Œµ ‚äÜ ball x œÅ := by
    apply nhdsWithin_le_nhds
    exact eventually_singleton_add_smul_subset isBounded_closedBall (ball_mem_nhds x œÅpos)
  obtain ‚ü®r, ‚ü®y, ‚ü®ys, hy‚ü©‚ü©, rœÅ, rpos‚ü© :
    ‚àÉ r : ‚Ñù,
      (s ‚à© ({x} + r ‚Ä¢ closedBall z Œµ)).Nonempty ‚àß {x} + r ‚Ä¢ closedBall z Œµ ‚äÜ ball x œÅ ‚àß 0 < r :=
    (B‚ÇÅ.and (B‚ÇÇ.and self_mem_nhdsWithin)).exists
  obtain ‚ü®a, az, ya‚ü© : ‚àÉ a, a ‚àà closedBall z Œµ ‚àß y = x + r ‚Ä¢ a := by
    simp only [mem_smul_set, image_add_left, mem_preimage, singleton_add] at hy
    rcases hy with ‚ü®a, az, ha‚ü©
    exact ‚ü®a, az, by simp only [ha, add_neg_cancel_left]‚ü©
  have norm_a : ‚Äña‚Äñ ‚â§ ‚Äñz‚Äñ + Œµ :=
    calc
      ‚Äña‚Äñ = ‚Äñz + (a - z)‚Äñ := by simp only [_root_.add_sub_cancel]
      _ ‚â§ ‚Äñz‚Äñ + ‚Äña - z‚Äñ := norm_add_le _ _
      _ ‚â§ ‚Äñz‚Äñ + Œµ := add_le_add_left (mem_closedBall_iff_norm.1 az) _
  have I : r * ‚Äñ(f' x - A) a‚Äñ ‚â§ r * (Œ¥ + Œµ) * (‚Äñz‚Äñ + Œµ) :=
    calc
      r * ‚Äñ(f' x - A) a‚Äñ = ‚Äñ(f' x - A) (r ‚Ä¢ a)‚Äñ := by
        simp only [ContinuousLinearMap.map_smul, norm_smul, Real.norm_eq_abs, abs_of_nonneg rpos.le]
      _ = ‚Äñf y - f x - A (y - x) - (f y - f x - (f' x) (y - x))‚Äñ := by
        congr 1
        simp only [ya, add_sub_cancel_left, sub_sub_sub_cancel_left, ContinuousLinearMap.coe_sub',
          eq_self_iff_true, sub_left_inj, Pi.sub_apply, ContinuousLinearMap.map_smul, smul_sub]
      _ ‚â§ ‚Äñf y - f x - A (y - x)‚Äñ + ‚Äñf y - f x - (f' x) (y - x)‚Äñ := norm_sub_le _ _
      _ ‚â§ Œ¥ * ‚Äñy - x‚Äñ + Œµ * ‚Äñy - x‚Äñ := (add_le_add (hf _ ys _ xs) (hœÅ ‚ü®rœÅ hy, ys‚ü©))
      _ = r * (Œ¥ + Œµ) * ‚Äña‚Äñ := by
        simp only [ya, add_sub_cancel_left, norm_smul, Real.norm_eq_abs, abs_of_nonneg rpos.le]
        ring
      _ ‚â§ r * (Œ¥ + Œµ) * (‚Äñz‚Äñ + Œµ) := by gcongr
  calc
    ‚Äñ(f' x - A) z‚Äñ = ‚Äñ(f' x - A) a + (f' x - A) (z - a)‚Äñ := by
      congr 1
      simp only [ContinuousLinearMap.coe_sub', map_sub, Pi.sub_apply]
      abel
    _ ‚â§ ‚Äñ(f' x - A) a‚Äñ + ‚Äñ(f' x - A) (z - a)‚Äñ := norm_add_le _ _
    _ ‚â§ (Œ¥ + Œµ) * (‚Äñz‚Äñ + Œµ) + ‚Äñf' x - A‚Äñ * ‚Äñz - a‚Äñ := by
      apply add_le_add
      ¬∑ rw [mul_assoc] at I; exact (mul_le_mul_left rpos).1 I
      ¬∑ apply ContinuousLinearMap.le_opNorm
    _ ‚â§ (Œ¥ + Œµ) * (‚Äñz‚Äñ + Œµ) + ‚Äñf' x - A‚Äñ * Œµ := by
      rw [mem_closedBall_iff_norm'] at az
      gcongr
theorem addHaar_image_eq_zero_of_differentiableOn_of_addHaar_eq_zero (hf : DifferentiableOn ‚Ñù f s)
    (hs : Œº s = 0) : Œº (f '' s) = 0 := by
  refine le_antisymm ?_ (zero_le _)
  have :
      ‚àÄ A : E ‚ÜíL[‚Ñù] E, ‚àÉ Œ¥ : ‚Ñù‚â•0, 0 < Œ¥ ‚àß
        ‚àÄ (t : Set E), ApproximatesLinearOn f A t Œ¥ ‚Üí
          Œº (f '' t) ‚â§ (Real.toNNReal |A.det| + 1 : ‚Ñù‚â•0) * Œº t := by
    intro A
    let m : ‚Ñù‚â•0 := Real.toNNReal |A.det| + 1
    have I : ENNReal.ofReal |A.det| < m := by
      simp only [m, ENNReal.ofReal, lt_add_iff_pos_right, zero_lt_one, ENNReal.coe_lt_coe]
    rcases ((addHaar_image_le_mul_of_det_lt Œº A I).and self_mem_nhdsWithin).exists with ‚ü®Œ¥, h, h'‚ü©
    exact ‚ü®Œ¥, h', fun t ht => h t f ht‚ü©
  choose Œ¥ hŒ¥ using this
  obtain ‚ü®t, A, _, _, t_cover, ht, -‚ü© :
    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] E),
      Pairwise (Disjoint on t) ‚àß
        (‚àÄ n : ‚Ñï, MeasurableSet (t n)) ‚àß
          (s ‚äÜ ‚ãÉ n : ‚Ñï, t n) ‚àß
            (‚àÄ n : ‚Ñï, ApproximatesLinearOn f (A n) (s ‚à© t n) (Œ¥ (A n))) ‚àß
              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = fderivWithin ‚Ñù f s y) :=
    exists_partition_approximatesLinearOn_of_hasFDerivWithinAt f s (fderivWithin ‚Ñù f s)
      (fun x xs => (hf x xs).hasFDerivWithinAt) Œ¥ fun A => (hŒ¥ A).1.ne'
  calc
    Œº (f '' s) ‚â§ Œº (‚ãÉ n, f '' (s ‚à© t n)) := by
      apply measure_mono
      rw [‚Üê image_iUnion, ‚Üê inter_iUnion]
      exact image_subset f (subset_inter Subset.rfl t_cover)
    _ ‚â§ ‚àë' n, Œº (f '' (s ‚à© t n)) := measure_iUnion_le _
    _ ‚â§ ‚àë' n, (Real.toNNReal |(A n).det| + 1 : ‚Ñù‚â•0) * Œº (s ‚à© t n) := by
      apply ENNReal.tsum_le_tsum fun n => ?_
      apply (hŒ¥ (A n)).2
      exact ht n
    _ ‚â§ ‚àë' n, ((Real.toNNReal |(A n).det| + 1 : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû) * 0 := by
      refine ENNReal.tsum_le_tsum fun n => mul_le_mul_left' ?_ _
      exact le_trans (measure_mono inter_subset_left) (le_of_eq hs)
    _ = 0 := by simp only [tsum_zero, mul_zero]
theorem addHaar_image_eq_zero_of_det_fderivWithin_eq_zero_aux
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (R : ‚Ñù) (hs : s ‚äÜ closedBall 0 R) (Œµ : ‚Ñù‚â•0)
    (Œµpos : 0 < Œµ) (h'f' : ‚àÄ x ‚àà s, (f' x).det = 0) : Œº (f '' s) ‚â§ Œµ * Œº (closedBall 0 R) := by
  rcases eq_empty_or_nonempty s with (rfl | h's); ¬∑ simp only [measure_empty, zero_le, image_empty]
  have :
      ‚àÄ A : E ‚ÜíL[‚Ñù] E, ‚àÉ Œ¥ : ‚Ñù‚â•0, 0 < Œ¥ ‚àß
        ‚àÄ (t : Set E), ApproximatesLinearOn f A t Œ¥ ‚Üí
          Œº (f '' t) ‚â§ (Real.toNNReal |A.det| + Œµ : ‚Ñù‚â•0) * Œº t := by
    intro A
    let m : ‚Ñù‚â•0 := Real.toNNReal |A.det| + Œµ
    have I : ENNReal.ofReal |A.det| < m := by
      simp only [m, ENNReal.ofReal, lt_add_iff_pos_right, Œµpos, ENNReal.coe_lt_coe]
    rcases ((addHaar_image_le_mul_of_det_lt Œº A I).and self_mem_nhdsWithin).exists with ‚ü®Œ¥, h, h'‚ü©
    exact ‚ü®Œ¥, h', fun t ht => h t f ht‚ü©
  choose Œ¥ hŒ¥ using this
  obtain ‚ü®t, A, t_disj, t_meas, t_cover, ht, Af'‚ü© :
    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] E),
      Pairwise (Disjoint on t) ‚àß
        (‚àÄ n : ‚Ñï, MeasurableSet (t n)) ‚àß
          (s ‚äÜ ‚ãÉ n : ‚Ñï, t n) ‚àß
            (‚àÄ n : ‚Ñï, ApproximatesLinearOn f (A n) (s ‚à© t n) (Œ¥ (A n))) ‚àß
              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) :=
    exists_partition_approximatesLinearOn_of_hasFDerivWithinAt f s f' hf' Œ¥ fun A => (hŒ¥ A).1.ne'
  calc
    Œº (f '' s) ‚â§ Œº (‚ãÉ n, f '' (s ‚à© t n)) := by
      rw [‚Üê image_iUnion, ‚Üê inter_iUnion]
      gcongr
      exact subset_inter Subset.rfl t_cover
    _ ‚â§ ‚àë' n, Œº (f '' (s ‚à© t n)) := measure_iUnion_le _
    _ ‚â§ ‚àë' n, (Real.toNNReal |(A n).det| + Œµ : ‚Ñù‚â•0) * Œº (s ‚à© t n) := by
      gcongr
      exact (hŒ¥ (A _)).2 _ (ht _)
    _ = ‚àë' n, Œµ * Œº (s ‚à© t n) := by
      congr with n
      rcases Af' h's n with ‚ü®y, ys, hy‚ü©
      simp only [hy, h'f' y ys, Real.toNNReal_zero, abs_zero, zero_add]
    _ ‚â§ Œµ * ‚àë' n, Œº (closedBall 0 R ‚à© t n) := by
      rw [ENNReal.tsum_mul_left]
      gcongr
    _ = Œµ * Œº (‚ãÉ n, closedBall 0 R ‚à© t n) := by
      rw [measure_iUnion]
      ¬∑ exact pairwise_disjoint_mono t_disj fun n => inter_subset_right
      ¬∑ intro n
        exact measurableSet_closedBall.inter (t_meas n)
    _ ‚â§ Œµ * Œº (closedBall 0 R) := by
      rw [‚Üê inter_iUnion]
      exact mul_le_mul_left' (measure_mono inter_subset_left) _
theorem addHaar_image_eq_zero_of_det_fderivWithin_eq_zero
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (h'f' : ‚àÄ x ‚àà s, (f' x).det = 0) :
    Œº (f '' s) = 0 := by
  suffices H : ‚àÄ R, Œº (f '' (s ‚à© closedBall 0 R)) = 0 by
    apply le_antisymm _ (zero_le _)
    rw [‚Üê iUnion_inter_closedBall_nat s 0]
    calc
      Œº (f '' ‚ãÉ n : ‚Ñï, s ‚à© closedBall 0 n) ‚â§ ‚àë' n : ‚Ñï, Œº (f '' (s ‚à© closedBall 0 n)) := by
        rw [image_iUnion]; exact measure_iUnion_le _
      _ ‚â§ 0 := by simp only [H, tsum_zero, nonpos_iff_eq_zero]
  intro R
  have A : ‚àÄ (Œµ : ‚Ñù‚â•0), 0 < Œµ ‚Üí Œº (f '' (s ‚à© closedBall 0 R)) ‚â§ Œµ * Œº (closedBall 0 R) :=
    fun Œµ Œµpos =>
    addHaar_image_eq_zero_of_det_fderivWithin_eq_zero_aux Œº
      (fun x hx => (hf' x hx.1).mono inter_subset_left) R inter_subset_right Œµ Œµpos
      fun x hx => h'f' x hx.1
  have B : Tendsto (fun Œµ : ‚Ñù‚â•0 => (Œµ : ‚Ñù‚â•0‚àû) * Œº (closedBall 0 R)) (ùìù[>] 0) (ùìù 0) := by
    have :
      Tendsto (fun Œµ : ‚Ñù‚â•0 => (Œµ : ‚Ñù‚â•0‚àû) * Œº (closedBall 0 R)) (ùìù 0)
        (ùìù (((0 : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû) * Œº (closedBall 0 R))) :=
      ENNReal.Tendsto.mul_const (ENNReal.tendsto_coe.2 tendsto_id)
        (Or.inr measure_closedBall_lt_top.ne)
    simp only [zero_mul, ENNReal.coe_zero] at this
    exact Tendsto.mono_left this nhdsWithin_le_nhds
  apply le_antisymm _ (zero_le _)
  apply ge_of_tendsto B
  filter_upwards [self_mem_nhdsWithin]
  exact A
theorem aemeasurable_fderivWithin (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) : AEMeasurable f' (Œº.restrict s) := by
  refine aemeasurable_of_unif_approx fun Œµ Œµpos => ?_
  let Œ¥ : ‚Ñù‚â•0 := ‚ü®Œµ, le_of_lt Œµpos‚ü©
  have Œ¥pos : 0 < Œ¥ := Œµpos
  obtain ‚ü®t, A, t_disj, t_meas, t_cover, ht, _‚ü© :
    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] E),
      Pairwise (Disjoint on t) ‚àß
        (‚àÄ n : ‚Ñï, MeasurableSet (t n)) ‚àß
          (s ‚äÜ ‚ãÉ n : ‚Ñï, t n) ‚àß
            (‚àÄ n : ‚Ñï, ApproximatesLinearOn f (A n) (s ‚à© t n) Œ¥) ‚àß
              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) :=
    exists_partition_approximatesLinearOn_of_hasFDerivWithinAt f s f' hf' (fun _ => Œ¥) fun _ =>
      Œ¥pos.ne'
  obtain ‚ü®g, g_meas, hg‚ü© :
      ‚àÉ g : E ‚Üí E ‚ÜíL[‚Ñù] E, Measurable g ‚àß ‚àÄ (n : ‚Ñï) (x : E), x ‚àà t n ‚Üí g x = A n :=
    exists_measurable_piecewise t t_meas (fun n _ => A n) (fun n => measurable_const) <|
      t_disj.mono fun i j h => by simp only [h.inter_eq, eqOn_empty]
  refine ‚ü®g, g_meas.aemeasurable, ?_‚ü©
  suffices H : ‚àÄ·µê x : E ‚àÇsum fun n ‚Ü¶ Œº.restrict (s ‚à© t n), dist (g x) (f' x) ‚â§ Œµ by
    have : Œº.restrict s ‚â§ sum fun n => Œº.restrict (s ‚à© t n) := by
      have : s = ‚ãÉ n, s ‚à© t n := by
        rw [‚Üê inter_iUnion]
        exact Subset.antisymm (subset_inter Subset.rfl t_cover) inter_subset_left
      conv_lhs => rw [this]
      exact restrict_iUnion_le
    exact ae_mono this H
  refine ae_sum_iff.2 fun n => ?_
  have E‚ÇÅ : ‚àÄ·µê x : E ‚àÇŒº.restrict (s ‚à© t n), ‚Äñf' x - A n‚Äñ‚Çä ‚â§ Œ¥ :=
    (ht n).norm_fderiv_sub_le Œº (hs.inter (t_meas n)) f' fun x hx =>
      (hf' x hx.1).mono inter_subset_left
  have E‚ÇÇ : ‚àÄ·µê x : E ‚àÇŒº.restrict (s ‚à© t n), g x = A n := by
    suffices H : ‚àÄ·µê x : E ‚àÇŒº.restrict (t n), g x = A n from
      ae_mono (restrict_mono inter_subset_right le_rfl) H
    filter_upwards [ae_restrict_mem (t_meas n)]
    exact hg n
  filter_upwards [E‚ÇÅ, E‚ÇÇ] with x hx1 hx2
  rw [‚Üê nndist_eq_nnnorm] at hx1
  rw [hx2, dist_comm]
  exact hx1
theorem aemeasurable_ofReal_abs_det_fderivWithin (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :
    AEMeasurable (fun x => ENNReal.ofReal |(f' x).det|) (Œº.restrict s) := by
  apply ENNReal.measurable_ofReal.comp_aemeasurable
  refine continuous_abs.measurable.comp_aemeasurable ?_
  refine ContinuousLinearMap.continuous_det.measurable.comp_aemeasurable ?_
  exact aemeasurable_fderivWithin Œº hs hf'
theorem aemeasurable_toNNReal_abs_det_fderivWithin (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :
    AEMeasurable (fun x => |(f' x).det|.toNNReal) (Œº.restrict s) := by
  apply measurable_real_toNNReal.comp_aemeasurable
  refine continuous_abs.measurable.comp_aemeasurable ?_
  refine ContinuousLinearMap.continuous_det.measurable.comp_aemeasurable ?_
  exact aemeasurable_fderivWithin Œº hs hf'
theorem measurable_image_of_fderivWithin (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) : MeasurableSet (f '' s) :=
  haveI : DifferentiableOn ‚Ñù f s := fun x hx => (hf' x hx).differentiableWithinAt
  hs.image_of_continuousOn_injOn (DifferentiableOn.continuousOn this) hf
theorem measurableEmbedding_of_fderivWithin (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) :
    MeasurableEmbedding (s.restrict f) :=
  haveI : DifferentiableOn ‚Ñù f s := fun x hx => (hf' x hx).differentiableWithinAt
  this.continuousOn.measurableEmbedding hs hf
theorem addHaar_image_le_lintegral_abs_det_fderiv_aux1 (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) {Œµ : ‚Ñù‚â•0} (Œµpos : 0 < Œµ) :
    Œº (f '' s) ‚â§ (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) + 2 * Œµ * Œº s := by
  have :
    ‚àÄ A : E ‚ÜíL[‚Ñù] E,
      ‚àÉ Œ¥ : ‚Ñù‚â•0,
        0 < Œ¥ ‚àß
          (‚àÄ B : E ‚ÜíL[‚Ñù] E, ‚ÄñB - A‚Äñ ‚â§ Œ¥ ‚Üí |B.det - A.det| ‚â§ Œµ) ‚àß
            ‚àÄ (t : Set E) (g : E ‚Üí E), ApproximatesLinearOn g A t Œ¥ ‚Üí
              Œº (g '' t) ‚â§ (ENNReal.ofReal |A.det| + Œµ) * Œº t := by
    intro A
    let m : ‚Ñù‚â•0 := Real.toNNReal |A.det| + Œµ
    have I : ENNReal.ofReal |A.det| < m := by
      simp only [m, ENNReal.ofReal, lt_add_iff_pos_right, Œµpos, ENNReal.coe_lt_coe]
    rcases ((addHaar_image_le_mul_of_det_lt Œº A I).and self_mem_nhdsWithin).exists with ‚ü®Œ¥, h, Œ¥pos‚ü©
    obtain ‚ü®Œ¥', Œ¥'pos, hŒ¥'‚ü© : ‚àÉ (Œ¥' : ‚Ñù), 0 < Œ¥' ‚àß ‚àÄ B, dist B A < Œ¥' ‚Üí dist B.det A.det < ‚ÜëŒµ :=
      continuousAt_iff.1 (ContinuousLinearMap.continuous_det (E := E)).continuousAt Œµ Œµpos
    let Œ¥'' : ‚Ñù‚â•0 := ‚ü®Œ¥' / 2, (half_pos Œ¥'pos).le‚ü©
    refine ‚ü®min Œ¥ Œ¥'', lt_min Œ¥pos (half_pos Œ¥'pos), ?_, ?_‚ü©
    ¬∑ intro B hB
      rw [‚Üê Real.dist_eq]
      apply (hŒ¥' B _).le
      rw [dist_eq_norm]
      calc
        ‚ÄñB - A‚Äñ ‚â§ (min Œ¥ Œ¥'' : ‚Ñù‚â•0) := hB
        _ ‚â§ Œ¥'' := by simp only [le_refl, NNReal.coe_min, min_le_iff, or_true]
        _ < Œ¥' := half_lt_self Œ¥'pos
    ¬∑ intro t g htg
      exact h t g (htg.mono_num (min_le_left _ _))
  choose Œ¥ hŒ¥ using this
  obtain ‚ü®t, A, t_disj, t_meas, t_cover, ht, -‚ü© :
    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] E),
      Pairwise (Disjoint on t) ‚àß
        (‚àÄ n : ‚Ñï, MeasurableSet (t n)) ‚àß
          (s ‚äÜ ‚ãÉ n : ‚Ñï, t n) ‚àß
            (‚àÄ n : ‚Ñï, ApproximatesLinearOn f (A n) (s ‚à© t n) (Œ¥ (A n))) ‚àß
              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) :=
    exists_partition_approximatesLinearOn_of_hasFDerivWithinAt f s f' hf' Œ¥ fun A => (hŒ¥ A).1.ne'
  calc
    Œº (f '' s) ‚â§ Œº (‚ãÉ n, f '' (s ‚à© t n)) := by
      apply measure_mono
      rw [‚Üê image_iUnion, ‚Üê inter_iUnion]
      exact image_subset f (subset_inter Subset.rfl t_cover)
    _ ‚â§ ‚àë' n, Œº (f '' (s ‚à© t n)) := measure_iUnion_le _
    _ ‚â§ ‚àë' n, (ENNReal.ofReal |(A n).det| + Œµ) * Œº (s ‚à© t n) := by
      apply ENNReal.tsum_le_tsum fun n => ?_
      apply (hŒ¥ (A n)).2.2
      exact ht n
    _ = ‚àë' n, ‚à´‚Åª _ in s ‚à© t n, ENNReal.ofReal |(A n).det| + Œµ ‚àÇŒº := by
      simp only [lintegral_const, MeasurableSet.univ, Measure.restrict_apply, univ_inter]
    _ ‚â§ ‚àë' n, ‚à´‚Åª x in s ‚à© t n, ENNReal.ofReal |(f' x).det| + 2 * Œµ ‚àÇŒº := by
      apply ENNReal.tsum_le_tsum fun n => ?_
      apply lintegral_mono_ae
      filter_upwards [(ht n).norm_fderiv_sub_le Œº (hs.inter (t_meas n)) f' fun x hx =>
          (hf' x hx.1).mono inter_subset_left]
      intro x hx
      have I : |(A n).det| ‚â§ |(f' x).det| + Œµ :=
        calc
          |(A n).det| = |(f' x).det - ((f' x).det - (A n).det)| := by congr 1; abel
          _ ‚â§ |(f' x).det| + |(f' x).det - (A n).det| := abs_sub _ _
          _ ‚â§ |(f' x).det| + Œµ := add_le_add le_rfl ((hŒ¥ (A n)).2.1 _ hx)
      calc
        ENNReal.ofReal |(A n).det| + Œµ ‚â§ ENNReal.ofReal (|(f' x).det| + Œµ) + Œµ := by gcongr
        _ = ENNReal.ofReal |(f' x).det| + 2 * Œµ := by
          simp only [ENNReal.ofReal_add, abs_nonneg, two_mul, add_assoc, NNReal.zero_le_coe,
            ENNReal.ofReal_coe_nnreal]
    _ = ‚à´‚Åª x in ‚ãÉ n, s ‚à© t n, ENNReal.ofReal |(f' x).det| + 2 * Œµ ‚àÇŒº := by
      have M : ‚àÄ n : ‚Ñï, MeasurableSet (s ‚à© t n) := fun n => hs.inter (t_meas n)
      rw [lintegral_iUnion M]
      exact pairwise_disjoint_mono t_disj fun n => inter_subset_right
    _ = ‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| + 2 * Œµ ‚àÇŒº := by
      rw [‚Üê inter_iUnion, inter_eq_self_of_subset_left t_cover]
    _ = (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) + 2 * Œµ * Œº s := by
      simp only [lintegral_add_right' _ aemeasurable_const, setLIntegral_const]
theorem addHaar_image_le_lintegral_abs_det_fderiv_aux2 (hs : MeasurableSet s) (h's : Œº s ‚â† ‚àû)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :
    Œº (f '' s) ‚â§ ‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by
  have :
    Tendsto (fun Œµ : ‚Ñù‚â•0 => (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) + 2 * Œµ * Œº s) (ùìù[>] 0)
      (ùìù ((‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) + 2 * (0 : ‚Ñù‚â•0) * Œº s)) := by
    apply Tendsto.mono_left _ nhdsWithin_le_nhds
    refine tendsto_const_nhds.add ?_
    refine ENNReal.Tendsto.mul_const ?_ (Or.inr h's)
    exact ENNReal.Tendsto.const_mul (ENNReal.tendsto_coe.2 tendsto_id) (Or.inr ENNReal.coe_ne_top)
  simp only [add_zero, zero_mul, mul_zero, ENNReal.coe_zero] at this
  apply ge_of_tendsto this
  filter_upwards [self_mem_nhdsWithin]
  intro Œµ Œµpos
  rw [mem_Ioi] at Œµpos
  exact addHaar_image_le_lintegral_abs_det_fderiv_aux1 Œº hs hf' Œµpos
theorem addHaar_image_le_lintegral_abs_det_fderiv (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :
    Œº (f '' s) ‚â§ ‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by
  let u n := disjointed (spanningSets Œº) n
  have u_meas : ‚àÄ n, MeasurableSet (u n) := by
    intro n
    apply MeasurableSet.disjointed fun i => ?_
    exact measurableSet_spanningSets Œº i
  have A : s = ‚ãÉ n, s ‚à© u n := by
    rw [‚Üê inter_iUnion, iUnion_disjointed, iUnion_spanningSets, inter_univ]
  calc
    Œº (f '' s) ‚â§ ‚àë' n, Œº (f '' (s ‚à© u n)) := by
      conv_lhs => rw [A, image_iUnion]
      exact measure_iUnion_le _
    _ ‚â§ ‚àë' n, ‚à´‚Åª x in s ‚à© u n, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by
      apply ENNReal.tsum_le_tsum fun n => ?_
      apply
        addHaar_image_le_lintegral_abs_det_fderiv_aux2 Œº (hs.inter (u_meas n)) _ fun x hx =>
          (hf' x hx.1).mono inter_subset_left
      have : Œº (u n) < ‚àû :=
        lt_of_le_of_lt (measure_mono (disjointed_subset _ _)) (measure_spanningSets_lt_top Œº n)
      exact ne_of_lt (lt_of_le_of_lt (measure_mono inter_subset_right) this)
    _ = ‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by
      conv_rhs => rw [A]
      rw [lintegral_iUnion]
      ¬∑ intro n; exact hs.inter (u_meas n)
      ¬∑ exact pairwise_disjoint_mono (disjoint_disjointed _) fun n => inter_subset_right
theorem lintegral_abs_det_fderiv_le_addHaar_image_aux1 (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) {Œµ : ‚Ñù‚â•0} (Œµpos : 0 < Œµ) :
    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) ‚â§ Œº (f '' s) + 2 * Œµ * Œº s := by
  have :
    ‚àÄ A : E ‚ÜíL[‚Ñù] E,
      ‚àÉ Œ¥ : ‚Ñù‚â•0,
        0 < Œ¥ ‚àß
          (‚àÄ B : E ‚ÜíL[‚Ñù] E, ‚ÄñB - A‚Äñ ‚â§ Œ¥ ‚Üí |B.det - A.det| ‚â§ Œµ) ‚àß
            ‚àÄ (t : Set E) (g : E ‚Üí E), ApproximatesLinearOn g A t Œ¥ ‚Üí
              ENNReal.ofReal |A.det| * Œº t ‚â§ Œº (g '' t) + Œµ * Œº t := by
    intro A
    obtain ‚ü®Œ¥', Œ¥'pos, hŒ¥'‚ü© : ‚àÉ (Œ¥' : ‚Ñù), 0 < Œ¥' ‚àß ‚àÄ B, dist B A < Œ¥' ‚Üí dist B.det A.det < ‚ÜëŒµ :=
      continuousAt_iff.1 (ContinuousLinearMap.continuous_det (E := E)).continuousAt Œµ Œµpos
    let Œ¥'' : ‚Ñù‚â•0 := ‚ü®Œ¥' / 2, (half_pos Œ¥'pos).le‚ü©
    have I'' : ‚àÄ B : E ‚ÜíL[‚Ñù] E, ‚ÄñB - A‚Äñ ‚â§ ‚ÜëŒ¥'' ‚Üí |B.det - A.det| ‚â§ ‚ÜëŒµ := by
      intro B hB
      rw [‚Üê Real.dist_eq]
      apply (hŒ¥' B _).le
      rw [dist_eq_norm]
      exact hB.trans_lt (half_lt_self Œ¥'pos)
    rcases eq_or_ne A.det 0 with (hA | hA)
    ¬∑ refine ‚ü®Œ¥'', half_pos Œ¥'pos, I'', ?_‚ü©
      simp only [hA, forall_const, zero_mul, ENNReal.ofReal_zero, imp_true_iff,
        zero_le, abs_zero]
    let m : ‚Ñù‚â•0 := Real.toNNReal |A.det| - Œµ
    have I : (m : ‚Ñù‚â•0‚àû) < ENNReal.ofReal |A.det| := by
      simp only [m, ENNReal.ofReal, ENNReal.coe_sub]
      apply ENNReal.sub_lt_self ENNReal.coe_ne_top
      ¬∑ simpa only [abs_nonpos_iff, Real.toNNReal_eq_zero, ENNReal.coe_eq_zero, Ne] using hA
      ¬∑ simp only [Œµpos.ne', ENNReal.coe_eq_zero, Ne, not_false_iff]
    rcases ((mul_le_addHaar_image_of_lt_det Œº A I).and self_mem_nhdsWithin).exists with ‚ü®Œ¥, h, Œ¥pos‚ü©
    refine ‚ü®min Œ¥ Œ¥'', lt_min Œ¥pos (half_pos Œ¥'pos), ?_, ?_‚ü©
    ¬∑ intro B hB
      apply I'' _ (hB.trans _)
      simp only [le_refl, NNReal.coe_min, min_le_iff, or_true]
    ¬∑ intro t g htg
      rcases eq_or_ne (Œº t) ‚àû with (ht | ht)
      ¬∑ simp only [ht, Œµpos.ne', ENNReal.mul_top, ENNReal.coe_eq_zero, le_top, Ne,
          not_false_iff, _root_.add_top]
      have := h t g (htg.mono_num (min_le_left _ _))
      rwa [ENNReal.coe_sub, ENNReal.sub_mul, tsub_le_iff_right] at this
      simp only [ht, imp_true_iff, Ne, not_false_iff]
  choose Œ¥ hŒ¥ using this
  obtain ‚ü®t, A, t_disj, t_meas, t_cover, ht, -‚ü© :
    ‚àÉ (t : ‚Ñï ‚Üí Set E) (A : ‚Ñï ‚Üí E ‚ÜíL[‚Ñù] E),
      Pairwise (Disjoint on t) ‚àß
        (‚àÄ n : ‚Ñï, MeasurableSet (t n)) ‚àß
          (s ‚äÜ ‚ãÉ n : ‚Ñï, t n) ‚àß
            (‚àÄ n : ‚Ñï, ApproximatesLinearOn f (A n) (s ‚à© t n) (Œ¥ (A n))) ‚àß
              (s.Nonempty ‚Üí ‚àÄ n, ‚àÉ y ‚àà s, A n = f' y) :=
    exists_partition_approximatesLinearOn_of_hasFDerivWithinAt f s f' hf' Œ¥ fun A => (hŒ¥ A).1.ne'
  have s_eq : s = ‚ãÉ n, s ‚à© t n := by
    rw [‚Üê inter_iUnion]
    exact Subset.antisymm (subset_inter Subset.rfl t_cover) inter_subset_left
  calc
    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) =
        ‚àë' n, ‚à´‚Åª x in s ‚à© t n, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by
      conv_lhs => rw [s_eq]
      rw [lintegral_iUnion]
      ¬∑ exact fun n => hs.inter (t_meas n)
      ¬∑ exact pairwise_disjoint_mono t_disj fun n => inter_subset_right
    _ ‚â§ ‚àë' n, ‚à´‚Åª _ in s ‚à© t n, ENNReal.ofReal |(A n).det| + Œµ ‚àÇŒº := by
      apply ENNReal.tsum_le_tsum fun n => ?_
      apply lintegral_mono_ae
      filter_upwards [(ht n).norm_fderiv_sub_le Œº (hs.inter (t_meas n)) f' fun x hx =>
          (hf' x hx.1).mono inter_subset_left]
      intro x hx
      have I : |(f' x).det| ‚â§ |(A n).det| + Œµ :=
        calc
          |(f' x).det| = |(A n).det + ((f' x).det - (A n).det)| := by congr 1; abel
          _ ‚â§ |(A n).det| + |(f' x).det - (A n).det| := abs_add _ _
          _ ‚â§ |(A n).det| + Œµ := add_le_add le_rfl ((hŒ¥ (A n)).2.1 _ hx)
      calc
        ENNReal.ofReal |(f' x).det| ‚â§ ENNReal.ofReal (|(A n).det| + Œµ) :=
          ENNReal.ofReal_le_ofReal I
        _ = ENNReal.ofReal |(A n).det| + Œµ := by
          simp only [ENNReal.ofReal_add, abs_nonneg, NNReal.zero_le_coe, ENNReal.ofReal_coe_nnreal]
    _ = ‚àë' n, (ENNReal.ofReal |(A n).det| * Œº (s ‚à© t n) + Œµ * Œº (s ‚à© t n)) := by
      simp only [setLIntegral_const, lintegral_add_right _ measurable_const]
    _ ‚â§ ‚àë' n, (Œº (f '' (s ‚à© t n)) + Œµ * Œº (s ‚à© t n) + Œµ * Œº (s ‚à© t n)) := by
      gcongr
      exact (hŒ¥ (A _)).2.2 _ _ (ht _)
    _ = Œº (f '' s) + 2 * Œµ * Œº s := by
      conv_rhs => rw [s_eq]
      rw [image_iUnion, measure_iUnion]; rotate_left
      ¬∑ intro i j hij
        apply Disjoint.image _ hf inter_subset_left inter_subset_left
        exact Disjoint.mono inter_subset_right inter_subset_right (t_disj hij)
      ¬∑ intro i
        exact
          measurable_image_of_fderivWithin (hs.inter (t_meas i))
            (fun x hx => (hf' x hx.1).mono inter_subset_left)
            (hf.mono inter_subset_left)
      rw [measure_iUnion]; rotate_left
      ¬∑ exact pairwise_disjoint_mono t_disj fun i => inter_subset_right
      ¬∑ exact fun i => hs.inter (t_meas i)
      rw [‚Üê ENNReal.tsum_mul_left, ‚Üê ENNReal.tsum_add]
      congr 1
      ext1 i
      rw [mul_assoc, two_mul, add_assoc]
theorem lintegral_abs_det_fderiv_le_addHaar_image_aux2 (hs : MeasurableSet s) (h's : Œº s ‚â† ‚àû)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) :
    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) ‚â§ Œº (f '' s) := by
  have :
    Tendsto (fun Œµ : ‚Ñù‚â•0 => Œº (f '' s) + 2 * Œµ * Œº s) (ùìù[>] 0)
      (ùìù (Œº (f '' s) + 2 * (0 : ‚Ñù‚â•0) * Œº s)) := by
    apply Tendsto.mono_left _ nhdsWithin_le_nhds
    refine tendsto_const_nhds.add ?_
    refine ENNReal.Tendsto.mul_const ?_ (Or.inr h's)
    exact ENNReal.Tendsto.const_mul (ENNReal.tendsto_coe.2 tendsto_id) (Or.inr ENNReal.coe_ne_top)
  simp only [add_zero, zero_mul, mul_zero, ENNReal.coe_zero] at this
  apply ge_of_tendsto this
  filter_upwards [self_mem_nhdsWithin]
  intro Œµ Œµpos
  rw [mem_Ioi] at Œµpos
  exact lintegral_abs_det_fderiv_le_addHaar_image_aux1 Œº hs hf' hf Œµpos
theorem lintegral_abs_det_fderiv_le_addHaar_image (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) :
    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) ‚â§ Œº (f '' s) := by
  let u n := disjointed (spanningSets Œº) n
  have u_meas : ‚àÄ n, MeasurableSet (u n) := by
    intro n
    apply MeasurableSet.disjointed fun i => ?_
    exact measurableSet_spanningSets Œº i
  have A : s = ‚ãÉ n, s ‚à© u n := by
    rw [‚Üê inter_iUnion, iUnion_disjointed, iUnion_spanningSets, inter_univ]
  calc
    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) =
        ‚àë' n, ‚à´‚Åª x in s ‚à© u n, ENNReal.ofReal |(f' x).det| ‚àÇŒº := by
      conv_lhs => rw [A]
      rw [lintegral_iUnion]
      ¬∑ intro n; exact hs.inter (u_meas n)
      ¬∑ exact pairwise_disjoint_mono (disjoint_disjointed _) fun n => inter_subset_right
    _ ‚â§ ‚àë' n, Œº (f '' (s ‚à© u n)) := by
      apply ENNReal.tsum_le_tsum fun n => ?_
      apply
        lintegral_abs_det_fderiv_le_addHaar_image_aux2 Œº (hs.inter (u_meas n)) _
          (fun x hx => (hf' x hx.1).mono inter_subset_left) (hf.mono inter_subset_left)
      have : Œº (u n) < ‚àû :=
        lt_of_le_of_lt (measure_mono (disjointed_subset _ _)) (measure_spanningSets_lt_top Œº n)
      exact ne_of_lt (lt_of_le_of_lt (measure_mono inter_subset_right) this)
    _ = Œº (f '' s) := by
      conv_rhs => rw [A, image_iUnion]
      rw [measure_iUnion]
      ¬∑ intro i j hij
        apply Disjoint.image _ hf inter_subset_left inter_subset_left
        exact
          Disjoint.mono inter_subset_right inter_subset_right
            (disjoint_disjointed _ hij)
      ¬∑ intro i
        exact
          measurable_image_of_fderivWithin (hs.inter (u_meas i))
            (fun x hx => (hf' x hx.1).mono inter_subset_left)
            (hf.mono inter_subset_left)
theorem lintegral_abs_det_fderiv_eq_addHaar_image (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) :
    (‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| ‚àÇŒº) = Œº (f '' s) :=
  le_antisymm (lintegral_abs_det_fderiv_le_addHaar_image Œº hs hf' hf)
    (addHaar_image_le_lintegral_abs_det_fderiv Œº hs hf')
theorem map_withDensity_abs_det_fderiv_eq_addHaar (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) (h'f : Measurable f) :
    Measure.map f ((Œº.restrict s).withDensity fun x => ENNReal.ofReal |(f' x).det|) =
      Œº.restrict (f '' s) := by
  apply Measure.ext fun t ht => ?_
  rw [map_apply h'f ht, withDensity_apply _ (h'f ht), Measure.restrict_apply ht,
    restrict_restrict (h'f ht),
    lintegral_abs_det_fderiv_eq_addHaar_image Œº ((h'f ht).inter hs)
      (fun x hx => (hf' x hx.2).mono inter_subset_right) (hf.mono inter_subset_right),
    image_preimage_inter]
theorem restrict_map_withDensity_abs_det_fderiv_eq_addHaar (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) :
    Measure.map (s.restrict f) (comap (‚Üë) (Œº.withDensity fun x => ENNReal.ofReal |(f' x).det|)) =
      Œº.restrict (f '' s) := by
  obtain ‚ü®u, u_meas, uf‚ü© : ‚àÉ u, Measurable u ‚àß EqOn u f s := by
    classical
    refine ‚ü®piecewise s f 0, ?_, piecewise_eqOn _ _ _‚ü©
    refine ContinuousOn.measurable_piecewise ?_ continuous_zero.continuousOn hs
    have : DifferentiableOn ‚Ñù f s := fun x hx => (hf' x hx).differentiableWithinAt
    exact this.continuousOn
  have u' : ‚àÄ x ‚àà s, HasFDerivWithinAt u (f' x) s x := fun x hx =>
    (hf' x hx).congr (fun y hy => uf hy) (uf hx)
  set F : s ‚Üí E := u ‚àò (‚Üë) with hF
  have A :
    Measure.map F (comap (‚Üë) (Œº.withDensity fun x => ENNReal.ofReal |(f' x).det|)) =
      Œº.restrict (u '' s) := by
    rw [hF, ‚Üê Measure.map_map u_meas measurable_subtype_coe, map_comap_subtype_coe hs,
      restrict_withDensity hs]
    exact map_withDensity_abs_det_fderiv_eq_addHaar Œº hs u' (hf.congr uf.symm) u_meas
  rw [uf.image_eq] at A
  have : F = s.restrict f := by
    ext x
    exact uf x.2
  rwa [this] at A
theorem lintegral_image_eq_lintegral_abs_det_fderiv_mul (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) (g : E ‚Üí ‚Ñù‚â•0‚àû) :
    ‚à´‚Åª x in f '' s, g x ‚àÇŒº = ‚à´‚Åª x in s, ENNReal.ofReal |(f' x).det| * g (f x) ‚àÇŒº := by
  rw [‚Üê restrict_map_withDensity_abs_det_fderiv_eq_addHaar Œº hs hf' hf,
    (measurableEmbedding_of_fderivWithin hs hf' hf).lintegral_map]
  simp only [Set.restrict_apply, ‚Üê Function.comp_apply (f := g)]
  rw [‚Üê (MeasurableEmbedding.subtype_coe hs).lintegral_map, map_comap_subtype_coe hs,
    setLIntegral_withDensity_eq_setLIntegral_mul_non_measurable‚ÇÄ _ _ _ hs]
  ¬∑ simp only [Pi.mul_apply]
  ¬∑ simp only [eventually_true, ENNReal.ofReal_lt_top]
  ¬∑ exact aemeasurable_ofReal_abs_det_fderivWithin Œº hs hf'
theorem integrableOn_image_iff_integrableOn_abs_det_fderiv_smul (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) (g : E ‚Üí F) :
    IntegrableOn g (f '' s) Œº ‚Üî IntegrableOn (fun x => |(f' x).det| ‚Ä¢ g (f x)) s Œº := by
  rw [IntegrableOn, ‚Üê restrict_map_withDensity_abs_det_fderiv_eq_addHaar Œº hs hf' hf,
    (measurableEmbedding_of_fderivWithin hs hf' hf).integrable_map_iff]
  simp only [Set.restrict_eq, ‚Üê Function.comp_assoc, ENNReal.ofReal]
  rw [‚Üê (MeasurableEmbedding.subtype_coe hs).integrable_map_iff, map_comap_subtype_coe hs,
    restrict_withDensity hs, integrable_withDensity_iff_integrable_coe_smul‚ÇÄ]
  ¬∑ simp_rw [IntegrableOn, Real.coe_toNNReal _ (abs_nonneg _), Function.comp_apply]
  ¬∑ exact aemeasurable_toNNReal_abs_det_fderivWithin Œº hs hf'
theorem integral_image_eq_integral_abs_det_fderiv_smul (hs : MeasurableSet s)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) (hf : InjOn f s) (g : E ‚Üí F) :
    ‚à´ x in f '' s, g x ‚àÇŒº = ‚à´ x in s, |(f' x).det| ‚Ä¢ g (f x) ‚àÇŒº := by
  rw [‚Üê restrict_map_withDensity_abs_det_fderiv_eq_addHaar Œº hs hf' hf,
    (measurableEmbedding_of_fderivWithin hs hf' hf).integral_map]
  simp only [Set.restrict_apply, ‚Üê Function.comp_apply (f := g), ENNReal.ofReal]
  rw [‚Üê (MeasurableEmbedding.subtype_coe hs).integral_map, map_comap_subtype_coe hs,
    setIntegral_withDensity_eq_setIntegral_smul‚ÇÄ
      (aemeasurable_toNNReal_abs_det_fderivWithin Œº hs hf') _ hs]
  congr with x
  rw [NNReal.smul_def, Real.coe_toNNReal _ (abs_nonneg (f' x).det)]
theorem det_one_smulRight {ùïú : Type*} [NormedField ùïú] (v : ùïú) :
    ((1 : ùïú ‚ÜíL[ùïú] ùïú).smulRight v).det = v := by
  have : (1 : ùïú ‚ÜíL[ùïú] ùïú).smulRight v = v ‚Ä¢ (1 : ùïú ‚ÜíL[ùïú] ùïú) := by
    ext1
    simp only [ContinuousLinearMap.smulRight_apply, ContinuousLinearMap.one_apply,
      Algebra.id.smul_eq_mul, one_mul, ContinuousLinearMap.coe_smul', Pi.smul_apply, mul_one]
  rw [this, ContinuousLinearMap.det, ContinuousLinearMap.coe_smul,
    ContinuousLinearMap.one_def, ContinuousLinearMap.coe_id, LinearMap.det_smul,
    Module.finrank_self, LinearMap.det_id, pow_one, mul_one]
theorem integrableOn_image_iff_integrableOn_abs_deriv_smul {s : Set ‚Ñù} {f : ‚Ñù ‚Üí ‚Ñù} {f' : ‚Ñù ‚Üí ‚Ñù}
    (hs : MeasurableSet s) (hf' : ‚àÄ x ‚àà s, HasDerivWithinAt f (f' x) s x) (hf : InjOn f s)
    (g : ‚Ñù ‚Üí F) : IntegrableOn g (f '' s) ‚Üî IntegrableOn (fun x => |f' x| ‚Ä¢ g (f x)) s := by
  simpa only [det_one_smulRight] using
    integrableOn_image_iff_integrableOn_abs_det_fderiv_smul volume hs
      (fun x hx => (hf' x hx).hasFDerivWithinAt) hf g
theorem integral_image_eq_integral_abs_deriv_smul {s : Set ‚Ñù} {f : ‚Ñù ‚Üí ‚Ñù} {f' : ‚Ñù ‚Üí ‚Ñù}
    (hs : MeasurableSet s) (hf' : ‚àÄ x ‚àà s, HasDerivWithinAt f (f' x) s x)
    (hf : InjOn f s) (g : ‚Ñù ‚Üí F) : ‚à´ x in f '' s, g x = ‚à´ x in s, |f' x| ‚Ä¢ g (f x) := by
  simpa only [det_one_smulRight] using
    integral_image_eq_integral_abs_det_fderiv_smul volume hs
      (fun x hx => (hf' x hx).hasFDerivWithinAt) hf g
theorem integral_target_eq_integral_abs_det_fderiv_smul {f : PartialHomeomorph E E}
    (hf' : ‚àÄ x ‚àà f.source, HasFDerivAt f (f' x) x) (g : E ‚Üí F) :
    ‚à´ x in f.target, g x ‚àÇŒº = ‚à´ x in f.source, |(f' x).det| ‚Ä¢ g (f x) ‚àÇŒº := by
  have : f '' f.source = f.target := PartialEquiv.image_source_eq_target f.toPartialEquiv
  rw [‚Üê this]
  apply integral_image_eq_integral_abs_det_fderiv_smul Œº f.open_source.measurableSet _ f.injOn
  intro x hx
  exact (hf' x hx).hasFDerivWithinAt
section withDensity
lemma _root_.MeasurableEmbedding.withDensity_ofReal_comap_apply_eq_integral_abs_det_fderiv_mul
    (hs : MeasurableSet s) (hf : MeasurableEmbedding f)
    {g : E ‚Üí ‚Ñù} (hg : ‚àÄ·µê x ‚àÇŒº, x ‚àà f '' s ‚Üí 0 ‚â§ g x) (hg_int : IntegrableOn g (f '' s) Œº)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :
    (Œº.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).comap f s
      = ENNReal.ofReal (‚à´ x in s, |(f' x).det| * g (f x) ‚àÇŒº) := by
  rw [Measure.comap_apply f hf.injective (fun t ht ‚Ü¶ hf.measurableSet_image' ht) _ hs,
    withDensity_apply _ (hf.measurableSet_image' hs),
    ‚Üê ofReal_integral_eq_lintegral_ofReal hg_int
      ((ae_restrict_iff' (hf.measurableSet_image' hs)).mpr hg),
    integral_image_eq_integral_abs_det_fderiv_smul Œº hs hf' hf.injective.injOn]
  simp_rw [smul_eq_mul]
lemma _root_.MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_det_fderiv_mul
    (hs : MeasurableSet s) (f : E ‚âÉ·µê E)
    {g : E ‚Üí ‚Ñù} (hg : ‚àÄ·µê x ‚àÇŒº, x ‚àà f '' s ‚Üí 0 ‚â§ g x) (hg_int : IntegrableOn g (f '' s) Œº)
    (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x) :
    (Œº.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).map f.symm s
      = ENNReal.ofReal (‚à´ x in s, |(f' x).det| * g (f x) ‚àÇŒº) := by
  rw [MeasurableEquiv.map_symm,
    MeasurableEmbedding.withDensity_ofReal_comap_apply_eq_integral_abs_det_fderiv_mul Œº hs
      f.measurableEmbedding hg hg_int hf']
lemma _root_.MeasurableEmbedding.withDensity_ofReal_comap_apply_eq_integral_abs_deriv_mul
    {f : ‚Ñù ‚Üí ‚Ñù} (hf : MeasurableEmbedding f) {s : Set ‚Ñù} (hs : MeasurableSet s)
    {g : ‚Ñù ‚Üí ‚Ñù} (hg : ‚àÄ·µê x, x ‚àà f '' s ‚Üí 0 ‚â§ g x) (hg_int : IntegrableOn g (f '' s))
    {f' : ‚Ñù ‚Üí ‚Ñù} (hf' : ‚àÄ x ‚àà s, HasDerivWithinAt f (f' x) s x) :
    (volume.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).comap f s
      = ENNReal.ofReal (‚à´ x in s, |f' x| * g (f x)) := by
  rw [hf.withDensity_ofReal_comap_apply_eq_integral_abs_det_fderiv_mul volume hs
    hg hg_int hf']
  simp only [det_one_smulRight]
lemma _root_.MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_deriv_mul
    (f : ‚Ñù ‚âÉ·µê ‚Ñù) {s : Set ‚Ñù} (hs : MeasurableSet s)
    {g : ‚Ñù ‚Üí ‚Ñù} (hg : ‚àÄ·µê x, x ‚àà f '' s ‚Üí 0 ‚â§ g x) (hg_int : IntegrableOn g (f '' s))
    {f' : ‚Ñù ‚Üí ‚Ñù} (hf' : ‚àÄ x ‚àà s, HasDerivWithinAt f (f' x) s x) :
    (volume.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).map f.symm s
      = ENNReal.ofReal (‚à´ x in s, |f' x| * g (f x)) := by
  rw [MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_det_fderiv_mul volume hs
      f hg hg_int hf']
  simp only [det_one_smulRight]
lemma _root_.MeasurableEmbedding.withDensity_ofReal_comap_apply_eq_integral_abs_deriv_mul'
    {f : ‚Ñù ‚Üí ‚Ñù} (hf : MeasurableEmbedding f) {s : Set ‚Ñù} (hs : MeasurableSet s)
    {f' : ‚Ñù ‚Üí ‚Ñù} (hf' : ‚àÄ x, HasDerivAt f (f' x) x)
    {g : ‚Ñù ‚Üí ‚Ñù} (hg : 0 ‚â§·µê[volume] g) (hg_int : Integrable g) :
    (volume.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).comap f s
      = ENNReal.ofReal (‚à´ x in s, |f' x| * g (f x)) :=
  hf.withDensity_ofReal_comap_apply_eq_integral_abs_deriv_mul hs
    (by filter_upwards [hg] with x hx using fun _ ‚Ü¶ hx) hg_int.integrableOn
    (fun x _ => (hf' x).hasDerivWithinAt)
lemma _root_.MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_deriv_mul'
    (f : ‚Ñù ‚âÉ·µê ‚Ñù) {s : Set ‚Ñù} (hs : MeasurableSet s)
    {f' : ‚Ñù ‚Üí ‚Ñù} (hf' : ‚àÄ x, HasDerivAt f (f' x) x)
    {g : ‚Ñù ‚Üí ‚Ñù} (hg : 0 ‚â§·µê[volume] g) (hg_int : Integrable g) :
    (volume.withDensity (fun x ‚Ü¶ ENNReal.ofReal (g x))).map f.symm s
      = ENNReal.ofReal (‚à´ x in s, |f' x| * g (f x)) := by
  rw [MeasurableEquiv.withDensity_ofReal_map_symm_apply_eq_integral_abs_det_fderiv_mul volume hs
      f (by filter_upwards [hg] with x hx using fun _ ‚Ü¶ hx) hg_int.integrableOn
      (fun x _ => (hf' x).hasDerivWithinAt)]
  simp only [det_one_smulRight]
end withDensity
end MeasureTheory