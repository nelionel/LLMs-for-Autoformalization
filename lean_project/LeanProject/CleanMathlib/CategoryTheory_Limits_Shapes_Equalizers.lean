import Mathlib.CategoryTheory.EpiMono
import Mathlib.CategoryTheory.Limits.HasLimits
section
open CategoryTheory Opposite
namespace CategoryTheory.Limits
universe v v‚ÇÇ u u‚ÇÇ
inductive WalkingParallelPair : Type
  | zero
  | one
  deriving DecidableEq, Inhabited
open WalkingParallelPair
inductive WalkingParallelPairHom : WalkingParallelPair ‚Üí WalkingParallelPair ‚Üí Type
  | left : WalkingParallelPairHom zero one
  | right : WalkingParallelPairHom zero one
  | id (X : WalkingParallelPair) : WalkingParallelPairHom X X
  deriving DecidableEq
attribute [-simp, nolint simpNF] WalkingParallelPairHom.id.sizeOf_spec
instance : Inhabited (WalkingParallelPairHom zero one) where default := WalkingParallelPairHom.left
open WalkingParallelPairHom
def WalkingParallelPairHom.comp :
    ‚àÄ {X Y Z : WalkingParallelPair} (_ : WalkingParallelPairHom X Y)
      (_ : WalkingParallelPairHom Y Z), WalkingParallelPairHom X Z
  | _, _, _, id _, h => h
  | _, _, _, left, id one => left
  | _, _, _, right, id one => right
theorem WalkingParallelPairHom.id_comp
    {X Y : WalkingParallelPair} (g : WalkingParallelPairHom X Y) : comp (id X) g = g :=
  rfl
theorem WalkingParallelPairHom.comp_id
    {X Y : WalkingParallelPair} (f : WalkingParallelPairHom X Y) : comp f (id Y) = f := by
  cases f <;> rfl
theorem WalkingParallelPairHom.assoc {X Y Z W : WalkingParallelPair}
    (f : WalkingParallelPairHom X Y) (g : WalkingParallelPairHom Y Z)
    (h : WalkingParallelPairHom Z W) : comp (comp f g) h = comp f (comp g h) := by
  cases f <;> cases g <;> cases h <;> rfl
instance walkingParallelPairHomCategory : SmallCategory WalkingParallelPair where
  Hom := WalkingParallelPairHom
  id := id
  comp := comp
  comp_id := comp_id
  id_comp := id_comp
  assoc := assoc
@[simp]
theorem walkingParallelPairHom_id (X : WalkingParallelPair) : WalkingParallelPairHom.id X = ùüô X :=
  rfl
@[simp]
theorem WalkingParallelPairHom.id.sizeOf_spec' (X : WalkingParallelPair) :
    (WalkingParallelPairHom._sizeOf_inst X X).sizeOf (ùüô X) = 1 + sizeOf X := by cases X <;> rfl
def walkingParallelPairOp : WalkingParallelPair ‚•§ WalkingParallelPair·µí·µñ where
  obj x := op <| by cases x; exacts [one, zero]
  map f := by
    cases f <;> apply Quiver.Hom.op
    exacts [left, right, WalkingParallelPairHom.id _]
  map_comp := by rintro _ _ _ (_|_|_) g <;> cases g <;> rfl
@[simp]
theorem walkingParallelPairOp_zero : walkingParallelPairOp.obj zero = op one := rfl
@[simp]
theorem walkingParallelPairOp_one : walkingParallelPairOp.obj one = op zero := rfl
@[simp]
theorem walkingParallelPairOp_left :
    walkingParallelPairOp.map left = @Quiver.Hom.op _ _ zero one left := rfl
@[simp]
theorem walkingParallelPairOp_right :
    walkingParallelPairOp.map right = @Quiver.Hom.op _ _ zero one right := rfl
@[simps functor inverse]
def walkingParallelPairOpEquiv : WalkingParallelPair ‚âå WalkingParallelPair·µí·µñ where
  functor := walkingParallelPairOp
  inverse := walkingParallelPairOp.leftOp
  unitIso :=
    NatIso.ofComponents (fun j => eqToIso (by cases j <;> rfl))
      (by rintro _ _ (_ | _ | _) <;> simp)
  counitIso :=
    NatIso.ofComponents (fun j => eqToIso (by
            induction' j with X
            cases X <;> rfl))
      (fun {i} {j} f => by
      induction' i with i
      induction' j with j
      let g := f.unop
      have : f = g.op := rfl
      rw [this]
      cases i <;> cases j <;> cases g <;> rfl)
  functor_unitIso_comp := fun j => by cases j <;> rfl
@[simp]
theorem walkingParallelPairOpEquiv_unitIso_zero :
    walkingParallelPairOpEquiv.unitIso.app zero = Iso.refl zero := rfl
@[simp]
theorem walkingParallelPairOpEquiv_unitIso_one :
    walkingParallelPairOpEquiv.unitIso.app one = Iso.refl one := rfl
@[simp]
theorem walkingParallelPairOpEquiv_counitIso_zero :
    walkingParallelPairOpEquiv.counitIso.app (op zero) = Iso.refl (op zero) := rfl
@[simp]
theorem walkingParallelPairOpEquiv_counitIso_one :
    walkingParallelPairOpEquiv.counitIso.app (op one) = Iso.refl (op one) :=
  rfl
variable {C : Type u} [Category.{v} C]
variable {X Y : C}
def parallelPair (f g : X ‚ü∂ Y) : WalkingParallelPair ‚•§ C where
  obj x :=
    match x with
    | zero => X
    | one => Y
  map h :=
    match h with
    | WalkingParallelPairHom.id _ => ùüô _
    | left => f
    | right => g
  map_comp := by
    rintro _ _ _ ‚ü®‚ü© g <;> cases g <;> {dsimp; simp}
@[simp]
theorem parallelPair_obj_zero (f g : X ‚ü∂ Y) : (parallelPair f g).obj zero = X := rfl
@[simp]
theorem parallelPair_obj_one (f g : X ‚ü∂ Y) : (parallelPair f g).obj one = Y := rfl
@[simp]
theorem parallelPair_map_left (f g : X ‚ü∂ Y) : (parallelPair f g).map left = f := rfl
@[simp]
theorem parallelPair_map_right (f g : X ‚ü∂ Y) : (parallelPair f g).map right = g := rfl
@[simp]
theorem parallelPair_functor_obj {F : WalkingParallelPair ‚•§ C} (j : WalkingParallelPair) :
    (parallelPair (F.map left) (F.map right)).obj j = F.obj j := by cases j <;> rfl
@[simps!]
def diagramIsoParallelPair (F : WalkingParallelPair ‚•§ C) :
    F ‚âÖ parallelPair (F.map left) (F.map right) :=
  NatIso.ofComponents (fun j => eqToIso <| by cases j <;> rfl) (by rintro _ _ (_|_|_) <;> simp)
def parallelPairHom {X' Y' : C} (f g : X ‚ü∂ Y) (f' g' : X' ‚ü∂ Y') (p : X ‚ü∂ X') (q : Y ‚ü∂ Y')
    (wf : f ‚â´ q = p ‚â´ f') (wg : g ‚â´ q = p ‚â´ g') : parallelPair f g ‚ü∂ parallelPair f' g' where
  app j :=
    match j with
    | zero => p
    | one => q
  naturality := by
    rintro _ _ ‚ü®‚ü© <;> {dsimp; simp [wf,wg]}
@[simp]
theorem parallelPairHom_app_zero {X' Y' : C} (f g : X ‚ü∂ Y) (f' g' : X' ‚ü∂ Y') (p : X ‚ü∂ X')
    (q : Y ‚ü∂ Y') (wf : f ‚â´ q = p ‚â´ f') (wg : g ‚â´ q = p ‚â´ g') :
    (parallelPairHom f g f' g' p q wf wg).app zero = p :=
  rfl
@[simp]
theorem parallelPairHom_app_one {X' Y' : C} (f g : X ‚ü∂ Y) (f' g' : X' ‚ü∂ Y') (p : X ‚ü∂ X')
    (q : Y ‚ü∂ Y') (wf : f ‚â´ q = p ‚â´ f') (wg : g ‚â´ q = p ‚â´ g') :
    (parallelPairHom f g f' g' p q wf wg).app one = q :=
  rfl
@[simps!]
def parallelPair.ext {F G : WalkingParallelPair ‚•§ C} (zero : F.obj zero ‚âÖ G.obj zero)
    (one : F.obj one ‚âÖ G.obj one) (left : F.map left ‚â´ one.hom = zero.hom ‚â´ G.map left)
    (right : F.map right ‚â´ one.hom = zero.hom ‚â´ G.map right) : F ‚âÖ G :=
  NatIso.ofComponents
    (by
      rintro ‚ü®j‚ü©
      exacts [zero, one])
    (by rintro _ _ ‚ü®_‚ü© <;> simp [left, right])
@[simps!]
def parallelPair.eqOfHomEq {f g f' g' : X ‚ü∂ Y} (hf : f = f') (hg : g = g') :
    parallelPair f g ‚âÖ parallelPair f' g' :=
  parallelPair.ext (Iso.refl _) (Iso.refl _) (by simp [hf]) (by simp [hg])
abbrev Fork (f g : X ‚ü∂ Y) :=
  Cone (parallelPair f g)
abbrev Cofork (f g : X ‚ü∂ Y) :=
  Cocone (parallelPair f g)
variable {f g : X ‚ü∂ Y}
def Fork.Œπ (t : Fork f g) :=
  t.œÄ.app zero
@[simp]
theorem Fork.app_zero_eq_Œπ (t : Fork f g) : t.œÄ.app zero = t.Œπ :=
  rfl
def Cofork.œÄ (t : Cofork f g) :=
  t.Œπ.app one
@[simp]
theorem Cofork.app_one_eq_œÄ (t : Cofork f g) : t.Œπ.app one = t.œÄ :=
  rfl
@[simp]
theorem Fork.app_one_eq_Œπ_comp_left (s : Fork f g) : s.œÄ.app one = s.Œπ ‚â´ f := by
  rw [‚Üê s.app_zero_eq_Œπ, ‚Üê s.w left, parallelPair_map_left]
@[reassoc]
theorem Fork.app_one_eq_Œπ_comp_right (s : Fork f g) : s.œÄ.app one = s.Œπ ‚â´ g := by
  rw [‚Üê s.app_zero_eq_Œπ, ‚Üê s.w right, parallelPair_map_right]
@[simp]
theorem Cofork.app_zero_eq_comp_œÄ_left (s : Cofork f g) : s.Œπ.app zero = f ‚â´ s.œÄ := by
  rw [‚Üê s.app_one_eq_œÄ, ‚Üê s.w left, parallelPair_map_left]
@[reassoc]
theorem Cofork.app_zero_eq_comp_œÄ_right (s : Cofork f g) : s.Œπ.app zero = g ‚â´ s.œÄ := by
  rw [‚Üê s.app_one_eq_œÄ, ‚Üê s.w right, parallelPair_map_right]
@[simps]
def Fork.ofŒπ {P : C} (Œπ : P ‚ü∂ X) (w : Œπ ‚â´ f = Œπ ‚â´ g) : Fork f g where
  pt := P
  œÄ :=
    { app := fun X => by
        cases X
        ¬∑ exact Œπ
        ¬∑ exact Œπ ‚â´ f
      naturality := fun {X} {Y} f =>
        by cases X <;> cases Y <;> cases f <;> dsimp <;> simp; assumption }
@[simps]
def Cofork.ofœÄ {P : C} (œÄ : Y ‚ü∂ P) (w : f ‚â´ œÄ = g ‚â´ œÄ) : Cofork f g where
  pt := P
  Œπ :=
    { app := fun X => WalkingParallelPair.casesOn X (f ‚â´ œÄ) œÄ
      naturality := fun i j f => by cases f <;> dsimp <;> simp [w] }
@[simp]
theorem Fork.Œπ_ofŒπ {P : C} (Œπ : P ‚ü∂ X) (w : Œπ ‚â´ f = Œπ ‚â´ g) : (Fork.ofŒπ Œπ w).Œπ = Œπ :=
  rfl
@[simp]
theorem Cofork.œÄ_ofœÄ {P : C} (œÄ : Y ‚ü∂ P) (w : f ‚â´ œÄ = g ‚â´ œÄ) : (Cofork.ofœÄ œÄ w).œÄ = œÄ :=
  rfl
@[reassoc (attr := simp)]
theorem Fork.condition (t : Fork f g) : t.Œπ ‚â´ f = t.Œπ ‚â´ g := by
  rw [‚Üê t.app_one_eq_Œπ_comp_left, ‚Üê t.app_one_eq_Œπ_comp_right]
@[reassoc (attr := simp)]
theorem Cofork.condition (t : Cofork f g) : f ‚â´ t.œÄ = g ‚â´ t.œÄ := by
  rw [‚Üê t.app_zero_eq_comp_œÄ_left, ‚Üê t.app_zero_eq_comp_œÄ_right]
theorem Fork.equalizer_ext (s : Fork f g) {W : C} {k l : W ‚ü∂ s.pt} (h : k ‚â´ s.Œπ = l ‚â´ s.Œπ) :
    ‚àÄ j : WalkingParallelPair, k ‚â´ s.œÄ.app j = l ‚â´ s.œÄ.app j
  | zero => h
  | one => by
    have : k ‚â´ Œπ s ‚â´ f = l ‚â´ Œπ s ‚â´ f := by
      simp only [‚Üê Category.assoc]; exact congrArg (¬∑ ‚â´ f) h
    rw [s.app_one_eq_Œπ_comp_left, this]
theorem Cofork.coequalizer_ext (s : Cofork f g) {W : C} {k l : s.pt ‚ü∂ W}
    (h : Cofork.œÄ s ‚â´ k = Cofork.œÄ s ‚â´ l) : ‚àÄ j : WalkingParallelPair, s.Œπ.app j ‚â´ k = s.Œπ.app j ‚â´ l
  | zero => by simp only [s.app_zero_eq_comp_œÄ_left, Category.assoc, h]
  | one => h
theorem Fork.IsLimit.hom_ext {s : Fork f g} (hs : IsLimit s) {W : C} {k l : W ‚ü∂ s.pt}
    (h : k ‚â´ Fork.Œπ s = l ‚â´ Fork.Œπ s) : k = l :=
  hs.hom_ext <| Fork.equalizer_ext _ h
theorem Cofork.IsColimit.hom_ext {s : Cofork f g} (hs : IsColimit s) {W : C} {k l : s.pt ‚ü∂ W}
    (h : Cofork.œÄ s ‚â´ k = Cofork.œÄ s ‚â´ l) : k = l :=
  hs.hom_ext <| Cofork.coequalizer_ext _ h
@[reassoc (attr := simp)]
theorem Fork.IsLimit.lift_Œπ {s t : Fork f g} (hs : IsLimit s) : hs.lift t ‚â´ s.Œπ = t.Œπ :=
  hs.fac _ _
@[reassoc (attr := simp)]
theorem Cofork.IsColimit.œÄ_desc {s t : Cofork f g} (hs : IsColimit s) : s.œÄ ‚â´ hs.desc t = t.œÄ :=
  hs.fac _ _
def Fork.IsLimit.lift {s : Fork f g} (hs : IsLimit s) {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) :
    W ‚ü∂ s.pt :=
  hs.lift (Fork.ofŒπ _ h)
@[reassoc (attr := simp)]
lemma Fork.IsLimit.lift_Œπ' {s : Fork f g} (hs : IsLimit s) {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) :
    Fork.IsLimit.lift hs k h ‚â´ Fork.Œπ s = k :=
    hs.fac _ _
def Fork.IsLimit.lift' {s : Fork f g} (hs : IsLimit s) {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) :
    { l : W ‚ü∂ s.pt // l ‚â´ Fork.Œπ s = k } :=
  ‚ü®Fork.IsLimit.lift hs k h, by simp‚ü©
def Cofork.IsColimit.desc {s : Cofork f g} (hs : IsColimit s) {W : C} (k : Y ‚ü∂ W)
    (h : f ‚â´ k = g ‚â´ k) : s.pt ‚ü∂ W :=
  hs.desc (Cofork.ofœÄ _ h)
@[reassoc (attr := simp)]
lemma Cofork.IsColimit.œÄ_desc' {s : Cofork f g} (hs : IsColimit s) {W : C} (k : Y ‚ü∂ W)
    (h : f ‚â´ k = g ‚â´ k) : Cofork.œÄ s ‚â´ Cofork.IsColimit.desc hs k h = k :=
  hs.fac _ _
def Cofork.IsColimit.desc' {s : Cofork f g} (hs : IsColimit s) {W : C} (k : Y ‚ü∂ W)
    (h : f ‚â´ k = g ‚â´ k) : { l : s.pt ‚ü∂ W // Cofork.œÄ s ‚â´ l = k } :=
  ‚ü®Cofork.IsColimit.desc hs k h, by simp‚ü©
theorem Fork.IsLimit.existsUnique {s : Fork f g} (hs : IsLimit s) {W : C} (k : W ‚ü∂ X)
    (h : k ‚â´ f = k ‚â´ g) : ‚àÉ! l : W ‚ü∂ s.pt, l ‚â´ Fork.Œπ s = k :=
  ‚ü®hs.lift <| Fork.ofŒπ _ h, hs.fac _ _, fun _ hm =>
    Fork.IsLimit.hom_ext hs <| hm.symm ‚ñ∏ (hs.fac (Fork.ofŒπ _ h) WalkingParallelPair.zero).symm‚ü©
theorem Cofork.IsColimit.existsUnique {s : Cofork f g} (hs : IsColimit s) {W : C} (k : Y ‚ü∂ W)
    (h : f ‚â´ k = g ‚â´ k) : ‚àÉ! d : s.pt ‚ü∂ W, Cofork.œÄ s ‚â´ d = k :=
  ‚ü®hs.desc <| Cofork.ofœÄ _ h, hs.fac _ _, fun _ hm =>
    Cofork.IsColimit.hom_ext hs <| hm.symm ‚ñ∏ (hs.fac (Cofork.ofœÄ _ h) WalkingParallelPair.one).symm‚ü©
@[simps]
def Fork.IsLimit.mk (t : Fork f g) (lift : ‚àÄ s : Fork f g, s.pt ‚ü∂ t.pt)
    (fac : ‚àÄ s : Fork f g, lift s ‚â´ Fork.Œπ t = Fork.Œπ s)
    (uniq : ‚àÄ (s : Fork f g) (m : s.pt ‚ü∂ t.pt) (_ : m ‚â´ t.Œπ = s.Œπ), m = lift s) : IsLimit t :=
  { lift
    fac := fun s j =>
      WalkingParallelPair.casesOn j (fac s) <| by
        erw [‚Üê s.w left, ‚Üê t.w left, ‚Üê Category.assoc, fac]; rfl
    uniq := fun s m j => by aesop}
def Fork.IsLimit.mk' {X Y : C} {f g : X ‚ü∂ Y} (t : Fork f g)
    (create : ‚àÄ s : Fork f g, { l // l ‚â´ t.Œπ = s.Œπ ‚àß ‚àÄ {m}, m ‚â´ t.Œπ = s.Œπ ‚Üí m = l }) : IsLimit t :=
  Fork.IsLimit.mk t (fun s => (create s).1) (fun s => (create s).2.1) fun s _ w => (create s).2.2 w
def Cofork.IsColimit.mk (t : Cofork f g) (desc : ‚àÄ s : Cofork f g, t.pt ‚ü∂ s.pt)
    (fac : ‚àÄ s : Cofork f g, Cofork.œÄ t ‚â´ desc s = Cofork.œÄ s)
    (uniq : ‚àÄ (s : Cofork f g) (m : t.pt ‚ü∂ s.pt) (_ : t.œÄ ‚â´ m = s.œÄ), m = desc s) : IsColimit t :=
  { desc
    fac := fun s j =>
      WalkingParallelPair.casesOn j (by erw [‚Üê s.w left, ‚Üê t.w left, Category.assoc, fac]; rfl)
        (fac s)
    uniq := by aesop }
def Cofork.IsColimit.mk' {X Y : C} {f g : X ‚ü∂ Y} (t : Cofork f g)
    (create : ‚àÄ s : Cofork f g, { l : t.pt ‚ü∂ s.pt // t.œÄ ‚â´ l = s.œÄ
                                    ‚àß ‚àÄ {m}, t.œÄ ‚â´ m = s.œÄ ‚Üí m = l }) : IsColimit t :=
  Cofork.IsColimit.mk t (fun s => (create s).1) (fun s => (create s).2.1) fun s _ w =>
    (create s).2.2 w
noncomputable def Fork.IsLimit.ofExistsUnique {t : Fork f g}
    (hs : ‚àÄ s : Fork f g, ‚àÉ! l : s.pt ‚ü∂ t.pt, l ‚â´ Fork.Œπ t = Fork.Œπ s) : IsLimit t := by
  choose d hd hd' using hs
  exact Fork.IsLimit.mk _ d hd fun s m hm => hd' _ _ hm
noncomputable def Cofork.IsColimit.ofExistsUnique {t : Cofork f g}
    (hs : ‚àÄ s : Cofork f g, ‚àÉ! d : t.pt ‚ü∂ s.pt, Cofork.œÄ t ‚â´ d = Cofork.œÄ s) : IsColimit t := by
  choose d hd hd' using hs
  exact Cofork.IsColimit.mk _ d hd fun s m hm => hd' _ _ hm
@[simps]
def Fork.IsLimit.homIso {X Y : C} {f g : X ‚ü∂ Y} {t : Fork f g} (ht : IsLimit t) (Z : C) :
    (Z ‚ü∂ t.pt) ‚âÉ { h : Z ‚ü∂ X // h ‚â´ f = h ‚â´ g } where
  toFun k := ‚ü®k ‚â´ t.Œπ, by simp only [Category.assoc, t.condition]‚ü©
  invFun h := (Fork.IsLimit.lift' ht _ h.prop).1
  left_inv _ := Fork.IsLimit.hom_ext ht (Fork.IsLimit.lift' _ _ _).prop
  right_inv _ := Subtype.ext (Fork.IsLimit.lift' ht _ _).prop
theorem Fork.IsLimit.homIso_natural {X Y : C} {f g : X ‚ü∂ Y} {t : Fork f g} (ht : IsLimit t)
    {Z Z' : C} (q : Z' ‚ü∂ Z) (k : Z ‚ü∂ t.pt) :
    (Fork.IsLimit.homIso ht _ (q ‚â´ k) : Z' ‚ü∂ X) = q ‚â´ (Fork.IsLimit.homIso ht _ k : Z ‚ü∂ X) :=
  Category.assoc _ _ _
@[simps]
def Cofork.IsColimit.homIso {X Y : C} {f g : X ‚ü∂ Y} {t : Cofork f g} (ht : IsColimit t) (Z : C) :
    (t.pt ‚ü∂ Z) ‚âÉ { h : Y ‚ü∂ Z // f ‚â´ h = g ‚â´ h } where
  toFun k := ‚ü®t.œÄ ‚â´ k, by simp only [‚Üê Category.assoc, t.condition]‚ü©
  invFun h := (Cofork.IsColimit.desc' ht _ h.prop).1
  left_inv _ := Cofork.IsColimit.hom_ext ht (Cofork.IsColimit.desc' _ _ _).prop
  right_inv _ := Subtype.ext (Cofork.IsColimit.desc' ht _ _).prop
theorem Cofork.IsColimit.homIso_natural {X Y : C} {f g : X ‚ü∂ Y} {t : Cofork f g} {Z Z' : C}
    (q : Z ‚ü∂ Z') (ht : IsColimit t) (k : t.pt ‚ü∂ Z) :
    (Cofork.IsColimit.homIso ht _ (k ‚â´ q) : Y ‚ü∂ Z') =
      (Cofork.IsColimit.homIso ht _ k : Y ‚ü∂ Z) ‚â´ q :=
  (Category.assoc _ _ _).symm
def Cone.ofFork {F : WalkingParallelPair ‚•§ C} (t : Fork (F.map left) (F.map right)) : Cone F where
  pt := t.pt
  œÄ :=
    { app := fun X => t.œÄ.app X ‚â´ eqToHom (by aesop)
      naturality := by rintro _ _ (_|_|_) <;> {dsimp; simp [t.condition]}}
def Cocone.ofCofork {F : WalkingParallelPair ‚•§ C} (t : Cofork (F.map left) (F.map right)) :
    Cocone F where
  pt := t.pt
  Œπ :=
    { app := fun X => eqToHom (by aesop) ‚â´ t.Œπ.app X
      naturality := by rintro _ _ (_|_|_) <;> {dsimp; simp [t.condition]}}
@[simp]
theorem Cone.ofFork_œÄ {F : WalkingParallelPair ‚•§ C} (t : Fork (F.map left) (F.map right)) (j) :
    (Cone.ofFork t).œÄ.app j = t.œÄ.app j ‚â´ eqToHom (by aesop) := rfl
@[simp]
theorem Cocone.ofCofork_Œπ {F : WalkingParallelPair ‚•§ C} (t : Cofork (F.map left) (F.map right))
    (j) : (Cocone.ofCofork t).Œπ.app j = eqToHom (by aesop) ‚â´ t.Œπ.app j := rfl
def Fork.ofCone {F : WalkingParallelPair ‚•§ C} (t : Cone F) : Fork (F.map left) (F.map right) where
  pt := t.pt
  œÄ := { app := fun X => t.œÄ.app X ‚â´ eqToHom (by aesop)
         naturality := by rintro _ _ (_|_|_) <;> {dsimp; simp}}
def Cofork.ofCocone {F : WalkingParallelPair ‚•§ C} (t : Cocone F) :
    Cofork (F.map left) (F.map right) where
  pt := t.pt
  Œπ := { app := fun X => eqToHom (by aesop) ‚â´ t.Œπ.app X
         naturality := by rintro _ _ (_|_|_) <;> {dsimp; simp}}
@[simp]
theorem Fork.ofCone_œÄ {F : WalkingParallelPair ‚•§ C} (t : Cone F) (j) :
    (Fork.ofCone t).œÄ.app j = t.œÄ.app j ‚â´ eqToHom (by aesop) := rfl
@[simp]
theorem Cofork.ofCocone_Œπ {F : WalkingParallelPair ‚•§ C} (t : Cocone F) (j) :
    (Cofork.ofCocone t).Œπ.app j = eqToHom (by aesop) ‚â´ t.Œπ.app j := rfl
@[simp]
theorem Fork.Œπ_postcompose {f' g' : X ‚ü∂ Y} {Œ± : parallelPair f g ‚ü∂ parallelPair f' g'}
    {c : Fork f g} : Fork.Œπ ((Cones.postcompose Œ±).obj c) = c.Œπ ‚â´ Œ±.app _ :=
  rfl
@[simp]
theorem Cofork.œÄ_precompose {f' g' : X ‚ü∂ Y} {Œ± : parallelPair f g ‚ü∂ parallelPair f' g'}
    {c : Cofork f' g'} : Cofork.œÄ ((Cocones.precompose Œ±).obj c) = Œ±.app _ ‚â´ c.œÄ :=
  rfl
@[simps]
def Fork.mkHom {s t : Fork f g} (k : s.pt ‚ü∂ t.pt) (w : k ‚â´ t.Œπ = s.Œπ) : s ‚ü∂ t where
  hom := k
  w := by
    rintro ‚ü®_ | _‚ü©
    ¬∑ exact w
    ¬∑ simp only [Fork.app_one_eq_Œπ_comp_left,‚Üê Category.assoc]
      congr
@[simps]
def Fork.ext {s t : Fork f g} (i : s.pt ‚âÖ t.pt) (w : i.hom ‚â´ t.Œπ = s.Œπ := by aesop_cat) :
    s ‚âÖ t where
  hom := Fork.mkHom i.hom w
  inv := Fork.mkHom i.inv (by rw [‚Üê w, Iso.inv_hom_id_assoc])
def ForkOfŒπ.ext {P : C} {Œπ Œπ' : P ‚ü∂ X} (w : Œπ ‚â´ f = Œπ ‚â´ g) (w' : Œπ' ‚â´ f = Œπ' ‚â´ g) (h : Œπ = Œπ') :
    Fork.ofŒπ Œπ w ‚âÖ Fork.ofŒπ Œπ' w' :=
  Fork.ext (Iso.refl _) (by simp [h])
def Fork.isoForkOfŒπ (c : Fork f g) : c ‚âÖ Fork.ofŒπ c.Œπ c.condition :=
  Fork.ext (by simp only [Fork.ofŒπ_pt, Functor.const_obj_obj]; rfl) (by simp)
def Fork.isLimitOfIsos {X' Y' : C} (c : Fork f g) (hc : IsLimit c)
    {f' g' : X' ‚ü∂ Y'} (c' : Fork f' g')
    (e‚ÇÄ : X ‚âÖ X') (e‚ÇÅ : Y ‚âÖ Y') (e : c.pt ‚âÖ c'.pt)
    (comm‚ÇÅ : e‚ÇÄ.hom ‚â´ f' = f ‚â´ e‚ÇÅ.hom := by aesop_cat)
    (comm‚ÇÇ : e‚ÇÄ.hom ‚â´ g' = g ‚â´ e‚ÇÅ.hom := by aesop_cat)
    (comm‚ÇÉ : e.hom ‚â´ c'.Œπ = c.Œπ ‚â´ e‚ÇÄ.hom := by aesop_cat) : IsLimit c' :=
  let i : parallelPair f g ‚âÖ parallelPair f' g' := parallelPair.ext e‚ÇÄ e‚ÇÅ comm‚ÇÅ.symm comm‚ÇÇ.symm
  (IsLimit.equivOfNatIsoOfIso i c c' (Fork.ext e comm‚ÇÉ)) hc
@[simps]
def Cofork.mkHom {s t : Cofork f g} (k : s.pt ‚ü∂ t.pt) (w : s.œÄ ‚â´ k = t.œÄ) : s ‚ü∂ t where
  hom := k
  w := by
    rintro ‚ü®_ | _‚ü©
    ¬∑ simp [Cofork.app_zero_eq_comp_œÄ_left, w]
    ¬∑ exact w
@[reassoc (attr := simp)]
theorem Fork.hom_comp_Œπ {s t : Fork f g} (f : s ‚ü∂ t) : f.hom ‚â´ t.Œπ = s.Œπ := by
  cases s; cases t; cases f; aesop
@[reassoc (attr := simp)]
theorem Fork.œÄ_comp_hom {s t : Cofork f g} (f : s ‚ü∂ t) : s.œÄ ‚â´ f.hom = t.œÄ := by
  cases s; cases t; cases f; aesop
@[simps]
def Cofork.ext {s t : Cofork f g} (i : s.pt ‚âÖ t.pt) (w : s.œÄ ‚â´ i.hom = t.œÄ := by aesop_cat) :
    s ‚âÖ t where
  hom := Cofork.mkHom i.hom w
  inv := Cofork.mkHom i.inv (by rw [Iso.comp_inv_eq, w])
def Cofork.isoCoforkOfœÄ (c : Cofork f g) : c ‚âÖ Cofork.ofœÄ c.œÄ c.condition :=
  Cofork.ext (by simp only [Cofork.ofœÄ_pt, Functor.const_obj_obj]; rfl) (by dsimp; simp)
variable (f g)
section
abbrev HasEqualizer :=
  HasLimit (parallelPair f g)
variable [HasEqualizer f g]
noncomputable abbrev equalizer : C :=
  limit (parallelPair f g)
noncomputable abbrev equalizer.Œπ : equalizer f g ‚ü∂ X :=
  limit.œÄ (parallelPair f g) zero
noncomputable abbrev equalizer.fork : Fork f g :=
  limit.cone (parallelPair f g)
@[simp]
theorem equalizer.fork_Œπ : (equalizer.fork f g).Œπ = equalizer.Œπ f g :=
  rfl
@[simp]
theorem equalizer.fork_œÄ_app_zero : (equalizer.fork f g).œÄ.app zero = equalizer.Œπ f g :=
  rfl
@[reassoc]
theorem equalizer.condition : equalizer.Œπ f g ‚â´ f = equalizer.Œπ f g ‚â´ g :=
  Fork.condition <| limit.cone <| parallelPair f g
noncomputable def equalizerIsEqualizer : IsLimit (Fork.ofŒπ (equalizer.Œπ f g)
    (equalizer.condition f g)) :=
  IsLimit.ofIsoLimit (limit.isLimit _) (Fork.ext (Iso.refl _) (by aesop))
variable {f g}
noncomputable abbrev equalizer.lift {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) : W ‚ü∂ equalizer f g :=
  limit.lift (parallelPair f g) (Fork.ofŒπ k h)
@[reassoc]
theorem equalizer.lift_Œπ {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) :
    equalizer.lift k h ‚â´ equalizer.Œπ f g = k :=
  limit.lift_œÄ _ _
noncomputable def equalizer.lift' {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) :
    { l : W ‚ü∂ equalizer f g // l ‚â´ equalizer.Œπ f g = k } :=
  ‚ü®equalizer.lift k h, equalizer.lift_Œπ _ _‚ü©
@[ext]
theorem equalizer.hom_ext {W : C} {k l : W ‚ü∂ equalizer f g}
    (h : k ‚â´ equalizer.Œπ f g = l ‚â´ equalizer.Œπ f g) : k = l :=
  Fork.IsLimit.hom_ext (limit.isLimit _) h
theorem equalizer.existsUnique {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) :
    ‚àÉ! l : W ‚ü∂ equalizer f g, l ‚â´ equalizer.Œπ f g = k :=
  Fork.IsLimit.existsUnique (limit.isLimit _) _ h
instance equalizer.Œπ_mono : Mono (equalizer.Œπ f g) where
  right_cancellation _ _ w := equalizer.hom_ext w
end
section
variable {f g}
theorem mono_of_isLimit_fork {c : Fork f g} (i : IsLimit c) : Mono (Fork.Œπ c) :=
  { right_cancellation := fun _ _ w => Fork.IsLimit.hom_ext i w }
end
section
variable {f g}
def idFork (h : f = g) : Fork f g :=
  Fork.ofŒπ (ùüô X) <| h ‚ñ∏ rfl
def isLimitIdFork (h : f = g) : IsLimit (idFork h) :=
  Fork.IsLimit.mk _ (fun s => Fork.Œπ s) (fun _ => Category.comp_id _) fun s m h => by
    convert h
    exact (Category.comp_id _).symm
theorem isIso_limit_cone_parallelPair_of_eq (h‚ÇÄ : f = g) {c : Fork f g} (h : IsLimit c) :
    IsIso c.Œπ :=
  Iso.isIso_hom <| IsLimit.conePointUniqueUpToIso h <| isLimitIdFork h‚ÇÄ
theorem equalizer.Œπ_of_eq [HasEqualizer f g] (h : f = g) : IsIso (equalizer.Œπ f g) :=
  isIso_limit_cone_parallelPair_of_eq h <| limit.isLimit _
theorem isIso_limit_cone_parallelPair_of_self {c : Fork f f} (h : IsLimit c) : IsIso c.Œπ :=
  isIso_limit_cone_parallelPair_of_eq rfl h
theorem isIso_limit_cone_parallelPair_of_epi {c : Fork f g} (h : IsLimit c) [Epi c.Œπ] : IsIso c.Œπ :=
  isIso_limit_cone_parallelPair_of_eq ((cancel_epi _).1 (Fork.condition c)) h
theorem eq_of_epi_fork_Œπ (t : Fork f g) [Epi (Fork.Œπ t)] : f = g :=
  (cancel_epi (Fork.Œπ t)).1 <| Fork.condition t
theorem eq_of_epi_equalizer [HasEqualizer f g] [Epi (equalizer.Œπ f g)] : f = g :=
  (cancel_epi (equalizer.Œπ f g)).1 <| equalizer.condition _ _
end
instance hasEqualizer_of_self : HasEqualizer f f :=
  HasLimit.mk
    { cone := idFork rfl
      isLimit := isLimitIdFork rfl }
instance equalizer.Œπ_of_self : IsIso (equalizer.Œπ f f) :=
  equalizer.Œπ_of_eq rfl
noncomputable def equalizer.isoSourceOfSelf : equalizer f f ‚âÖ X :=
  asIso (equalizer.Œπ f f)
@[simp]
theorem equalizer.isoSourceOfSelf_hom : (equalizer.isoSourceOfSelf f).hom = equalizer.Œπ f f :=
  rfl
@[simp]
theorem equalizer.isoSourceOfSelf_inv :
    (equalizer.isoSourceOfSelf f).inv = equalizer.lift (ùüô X) (by simp) := by
  ext
  simp [equalizer.isoSourceOfSelf]
section
abbrev HasCoequalizer :=
  HasColimit (parallelPair f g)
variable [HasCoequalizer f g]
noncomputable abbrev coequalizer : C :=
  colimit (parallelPair f g)
noncomputable abbrev coequalizer.œÄ : Y ‚ü∂ coequalizer f g :=
  colimit.Œπ (parallelPair f g) one
noncomputable abbrev coequalizer.cofork : Cofork f g :=
  colimit.cocone (parallelPair f g)
@[simp]
theorem coequalizer.cofork_œÄ : (coequalizer.cofork f g).œÄ = coequalizer.œÄ f g :=
  rfl
theorem coequalizer.cofork_Œπ_app_one : (coequalizer.cofork f g).Œπ.app one = coequalizer.œÄ f g :=
  rfl
@[reassoc]
theorem coequalizer.condition : f ‚â´ coequalizer.œÄ f g = g ‚â´ coequalizer.œÄ f g :=
  Cofork.condition <| colimit.cocone <| parallelPair f g
noncomputable def coequalizerIsCoequalizer :
    IsColimit (Cofork.ofœÄ (coequalizer.œÄ f g) (coequalizer.condition f g)) :=
  IsColimit.ofIsoColimit (colimit.isColimit _) (Cofork.ext (Iso.refl _) (by aesop))
variable {f g}
noncomputable abbrev coequalizer.desc {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = g ‚â´ k) :
    coequalizer f g ‚ü∂ W :=
  colimit.desc (parallelPair f g) (Cofork.ofœÄ k h)
@[reassoc]
theorem coequalizer.œÄ_desc {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = g ‚â´ k) :
    coequalizer.œÄ f g ‚â´ coequalizer.desc k h = k :=
  colimit.Œπ_desc _ _
theorem coequalizer.œÄ_colimMap_desc {X' Y' Z : C} (f' g' : X' ‚ü∂ Y') [HasCoequalizer f' g']
    (p : X ‚ü∂ X') (q : Y ‚ü∂ Y') (wf : f ‚â´ q = p ‚â´ f') (wg : g ‚â´ q = p ‚â´ g') (h : Y' ‚ü∂ Z)
    (wh : f' ‚â´ h = g' ‚â´ h) :
    coequalizer.œÄ f g ‚â´ colimMap (parallelPairHom f g f' g' p q wf wg) ‚â´ coequalizer.desc h wh =
      q ‚â´ h := by
  rw [Œπ_colimMap_assoc, parallelPairHom_app_one, coequalizer.œÄ_desc]
noncomputable def coequalizer.desc' {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = g ‚â´ k) :
    { l : coequalizer f g ‚ü∂ W // coequalizer.œÄ f g ‚â´ l = k } :=
  ‚ü®coequalizer.desc k h, coequalizer.œÄ_desc _ _‚ü©
@[ext]
theorem coequalizer.hom_ext {W : C} {k l : coequalizer f g ‚ü∂ W}
    (h : coequalizer.œÄ f g ‚â´ k = coequalizer.œÄ f g ‚â´ l) : k = l :=
  Cofork.IsColimit.hom_ext (colimit.isColimit _) h
theorem coequalizer.existsUnique {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = g ‚â´ k) :
    ‚àÉ! d : coequalizer f g ‚ü∂ W, coequalizer.œÄ f g ‚â´ d = k :=
  Cofork.IsColimit.existsUnique (colimit.isColimit _) _ h
instance coequalizer.œÄ_epi : Epi (coequalizer.œÄ f g) where
  left_cancellation _ _ w := coequalizer.hom_ext w
end
section
variable {f g}
theorem epi_of_isColimit_cofork {c : Cofork f g} (i : IsColimit c) : Epi c.œÄ :=
  { left_cancellation := fun _ _ w => Cofork.IsColimit.hom_ext i w }
end
section
variable {f g}
def idCofork (h : f = g) : Cofork f g :=
  Cofork.ofœÄ (ùüô Y) <| h ‚ñ∏ rfl
def isColimitIdCofork (h : f = g) : IsColimit (idCofork h) :=
  Cofork.IsColimit.mk _ (fun s => Cofork.œÄ s) (fun _ => Category.id_comp _) fun s m h => by
    convert h
    exact (Category.id_comp _).symm
theorem isIso_colimit_cocone_parallelPair_of_eq (h‚ÇÄ : f = g) {c : Cofork f g} (h : IsColimit c) :
    IsIso c.œÄ :=
  Iso.isIso_hom <| IsColimit.coconePointUniqueUpToIso (isColimitIdCofork h‚ÇÄ) h
theorem coequalizer.œÄ_of_eq [HasCoequalizer f g] (h : f = g) : IsIso (coequalizer.œÄ f g) :=
  isIso_colimit_cocone_parallelPair_of_eq h <| colimit.isColimit _
theorem isIso_colimit_cocone_parallelPair_of_self {c : Cofork f f} (h : IsColimit c) : IsIso c.œÄ :=
  isIso_colimit_cocone_parallelPair_of_eq rfl h
theorem isIso_limit_cocone_parallelPair_of_epi {c : Cofork f g} (h : IsColimit c) [Mono c.œÄ] :
    IsIso c.œÄ :=
  isIso_colimit_cocone_parallelPair_of_eq ((cancel_mono _).1 (Cofork.condition c)) h
theorem eq_of_mono_cofork_œÄ (t : Cofork f g) [Mono (Cofork.œÄ t)] : f = g :=
  (cancel_mono (Cofork.œÄ t)).1 <| Cofork.condition t
theorem eq_of_mono_coequalizer [HasCoequalizer f g] [Mono (coequalizer.œÄ f g)] : f = g :=
  (cancel_mono (coequalizer.œÄ f g)).1 <| coequalizer.condition _ _
end
instance hasCoequalizer_of_self : HasCoequalizer f f :=
  HasColimit.mk
    { cocone := idCofork rfl
      isColimit := isColimitIdCofork rfl }
instance coequalizer.œÄ_of_self : IsIso (coequalizer.œÄ f f) :=
  coequalizer.œÄ_of_eq rfl
noncomputable def coequalizer.isoTargetOfSelf : coequalizer f f ‚âÖ Y :=
  (asIso (coequalizer.œÄ f f)).symm
@[simp]
theorem coequalizer.isoTargetOfSelf_hom :
    (coequalizer.isoTargetOfSelf f).hom = coequalizer.desc (ùüô Y) (by simp) := by
  ext
  simp [coequalizer.isoTargetOfSelf]
@[simp]
theorem coequalizer.isoTargetOfSelf_inv : (coequalizer.isoTargetOfSelf f).inv = coequalizer.œÄ f f :=
  rfl
section Comparison
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (G : C ‚•§ D)
noncomputable def equalizerComparison [HasEqualizer f g] [HasEqualizer (G.map f) (G.map g)] :
    G.obj (equalizer f g) ‚ü∂ equalizer (G.map f) (G.map g) :=
  equalizer.lift (G.map (equalizer.Œπ _ _))
    (by simp only [‚Üê G.map_comp]; rw [equalizer.condition])
@[reassoc (attr := simp)]
theorem equalizerComparison_comp_œÄ [HasEqualizer f g] [HasEqualizer (G.map f) (G.map g)] :
    equalizerComparison f g G ‚â´ equalizer.Œπ (G.map f) (G.map g) = G.map (equalizer.Œπ f g) :=
  equalizer.lift_Œπ _ _
@[reassoc (attr := simp)]
theorem map_lift_equalizerComparison [HasEqualizer f g] [HasEqualizer (G.map f) (G.map g)] {Z : C}
    {h : Z ‚ü∂ X} (w : h ‚â´ f = h ‚â´ g) :
    G.map (equalizer.lift h w) ‚â´ equalizerComparison f g G =
      equalizer.lift (G.map h) (by simp only [‚Üê G.map_comp, w]) := by
  apply equalizer.hom_ext
  simp [‚Üê G.map_comp]
noncomputable def coequalizerComparison [HasCoequalizer f g] [HasCoequalizer (G.map f) (G.map g)] :
    coequalizer (G.map f) (G.map g) ‚ü∂ G.obj (coequalizer f g) :=
  coequalizer.desc (G.map (coequalizer.œÄ _ _))
    (by simp only [‚Üê G.map_comp]; rw [coequalizer.condition])
@[reassoc (attr := simp)]
theorem Œπ_comp_coequalizerComparison [HasCoequalizer f g] [HasCoequalizer (G.map f) (G.map g)] :
    coequalizer.œÄ _ _ ‚â´ coequalizerComparison f g G = G.map (coequalizer.œÄ _ _) :=
  coequalizer.œÄ_desc _ _
@[reassoc (attr := simp)]
theorem coequalizerComparison_map_desc [HasCoequalizer f g] [HasCoequalizer (G.map f) (G.map g)]
    {Z : C} {h : Y ‚ü∂ Z} (w : f ‚â´ h = g ‚â´ h) :
    coequalizerComparison f g G ‚â´ G.map (coequalizer.desc h w) =
      coequalizer.desc (G.map h) (by simp only [‚Üê G.map_comp, w]) := by
  apply coequalizer.hom_ext
  simp [‚Üê G.map_comp]
end Comparison
variable (C)
abbrev HasEqualizers :=
  HasLimitsOfShape WalkingParallelPair C
abbrev HasCoequalizers :=
  HasColimitsOfShape WalkingParallelPair C
theorem hasEqualizers_of_hasLimit_parallelPair
    [‚àÄ {X Y : C} {f g : X ‚ü∂ Y}, HasLimit (parallelPair f g)] : HasEqualizers C :=
  { has_limit := fun F => hasLimitOfIso (diagramIsoParallelPair F).symm }
theorem hasCoequalizers_of_hasColimit_parallelPair
    [‚àÄ {X Y : C} {f g : X ‚ü∂ Y}, HasColimit (parallelPair f g)] : HasCoequalizers C :=
  { has_colimit := fun F => hasColimitOfIso (diagramIsoParallelPair F) }
section
variable {C} [IsSplitMono f]
@[simps!]
noncomputable def coneOfIsSplitMono : Fork (ùüô Y) (retraction f ‚â´ f) :=
  Fork.ofŒπ f (by simp)
@[simp]
theorem coneOfIsSplitMono_Œπ : (coneOfIsSplitMono f).Œπ = f :=
  rfl
noncomputable def isSplitMonoEqualizes {X Y : C} (f : X ‚ü∂ Y) [IsSplitMono f] :
    IsLimit (coneOfIsSplitMono f) :=
  Fork.IsLimit.mk' _ fun s =>
    ‚ü®s.Œπ ‚â´ retraction f, by
      dsimp
      rw [Category.assoc, ‚Üê s.condition]
      apply Category.comp_id, fun hm => by simp [‚Üê hm]‚ü©
end
def splitMonoOfEqualizer {X Y : C} {f : X ‚ü∂ Y} {r : Y ‚ü∂ X} (hr : f ‚â´ r ‚â´ f = f)
    (h : IsLimit (Fork.ofŒπ f (hr.trans (Category.comp_id _).symm : f ‚â´ r ‚â´ f = f ‚â´ ùüô Y))) :
    SplitMono f where
  retraction := r
  id := Fork.IsLimit.hom_ext h ((Category.assoc _ _ _).trans <| hr.trans (Category.id_comp _).symm)
variable {C f g}
def isEqualizerCompMono {c : Fork f g} (i : IsLimit c) {Z : C} (h : Y ‚ü∂ Z) [hm : Mono h] :
    have : Fork.Œπ c ‚â´ f ‚â´ h = Fork.Œπ c ‚â´ g ‚â´ h := by
      simp only [‚Üê Category.assoc]
      exact congrArg (¬∑ ‚â´ h) c.condition
    IsLimit (Fork.ofŒπ c.Œπ (by simp [this]) : Fork (f ‚â´ h) (g ‚â´ h)) :=
  Fork.IsLimit.mk' _ fun s =>
    let s' : Fork f g := Fork.ofŒπ s.Œπ (by apply hm.right_cancellation; simp [s.condition])
    let l := Fork.IsLimit.lift' i s'.Œπ s'.condition
    ‚ü®l.1, l.2, fun hm => by
      apply Fork.IsLimit.hom_ext i; rw [Fork.Œπ_ofŒπ] at hm; rw [hm]; exact l.2.symm‚ü©
variable (C f g)
@[instance]
theorem hasEqualizer_comp_mono [HasEqualizer f g] {Z : C} (h : Y ‚ü∂ Z) [Mono h] :
    HasEqualizer (f ‚â´ h) (g ‚â´ h) :=
  ‚ü®‚ü®{   cone := _
        isLimit := isEqualizerCompMono (limit.isLimit _) h }‚ü©‚ü©
@[simps]
def splitMonoOfIdempotentOfIsLimitFork {X : C} {f : X ‚ü∂ X} (hf : f ‚â´ f = f) {c : Fork (ùüô X) f}
    (i : IsLimit c) : SplitMono c.Œπ where
  retraction := i.lift (Fork.ofŒπ f (by simp [hf]))
  id := by
    letI := mono_of_isLimit_fork i
    rw [‚Üê cancel_mono_id c.Œπ, Category.assoc, Fork.IsLimit.lift_Œπ, Fork.Œπ_ofŒπ, ‚Üê c.condition]
    exact Category.comp_id c.Œπ
noncomputable def splitMonoOfIdempotentEqualizer {X : C} {f : X ‚ü∂ X} (hf : f ‚â´ f = f)
    [HasEqualizer (ùüô X) f] : SplitMono (equalizer.Œπ (ùüô X) f) :=
  splitMonoOfIdempotentOfIsLimitFork _ hf (limit.isLimit _)
section
variable {C} [IsSplitEpi f]
@[simps!]
noncomputable def coconeOfIsSplitEpi : Cofork (ùüô X) (f ‚â´ section_ f) :=
  Cofork.ofœÄ f (by simp)
@[simp]
theorem coconeOfIsSplitEpi_œÄ : (coconeOfIsSplitEpi f).œÄ = f :=
  rfl
noncomputable def isSplitEpiCoequalizes {X Y : C} (f : X ‚ü∂ Y) [IsSplitEpi f] :
    IsColimit (coconeOfIsSplitEpi f) :=
  Cofork.IsColimit.mk' _ fun s =>
    ‚ü®section_ f ‚â´ s.œÄ, by
      dsimp
      rw [‚Üê Category.assoc, ‚Üê s.condition, Category.id_comp], fun hm => by simp [‚Üê hm]‚ü©
end
def splitEpiOfCoequalizer {X Y : C} {f : X ‚ü∂ Y} {s : Y ‚ü∂ X} (hs : f ‚â´ s ‚â´ f = f)
    (h :
      IsColimit
        (Cofork.ofœÄ f
          ((Category.assoc _ _ _).trans <| hs.trans (Category.id_comp f).symm :
            (f ‚â´ s) ‚â´ f = ùüô X ‚â´ f))) :
    SplitEpi f where
  section_ := s
  id := Cofork.IsColimit.hom_ext h (hs.trans (Category.comp_id _).symm)
variable {C f g}
def isCoequalizerEpiComp {c : Cofork f g} (i : IsColimit c) {W : C} (h : W ‚ü∂ X) [hm : Epi h] :
    have : (h ‚â´ f) ‚â´ Cofork.œÄ c = (h ‚â´ g) ‚â´ Cofork.œÄ c := by
      simp only [Category.assoc]
      exact congrArg (h ‚â´ ¬∑) c.condition
    IsColimit (Cofork.ofœÄ c.œÄ (this) : Cofork (h ‚â´ f) (h ‚â´ g)) :=
  Cofork.IsColimit.mk' _ fun s =>
    let s' : Cofork f g :=
      Cofork.ofœÄ s.œÄ (by apply hm.left_cancellation; simp_rw [‚Üê Category.assoc, s.condition])
    let l := Cofork.IsColimit.desc' i s'.œÄ s'.condition
    ‚ü®l.1, l.2, fun hm => by
      apply Cofork.IsColimit.hom_ext i; rw [Cofork.œÄ_ofœÄ] at hm; rw [hm]; exact l.2.symm‚ü©
theorem hasCoequalizer_epi_comp [HasCoequalizer f g] {W : C} (h : W ‚ü∂ X) [Epi h] :
    HasCoequalizer (h ‚â´ f) (h ‚â´ g) :=
  ‚ü®‚ü®{   cocone := _
        isColimit := isCoequalizerEpiComp (colimit.isColimit _) h }‚ü©‚ü©
variable (C f g)
@[simps]
def splitEpiOfIdempotentOfIsColimitCofork {X : C} {f : X ‚ü∂ X} (hf : f ‚â´ f = f) {c : Cofork (ùüô X) f}
    (i : IsColimit c) : SplitEpi c.œÄ where
  section_ := i.desc (Cofork.ofœÄ f (by simp [hf]))
  id := by
    letI := epi_of_isColimit_cofork i
    rw [‚Üê cancel_epi_id c.œÄ, ‚Üê Category.assoc, Cofork.IsColimit.œÄ_desc, Cofork.œÄ_ofœÄ, ‚Üê
      c.condition]
    exact Category.id_comp _
noncomputable def splitEpiOfIdempotentCoequalizer {X : C} {f : X ‚ü∂ X} (hf : f ‚â´ f = f)
    [HasCoequalizer (ùüô X) f] : SplitEpi (coequalizer.œÄ (ùüô X) f) :=
  splitEpiOfIdempotentOfIsColimitCofork _ hf (colimit.isColimit _)
end CategoryTheory.Limits
end