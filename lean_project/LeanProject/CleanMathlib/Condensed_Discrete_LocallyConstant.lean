import Mathlib.Condensed.Discrete.Basic
import Mathlib.Condensed.TopComparison
import Mathlib.Topology.Category.CompHausLike.SigmaComparison
import Mathlib.Topology.FiberPartition
universe u w
open CategoryTheory Limits LocallyConstant TopologicalSpace.Fiber Opposite Function Fiber
attribute [local instance] ConcreteCategory.instFunLike
variable {P : TopCat.{u} ‚Üí Prop}
namespace CompHausLike.LocallyConstant
@[simps]
def functorToPresheaves : Type (max u w) ‚•§ ((CompHausLike.{u} P)·µí·µñ ‚•§ Type max u w) where
  obj X := {
    obj := fun ‚ü®S‚ü© ‚Ü¶ LocallyConstant S X
    map := fun f g ‚Ü¶ g.comap f.unop }
  map f := { app := fun _ t ‚Ü¶ t.map f }
@[simps]
def locallyConstantIsoContinuousMap (Y X : Type*) [TopologicalSpace Y] :
    LocallyConstant Y X ‚âÖ C(Y, TopCat.discrete.obj X) :=
  letI : TopologicalSpace X := ‚ä•
  haveI : DiscreteTopology X := ‚ü®rfl‚ü©
  { hom := fun f ‚Ü¶ (f : C(Y, X))
    inv := fun f ‚Ü¶ ‚ü®f, (IsLocallyConstant.iff_continuous f).mpr f.2‚ü© }
section Adjunction
variable [‚àÄ (S : CompHausLike.{u} P) (p : S ‚Üí Prop), HasProp P (Subtype p)]
section
variable {Q : CompHausLike.{u} P} {Z : Type max u w} (r : LocallyConstant Q Z) (a : Fiber r)
def fiber : CompHausLike.{u} P := CompHausLike.of P a.val
instance : HasProp P (fiber r a) := inferInstanceAs (HasProp P (Subtype _))
def sigmaIncl : fiber r a ‚ü∂ Q := TopologicalSpace.Fiber.sigmaIncl _ a
noncomputable def sigmaIso [HasExplicitFiniteCoproducts.{u} P] : (finiteCoproduct (fiber r)) ‚âÖ Q :=
  isoOfBijective (sigmaIsoHom r) ‚ü®sigmaIsoHom_inj r, sigmaIsoHom_surj r‚ü©
lemma sigmaComparison_comp_sigmaIso [HasExplicitFiniteCoproducts.{u} P]
    (X : (CompHausLike.{u} P)·µí·µñ ‚•§ Type max u w) :
    (X.mapIso (sigmaIso r).op).hom ‚â´ sigmaComparison X (fun a ‚Ü¶ (fiber r a).1) ‚â´
      (fun g ‚Ü¶ g a) = X.map (sigmaIncl r a).op := by
  ext
  simp only [Functor.mapIso_hom, Iso.op_hom, types_comp_apply, sigmaComparison, coe_of,
    ‚Üê FunctorToTypes.map_comp_apply]
  rfl
end
variable {S : CompHausLike.{u} P} {Y : (CompHausLike.{u} P)·µí·µñ ‚•§ Type max u w}
  [HasProp P PUnit.{u+1}] (f : LocallyConstant S (Y.obj (op (CompHausLike.of P PUnit.{u+1}))))
noncomputable def counitAppAppImage : (a : Fiber f) ‚Üí Y.obj ‚ü®fiber f a‚ü© :=
  fun a ‚Ü¶ Y.map (CompHausLike.isTerminalPUnit.from _).op a.image
noncomputable def counitAppApp (S : CompHausLike.{u} P) (Y : (CompHausLike.{u} P)·µí·µñ ‚•§ Type max u w)
    [PreservesFiniteProducts Y] [HasExplicitFiniteCoproducts.{u} P] :
    LocallyConstant S (Y.obj (op (CompHausLike.of P PUnit.{u+1}))) ‚ü∂ Y.obj ‚ü®S‚ü© :=
  fun r ‚Ü¶ ((inv (sigmaComparison Y (fun a ‚Ü¶ (fiber r a).1))) ‚â´
    (Y.mapIso (sigmaIso r).op).inv) (counitAppAppImage r)
lemma presheaf_ext (X : (CompHausLike.{u} P)·µí·µñ ‚•§ Type max u w)
    [PreservesFiniteProducts X] (x y : X.obj ‚ü®S‚ü©)
    [HasExplicitFiniteCoproducts.{u} P]
    (h : ‚àÄ (a : Fiber f), X.map (sigmaIncl f a).op x = X.map (sigmaIncl f a).op y) : x = y := by
  apply injective_of_mono (X.mapIso (sigmaIso f).op).hom
  apply injective_of_mono (sigmaComparison X (fun a ‚Ü¶ (fiber f a).1))
  ext a
  specialize h a
  rw [‚Üê sigmaComparison_comp_sigmaIso] at h
  exact h
lemma incl_of_counitAppApp [PreservesFiniteProducts Y] [HasExplicitFiniteCoproducts.{u} P]
    (a : Fiber f) : Y.map (sigmaIncl f a).op (counitAppApp S Y f) = counitAppAppImage f a := by
  rw [‚Üê sigmaComparison_comp_sigmaIso, Functor.mapIso_hom, Iso.op_hom, types_comp_apply]
  simp only [counitAppApp, Functor.mapIso_inv, ‚Üê Iso.op_hom, types_comp_apply,
    ‚Üê FunctorToTypes.map_comp_apply, Iso.inv_hom_id, FunctorToTypes.map_id_apply]
  exact congrFun (inv_hom_id_apply (asIso (sigmaComparison Y (fun a ‚Ü¶ (fiber f a).1)))
    (counitAppAppImage f)) _
variable {T : CompHausLike.{u} P} (g : T ‚ü∂ S)
def componentHom (a : Fiber (f.comap g)) :
    fiber _ a ‚ü∂ fiber _ (Fiber.mk f (g a.preimage)) where
  toFun x := ‚ü®g x.val, by
    simp only [Fiber.mk, Set.mem_preimage, Set.mem_singleton_iff]
    convert map_eq_image _ _ x
    exact map_preimage_eq_image_map _ _ a‚ü©
  continuous_toFun := by exact Continuous.subtype_mk (g.continuous.comp continuous_subtype_val) _
lemma incl_comap {S T : (CompHausLike P)·µí·µñ}
    (f : LocallyConstant S.unop (Y.obj (op (CompHausLike.of P PUnit.{u+1}))))
      (g : S ‚ü∂ T) (a : Fiber (f.comap g.unop)) :
        g ‚â´ (sigmaIncl (f.comap g.unop) a).op =
          (sigmaIncl f _).op ‚â´ (componentHom f g.unop a).op :=
  rfl
@[simps!]
noncomputable def counitApp [HasExplicitFiniteCoproducts.{u} P]
    (Y : (CompHausLike.{u} P)·µí·µñ ‚•§ Type max u w) [PreservesFiniteProducts Y] :
    (functorToPresheaves.obj (Y.obj (op (CompHausLike.of P PUnit.{u+1})))) ‚ü∂ Y where
  app := fun ‚ü®S‚ü© ‚Ü¶ counitAppApp S Y
  naturality := by
    intro S T g
    ext f
    apply presheaf_ext (f.comap g.unop)
    intro a
    simp only [op_unop, functorToPresheaves_obj_obj, types_comp_apply, functorToPresheaves_obj_map,
      incl_of_counitAppApp, ‚Üê FunctorToTypes.map_comp_apply, incl_comap]
    simp only [FunctorToTypes.map_comp_apply, incl_of_counitAppApp]
    simp only [counitAppAppImage, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp,
      terminal.comp_from]
    apply congrArg
    exact image_eq_image_mk (g := g.unop) (a := a)
variable (P) (X : TopCat.{max u w})
    [HasExplicitFiniteCoproducts.{0} P] [HasExplicitPullbacks P]
    (hs : ‚àÄ ‚¶ÉX Y : CompHausLike P‚¶Ñ (f : X ‚ü∂ Y), EffectiveEpi f ‚Üí Function.Surjective f)
noncomputable def functorToPresheavesIso (X : Type (max u w)) :
    functorToPresheaves.{u, w}.obj X ‚âÖ ((TopCat.discrete.obj X).toSheafCompHausLike P hs).val :=
  NatIso.ofComponents (fun S ‚Ü¶ locallyConstantIsoContinuousMap _ _)
@[simps]
def functor :
    haveI := CompHausLike.preregular hs
    Type (max u w) ‚•§ Sheaf (coherentTopology (CompHausLike.{u} P)) (Type (max u w)) where
  obj X := {
    val := functorToPresheaves.{u, w}.obj X
    cond := by
      rw [Presheaf.isSheaf_of_iso_iff (functorToPresheavesIso P hs X)]
      exact ((TopCat.discrete.obj X).toSheafCompHausLike P hs).cond }
  map f := ‚ü®functorToPresheaves.{u, w}.map f‚ü©
noncomputable def functorIso :
    functor.{u, w} P hs ‚âÖ TopCat.discrete.{max w u} ‚ãô topCatToSheafCompHausLike P hs :=
  NatIso.ofComponents (fun X ‚Ü¶ (fullyFaithfulSheafToPresheaf _ _).preimageIso
    (functorToPresheavesIso P hs X))
@[simps]
noncomputable def counit [HasExplicitFiniteCoproducts.{u} P] : haveI := CompHausLike.preregular hs
    (sheafSections _ _).obj ‚ü®CompHausLike.of P PUnit.{u+1}‚ü© ‚ãô functor.{u, w} P hs ‚ü∂
        ùü≠ (Sheaf (coherentTopology (CompHausLike.{u} P)) (Type (max u w))) where
  app X := haveI := CompHausLike.preregular hs
    ‚ü®counitApp X.val‚ü©
  naturality X Y g := by
    have := CompHausLike.preregular hs
    apply Sheaf.hom_ext
    simp only [functor, id_eq, eq_mpr_eq_cast, Functor.comp_obj, Functor.flip_obj_obj,
      sheafToPresheaf_obj, Functor.id_obj, Functor.comp_map, Functor.flip_obj_map,
      sheafToPresheaf_map, Sheaf.instCategorySheaf_comp_val, Functor.id_map]
    ext S (f : LocallyConstant _ _)
    simp only [FunctorToTypes.comp, counitApp_app]
    apply presheaf_ext (f.map (g.val.app (op (CompHausLike.of P PUnit.{u+1}))))
    intro a
    simp only [op_unop, functorToPresheaves_map_app, incl_of_counitAppApp]
    apply presheaf_ext (f.comap (sigmaIncl _ _))
    intro b
    simp only [counitAppAppImage, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, CompHausLike.coe_of,
      map_apply, IsTerminal.comp_from, ‚Üê map_preimage_eq_image_map]
    change (_ ‚â´ Y.val.map _) _ = (_ ‚â´ Y.val.map _) _
    simp only [‚Üê g.val.naturality,
      show sigmaIncl (f.comap (sigmaIncl (f.map _) a)) b ‚â´ sigmaIncl (f.map _) a =
        (sigmaInclIncl f _ a b) ‚â´ sigmaIncl f (Fiber.mk f _) from rfl]
    simp only [op_comp, Functor.map_comp, types_comp_apply, incl_of_counitAppApp]
    simp only [counitAppAppImage, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, terminal.comp_from]
    rw [mk_image]
    change (X.val.map _ ‚â´ _) _ = (X.val.map _ ‚â´ _) _
    simp only [g.val.naturality]
    simp only [types_comp_apply]
    have := map_preimage_eq_image (f := g.val.app _ ‚àò f) (a := a)
    simp only [Function.comp_apply] at this
    rw [this]
    apply congrArg
    symm
    convert (b.preimage).prop
    exact (mem_iff_eq_image (g.val.app _ ‚àò f) _ _).symm
@[simps]
def unit : ùü≠ _ ‚ü∂ functor P hs ‚ãô (sheafSections _ _).obj ‚ü®CompHausLike.of P PUnit.{u+1}‚ü© where
  app _ x := LocallyConstant.const _ x
noncomputable def unitIso : ùü≠ (Type max u w) ‚âÖ functor.{u, w} P hs ‚ãô
    (sheafSections _ _).obj ‚ü®CompHausLike.of P PUnit.{u+1}‚ü© where
  hom := unit P hs
  inv := { app := fun _ f ‚Ü¶ f.toFun PUnit.unit }
lemma adjunction_left_triangle [HasExplicitFiniteCoproducts.{u} P]
    (X : Type max u w) : functorToPresheaves.{u, w}.map ((unit P hs).app X) ‚â´
      ((counit P hs).app ((functor P hs).obj X)).val = ùüô (functorToPresheaves.obj X) := by
  ext ‚ü®S‚ü© (f : LocallyConstant _ X)
  simp only [Functor.id_obj, Functor.comp_obj, FunctorToTypes.comp, NatTrans.id_app,
    functorToPresheaves_obj_obj, types_id_apply]
  simp only [counit, counitApp_app]
  have := CompHausLike.preregular hs
  apply presheaf_ext
    (X := ((functor P hs).obj X).val) (Y := ((functor.{u, w} P hs).obj X).val)
      (f.map ((unit P hs).app X))
  intro a
  erw [incl_of_counitAppApp]
  simp only [functor_obj_val, functorToPresheaves_obj_obj, coe_of, Functor.id_obj,
    counitAppAppImage, LocallyConstant.map_apply, functorToPresheaves_obj_map, Quiver.Hom.unop_op]
  ext x
  erw [‚Üê map_eq_image _ a x]
  rfl
@[simps]
noncomputable def adjunction [HasExplicitFiniteCoproducts.{u} P] :
    functor.{u, w} P hs ‚ä£ (sheafSections _ _).obj ‚ü®CompHausLike.of P PUnit.{u+1}‚ü© where
  unit := unit P hs
  counit := counit P hs
  left_triangle_components := by
    intro X
    simp only [Functor.comp_obj, Functor.id_obj, NatTrans.comp_app, Functor.flip_obj_obj,
      sheafToPresheaf_obj, functor_obj_val, functorToPresheaves_obj_obj, coe_of, whiskerRight_app,
      Functor.associator_hom_app, whiskerLeft_app, Category.id_comp, NatTrans.id_app']
    apply Sheaf.hom_ext
    rw [Sheaf.instCategorySheaf_comp_val, Sheaf.instCategorySheaf_id_val]
    exact adjunction_left_triangle P hs X
  right_triangle_components := by
    intro X
    ext (x : X.val.obj _)
    simp only [Functor.comp_obj, Functor.id_obj, Functor.flip_obj_obj, sheafToPresheaf_obj,
      FunctorToTypes.comp, whiskerLeft_app, unit_app, coe_of, Functor.associator_inv_app,
      functor_obj_val, functorToPresheaves_obj_obj, types_id_apply, whiskerRight_app,
      Functor.flip_obj_map, sheafToPresheaf_map, counit_app_val, counitApp_app, NatTrans.id_app']
    have := CompHausLike.preregular hs
    letI : PreservesFiniteProducts ((sheafToPresheaf (coherentTopology _) _).obj X) :=
      inferInstanceAs (PreservesFiniteProducts (Sheaf.val _))
    apply presheaf_ext ((unit P hs).app _ x)
    intro a
    erw [incl_of_counitAppApp]
    simp only [sheafToPresheaf_obj, unit_app, coe_of, counitAppAppImage, coe_const]
    erw [‚Üê map_eq_image _ a ‚ü®PUnit.unit, by simp [mem_iff_eq_image, ‚Üê map_preimage_eq_image]‚ü©]
    rfl
instance [HasExplicitFiniteCoproducts.{u} P] : IsIso (adjunction P hs).unit :=
  inferInstanceAs (IsIso (unitIso P hs).hom)
end Adjunction
end CompHausLike.LocallyConstant
section Condensed
open Condensed CompHausLike
namespace CondensedSet.LocallyConstant
abbrev functor : Type (u+1) ‚•§ CondensedSet.{u} :=
  CompHausLike.LocallyConstant.functor.{u, u+1} (P := fun _ ‚Ü¶ True)
    (hs := fun _ _ _ ‚Ü¶ ((CompHaus.effectiveEpi_tfae _).out 0 2).mp)
noncomputable def iso : functor ‚âÖ discrete (Type (u+1)) :=
  (LocallyConstant.adjunction _ _).leftAdjointUniq (discreteUnderlyingAdj _)
noncomputable def functorFullyFaithful : functor.FullyFaithful :=
  (LocallyConstant.adjunction.{u, u+1} _ _).fullyFaithfulLOfIsIsoUnit
noncomputable instance : functor.Faithful := functorFullyFaithful.faithful
noncomputable instance : functor.Full := functorFullyFaithful.full
instance : (discrete (Type _)).Faithful := Functor.Faithful.of_iso iso
noncomputable instance : (discrete (Type _)).Full := Functor.Full.of_iso iso
end CondensedSet.LocallyConstant
namespace LightCondSet.LocallyConstant
abbrev functor : Type u ‚•§ LightCondSet.{u} :=
  CompHausLike.LocallyConstant.functor.{u, u}
    (P := fun X ‚Ü¶ TotallyDisconnectedSpace X ‚àß SecondCountableTopology X)
    (hs := fun _ _ _ ‚Ü¶ (LightProfinite.effectiveEpi_iff_surjective _).mp)
instance (S : LightProfinite.{u}) (p : S ‚Üí Prop) :
    HasProp (fun X ‚Ü¶ TotallyDisconnectedSpace X ‚àß SecondCountableTopology X) (Subtype p) :=
  ‚ü®‚ü®(inferInstance : TotallyDisconnectedSpace (Subtype p)),
    (inferInstance : SecondCountableTopology {s | p s})‚ü©‚ü©
noncomputable def iso : functor ‚âÖ LightCondensed.discrete (Type u) :=
  (LocallyConstant.adjunction _ _).leftAdjointUniq (LightCondensed.discreteUnderlyingAdj _)
noncomputable def functorFullyFaithful : functor.{u}.FullyFaithful :=
  (LocallyConstant.adjunction _ _).fullyFaithfulLOfIsIsoUnit
instance : functor.{u}.Faithful := functorFullyFaithful.faithful
instance : LightCondSet.LocallyConstant.functor.Full := functorFullyFaithful.full
instance : (LightCondensed.discrete (Type u)).Faithful := Functor.Faithful.of_iso iso.{u}
instance : (LightCondensed.discrete (Type u)).Full := Functor.Full.of_iso iso.{u}
end LightCondSet.LocallyConstant
end Condensed