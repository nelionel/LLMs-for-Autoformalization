import Mathlib.CategoryTheory.Linear.Basic
import Mathlib.CategoryTheory.Preadditive.Biproducts
import Mathlib.LinearAlgebra.Matrix.InvariantBasisNumber
import Mathlib.Data.Set.Subsingleton
open scoped Classical
open Matrix CategoryTheory.Limits
universe v u
namespace CategoryTheory
variable {C : Type u} [Category.{v} C]
def HomOrthogonal {Œπ : Type*} (s : Œπ ‚Üí C) : Prop :=
  Pairwise fun i j => Subsingleton (s i ‚ü∂ s j)
namespace HomOrthogonal
variable {Œπ : Type*} {s : Œπ ‚Üí C}
theorem eq_zero [HasZeroMorphisms C] (o : HomOrthogonal s) {i j : Œπ} (w : i ‚â† j) (f : s i ‚ü∂ s j) :
    f = 0 :=
  (o w).elim _ _
section
variable [HasZeroMorphisms C] [HasFiniteBiproducts C]
@[simps]
noncomputable def matrixDecomposition (o : HomOrthogonal s) {Œ± Œ≤ : Type} [Finite Œ±] [Finite Œ≤]
    {f : Œ± ‚Üí Œπ} {g : Œ≤ ‚Üí Œπ} :
    ((‚®Å fun a => s (f a)) ‚ü∂ ‚®Å fun b => s (g b)) ‚âÉ
      ‚àÄ i : Œπ, Matrix (g ‚Åª¬π' {i}) (f ‚Åª¬π' {i}) (End (s i)) where
  toFun z i j k :=
    eqToHom
        (by
          rcases k with ‚ü®k, ‚ü®‚ü©‚ü©
          simp) ‚â´
      biproduct.components z k j ‚â´
        eqToHom
          (by
            rcases j with ‚ü®j, ‚ü®‚ü©‚ü©
            simp)
  invFun z :=
    biproduct.matrix fun j k =>
      if h : f j = g k then z (f j) ‚ü®k, by simp [h]‚ü© ‚ü®j, by simp‚ü© ‚â´ eqToHom (by simp [h]) else 0
  left_inv z := by
    ext j k
    simp only [biproduct.matrix_œÄ, biproduct.Œπ_desc]
    split_ifs with h
    ¬∑ simp
      rfl
    ¬∑ symm
      apply o.eq_zero h
  right_inv z := by
    ext i ‚ü®j, w‚ü© ‚ü®k, ‚ü®‚ü©‚ü©
    simp only [eqToHom_refl, biproduct.matrix_components, Category.id_comp]
    split_ifs with h
    ¬∑ simp
    ¬∑ exfalso
      exact h w.symm
end
section
variable [Preadditive C] [HasFiniteBiproducts C]
@[simps!]
noncomputable def matrixDecompositionAddEquiv (o : HomOrthogonal s) {Œ± Œ≤ : Type} [Finite Œ±]
    [Finite Œ≤] {f : Œ± ‚Üí Œπ} {g : Œ≤ ‚Üí Œπ} :
    ((‚®Å fun a => s (f a)) ‚ü∂ ‚®Å fun b => s (g b)) ‚âÉ+
      ‚àÄ i : Œπ, Matrix (g ‚Åª¬π' {i}) (f ‚Åª¬π' {i}) (End (s i)) :=
  { o.matrixDecomposition with
    map_add' := fun w z => by
      ext
      dsimp [biproduct.components]
      simp }
@[simp]
theorem matrixDecomposition_id (o : HomOrthogonal s) {Œ± : Type} [Finite Œ±] {f : Œ± ‚Üí Œπ} (i : Œπ) :
    o.matrixDecomposition (ùüô (‚®Å fun a => s (f a))) i = 1 := by
  ext ‚ü®b, ‚ü®‚ü©‚ü© ‚ü®a, j_property‚ü©
  simp only [Set.mem_preimage, Set.mem_singleton_iff] at j_property
  simp only [Category.comp_id, Category.id_comp, Category.assoc, End.one_def, eqToHom_refl,
    Matrix.one_apply, HomOrthogonal.matrixDecomposition_apply, biproduct.components]
  split_ifs with h
  ¬∑ cases h
    simp
  ¬∑ simp only [Subtype.mk.injEq] at h
    have : biproduct.Œπ (fun a ‚Ü¶ s (f a)) a ‚â´ biproduct.œÄ (fun b ‚Ü¶ s (f b)) b = 0 := by
      simpa using biproduct.Œπ_œÄ_ne _ (Ne.symm h)
    rw [this, comp_zero]
theorem matrixDecomposition_comp (o : HomOrthogonal s) {Œ± Œ≤ Œ≥ : Type} [Finite Œ±] [Fintype Œ≤]
    [Finite Œ≥] {f : Œ± ‚Üí Œπ} {g : Œ≤ ‚Üí Œπ} {h : Œ≥ ‚Üí Œπ} (z : (‚®Å fun a => s (f a)) ‚ü∂ ‚®Å fun b => s (g b))
    (w : (‚®Å fun b => s (g b)) ‚ü∂ ‚®Å fun c => s (h c)) (i : Œπ) :
    o.matrixDecomposition (z ‚â´ w) i = o.matrixDecomposition w i * o.matrixDecomposition z i := by
  ext ‚ü®c, ‚ü®‚ü©‚ü© ‚ü®a, j_property‚ü©
  simp only [Set.mem_preimage, Set.mem_singleton_iff] at j_property
  simp only [Matrix.mul_apply, Limits.biproduct.components,
    HomOrthogonal.matrixDecomposition_apply, Category.comp_id, Category.id_comp, Category.assoc,
    End.mul_def, eqToHom_refl, eqToHom_trans_assoc, Finset.sum_congr]
  conv_lhs => rw [‚Üê Category.id_comp w, ‚Üê biproduct.total]
  simp only [Preadditive.sum_comp, Preadditive.comp_sum]
  apply Finset.sum_congr_set
  ¬∑ simp
  ¬∑ intro b nm
    simp only [Set.mem_preimage, Set.mem_singleton_iff] at nm
    simp only [Category.assoc]
    have : biproduct.Œπ (fun b ‚Ü¶ s (g b)) b ‚â´ w ‚â´ biproduct.œÄ (fun b ‚Ü¶ s (h b)) c = 0 := by
      apply o.eq_zero nm
    simp only [this, comp_zero]
section
variable {R : Type*} [Semiring R] [Linear R C]
@[simps]
noncomputable def matrixDecompositionLinearEquiv (o : HomOrthogonal s) {Œ± Œ≤ : Type} [Finite Œ±]
    [Finite Œ≤] {f : Œ± ‚Üí Œπ} {g : Œ≤ ‚Üí Œπ} :
    ((‚®Å fun a => s (f a)) ‚ü∂ ‚®Å fun b => s (g b)) ‚âÉ‚Çó[R]
      ‚àÄ i : Œπ, Matrix (g ‚Åª¬π' {i}) (f ‚Åª¬π' {i}) (End (s i)) :=
  { o.matrixDecompositionAddEquiv with
    map_smul' := fun w z => by
      ext
      dsimp [biproduct.components]
      simp }
end
variable [‚àÄ i, InvariantBasisNumber (End (s i))]
theorem equiv_of_iso (o : HomOrthogonal s) {Œ± Œ≤ : Type} [Finite Œ±] [Finite Œ≤] {f : Œ± ‚Üí Œπ}
    {g : Œ≤ ‚Üí Œπ} (i : (‚®Å fun a => s (f a)) ‚âÖ ‚®Å fun b => s (g b)) :
    ‚àÉ e : Œ± ‚âÉ Œ≤, ‚àÄ a, g (e a) = f a := by
  refine ‚ü®Equiv.ofPreimageEquiv ?_, fun a => Equiv.ofPreimageEquiv_map _ _‚ü©
  intro c
  apply Nonempty.some
  apply Cardinal.eq.1
  cases nonempty_fintype Œ±; cases nonempty_fintype Œ≤
  simp only [Cardinal.mk_fintype, Nat.cast_inj]
  exact
    Matrix.square_of_invertible (o.matrixDecomposition i.inv c) (o.matrixDecomposition i.hom c)
      (by
        rw [‚Üê o.matrixDecomposition_comp]
        simp)
      (by
        rw [‚Üê o.matrixDecomposition_comp]
        simp)
end
end HomOrthogonal
end CategoryTheory