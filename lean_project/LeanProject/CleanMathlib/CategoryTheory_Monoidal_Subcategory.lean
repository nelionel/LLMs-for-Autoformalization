import Mathlib.CategoryTheory.Monoidal.Braided.Basic
import Mathlib.CategoryTheory.Monoidal.Linear
import Mathlib.CategoryTheory.Monoidal.Transport
import Mathlib.CategoryTheory.Preadditive.AdditiveFunctor
import Mathlib.CategoryTheory.Linear.LinearFunctor
import Mathlib.CategoryTheory.Closed.Monoidal
universe u v
namespace CategoryTheory
namespace MonoidalCategory
open Iso
variable {C : Type u} [Category.{v} C] [MonoidalCategory C] (P : C ‚Üí Prop)
class MonoidalPredicate : Prop where
  prop_id : P (ùüô_ C) := by aesop_cat
  prop_tensor : ‚àÄ {X Y}, P X ‚Üí P Y ‚Üí P (X ‚äó Y) := by aesop_cat
open MonoidalPredicate
variable [MonoidalPredicate P]
@[simps]
instance : MonoidalCategoryStruct (FullSubcategory P) where
  tensorObj X Y := ‚ü®X.1 ‚äó Y.1, prop_tensor X.2 Y.2‚ü©
  whiskerLeft X _ _ f := X.1 ‚óÅ f
  whiskerRight {X‚ÇÅ X‚ÇÇ} (f : X‚ÇÅ.1 ‚ü∂ X‚ÇÇ.1) Y := (f ‚ñ∑ Y.1 :)
  tensorHom f g := f ‚äó g
  tensorUnit := ‚ü®ùüô_ C, prop_id‚ü©
  associator X Y Z :=
    ‚ü®(Œ±_ X.1 Y.1 Z.1).hom, (Œ±_ X.1 Y.1 Z.1).inv, hom_inv_id (Œ±_ X.1 Y.1 Z.1),
      inv_hom_id (Œ±_ X.1 Y.1 Z.1)‚ü©
  leftUnitor X := ‚ü®(Œª_ X.1).hom, (Œª_ X.1).inv, hom_inv_id (Œª_ X.1), inv_hom_id (Œª_ X.1)‚ü©
  rightUnitor X := ‚ü®(œÅ_ X.1).hom, (œÅ_ X.1).inv, hom_inv_id (œÅ_ X.1), inv_hom_id (œÅ_ X.1)‚ü©
instance fullMonoidalSubcategory : MonoidalCategory (FullSubcategory P) :=
  Monoidal.induced (fullSubcategoryInclusion P)
    { ŒºIso := fun _ _ => eqToIso rfl
      ŒµIso := eqToIso rfl }
instance fullSubcategoryInclusionMonoidal : (fullSubcategoryInclusion P).Monoidal :=
  Functor.CoreMonoidal.toMonoidal
    { ŒµIso := Iso.refl _
      ŒºIso := fun _ _ ‚Ü¶ Iso.refl _ }
open Functor.LaxMonoidal Functor.OplaxMonoidal
@[simp] lemma fullSubcategoryInclusion_Œµ : Œµ (fullSubcategoryInclusion P) = ùüô _ := rfl
@[simp] lemma fullSubcategoryInclusion_Œ∑ : Œµ (fullSubcategoryInclusion P) = ùüô _ := rfl
@[simp] lemma fullSubcategoryInclusion_Œº (X Y : FullSubcategory P) :
    Œº (fullSubcategoryInclusion P) X Y = ùüô _ := rfl
@[simp] lemma fullSubcategoryInclusion_Œ¥ (X Y : FullSubcategory P) :
    Œ¥ (fullSubcategoryInclusion P) X Y = ùüô _ := rfl
section
variable [Preadditive C]
instance [MonoidalPreadditive C] : MonoidalPreadditive (FullSubcategory P) :=
  monoidalPreadditive_of_faithful (fullSubcategoryInclusion P)
variable (R : Type*) [Ring R] [Linear R C]
instance [MonoidalPreadditive C] [MonoidalLinear R C] : MonoidalLinear R (FullSubcategory P) :=
  monoidalLinearOfFaithful R (fullSubcategoryInclusion P)
end
section
variable {P} {P' : C ‚Üí Prop} [MonoidalPredicate P'] (h : ‚àÄ ‚¶ÉX‚¶Ñ, P X ‚Üí P' X)
instance  : (FullSubcategory.map h).Monoidal :=
  Functor.CoreMonoidal.toMonoidal
    { ŒµIso := Iso.refl _
      ŒºIso := fun _ _ ‚Ü¶ Iso.refl _ }
@[simp] lemma fullSubcategory_map_Œµ : Œµ (FullSubcategory.map h) = ùüô _ := rfl
@[simp] lemma fullSubcategory_map_Œ∑ : Œ∑ (FullSubcategory.map h) = ùüô _ := rfl
@[simp] lemma fullSubcategory_map_Œº (X Y : FullSubcategory P) :
    Œº (FullSubcategory.map h) X Y = ùüô _ := rfl
@[simp] lemma fullSubcategory_map_Œ¥ (X Y : FullSubcategory P) :
    Œ¥ (FullSubcategory.map h) X Y = ùüô _ := rfl
end
section Braided
variable [BraidedCategory C]
instance fullBraidedSubcategory : BraidedCategory (FullSubcategory P) :=
  braidedCategoryOfFaithful (fullSubcategoryInclusion P)
    (fun X Y =>
      ‚ü®(Œ≤_ X.1 Y.1).hom, (Œ≤_ X.1 Y.1).inv, (Œ≤_ X.1 Y.1).hom_inv_id, (Œ≤_ X.1 Y.1).inv_hom_id‚ü©)
    fun X Y => by aesop_cat
instance : (fullSubcategoryInclusion P).Braided where
variable {P}
instance {P' : C ‚Üí Prop} [MonoidalPredicate P'] (h : ‚àÄ ‚¶ÉX‚¶Ñ, P X ‚Üí P' X) :
    (FullSubcategory.map h).Braided where
end Braided
section Symmetric
variable [SymmetricCategory C]
instance fullSymmetricSubcategory : SymmetricCategory (FullSubcategory P) :=
  symmetricCategoryOfFaithful (fullSubcategoryInclusion P)
end Symmetric
section Closed
variable [MonoidalClosed C]
class ClosedPredicate : Prop where
  prop_ihom : ‚àÄ {X Y}, P X ‚Üí P Y ‚Üí P ((ihom X).obj Y) := by aesop_cat
open ClosedPredicate
variable [ClosedPredicate P]
instance fullMonoidalClosedSubcategory : MonoidalClosed (FullSubcategory P) where
  closed X :=
    { rightAdj := FullSubcategory.lift P (fullSubcategoryInclusion P ‚ãô ihom X.1)
        fun Y => prop_ihom X.2 Y.2
      adj :=
        { unit :=
          { app := fun Y => (ihom.coev X.1).app Y.1
            naturality := fun _ _ f => ihom.coev_naturality X.1 f }
          counit :=
          { app := fun Y => (ihom.ev X.1).app Y.1
            naturality := fun _ _ f => ihom.ev_naturality X.1 f }
          left_triangle_components := fun X ‚Ü¶
            by simp [FullSubcategory.comp_def, FullSubcategory.id_def]
          right_triangle_components := fun Y ‚Ü¶
            by simp [FullSubcategory.comp_def, FullSubcategory.id_def] } }
@[simp]
theorem fullMonoidalClosedSubcategory_ihom_obj (X Y : FullSubcategory P) :
    ((ihom X).obj Y).obj = (ihom X.obj).obj Y.obj :=
  rfl
@[simp]
theorem fullMonoidalClosedSubcategory_ihom_map (X : FullSubcategory P) {Y Z : FullSubcategory P}
    (f : Y ‚ü∂ Z) : (ihom X).map f = (ihom X.obj).map f :=
  rfl
end Closed
end MonoidalCategory
end CategoryTheory