import Mathlib.Algebra.Category.ModuleCat.ChangeOfRings
import Mathlib.Algebra.Category.ModuleCat.Presheaf
universe v v' u u'
open CategoryTheory
namespace PresheafOfModules
variable {C : Type u'} [Category.{v'} C] {R R' : C·µí·µñ ‚•§ RingCat.{u}}
@[simps]
noncomputable def restrictScalarsObj (M' : PresheafOfModules.{v} R') (Œ± : R ‚ü∂ R') :
    PresheafOfModules R where
  obj := fun X ‚Ü¶ (ModuleCat.restrictScalars (Œ±.app X)).obj (M'.obj X)
  map := fun {X Y} f ‚Ü¶
    { toFun := M'.map f
      map_add' := map_add _
      map_smul' := fun r x ‚Ü¶ (M'.map_smul f (Œ±.app _ r) x).trans (by
        have eq := RingHom.congr_fun (Œ±.naturality f) r
        dsimp at eq
        rw [‚Üê eq]
        rfl ) }
@[simps]
noncomputable def restrictScalars (Œ± : R ‚ü∂ R') :
    PresheafOfModules.{v} R' ‚•§ PresheafOfModules.{v} R where
  obj M' := M'.restrictScalarsObj Œ±
  map œÜ' :=
    { app := fun X ‚Ü¶ (ModuleCat.restrictScalars (Œ±.app X)).map (Hom.app œÜ' X)
      naturality := fun {X Y} f ‚Ü¶ by
        ext x
        exact naturality_apply œÜ' f x }
instance (Œ± : R ‚ü∂ R') : (restrictScalars.{v} Œ±).Additive where
instance : (restrictScalars (ùüô R)).Full := inferInstanceAs (ùü≠ _).Full
instance (Œ± : R ‚ü∂ R') : (restrictScalars Œ±).Faithful where
  map_injective h := (toPresheaf R').map_injective ((toPresheaf R).congr_map h)
noncomputable def restrictScalarsCompToPresheaf (Œ± : R ‚ü∂ R') :
    restrictScalars.{v} Œ± ‚ãô toPresheaf R ‚âÖ toPresheaf R' := Iso.refl _
end PresheafOfModules