import Mathlib.NumberTheory.LSeries.HurwitzZeta
import Mathlib.Analysis.PSeriesComplex
open CharZero MeasureTheory Set Filter Asymptotics TopologicalSpace Real Asymptotics
  Classical HurwitzZeta
open Complex hiding exp norm_eq_abs abs_of_nonneg abs_two continuous_exp
open scoped Topology Real Nat
noncomputable section
def completedRiemannZeta‚ÇÄ (s : ‚ÑÇ) : ‚ÑÇ := completedHurwitzZetaEven‚ÇÄ 0 s
def completedRiemannZeta (s : ‚ÑÇ) : ‚ÑÇ := completedHurwitzZetaEven 0 s
lemma HurwitzZeta.completedHurwitzZetaEven_zero (s : ‚ÑÇ) :
    completedHurwitzZetaEven 0 s = completedRiemannZeta s := rfl
lemma HurwitzZeta.completedHurwitzZetaEven‚ÇÄ_zero (s : ‚ÑÇ) :
    completedHurwitzZetaEven‚ÇÄ 0 s = completedRiemannZeta‚ÇÄ s := rfl
lemma HurwitzZeta.completedCosZeta_zero (s : ‚ÑÇ) :
    completedCosZeta 0 s = completedRiemannZeta s := by
  rw [completedRiemannZeta, completedHurwitzZetaEven, completedCosZeta, hurwitzEvenFEPair_zero_symm]
lemma HurwitzZeta.completedCosZeta‚ÇÄ_zero (s : ‚ÑÇ) :
    completedCosZeta‚ÇÄ 0 s = completedRiemannZeta‚ÇÄ s := by
  rw [completedRiemannZeta‚ÇÄ, completedHurwitzZetaEven‚ÇÄ, completedCosZeta‚ÇÄ,
    hurwitzEvenFEPair_zero_symm]
lemma completedRiemannZeta_eq (s : ‚ÑÇ) :
    completedRiemannZeta s = completedRiemannZeta‚ÇÄ s - 1 / s - 1 / (1 - s) := by
  simp_rw [completedRiemannZeta, completedRiemannZeta‚ÇÄ, completedHurwitzZetaEven_eq, if_true]
theorem differentiable_completedZeta‚ÇÄ : Differentiable ‚ÑÇ completedRiemannZeta‚ÇÄ :=
  differentiable_completedHurwitzZetaEven‚ÇÄ 0
theorem differentiableAt_completedZeta {s : ‚ÑÇ} (hs : s ‚â† 0) (hs' : s ‚â† 1) :
    DifferentiableAt ‚ÑÇ completedRiemannZeta s :=
  differentiableAt_completedHurwitzZetaEven 0 (Or.inl hs) hs'
theorem completedRiemannZeta‚ÇÄ_one_sub (s : ‚ÑÇ) :
    completedRiemannZeta‚ÇÄ (1 - s) = completedRiemannZeta‚ÇÄ s := by
  rw [‚Üê completedHurwitzZetaEven‚ÇÄ_zero, ‚Üê completedCosZeta‚ÇÄ_zero, completedHurwitzZetaEven‚ÇÄ_one_sub]
theorem completedRiemannZeta_one_sub (s : ‚ÑÇ) :
    completedRiemannZeta (1 - s) = completedRiemannZeta s := by
  rw [‚Üê completedHurwitzZetaEven_zero, ‚Üê completedCosZeta_zero, completedHurwitzZetaEven_one_sub]
lemma completedRiemannZeta_residue_one :
    Tendsto (fun s ‚Ü¶ (s - 1) * completedRiemannZeta s) (ùìù[‚â†] 1) (ùìù 1) :=
  completedHurwitzZetaEven_residue_one 0
def riemannZeta := hurwitzZetaEven 0
lemma HurwitzZeta.hurwitzZetaEven_zero : hurwitzZetaEven 0 = riemannZeta := rfl
lemma HurwitzZeta.cosZeta_zero : cosZeta 0 = riemannZeta := by
  simp_rw [cosZeta, riemannZeta, hurwitzZetaEven, if_true, completedHurwitzZetaEven_zero,
    completedCosZeta_zero]
lemma HurwitzZeta.hurwitzZeta_zero : hurwitzZeta 0 = riemannZeta := by
  ext1 s
  simpa [hurwitzZeta, hurwitzZetaEven_zero] using hurwitzZetaOdd_neg 0 s
lemma HurwitzZeta.expZeta_zero : expZeta 0 = riemannZeta := by
  ext1 s
  rw [expZeta, cosZeta_zero, add_right_eq_self, mul_eq_zero, eq_false_intro I_ne_zero, false_or,
    ‚Üê eq_neg_self_iff, ‚Üê sinZeta_neg, neg_zero]
theorem differentiableAt_riemannZeta {s : ‚ÑÇ} (hs' : s ‚â† 1) : DifferentiableAt ‚ÑÇ riemannZeta s :=
  differentiableAt_hurwitzZetaEven _ hs'
theorem riemannZeta_zero : riemannZeta 0 = -1 / 2 := by
  simp_rw [riemannZeta, hurwitzZetaEven, Function.update_same, if_true]
lemma riemannZeta_def_of_ne_zero {s : ‚ÑÇ} (hs : s ‚â† 0) :
    riemannZeta s = completedRiemannZeta s / Gamma‚Ñù s := by
  rw [riemannZeta, hurwitzZetaEven, Function.update_noteq hs, completedHurwitzZetaEven_zero]
theorem riemannZeta_neg_two_mul_nat_add_one (n : ‚Ñï) : riemannZeta (-2 * (n + 1)) = 0 :=
  hurwitzZetaEven_neg_two_mul_nat_add_one 0 n
theorem riemannZeta_one_sub {s : ‚ÑÇ} (hs : ‚àÄ n : ‚Ñï, s ‚â† -n) (hs' : s ‚â† 1) :
    riemannZeta (1 - s) = 2 * (2 * œÄ) ^ (-s) * Gamma s * cos (œÄ * s / 2) * riemannZeta s := by
  rw [riemannZeta, hurwitzZetaEven_one_sub 0 hs (Or.inr hs'), cosZeta_zero, hurwitzZetaEven_zero]
def RiemannHypothesis : Prop :=
  ‚àÄ (s : ‚ÑÇ) (_ : riemannZeta s = 0) (_ : ¬¨‚àÉ n : ‚Ñï, s = -2 * (n + 1)) (_ : s ‚â† 1), s.re = 1 / 2
theorem completedZeta_eq_tsum_of_one_lt_re {s : ‚ÑÇ} (hs : 1 < re s) :
    completedRiemannZeta s =
      (œÄ : ‚ÑÇ) ^ (-s / 2) * Gamma (s / 2) * ‚àë' n : ‚Ñï, 1 / (n : ‚ÑÇ) ^ s := by
  have := (hasSum_nat_completedCosZeta 0 hs).tsum_eq.symm
  simp only [QuotientAddGroup.mk_zero, completedCosZeta_zero] at this
  simp only [this, Gamma‚Ñù_def, mul_zero, zero_mul, Real.cos_zero, ofReal_one, mul_one, mul_one_div,
    ‚Üê tsum_mul_left]
  congr 1 with n
  split_ifs with h
  ¬∑ simp only [h, Nat.cast_zero, zero_cpow (Complex.ne_zero_of_one_lt_re hs), div_zero]
  ¬∑ rfl
theorem zeta_eq_tsum_one_div_nat_cpow {s : ‚ÑÇ} (hs : 1 < re s) :
    riemannZeta s = ‚àë' n : ‚Ñï, 1 / (n : ‚ÑÇ) ^ s := by
  simpa only [QuotientAddGroup.mk_zero, cosZeta_zero, mul_zero, zero_mul, Real.cos_zero,
    ofReal_one] using (hasSum_nat_cosZeta 0 hs).tsum_eq.symm
theorem zeta_eq_tsum_one_div_nat_add_one_cpow {s : ‚ÑÇ} (hs : 1 < re s) :
    riemannZeta s = ‚àë' n : ‚Ñï, 1 / (n + 1 : ‚ÑÇ) ^ s := by
  have := zeta_eq_tsum_one_div_nat_cpow hs
  rw [tsum_eq_zero_add] at this
  ¬∑ simpa [zero_cpow (Complex.ne_zero_of_one_lt_re hs)]
  ¬∑ rwa [Complex.summable_one_div_nat_cpow]
theorem zeta_nat_eq_tsum_of_gt_one {k : ‚Ñï} (hk : 1 < k) :
    riemannZeta k = ‚àë' n : ‚Ñï, 1 / (n : ‚ÑÇ) ^ k := by
  simp only [zeta_eq_tsum_one_div_nat_cpow
      (by rwa [‚Üê ofReal_natCast, ofReal_re, ‚Üê Nat.cast_one, Nat.cast_lt] : 1 < re k),
    cpow_natCast]
lemma riemannZeta_residue_one : Tendsto (fun s ‚Ü¶ (s - 1) * riemannZeta s) (ùìù[‚â†] 1) (ùìù 1) := by
  exact hurwitzZetaEven_residue_one 0
theorem tendsto_sub_mul_tsum_nat_cpow :
    Tendsto (fun s : ‚ÑÇ ‚Ü¶ (s - 1) * ‚àë' (n : ‚Ñï), 1 / (n : ‚ÑÇ) ^ s) (ùìù[{s | 1 < re s}] 1) (ùìù 1) := by
  refine (tendsto_nhdsWithin_mono_left ?_ riemannZeta_residue_one).congr' ?_
  ¬∑ simp only [subset_compl_singleton_iff, mem_setOf_eq, one_re, not_lt, le_refl]
  ¬∑ filter_upwards [eventually_mem_nhdsWithin] with s hs using
      congr_arg _ <| zeta_eq_tsum_one_div_nat_cpow hs
theorem tendsto_sub_mul_tsum_nat_rpow :
    Tendsto (fun s : ‚Ñù ‚Ü¶ (s - 1) * ‚àë' (n : ‚Ñï), 1 / (n : ‚Ñù) ^ s) (ùìù[>] 1) (ùìù 1) := by
  rw [‚Üê tendsto_ofReal_iff, ofReal_one]
  have : Tendsto (fun s : ‚Ñù ‚Ü¶ (s : ‚ÑÇ)) (ùìù[>] 1) (ùìù[{s | 1 < re s}] 1) :=
    continuous_ofReal.continuousWithinAt.tendsto_nhdsWithin (fun _ _ ‚Ü¶ by aesop)
  apply (tendsto_sub_mul_tsum_nat_cpow.comp this).congr fun s ‚Ü¶ ?_
  simp only [one_div, Function.comp_apply, ofReal_mul, ofReal_sub, ofReal_one, ofReal_tsum,
    ofReal_inv, ofReal_cpow (Nat.cast_nonneg _), ofReal_natCast]
section aliases
@[deprecated (since := "2024-05-27")]
noncomputable alias riemannCompletedZeta‚ÇÄ := completedRiemannZeta‚ÇÄ
@[deprecated (since := "2024-05-27")]
noncomputable alias riemannCompletedZeta := completedRiemannZeta
@[deprecated (since := "2024-05-27")]
alias riemannCompletedZeta‚ÇÄ_one_sub := completedRiemannZeta‚ÇÄ_one_sub
@[deprecated (since := "2024-05-27")]
alias riemannCompletedZeta_one_sub := completedRiemannZeta_one_sub
@[deprecated (since := "2024-05-27")]
alias riemannCompletedZeta_residue_one := completedRiemannZeta_residue_one
end aliases