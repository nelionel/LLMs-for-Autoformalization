import Mathlib.Analysis.ODE.Gronwall
import Mathlib.Analysis.ODE.PicardLindelof
import Mathlib.Geometry.Manifold.IntegralCurve.Transform
import Mathlib.Geometry.Manifold.InteriorBoundary
open scoped Topology
open Function Set
variable
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {H : Type*} [TopologicalSpace H] {I : ModelWithCorners ‚Ñù E H}
  {M : Type*} [TopologicalSpace M] [ChartedSpace H M] [SmoothManifoldWithCorners I M]
  {Œ≥ Œ≥' : ‚Ñù ‚Üí M} {v : (x : M) ‚Üí TangentSpace I x} {s s' : Set ‚Ñù} (t‚ÇÄ : ‚Ñù) {x‚ÇÄ : M}
theorem exists_isIntegralCurveAt_of_contMDiffAt [CompleteSpace E]
    (hv : ContMDiffAt I I.tangent 1 (fun x ‚Ü¶ (‚ü®x, v x‚ü© : TangentBundle I M)) x‚ÇÄ)
    (hx : I.IsInteriorPoint x‚ÇÄ) :
    ‚àÉ Œ≥ : ‚Ñù ‚Üí M, Œ≥ t‚ÇÄ = x‚ÇÄ ‚àß IsIntegralCurveAt Œ≥ v t‚ÇÄ := by
  rw [contMDiffAt_iff] at hv
  obtain ‚ü®_, hv‚ü© := hv
  obtain ‚ü®f, hf1, hf2‚ü© := exists_forall_hasDerivAt_Ioo_eq_of_contDiffAt t‚ÇÄ
    (hv.contDiffAt (range_mem_nhds_isInteriorPoint hx)).snd
  simp_rw [‚Üê Real.ball_eq_Ioo, ‚Üê Metric.eventually_nhds_iff_ball] at hf2
  have ‚ü®a, ha, hf2'‚ü© := Metric.eventually_nhds_iff_ball.mp hf2
  have hcont := (hf2' t‚ÇÄ (Metric.mem_ball_self ha)).continuousAt
  rw [continuousAt_def, hf1] at hcont
  have hnhds : f ‚Åª¬π' (interior (extChartAt I x‚ÇÄ).target) ‚àà ùìù t‚ÇÄ :=
    hcont _ (isOpen_interior.mem_nhds ((I.isInteriorPoint_iff).mp hx))
  rw [‚Üê eventually_mem_nhds_iff] at hnhds
  obtain ‚ü®s, hs, haux‚ü© := (hf2.and hnhds).exists_mem
  refine ‚ü®(extChartAt I x‚ÇÄ).symm ‚àò f,
    Eq.symm (by rw [Function.comp_apply, hf1, PartialEquiv.left_inv _ (mem_extChartAt_source ..)]),
    isIntegralCurveAt_iff.mpr ‚ü®s, hs, ?_‚ü©‚ü©
  intros t ht
  let x‚Çú : M := (extChartAt I x‚ÇÄ).symm (f t) 
  have h : HasDerivAt f (x := t) <| fderivWithin ‚Ñù (extChartAt I x‚ÇÄ ‚àò (extChartAt I x‚Çú).symm)
    (range I) (extChartAt I x‚Çú x‚Çú) (v x‚Çú) := (haux t ht).1
  rw [‚Üê tangentCoordChange_def] at h
  have hf3 := mem_preimage.mp <| mem_of_mem_nhds (haux t ht).2
  have hf3' := mem_of_mem_of_subset hf3 interior_subset
  have hft1 := mem_preimage.mp <|
    mem_of_mem_of_subset hf3' (extChartAt I x‚ÇÄ).target_subset_preimage_source
  have hft2 := mem_extChartAt_source (I := I) x‚Çú
  refine ‚ü®(continuousAt_extChartAt_symm'' hf3').comp h.continuousAt,
    HasDerivWithinAt.hasFDerivWithinAt ?_‚ü©
  simp only [mfld_simps, hasDerivWithinAt_univ]
  show HasDerivAt ((extChartAt I x‚Çú ‚àò (extChartAt I x‚ÇÄ).symm) ‚àò f) (v x‚Çú) t
  rw [‚Üê tangentCoordChange_self (I := I) (x := x‚Çú) (z := x‚Çú) (v := v x‚Çú) hft2,
    ‚Üê tangentCoordChange_comp (x := x‚ÇÄ) ‚ü®‚ü®hft2, hft1‚ü©, hft2‚ü©]
  apply HasFDerivAt.comp_hasDerivAt _ _ h
  apply HasFDerivWithinAt.hasFDerivAt (s := range I) _ <|
    mem_nhds_iff.mpr ‚ü®interior (extChartAt I x‚ÇÄ).target,
      subset_trans interior_subset (extChartAt_target_subset_range ..),
      isOpen_interior, hf3‚ü©
  rw [‚Üê (extChartAt I x‚ÇÄ).right_inv hf3']
  exact hasFDerivWithinAt_tangentCoordChange ‚ü®hft1, hft2‚ü©
lemma exists_isIntegralCurveAt_of_contMDiffAt_boundaryless
    [CompleteSpace E] [BoundarylessManifold I M]
    (hv : ContMDiffAt I I.tangent 1 (fun x ‚Ü¶ (‚ü®x, v x‚ü© : TangentBundle I M)) x‚ÇÄ) :
    ‚àÉ Œ≥ : ‚Ñù ‚Üí M, Œ≥ t‚ÇÄ = x‚ÇÄ ‚àß IsIntegralCurveAt Œ≥ v t‚ÇÄ :=
  exists_isIntegralCurveAt_of_contMDiffAt t‚ÇÄ hv BoundarylessManifold.isInteriorPoint
variable {t‚ÇÄ}
theorem isIntegralCurveAt_eventuallyEq_of_contMDiffAt (hŒ≥t‚ÇÄ : I.IsInteriorPoint (Œ≥ t‚ÇÄ))
    (hv : ContMDiffAt I I.tangent 1 (fun x ‚Ü¶ (‚ü®x, v x‚ü© : TangentBundle I M)) (Œ≥ t‚ÇÄ))
    (hŒ≥ : IsIntegralCurveAt Œ≥ v t‚ÇÄ) (hŒ≥' : IsIntegralCurveAt Œ≥' v t‚ÇÄ) (h : Œ≥ t‚ÇÄ = Œ≥' t‚ÇÄ) :
    Œ≥ =·∂†[ùìù t‚ÇÄ] Œ≥' := by
  set v' : E ‚Üí E := fun x ‚Ü¶
    tangentCoordChange I ((extChartAt I (Œ≥ t‚ÇÄ)).symm x) (Œ≥ t‚ÇÄ) ((extChartAt I (Œ≥ t‚ÇÄ)).symm x)
      (v ((extChartAt I (Œ≥ t‚ÇÄ)).symm x)) with hv'
  rw [contMDiffAt_iff] at hv
  obtain ‚ü®_, hv‚ü© := hv
  obtain ‚ü®K, s, hs, hlip‚ü© : ‚àÉ K, ‚àÉ s ‚àà ùìù _, LipschitzOnWith K v' s :=
    (hv.contDiffAt (range_mem_nhds_isInteriorPoint hŒ≥t‚ÇÄ)).snd.exists_lipschitzOnWith
  have hlip (t : ‚Ñù) : LipschitzOnWith K ((fun _ ‚Ü¶ v') t) ((fun _ ‚Ü¶ s) t) := hlip
  have hsrc {g} (hg : IsIntegralCurveAt g v t‚ÇÄ) :
    ‚àÄ·∂† t in ùìù t‚ÇÄ, g ‚Åª¬π' (extChartAt I (g t‚ÇÄ)).source ‚àà ùìù t := eventually_mem_nhds_iff.mpr <|
      continuousAt_def.mp hg.continuousAt _ <| extChartAt_source_mem_nhds (g t‚ÇÄ)
  have hmem {g : ‚Ñù ‚Üí M} {t} (ht : g ‚Åª¬π' (extChartAt I (g t‚ÇÄ)).source ‚àà ùìù t) :
    g t ‚àà (extChartAt I (g t‚ÇÄ)).source := mem_preimage.mp <| mem_of_mem_nhds ht
  have hdrv {g} (hg : IsIntegralCurveAt g v t‚ÇÄ) (h' : Œ≥ t‚ÇÄ = g t‚ÇÄ) : ‚àÄ·∂† t in ùìù t‚ÇÄ,
      HasDerivAt ((extChartAt I (g t‚ÇÄ)) ‚àò g) ((fun _ ‚Ü¶ v') t (((extChartAt I (g t‚ÇÄ)) ‚àò g) t)) t ‚àß
      ((extChartAt I (g t‚ÇÄ)) ‚àò g) t ‚àà (fun _ ‚Ü¶ s) t := by
    apply Filter.Eventually.and
    ¬∑ apply (hsrc hg |>.and hg.eventually_hasDerivAt).mono
      rintro t ‚ü®ht1, ht2‚ü©
      rw [hv', h']
      apply ht2.congr_deriv
      congr <;>
      rw [Function.comp_apply, PartialEquiv.left_inv _ (hmem ht1)]
    ¬∑ apply ((continuousAt_extChartAt (g t‚ÇÄ)).comp hg.continuousAt).preimage_mem_nhds
      rw [Function.comp_apply, ‚Üê h']
      exact hs
  have heq {g} (hg : IsIntegralCurveAt g v t‚ÇÄ) :
    g =·∂†[ùìù t‚ÇÄ] (extChartAt I (g t‚ÇÄ)).symm ‚àò ‚Üë(extChartAt I (g t‚ÇÄ)) ‚àò g := by
    apply (hsrc hg).mono
    intros t ht
    rw [Function.comp_apply, Function.comp_apply, PartialEquiv.left_inv _ (hmem ht)]
  suffices (extChartAt I (Œ≥ t‚ÇÄ)) ‚àò Œ≥ =·∂†[ùìù t‚ÇÄ] (extChartAt I (Œ≥' t‚ÇÄ)) ‚àò Œ≥' from
    (heq hŒ≥).trans <| (this.fun_comp (extChartAt I (Œ≥ t‚ÇÄ)).symm).trans (h ‚ñ∏ (heq hŒ≥').symm)
  exact ODE_solution_unique_of_eventually hlip
    (hdrv hŒ≥ rfl) (hdrv hŒ≥' h) (by rw [Function.comp_apply, Function.comp_apply, h])
theorem isIntegralCurveAt_eventuallyEq_of_contMDiffAt_boundaryless [BoundarylessManifold I M]
    (hv : ContMDiffAt I I.tangent 1 (fun x ‚Ü¶ (‚ü®x, v x‚ü© : TangentBundle I M)) (Œ≥ t‚ÇÄ))
    (hŒ≥ : IsIntegralCurveAt Œ≥ v t‚ÇÄ) (hŒ≥' : IsIntegralCurveAt Œ≥' v t‚ÇÄ) (h : Œ≥ t‚ÇÄ = Œ≥' t‚ÇÄ) :
    Œ≥ =·∂†[ùìù t‚ÇÄ] Œ≥' :=
  isIntegralCurveAt_eventuallyEq_of_contMDiffAt BoundarylessManifold.isInteriorPoint hv hŒ≥ hŒ≥' h
variable [T2Space M] {a b : ‚Ñù}
theorem isIntegralCurveOn_Ioo_eqOn_of_contMDiff (ht‚ÇÄ : t‚ÇÄ ‚àà Ioo a b)
    (hŒ≥t : ‚àÄ t ‚àà Ioo a b, I.IsInteriorPoint (Œ≥ t))
    (hv : ContMDiff I I.tangent 1 (fun x ‚Ü¶ (‚ü®x, v x‚ü© : TangentBundle I M)))
    (hŒ≥ : IsIntegralCurveOn Œ≥ v (Ioo a b)) (hŒ≥' : IsIntegralCurveOn Œ≥' v (Ioo a b))
    (h : Œ≥ t‚ÇÄ = Œ≥' t‚ÇÄ) : EqOn Œ≥ Œ≥' (Ioo a b) := by
  set s := {t | Œ≥ t = Œ≥' t} ‚à© Ioo a b with hs
  suffices hsub : Ioo a b ‚äÜ s from fun t ht ‚Ü¶ mem_setOf.mp ((subset_def ‚ñ∏ hsub) t ht).1
  apply isPreconnected_Ioo.subset_of_closure_inter_subset (s := Ioo a b) (u := s) _
    ‚ü®t‚ÇÄ, ‚ü®ht‚ÇÄ, ‚ü®h, ht‚ÇÄ‚ü©‚ü©‚ü©
  ¬∑ 
    rw [hs, inter_comm, ‚Üê Subtype.image_preimage_val, inter_comm, ‚Üê Subtype.image_preimage_val,
      image_subset_image_iff Subtype.val_injective, preimage_setOf_eq]
    intros t ht
    rw [mem_preimage, ‚Üê closure_subtype] at ht
    revert ht t
    apply IsClosed.closure_subset (isClosed_eq _ _)
    ¬∑ rw [continuous_iff_continuousAt]
      rintro ‚ü®_, ht‚ü©
      apply ContinuousAt.comp _ continuousAt_subtype_val
      rw [Subtype.coe_mk]
      exact hŒ≥.continuousAt ht
    ¬∑ rw [continuous_iff_continuousAt]
      rintro ‚ü®_, ht‚ü©
      apply ContinuousAt.comp _ continuousAt_subtype_val
      rw [Subtype.coe_mk]
      exact hŒ≥'.continuousAt ht
  ¬∑ rw [isOpen_iff_mem_nhds]
    intro t‚ÇÅ ht‚ÇÅ
    have hmem := Ioo_mem_nhds ht‚ÇÅ.2.1 ht‚ÇÅ.2.2
    have heq : Œ≥ =·∂†[ùìù t‚ÇÅ] Œ≥' := isIntegralCurveAt_eventuallyEq_of_contMDiffAt
      (hŒ≥t _ ht‚ÇÅ.2) hv.contMDiffAt (hŒ≥.isIntegralCurveAt hmem) (hŒ≥'.isIntegralCurveAt hmem) ht‚ÇÅ.1
    apply (heq.and hmem).mono
    exact fun _ ht ‚Ü¶ ht
theorem isIntegralCurveOn_Ioo_eqOn_of_contMDiff_boundaryless [BoundarylessManifold I M]
    (ht‚ÇÄ : t‚ÇÄ ‚àà Ioo a b)
    (hv : ContMDiff I I.tangent 1 (fun x ‚Ü¶ (‚ü®x, v x‚ü© : TangentBundle I M)))
    (hŒ≥ : IsIntegralCurveOn Œ≥ v (Ioo a b)) (hŒ≥' : IsIntegralCurveOn Œ≥' v (Ioo a b))
    (h : Œ≥ t‚ÇÄ = Œ≥' t‚ÇÄ) : EqOn Œ≥ Œ≥' (Ioo a b) :=
  isIntegralCurveOn_Ioo_eqOn_of_contMDiff
    ht‚ÇÄ (fun _ _ ‚Ü¶ BoundarylessManifold.isInteriorPoint) hv hŒ≥ hŒ≥' h
theorem isIntegralCurve_eq_of_contMDiff (hŒ≥t : ‚àÄ t, I.IsInteriorPoint (Œ≥ t))
    (hv : ContMDiff I I.tangent 1 (fun x ‚Ü¶ (‚ü®x, v x‚ü© : TangentBundle I M)))
    (hŒ≥ : IsIntegralCurve Œ≥ v) (hŒ≥' : IsIntegralCurve Œ≥' v) (h : Œ≥ t‚ÇÄ = Œ≥' t‚ÇÄ) : Œ≥ = Œ≥' := by
  ext t
  obtain ‚ü®T, ht‚ÇÄ, ht‚ü© : ‚àÉ T, t ‚àà Ioo (-T) T ‚àß t‚ÇÄ ‚àà Ioo (-T) T := by
    obtain ‚ü®T, hT‚ÇÅ, hT‚ÇÇ‚ü© := exists_abs_lt t
    obtain ‚ü®hT‚ÇÇ, hT‚ÇÉ‚ü© := abs_lt.mp hT‚ÇÇ
    obtain ‚ü®S, hS‚ÇÅ, hS‚ÇÇ‚ü© := exists_abs_lt t‚ÇÄ
    obtain ‚ü®hS‚ÇÇ, hS‚ÇÉ‚ü© := abs_lt.mp hS‚ÇÇ
    exact ‚ü®T + S, by constructor <;> constructor <;> linarith‚ü©
  exact isIntegralCurveOn_Ioo_eqOn_of_contMDiff ht (fun t _ ‚Ü¶ hŒ≥t t) hv
    ((hŒ≥.isIntegralCurveOn _).mono (subset_univ _))
    ((hŒ≥'.isIntegralCurveOn _).mono (subset_univ _)) h ht‚ÇÄ
theorem isIntegralCurve_Ioo_eq_of_contMDiff_boundaryless [BoundarylessManifold I M]
    (hv : ContMDiff I I.tangent 1 (fun x ‚Ü¶ (‚ü®x, v x‚ü© : TangentBundle I M)))
    (hŒ≥ : IsIntegralCurve Œ≥ v) (hŒ≥' : IsIntegralCurve Œ≥' v) (h : Œ≥ t‚ÇÄ = Œ≥' t‚ÇÄ) : Œ≥ = Œ≥' :=
  isIntegralCurve_eq_of_contMDiff (fun _ ‚Ü¶ BoundarylessManifold.isInteriorPoint) hv hŒ≥ hŒ≥' h
lemma IsIntegralCurve.periodic_of_eq [BoundarylessManifold I M]
    (hŒ≥ : IsIntegralCurve Œ≥ v)
    (hv : ContMDiff I I.tangent 1 (fun x ‚Ü¶ (‚ü®x, v x‚ü© : TangentBundle I M)))
    (heq : Œ≥ a = Œ≥ b) : Periodic Œ≥ (a - b) := by
  intro t
  apply congrFun <|
    isIntegralCurve_Ioo_eq_of_contMDiff_boundaryless (t‚ÇÄ := b) hv (hŒ≥.comp_add _) hŒ≥ _
  rw [comp_apply, add_sub_cancel, heq]
lemma IsIntegralCurve.periodic_xor_injective [BoundarylessManifold I M]
    (hŒ≥ : IsIntegralCurve Œ≥ v)
    (hv : ContMDiff I I.tangent 1 (fun x ‚Ü¶ (‚ü®x, v x‚ü© : TangentBundle I M))) :
    Xor' (‚àÉ T > 0, Periodic Œ≥ T) (Injective Œ≥) := by
  rw [xor_iff_iff_not]
  refine ‚ü®fun ‚ü®T, hT, hf‚ü© ‚Ü¶ hf.not_injective (ne_of_gt hT), ?_‚ü©
  intro h
  rw [Injective] at h
  push_neg at h
  obtain ‚ü®a, b, heq, hne‚ü© := h
  refine ‚ü®|a - b|, ?_, ?_‚ü©
  ¬∑ rw [gt_iff_lt, abs_pos, sub_ne_zero]
    exact hne
  ¬∑ by_cases hab : a - b < 0
    ¬∑ rw [abs_of_neg hab, neg_sub]
      exact hŒ≥.periodic_of_eq hv heq.symm
    ¬∑ rw [not_lt] at hab
      rw [abs_of_nonneg hab]
      exact hŒ≥.periodic_of_eq hv heq