import Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv
import Mathlib.Data.Complex.FiniteDimensional
import Mathlib.NumberTheory.EulerProduct.Basic
open Complex
open Topology in
lemma Summable.clog_one_sub {Œ±  : Type*} {f : Œ± ‚Üí ‚ÑÇ} (hsum : Summable f) :
    Summable fun n ‚Ü¶ log (1 - f n) := by
  have hg : DifferentiableAt ‚ÑÇ (fun z ‚Ü¶ log (1 - z)) 0 := by
    have : 1 - 0 ‚àà slitPlane := (sub_zero (1 : ‚ÑÇ)).symm ‚ñ∏ one_mem_slitPlane
    fun_prop (disch := assumption)
  have : (fun z ‚Ü¶ log (1 - z)) =O[ùìù 0] id := by
    simpa only [sub_zero, log_one] using hg.isBigO_sub
  exact this.comp_summable hsum
namespace EulerProduct
theorem exp_tsum_primes_log_eq_tsum {f : ‚Ñï ‚Üí*‚ÇÄ ‚ÑÇ} (hsum : Summable (‚Äñf ¬∑‚Äñ)) :
    exp (‚àë' p : Nat.Primes, -log (1 - f p)) = ‚àë' n : ‚Ñï, f n := by
  have hs {p : ‚Ñï} (hp : 1 < p) : ‚Äñf p‚Äñ < 1 := hsum.of_norm.norm_lt_one (f := f.toMonoidHom) hp
  have hp (p : Nat.Primes) : 1 - f p ‚â† 0 :=
    fun h ‚Ü¶ (norm_one (Œ± := ‚ÑÇ) ‚ñ∏ (sub_eq_zero.mp h) ‚ñ∏ hs p.prop.one_lt).false
  have H := hsum.of_norm.clog_one_sub.neg.subtype {p | p.Prime} |>.hasSum.cexp.tprod_eq
  simp only [Set.coe_setOf, Set.mem_setOf_eq, Function.comp_apply, exp_neg, exp_log (hp _)] at H
  exact H.symm.trans <| eulerProduct_completely_multiplicative_tprod hsum
end EulerProduct