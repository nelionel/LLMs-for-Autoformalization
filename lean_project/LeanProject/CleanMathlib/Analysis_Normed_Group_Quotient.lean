import Mathlib.Analysis.Normed.Module.Basic
import Mathlib.Analysis.Normed.Group.Hom
import Mathlib.RingTheory.Ideal.Quotient.Operations
import Mathlib.Topology.MetricSpace.HausdorffDistance
noncomputable section
open QuotientAddGroup Metric Set Topology NNReal
variable {M N : Type*} [SeminormedAddCommGroup M] [SeminormedAddCommGroup N]
noncomputable instance normOnQuotient (S : AddSubgroup M) : Norm (M ‚ß∏ S) where
  norm x := sInf (norm '' { m | mk' S m = x })
theorem AddSubgroup.quotient_norm_eq {S : AddSubgroup M} (x : M ‚ß∏ S) :
    ‚Äñx‚Äñ = sInf (norm '' { m : M | (m : M ‚ß∏ S) = x }) :=
  rfl
theorem QuotientAddGroup.norm_eq_infDist {S : AddSubgroup M} (x : M ‚ß∏ S) :
    ‚Äñx‚Äñ = infDist 0 { m : M | (m : M ‚ß∏ S) = x } := by
  simp only [AddSubgroup.quotient_norm_eq, infDist_eq_iInf, sInf_image', dist_zero_left]
theorem QuotientAddGroup.norm_mk {S : AddSubgroup M} (x : M) :
    ‚Äñ(x : M ‚ß∏ S)‚Äñ = infDist x S := by
  rw [norm_eq_infDist, ‚Üê infDist_image (IsometryEquiv.subLeft x).isometry,
    IsometryEquiv.subLeft_apply, sub_zero, ‚Üê IsometryEquiv.preimage_symm]
  congr 1 with y
  simp only [mem_preimage, IsometryEquiv.subLeft_symm_apply, mem_setOf_eq, QuotientAddGroup.eq,
    neg_add, neg_neg, neg_add_cancel_right, SetLike.mem_coe]
theorem image_norm_nonempty {S : AddSubgroup M} (x : M ‚ß∏ S) :
    (norm '' { m | mk' S m = x }).Nonempty :=
  .image _ <| Quot.exists_rep x
theorem bddBelow_image_norm (s : Set M) : BddBelow (norm '' s) :=
  ‚ü®0, forall_mem_image.2 fun _ _ ‚Ü¶ norm_nonneg _‚ü©
theorem isGLB_quotient_norm {S : AddSubgroup M} (x : M ‚ß∏ S) :
    IsGLB (norm '' { m | mk' S m = x }) (‚Äñx‚Äñ) :=
  isGLB_csInf (image_norm_nonempty x) (bddBelow_image_norm _)
theorem quotient_norm_neg {S : AddSubgroup M} (x : M ‚ß∏ S) : ‚Äñ-x‚Äñ = ‚Äñx‚Äñ := by
  simp only [AddSubgroup.quotient_norm_eq]
  congr 1 with r
  constructor <;> { rintro ‚ü®m, hm, rfl‚ü©; use -m; simpa [neg_eq_iff_eq_neg] using hm }
theorem quotient_norm_sub_rev {S : AddSubgroup M} (x y : M ‚ß∏ S) : ‚Äñx - y‚Äñ = ‚Äñy - x‚Äñ := by
  rw [‚Üê neg_sub, quotient_norm_neg]
theorem quotient_norm_mk_le (S : AddSubgroup M) (m : M) : ‚Äñmk' S m‚Äñ ‚â§ ‚Äñm‚Äñ :=
  csInf_le (bddBelow_image_norm _) <| Set.mem_image_of_mem _ rfl
theorem quotient_norm_mk_le' (S : AddSubgroup M) (m : M) : ‚Äñ(m : M ‚ß∏ S)‚Äñ ‚â§ ‚Äñm‚Äñ :=
  quotient_norm_mk_le S m
theorem quotient_norm_mk_eq (S : AddSubgroup M) (m : M) :
    ‚Äñmk' S m‚Äñ = sInf ((‚Äñm + ¬∑‚Äñ) '' S) := by
  rw [mk'_apply, norm_mk, sInf_image', ‚Üê infDist_image isometry_neg, image_neg_eq_neg,
    neg_coe_set (H := S), infDist_eq_iInf]
  simp only [dist_eq_norm', sub_neg_eq_add, add_comm]
theorem quotient_norm_nonneg (S : AddSubgroup M) (x : M ‚ß∏ S) : 0 ‚â§ ‚Äñx‚Äñ :=
  Real.sInf_nonneg <| forall_mem_image.2 fun _ _ ‚Ü¶ norm_nonneg _
theorem norm_mk_nonneg (S : AddSubgroup M) (m : M) : 0 ‚â§ ‚Äñmk' S m‚Äñ :=
  quotient_norm_nonneg S _
theorem quotient_norm_eq_zero_iff (S : AddSubgroup M) (m : M) :
    ‚Äñmk' S m‚Äñ = 0 ‚Üî m ‚àà closure (S : Set M) := by
  rw [mk'_apply, norm_mk, ‚Üê mem_closure_iff_infDist_zero]
  exact ‚ü®0, S.zero_mem‚ü©
theorem QuotientAddGroup.norm_lt_iff {S : AddSubgroup M} {x : M ‚ß∏ S} {r : ‚Ñù} :
    ‚Äñx‚Äñ < r ‚Üî ‚àÉ m : M, ‚Üëm = x ‚àß ‚Äñm‚Äñ < r := by
  rw [isGLB_lt_iff (isGLB_quotient_norm _), exists_mem_image]
  rfl
theorem norm_mk_lt {S : AddSubgroup M} (x : M ‚ß∏ S) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ m : M, mk' S m = x ‚àß ‚Äñm‚Äñ < ‚Äñx‚Äñ + Œµ :=
  norm_lt_iff.1 <| lt_add_of_pos_right _ hŒµ
theorem norm_mk_lt' (S : AddSubgroup M) (m : M) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ s ‚àà S, ‚Äñm + s‚Äñ < ‚Äñmk' S m‚Äñ + Œµ := by
  obtain ‚ü®n : M, hn : mk' S n = mk' S m, hn' : ‚Äñn‚Äñ < ‚Äñmk' S m‚Äñ + Œµ‚ü© :=
    norm_mk_lt (QuotientAddGroup.mk' S m) hŒµ
  erw [eq_comm, QuotientAddGroup.eq] at hn
  use -m + n, hn
  rwa [add_neg_cancel_left]
theorem quotient_norm_add_le (S : AddSubgroup M) (x y : M ‚ß∏ S) : ‚Äñx + y‚Äñ ‚â§ ‚Äñx‚Äñ + ‚Äñy‚Äñ := by
  rcases And.intro (mk_surjective x) (mk_surjective y) with ‚ü®‚ü®x, rfl‚ü©, ‚ü®y, rfl‚ü©‚ü©
  simp only [‚Üê mk'_apply, ‚Üê map_add, quotient_norm_mk_eq, sInf_image']
  refine le_ciInf_add_ciInf fun a b ‚Ü¶ ?_
  refine ciInf_le_of_le ‚ü®0, forall_mem_range.2 fun _ ‚Ü¶ norm_nonneg _‚ü© (a + b) ?_
  exact (congr_arg norm (add_add_add_comm _ _ _ _)).trans_le (norm_add_le _ _)
theorem norm_mk_zero (S : AddSubgroup M) : ‚Äñ(0 : M ‚ß∏ S)‚Äñ = 0 := by
  erw [quotient_norm_eq_zero_iff]
  exact subset_closure S.zero_mem
theorem norm_mk_eq_zero (S : AddSubgroup M) (hS : IsClosed (S : Set M)) (m : M)
    (h : ‚Äñmk' S m‚Äñ = 0) : m ‚àà S := by rwa [quotient_norm_eq_zero_iff, hS.closure_eq] at h
theorem quotient_nhd_basis (S : AddSubgroup M) :
    (ùìù (0 : M ‚ß∏ S)).HasBasis (fun Œµ ‚Ü¶ 0 < Œµ) fun Œµ ‚Ü¶ { x | ‚Äñx‚Äñ < Œµ } := by
  have : ‚àÄ Œµ : ‚Ñù, mk '' ball (0 : M) Œµ = { x : M ‚ß∏ S | ‚Äñx‚Äñ < Œµ } := by
    refine fun Œµ ‚Ü¶ Set.ext <| forall_mk.2 fun x ‚Ü¶ ?_
    rw [ball_zero_eq, mem_setOf_eq, norm_lt_iff, mem_image]
    exact exists_congr fun _ ‚Ü¶ and_comm
  rw [‚Üê QuotientAddGroup.mk_zero, nhds_eq, ‚Üê funext this]
  exact .map _ Metric.nhds_basis_ball
noncomputable instance AddSubgroup.seminormedAddCommGroupQuotient (S : AddSubgroup M) :
    SeminormedAddCommGroup (M ‚ß∏ S) where
  dist x y := ‚Äñx - y‚Äñ
  dist_self x := by simp only [norm_mk_zero, sub_self]
  dist_comm := quotient_norm_sub_rev
  dist_triangle x y z := by
    refine le_trans ?_ (quotient_norm_add_le _ _ _)
    exact (congr_arg norm (sub_add_sub_cancel _ _ _).symm).le
  edist_dist x y := by exact ENNReal.coe_nnreal_eq _
  toUniformSpace := TopologicalAddGroup.toUniformSpace (M ‚ß∏ S)
  uniformity_dist := by
    rw [uniformity_eq_comap_nhds_zero', ((quotient_nhd_basis S).comap _).eq_biInf]
    simp only [dist, quotient_norm_sub_rev (Prod.fst _), preimage_setOf_eq]
example (S : AddSubgroup M) :
    (instTopologicalSpaceQuotient : TopologicalSpace <| M ‚ß∏ S) =
      S.seminormedAddCommGroupQuotient.toUniformSpace.toTopologicalSpace :=
  rfl
noncomputable instance AddSubgroup.normedAddCommGroupQuotient (S : AddSubgroup M)
    [IsClosed (S : Set M)] : NormedAddCommGroup (M ‚ß∏ S) :=
  { AddSubgroup.seminormedAddCommGroupQuotient S, MetricSpace.ofT0PseudoMetricSpace _ with }
example (S : AddSubgroup M) [IsClosed (S : Set M)] :
    S.seminormedAddCommGroupQuotient = NormedAddCommGroup.toSeminormedAddCommGroup :=
  rfl
namespace AddSubgroup
open NormedAddGroupHom
noncomputable def normedMk (S : AddSubgroup M) : NormedAddGroupHom M (M ‚ß∏ S) :=
  { QuotientAddGroup.mk' S with
    bound' := ‚ü®1, fun m => by simpa [one_mul] using quotient_norm_mk_le _ m‚ü© }
@[simp]
theorem normedMk.apply (S : AddSubgroup M) (m : M) : normedMk S m = QuotientAddGroup.mk' S m :=
  rfl
theorem surjective_normedMk (S : AddSubgroup M) : Function.Surjective (normedMk S) :=
  Quot.mk_surjective
theorem ker_normedMk (S : AddSubgroup M) : S.normedMk.ker = S :=
  QuotientAddGroup.ker_mk' _
theorem norm_normedMk_le (S : AddSubgroup M) : ‚ÄñS.normedMk‚Äñ ‚â§ 1 :=
  NormedAddGroupHom.opNorm_le_bound _ zero_le_one fun m => by simp [quotient_norm_mk_le']
theorem _root_.QuotientAddGroup.norm_lift_apply_le {S : AddSubgroup M} (f : NormedAddGroupHom M N)
    (hf : ‚àÄ x ‚àà S, f x = 0) (x : M ‚ß∏ S) : ‚Äñlift S f.toAddMonoidHom hf x‚Äñ ‚â§ ‚Äñf‚Äñ * ‚Äñx‚Äñ := by
  cases (norm_nonneg f).eq_or_gt with
  | inl h =>
    rcases mk_surjective x with ‚ü®x, rfl‚ü©
    simpa [h] using le_opNorm f x
  | inr h =>
    rw [‚Üê not_lt, ‚Üê lt_div_iff‚ÇÄ' h, norm_lt_iff]
    rintro ‚ü®x, rfl, hx‚ü©
    exact ((lt_div_iff‚ÇÄ' h).1 hx).not_le (le_opNorm f x)
theorem norm_normedMk (S : AddSubgroup M) (h : (S.topologicalClosure : Set M) ‚â† univ) :
    ‚ÄñS.normedMk‚Äñ = 1 := by
  refine le_antisymm (norm_normedMk_le S) ?_
  obtain ‚ü®x, hx‚ü© : ‚àÉ x : M, 0 < ‚Äñ(x : M ‚ß∏ S)‚Äñ := by
    refine (Set.nonempty_compl.2 h).imp fun x hx ‚Ü¶ ?_
    exact (norm_nonneg _).lt_of_ne' <| mt (quotient_norm_eq_zero_iff S x).1 hx
  refine (le_mul_iff_one_le_left hx).1 ?_
  exact norm_lift_apply_le S.normedMk (fun x ‚Ü¶ (eq_zero_iff x).2) x
theorem norm_trivial_quotient_mk (S : AddSubgroup M)
    (h : (S.topologicalClosure : Set M) = Set.univ) : ‚ÄñS.normedMk‚Äñ = 0 := by
  refine le_antisymm (opNorm_le_bound _ le_rfl fun x => ?_) (norm_nonneg _)
  have hker : x ‚àà S.normedMk.ker.topologicalClosure := by
    rw [S.ker_normedMk, ‚Üê SetLike.mem_coe, h]
    trivial
  rw [ker_normedMk] at hker
  simp only [(quotient_norm_eq_zero_iff S x).mpr hker, normedMk.apply, zero_mul, le_rfl]
end AddSubgroup
namespace NormedAddGroupHom
structure IsQuotient (f : NormedAddGroupHom M N) : Prop where
  protected surjective : Function.Surjective f
  protected norm : ‚àÄ x, ‚Äñf x‚Äñ = sInf ((fun m => ‚Äñx + m‚Äñ) '' f.ker)
noncomputable def lift {N : Type*} [SeminormedAddCommGroup N] (S : AddSubgroup M)
    (f : NormedAddGroupHom M N) (hf : ‚àÄ s ‚àà S, f s = 0) : NormedAddGroupHom (M ‚ß∏ S) N :=
  { QuotientAddGroup.lift S f.toAddMonoidHom hf with
    bound' := ‚ü®‚Äñf‚Äñ, norm_lift_apply_le f hf‚ü© }
theorem lift_mk {N : Type*} [SeminormedAddCommGroup N] (S : AddSubgroup M)
    (f : NormedAddGroupHom M N) (hf : ‚àÄ s ‚àà S, f s = 0) (m : M) :
    lift S f hf (S.normedMk m) = f m :=
  rfl
theorem lift_unique {N : Type*} [SeminormedAddCommGroup N] (S : AddSubgroup M)
    (f : NormedAddGroupHom M N) (hf : ‚àÄ s ‚àà S, f s = 0) (g : NormedAddGroupHom (M ‚ß∏ S) N)
    (h : g.comp S.normedMk = f) : g = lift S f hf := by
  ext x
  rcases AddSubgroup.surjective_normedMk _ x with ‚ü®x, rfl‚ü©
  change g.comp S.normedMk x = _
  simp only [h]
  rfl
theorem isQuotientQuotient (S : AddSubgroup M) : IsQuotient S.normedMk :=
  ‚ü®S.surjective_normedMk, fun m => by simpa [S.ker_normedMk] using quotient_norm_mk_eq _ m‚ü©
theorem IsQuotient.norm_lift {f : NormedAddGroupHom M N} (hquot : IsQuotient f) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ)
    (n : N) : ‚àÉ m : M, f m = n ‚àß ‚Äñm‚Äñ < ‚Äñn‚Äñ + Œµ := by
  obtain ‚ü®m, rfl‚ü© := hquot.surjective n
  have nonemp : ((fun m' => ‚Äñm + m'‚Äñ) '' f.ker).Nonempty := by
    rw [Set.image_nonempty]
    exact ‚ü®0, f.ker.zero_mem‚ü©
  rcases Real.lt_sInf_add_pos nonemp hŒµ
    with ‚ü®_, ‚ü®‚ü®x, hx, rfl‚ü©, H : ‚Äñm + x‚Äñ < sInf ((fun m' : M => ‚Äñm + m'‚Äñ) '' f.ker) + Œµ‚ü©‚ü©
  exact ‚ü®m + x, by rw [map_add, (NormedAddGroupHom.mem_ker f x).mp hx, add_zero], by
    rwa [hquot.norm]‚ü©
theorem IsQuotient.norm_le {f : NormedAddGroupHom M N} (hquot : IsQuotient f) (m : M) :
    ‚Äñf m‚Äñ ‚â§ ‚Äñm‚Äñ := by
  rw [hquot.norm]
  apply csInf_le
  ¬∑ use 0
    rintro _ ‚ü®m', -, rfl‚ü©
    apply norm_nonneg
  ¬∑ exact ‚ü®0, f.ker.zero_mem, by simp‚ü©
theorem norm_lift_le {N : Type*} [SeminormedAddCommGroup N] (S : AddSubgroup M)
    (f : NormedAddGroupHom M N) (hf : ‚àÄ s ‚àà S, f s = 0) :
    ‚Äñlift S f hf‚Äñ ‚â§ ‚Äñf‚Äñ :=
  opNorm_le_bound _ (norm_nonneg f) (norm_lift_apply_le f hf)
theorem lift_norm_le {N : Type*} [SeminormedAddCommGroup N] (S : AddSubgroup M)
    (f : NormedAddGroupHom M N) (hf : ‚àÄ s ‚àà S, f s = 0) {c : ‚Ñù‚â•0} (fb : ‚Äñf‚Äñ ‚â§ c) :
    ‚Äñlift S f hf‚Äñ ‚â§ c :=
  (norm_lift_le S f hf).trans fb
theorem lift_normNoninc {N : Type*} [SeminormedAddCommGroup N] (S : AddSubgroup M)
    (f : NormedAddGroupHom M N) (hf : ‚àÄ s ‚àà S, f s = 0) (fb : f.NormNoninc) :
    (lift S f hf).NormNoninc := fun x => by
  have fb' : ‚Äñf‚Äñ ‚â§ (1 : ‚Ñù‚â•0) := NormNoninc.normNoninc_iff_norm_le_one.mp fb
  simpa using le_of_opNorm_le _ (f.lift_norm_le _ _ fb') _
end NormedAddGroupHom
section Submodule
variable {R : Type*} [Ring R] [Module R M] (S : Submodule R M)
instance Submodule.Quotient.seminormedAddCommGroup : SeminormedAddCommGroup (M ‚ß∏ S) :=
  AddSubgroup.seminormedAddCommGroupQuotient S.toAddSubgroup
instance Submodule.Quotient.normedAddCommGroup [hS : IsClosed (S : Set M)] :
    NormedAddCommGroup (M ‚ß∏ S) :=
  @AddSubgroup.normedAddCommGroupQuotient _ _ S.toAddSubgroup hS
instance Submodule.Quotient.completeSpace [CompleteSpace M] : CompleteSpace (M ‚ß∏ S) :=
  QuotientAddGroup.completeSpace M S.toAddSubgroup
nonrec theorem Submodule.Quotient.norm_mk_lt {S : Submodule R M} (x : M ‚ß∏ S) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ m : M, Submodule.Quotient.mk m = x ‚àß ‚Äñm‚Äñ < ‚Äñx‚Äñ + Œµ :=
  norm_mk_lt x hŒµ
theorem Submodule.Quotient.norm_mk_le (m : M) : ‚Äñ(Submodule.Quotient.mk m : M ‚ß∏ S)‚Äñ ‚â§ ‚Äñm‚Äñ :=
  quotient_norm_mk_le S.toAddSubgroup m
instance Submodule.Quotient.instBoundedSMul (ùïú : Type*)
    [SeminormedCommRing ùïú] [Module ùïú M] [BoundedSMul ùïú M] [SMul ùïú R] [IsScalarTower ùïú R M] :
    BoundedSMul ùïú (M ‚ß∏ S) :=
  .of_norm_smul_le fun k x =>
    _root_.le_of_forall_pos_le_add fun Œµ hŒµ => by
      have := (nhds_basis_ball.tendsto_iff nhds_basis_ball).mp
        ((@Real.uniformContinuous_const_mul ‚Äñk‚Äñ).continuous.tendsto ‚Äñx‚Äñ) Œµ hŒµ
      simp only [mem_ball, exists_prop, dist, abs_sub_lt_iff] at this
      rcases this with ‚ü®Œ¥, hŒ¥, h‚ü©
      obtain ‚ü®a, rfl, ha‚ü© := Submodule.Quotient.norm_mk_lt x hŒ¥
      specialize h ‚Äña‚Äñ ‚ü®by linarith, by linarith [Submodule.Quotient.norm_mk_le S a]‚ü©
      calc
        _ ‚â§ ‚Äñk‚Äñ * ‚Äña‚Äñ := (quotient_norm_mk_le S.toAddSubgroup (k ‚Ä¢ a)).trans (norm_smul_le k a)
        _ ‚â§ _ := (sub_lt_iff_lt_add'.mp h.1).le
instance Submodule.Quotient.normedSpace (ùïú : Type*) [NormedField ùïú] [NormedSpace ùïú M] [SMul ùïú R]
    [IsScalarTower ùïú R M] : NormedSpace ùïú (M ‚ß∏ S) where
  norm_smul_le := norm_smul_le
end Submodule
section Ideal
variable {R : Type*} [SeminormedCommRing R] (I : Ideal R)
nonrec theorem Ideal.Quotient.norm_mk_lt {I : Ideal R} (x : R ‚ß∏ I) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ r : R, Ideal.Quotient.mk I r = x ‚àß ‚Äñr‚Äñ < ‚Äñx‚Äñ + Œµ :=
  norm_mk_lt x hŒµ
theorem Ideal.Quotient.norm_mk_le (r : R) : ‚ÄñIdeal.Quotient.mk I r‚Äñ ‚â§ ‚Äñr‚Äñ :=
  quotient_norm_mk_le I.toAddSubgroup r
instance Ideal.Quotient.semiNormedCommRing : SeminormedCommRing (R ‚ß∏ I) where
  dist_eq := dist_eq_norm
  mul_comm := _root_.mul_comm
  norm_mul x y := le_of_forall_pos_le_add fun Œµ hŒµ => by
    have := ((nhds_basis_ball.prod_nhds nhds_basis_ball).tendsto_iff nhds_basis_ball).mp
      (continuous_mul.tendsto (‚Äñx‚Äñ, ‚Äñy‚Äñ)) Œµ hŒµ
    simp only [Set.mem_prod, mem_ball, and_imp, Prod.forall, exists_prop, Prod.exists] at this
    rcases this with ‚ü®Œµ‚ÇÅ, Œµ‚ÇÇ, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, h‚ü©
    obtain ‚ü®‚ü®a, rfl, ha‚ü©, ‚ü®b, rfl, hb‚ü©‚ü© := Ideal.Quotient.norm_mk_lt x h‚ÇÅ,
      Ideal.Quotient.norm_mk_lt y h‚ÇÇ
    simp only [dist, abs_sub_lt_iff] at h
    specialize h ‚Äña‚Äñ ‚Äñb‚Äñ ‚ü®by linarith, by linarith [Ideal.Quotient.norm_mk_le I a]‚ü©
      ‚ü®by linarith, by linarith [Ideal.Quotient.norm_mk_le I b]‚ü©
    calc
      _ ‚â§ ‚Äña‚Äñ * ‚Äñb‚Äñ := (Ideal.Quotient.norm_mk_le I (a * b)).trans (norm_mul_le a b)
      _ ‚â§ _ := (sub_lt_iff_lt_add'.mp h.1).le
instance Ideal.Quotient.normedCommRing [IsClosed (I : Set R)] : NormedCommRing (R ‚ß∏ I) :=
  { Ideal.Quotient.semiNormedCommRing I, Submodule.Quotient.normedAddCommGroup I with }
variable (ùïú : Type*) [NormedField ùïú]
instance Ideal.Quotient.normedAlgebra [NormedAlgebra ùïú R] : NormedAlgebra ùïú (R ‚ß∏ I) :=
  { Submodule.Quotient.normedSpace I ùïú, Ideal.Quotient.algebra ùïú with }
end Ideal