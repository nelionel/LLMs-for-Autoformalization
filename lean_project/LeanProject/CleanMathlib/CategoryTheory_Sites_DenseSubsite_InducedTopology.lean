import Mathlib.CategoryTheory.Sites.DenseSubsite.SheafEquiv
namespace CategoryTheory
universe v u
open Limits Opposite Presieve CategoryTheory
variable {C : Type*} [Category C] {D : Type*} [Category D] (G : C ‚•§ D)
variable {J : GrothendieckTopology C} (K : GrothendieckTopology D)
variable (A : Type v) [Category.{u} A]
namespace Functor
class LocallyCoverDense : Prop where
  functorPushforward_functorPullback_mem :
    ‚àÄ ‚¶ÉX : C‚¶Ñ (T : K (G.obj X)), (T.val.functorPullback G).functorPushforward G ‚àà K (G.obj X)
variable [G.LocallyCoverDense K]
theorem pushforward_cover_iff_cover_pullback [G.Full] [G.Faithful] {X : C} (S : Sieve X) :
    K _ (S.functorPushforward G) ‚Üî ‚àÉ T : K (G.obj X), T.val.functorPullback G = S := by
  constructor
  ¬∑ intro hS
    exact ‚ü®‚ü®_, hS‚ü©, (Sieve.fullyFaithfulFunctorGaloisCoinsertion G X).u_l_eq S‚ü©
  ¬∑ rintro ‚ü®T, rfl‚ü©
    exact LocallyCoverDense.functorPushforward_functorPullback_mem T
variable [G.IsLocallyFull K] [G.IsLocallyFaithful K]
@[simps]
def inducedTopology : GrothendieckTopology C where
  sieves _ S := K _ (S.functorPushforward G)
  top_mem' X := by
    change K _ _
    rw [Sieve.functorPushforward_top]
    exact K.top_mem _
  pullback_stable' X Y S iYX hS := by
    apply K.transitive (LocallyCoverDense.functorPushforward_functorPullback_mem
      ‚ü®_, K.pullback_stable (G.map iYX) hS‚ü©)
    rintro Z _ ‚ü®U, iUY, iZU, ‚ü®W, iWX, iUW, hiWX, e‚ÇÅ‚ü©, rfl‚ü©
    rw [Sieve.pullback_comp]
    apply K.pullback_stable
    clear iZU Z
    apply K.transitive (G.functorPushforward_imageSieve_mem _ iUW)
    rintro Z _ ‚ü®U‚ÇÅ, iU‚ÇÅU, iZU‚ÇÅ, ‚ü®iU‚ÇÅW, e‚ÇÇ‚ü©, rfl‚ü©
    rw [Sieve.pullback_comp]
    apply K.pullback_stable
    clear iZU‚ÇÅ Z
    apply K.superset_covering ?_ (G.functorPushforward_equalizer_mem _
      (iU‚ÇÅU ‚â´ iUY ‚â´ iYX) (iU‚ÇÅW ‚â´ iWX) (by simp [e‚ÇÅ, e‚ÇÇ]))
    rintro Z _ ‚ü®U‚ÇÇ, iU‚ÇÇU‚ÇÅ, iZU‚ÇÇ, e‚ÇÉ : _ = _, rfl‚ü©
    refine ‚ü®_, iU‚ÇÇU‚ÇÅ ‚â´ iU‚ÇÅU ‚â´ iUY, iZU‚ÇÇ, ?_, by simp‚ü©
    simpa [e‚ÇÉ] using S.downward_closed hiWX (iU‚ÇÇU‚ÇÅ ‚â´ iU‚ÇÅW)
  transitive' X S hS S' H' := by
    apply K.transitive hS
    rintro Y _ ‚ü®Z, g, i, hg, rfl‚ü©
    rw [Sieve.pullback_comp]
    apply K.pullback_stable i
    refine K.superset_covering ?_ (H' hg)
    rintro W _ ‚ü®Z', g', i', hg, rfl‚ü©
    refine ‚ü®Z', g' ‚â´ g , i', hg, ?_‚ü©
    simp
@[simp]
lemma mem_inducedTopology_sieves_iff {X : C} (S : Sieve X) :
    S ‚àà (G.inducedTopology K) X ‚Üî (S.functorPushforward G) ‚àà K (G.obj X) :=
  Iff.rfl
instance inducedTopology_isCocontinuous : G.IsCocontinuous (G.inducedTopology K) K :=
  ‚ü®@fun _ S hS => LocallyCoverDense.functorPushforward_functorPullback_mem ‚ü®S, hS‚ü©‚ü©
theorem inducedTopology_coverPreserving : CoverPreserving (G.inducedTopology K) K G :=
  ‚ü®@fun _ _ hS => hS‚ü©
instance (priority := 900) locallyCoverDense_of_isCoverDense [G.IsCoverDense K] :
    G.LocallyCoverDense K where
  functorPushforward_functorPullback_mem _ _ :=
    IsCoverDense.functorPullback_pushforward_covering _
instance (priority := 900) [G.IsCoverDense K] : G.IsDenseSubsite (G.inducedTopology K) K where
  functorPushforward_mem_iff := Iff.rfl
@[deprecated (since := "2024-07-23")]
alias inducedTopologyOfIsCoverDense := inducedTopology
variable (J)
instance over_forget_locallyCoverDense (X : C) : (Over.forget X).LocallyCoverDense J where
  functorPushforward_functorPullback_mem Y T := by
    convert T.property
    ext Z f
    constructor
    ¬∑ rintro ‚ü®_, _, g', hg, rfl‚ü©
      exact T.val.downward_closed hg g'
    ¬∑ intro hf
      exact ‚ü®Over.mk (f ‚â´ Y.hom), Over.homMk f, ùüô _, hf, (Category.id_comp _).symm‚ü©
noncomputable def sheafInducedTopologyEquivOfIsCoverDense
    [G.IsCoverDense K] [‚àÄ (X : D·µí·µñ), HasLimitsOfShape (StructuredArrow X G.op) A] :
    Sheaf (G.inducedTopology K) A ‚âå Sheaf K A :=
  Functor.IsDenseSubsite.sheafEquiv G
    (G.inducedTopology K) K A
end Functor
end CategoryTheory