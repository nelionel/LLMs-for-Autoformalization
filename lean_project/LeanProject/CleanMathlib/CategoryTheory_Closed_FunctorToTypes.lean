import Mathlib.CategoryTheory.Functor.FunctorHom
import Mathlib.CategoryTheory.Closed.Monoidal
universe w v' v u u'
open CategoryTheory Functor MonoidalCategory
namespace CategoryTheory.FunctorToTypes
variable {C : Type u} [Category.{v} C] {D : Type u'} [Category.{v'} D]
variable (F : C ‚•§ Type max w v u)
@[simps!]
def functorHomEquiv (G H : C ‚•§ Type max w v u) : (G ‚ü∂ F.functorHom H) ‚âÉ (F ‚äó G ‚ü∂ H) :=
  (Functor.functorHomEquiv F H G).trans (homObjEquiv F H G)
@[simps]
def rightAdj_map {F G H : C ‚•§ Type max w v u} (f : G ‚ü∂ H) (c : C) (a : (F.functorHom G).obj c) :
    (F.functorHom H).obj c where
  app d b := a.app d b ‚â´ f.app d
  naturality g h := by
    have := a.naturality g h
    change (F.map g ‚â´ a.app _ (h ‚â´ g)) ‚â´ _ = _
    aesop
@[simps!]
def rightAdj : (C ‚•§ Type max w v u) ‚•§ C ‚•§ Type max w v u where
  obj G := F.functorHom G
  map f := { app := rightAdj_map f }
def adj : tensorLeft F ‚ä£ rightAdj F where
  unit := {
    app := fun G ‚Ü¶ (functorHomEquiv F G _).2 (ùüô _)
    naturality := fun G H f ‚Ü¶ by
      dsimp [rightAdj]
      ext _
      simp [FunctorToTypes.naturality] }
  counit := { app := fun G ‚Ü¶ functorHomEquiv F _ G (ùüô _) }
instance closed : Closed F where
  adj := adj F
instance monoidalClosed : MonoidalClosed (C ‚•§ Type max w v u) where
end CategoryTheory.FunctorToTypes