import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Zero
namespace CategoryTheory
open Category Limits
variable (C D : Type*) [Category C] [Category D]
structure ShortComplex [HasZeroMorphisms C] where
  {Xโ : C}
  {Xโ : C}
  {Xโ : C}
  f : Xโ โถ Xโ
  g : Xโ โถ Xโ
  zero : f โซ g = 0
namespace ShortComplex
attribute [reassoc (attr := simp)] ShortComplex.zero
variable {C}
variable [HasZeroMorphisms C]
@[ext]
structure Hom (Sโ Sโ : ShortComplex C) where
  ฯโ : Sโ.Xโ โถ Sโ.Xโ
  ฯโ : Sโ.Xโ โถ Sโ.Xโ
  ฯโ : Sโ.Xโ โถ Sโ.Xโ
  commโโ : ฯโ โซ Sโ.f = Sโ.f โซ ฯโ := by aesop_cat
  commโโ : ฯโ โซ Sโ.g = Sโ.g โซ ฯโ := by aesop_cat
attribute [reassoc] Hom.commโโ Hom.commโโ
attribute [local simp] Hom.commโโ Hom.commโโ Hom.commโโ_assoc Hom.commโโ_assoc
variable (S : ShortComplex C) {Sโ Sโ Sโ : ShortComplex C}
@[simps]
def Hom.id : Hom S S where
  ฯโ := ๐ _
  ฯโ := ๐ _
  ฯโ := ๐ _
@[simps]
def Hom.comp (ฯโโ : Hom Sโ Sโ) (ฯโโ : Hom Sโ Sโ) : Hom Sโ Sโ where
  ฯโ := ฯโโ.ฯโ โซ ฯโโ.ฯโ
  ฯโ := ฯโโ.ฯโ โซ ฯโโ.ฯโ
  ฯโ := ฯโโ.ฯโ โซ ฯโโ.ฯโ
instance : Category (ShortComplex C) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp
@[ext]
lemma hom_ext (f g : Sโ โถ Sโ) (hโ : f.ฯโ = g.ฯโ) (hโ : f.ฯโ = g.ฯโ) (hโ : f.ฯโ = g.ฯโ) : f = g :=
  Hom.ext hโ hโ hโ
@[simps]
def homMk {Sโ Sโ : ShortComplex C} (ฯโ : Sโ.Xโ โถ Sโ.Xโ) (ฯโ : Sโ.Xโ โถ Sโ.Xโ)
    (ฯโ : Sโ.Xโ โถ Sโ.Xโ) (commโโ : ฯโ โซ Sโ.f = Sโ.f โซ ฯโ)
    (commโโ : ฯโ โซ Sโ.g = Sโ.g โซ ฯโ) : Sโ โถ Sโ := โจฯโ, ฯโ, ฯโ, commโโ, commโโโฉ
@[simp] lemma id_ฯโ : Hom.ฯโ (๐ S) = ๐ _ := rfl
@[simp] lemma id_ฯโ : Hom.ฯโ (๐ S) = ๐ _ := rfl
@[simp] lemma id_ฯโ : Hom.ฯโ (๐ S) = ๐ _ := rfl
@[reassoc] lemma comp_ฯโ (ฯโโ : Sโ โถ Sโ) (ฯโโ : Sโ โถ Sโ) :
    (ฯโโ โซ ฯโโ).ฯโ = ฯโโ.ฯโ โซ ฯโโ.ฯโ := rfl
@[reassoc] lemma comp_ฯโ (ฯโโ : Sโ โถ Sโ) (ฯโโ : Sโ โถ Sโ) :
    (ฯโโ โซ ฯโโ).ฯโ = ฯโโ.ฯโ โซ ฯโโ.ฯโ := rfl
@[reassoc] lemma comp_ฯโ (ฯโโ : Sโ โถ Sโ) (ฯโโ : Sโ โถ Sโ) :
    (ฯโโ โซ ฯโโ).ฯโ = ฯโโ.ฯโ โซ ฯโโ.ฯโ := rfl
attribute [simp] comp_ฯโ comp_ฯโ comp_ฯโ
instance : Zero (Sโ โถ Sโ) := โจ{ ฯโ := 0, ฯโ := 0, ฯโ := 0 }โฉ
variable (Sโ Sโ)
@[simp] lemma zero_ฯโ : Hom.ฯโ (0 : Sโ โถ Sโ) = 0 := rfl
@[simp] lemma zero_ฯโ : Hom.ฯโ (0 : Sโ โถ Sโ) = 0 := rfl
@[simp] lemma zero_ฯโ : Hom.ฯโ (0 : Sโ โถ Sโ) = 0 := rfl
variable {Sโ Sโ}
instance : HasZeroMorphisms (ShortComplex C) where
@[simps]
def ฯโ : ShortComplex C โฅค C where
  obj S := S.Xโ
  map f := f.ฯโ
@[simps]
def ฯโ : ShortComplex C โฅค C where
  obj S := S.Xโ
  map f := f.ฯโ
@[simps]
def ฯโ : ShortComplex C โฅค C where
  obj S := S.Xโ
  map f := f.ฯโ
instance preservesZeroMorphisms_ฯโ : Functor.PreservesZeroMorphisms (ฯโ : _ โฅค C) where
instance preservesZeroMorphisms_ฯโ : Functor.PreservesZeroMorphisms (ฯโ : _ โฅค C) where
instance preservesZeroMorphisms_ฯโ : Functor.PreservesZeroMorphisms (ฯโ : _ โฅค C) where
instance (f : Sโ โถ Sโ) [IsIso f] : IsIso f.ฯโ := (inferInstance : IsIso (ฯโ.mapIso (asIso f)).hom)
instance (f : Sโ โถ Sโ) [IsIso f] : IsIso f.ฯโ := (inferInstance : IsIso (ฯโ.mapIso (asIso f)).hom)
instance (f : Sโ โถ Sโ) [IsIso f] : IsIso f.ฯโ := (inferInstance : IsIso (ฯโ.mapIso (asIso f)).hom)
@[simps] def ฯโToฯโ : (ฯโ : _ โฅค C) โถ ฯโ where
  app S := S.f
@[simps] def ฯโToฯโ : (ฯโ : _ โฅค C) โถ ฯโ where
  app S := S.g
@[reassoc (attr := simp)]
lemma ฯโToฯโ_comp_ฯโToฯโ : (ฯโToฯโ : (_ : _ โฅค C) โถ _) โซ ฯโToฯโ = 0 := by aesop_cat
variable {D}
variable [HasZeroMorphisms D]
@[simps]
def map (F : C โฅค D) [F.PreservesZeroMorphisms] : ShortComplex D :=
  ShortComplex.mk (F.map S.f) (F.map S.g) (by rw [โ F.map_comp, S.zero, F.map_zero])
@[simps]
def mapNatTrans {F G : C โฅค D} [F.PreservesZeroMorphisms] [G.PreservesZeroMorphisms] (ฯ : F โถ G) :
    S.map F โถ S.map G where
  ฯโ := ฯ.app _
  ฯโ := ฯ.app _
  ฯโ := ฯ.app _
@[simps]
def mapNatIso {F G : C โฅค D} [F.PreservesZeroMorphisms] [G.PreservesZeroMorphisms] (ฯ : F โ G) :
    S.map F โ S.map G where
  hom := S.mapNatTrans ฯ.hom
  inv := S.mapNatTrans ฯ.inv
@[simps]
def _root_.CategoryTheory.Functor.mapShortComplex (F : C โฅค D) [F.PreservesZeroMorphisms] :
    ShortComplex C โฅค ShortComplex D where
  obj S := S.map F
  map ฯ :=
    { ฯโ := F.map ฯ.ฯโ
      ฯโ := F.map ฯ.ฯโ
      ฯโ := F.map ฯ.ฯโ
      commโโ := by
        dsimp
        simp only [โ F.map_comp, ฯ.commโโ]
      commโโ := by
        dsimp
        simp only [โ F.map_comp, ฯ.commโโ] }
@[simps]
def isoMk (eโ : Sโ.Xโ โ Sโ.Xโ) (eโ : Sโ.Xโ โ Sโ.Xโ) (eโ : Sโ.Xโ โ Sโ.Xโ)
    (commโโ : eโ.hom โซ Sโ.f = Sโ.f โซ eโ.hom := by aesop_cat)
    (commโโ : eโ.hom โซ Sโ.g = Sโ.g โซ eโ.hom := by aesop_cat) :
    Sโ โ Sโ where
  hom := โจeโ.hom, eโ.hom, eโ.hom, commโโ, commโโโฉ
  inv := homMk eโ.inv eโ.inv eโ.inv
    (by rw [โ cancel_mono eโ.hom, assoc, assoc, eโ.inv_hom_id, comp_id,
          โ commโโ, eโ.inv_hom_id_assoc])
    (by rw [โ cancel_mono eโ.hom, assoc, assoc, eโ.inv_hom_id, comp_id,
          โ commโโ, eโ.inv_hom_id_assoc])
lemma isIso_of_isIso (f : Sโ โถ Sโ) [IsIso f.ฯโ] [IsIso f.ฯโ] [IsIso f.ฯโ] : IsIso f :=
  (isoMk (asIso f.ฯโ) (asIso f.ฯโ) (asIso f.ฯโ)).isIso_hom
@[simps]
def op : ShortComplex Cแตแต :=
  mk S.g.op S.f.op (by simp only [โ op_comp, S.zero]; rfl)
@[simps]
def opMap (ฯ : Sโ โถ Sโ) : Sโ.op โถ Sโ.op where
  ฯโ := ฯ.ฯโ.op
  ฯโ := ฯ.ฯโ.op
  ฯโ := ฯ.ฯโ.op
  commโโ := by
    dsimp
    simp only [โ op_comp, ฯ.commโโ]
  commโโ := by
    dsimp
    simp only [โ op_comp, ฯ.commโโ]
@[simp]
lemma opMap_id : opMap (๐ S) = ๐ S.op := rfl
@[simps]
def unop (S : ShortComplex Cแตแต) : ShortComplex C :=
  mk S.g.unop S.f.unop (by simp only [โ unop_comp, S.zero]; rfl)
@[simps]
def unopMap {Sโ Sโ : ShortComplex Cแตแต} (ฯ : Sโ โถ Sโ) : Sโ.unop โถ Sโ.unop where
  ฯโ := ฯ.ฯโ.unop
  ฯโ := ฯ.ฯโ.unop
  ฯโ := ฯ.ฯโ.unop
  commโโ := by
    dsimp
    simp only [โ unop_comp, ฯ.commโโ]
  commโโ := by
    dsimp
    simp only [โ unop_comp, ฯ.commโโ]
@[simp]
lemma unopMap_id (S : ShortComplex Cแตแต) : unopMap (๐ S) = ๐ S.unop := rfl
variable (C)
@[simps]
def opFunctor : (ShortComplex C)แตแต โฅค ShortComplex Cแตแต where
  obj S := (Opposite.unop S).op
  map ฯ := opMap ฯ.unop
@[simps]
def unopFunctor : ShortComplex Cแตแต โฅค (ShortComplex C)แตแต where
  obj S := Opposite.op (S.unop)
  map ฯ := (unopMap ฯ).op
@[simps]
def opEquiv : (ShortComplex C)แตแต โ ShortComplex Cแตแต where
  functor := opFunctor C
  inverse := unopFunctor C
  unitIso := Iso.refl _
  counitIso := Iso.refl _
variable {C}
abbrev unopOp (S : ShortComplex Cแตแต) : S.unop.op โ S := (opEquiv C).counitIso.app S
abbrev opUnop (S : ShortComplex C) : S.op.unop โ S :=
  Iso.unop ((opEquiv C).unitIso.app (Opposite.op S))
end ShortComplex
end CategoryTheory