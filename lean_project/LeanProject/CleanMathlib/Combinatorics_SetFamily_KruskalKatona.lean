import Mathlib.Combinatorics.Colex
import Mathlib.Combinatorics.SetFamily.Compression.UV
import Mathlib.Combinatorics.SetFamily.Intersecting
import Mathlib.Data.Finset.Fin
attribute [-instance] instDecidableEqFin
open Nat
open scoped FinsetFamily
namespace Finset
namespace Colex
variable {Œ± : Type*} [LinearOrder Œ±] {ùíú : Finset (Finset Œ±)} {s : Finset Œ±} {r : ‚Ñï}
lemma shadow_initSeg [Fintype Œ±] (hs : s.Nonempty) :
    ‚àÇ (initSeg s) = initSeg (erase s <| min' s hs) := by
  ext t
  simp only [mem_shadow_iff_insert_mem, mem_initSeg, exists_prop]
  constructor
  ¬∑ rintro ‚ü®a, ha, hst, hts‚ü©
    constructor
    ¬∑ rw [card_erase_of_mem (min'_mem _ _), hst, card_insert_of_not_mem ha, add_tsub_cancel_right]
    ¬∑ simpa [ha] using erase_le_erase_min' hts hst.ge (mem_insert_self _ _)
  simp_rw [le_iff_eq_or_lt, lt_iff_exists_filter_lt, mem_sdiff, filter_inj, and_assoc]
  simp only [toColex_inj, ofColex_toColex, ne_eq, and_imp]
  rintro cards' (rfl | ‚ü®k, hks, hkt, z‚ü©)
  ¬∑ refine ‚ü®min' s hs, not_mem_erase _ _, ?_‚ü©
    rw [insert_erase (min'_mem _ _)]
    exact ‚ü®rfl, Or.inl rfl‚ü©
  set j := min' t·∂ú ‚ü®k, mem_compl.2 hkt‚ü©
  have hjk : j ‚â§ k := min'_le _ _ (mem_compl.2 ‚Äπk ‚àâ t‚Ä∫)
  have : j ‚àâ t := mem_compl.1 (min'_mem _ _)
  have hcard : #s = #(insert j t) := by
    rw [card_insert_of_not_mem ‚Äπj ‚àâ t‚Ä∫, ‚Üê ‚Äπ_ = #t‚Ä∫, card_erase_add_one (min'_mem _ _)]
  refine ‚ü®j, ‚Äπ_‚Ä∫, hcard, ?_‚ü©
  obtain hjk | r‚ÇÅ := hjk.lt_or_eq
  ¬∑ refine Or.inr ‚ü®k, mem_of_mem_erase ‚Äπ_‚Ä∫, fun hk ‚Ü¶ hkt <| mem_of_mem_insert_of_ne hk hjk.ne',
      fun x hx ‚Ü¶ ?_‚ü©
    simpa only [mem_insert, z hx, (hjk.trans hx).ne', mem_erase, Ne, false_or,
      and_iff_right_iff_imp] using fun _ ‚Ü¶ ((min'_le _ _ <| mem_of_mem_erase hks).trans_lt hx).ne'
  refine Or.inl (eq_of_subset_of_card_le (fun a ha ‚Ü¶ ?_) hcard.ge).symm
  rcases lt_trichotomy k a with (lt | rfl | gt)
  ¬∑ apply mem_insert_of_mem
    rw [z lt]
    refine mem_erase_of_ne_of_mem (lt_of_le_of_lt ?_ lt).ne' ha
    apply min'_le _ _ (mem_of_mem_erase ‚Äπ_‚Ä∫)
  ¬∑ rw [r‚ÇÅ]; apply mem_insert_self
  ¬∑ apply mem_insert_of_mem
    rw [‚Üê r‚ÇÅ] at gt
    by_contra
    apply (min'_le t·∂ú _ _).not_lt gt
    rwa [mem_compl]
protected lemma IsInitSeg.shadow [Finite Œ±] (h‚ÇÅ : IsInitSeg ùíú r) : IsInitSeg (‚àÇ ùíú) (r - 1) := by
  cases nonempty_fintype Œ±
  obtain rfl | hr := Nat.eq_zero_or_pos r
  ¬∑ have : ùíú ‚äÜ {‚àÖ} := fun s hs ‚Ü¶ by rw [mem_singleton, ‚Üê Finset.card_eq_zero]; exact h‚ÇÅ.1 hs
    have := shadow_monotone this
    simp only [subset_empty, le_eq_subset, shadow_singleton_empty] at this
    simp [this]
  obtain rfl | hùíú := ùíú.eq_empty_or_nonempty
  ¬∑ simp
  obtain ‚ü®s, rfl, rfl‚ü© := h‚ÇÅ.exists_initSeg hùíú
  rw [shadow_initSeg (card_pos.1 hr), ‚Üê card_erase_of_mem (min'_mem _ _)]
  exact isInitSeg_initSeg
end Colex
open Finset Colex Nat UV
open scoped FinsetFamily
variable {Œ± : Type*} [LinearOrder Œ±] {s U V : Finset Œ±} {n : ‚Ñï}
namespace UV
lemma toColex_compress_lt_toColex {hU : U.Nonempty} {hV : V.Nonempty} (h : max' U hU < max' V hV)
    (hA : compress U V s ‚â† s) : toColex (compress U V s) < toColex s := by
  rw [compress, ite_ne_right_iff] at hA
  rw [compress, if_pos hA.1, lt_iff_exists_filter_lt]
  simp_rw [mem_sdiff (s := s), filter_inj, and_assoc]
  refine ‚ü®_, hA.1.2 <| max'_mem _ hV, not_mem_sdiff_of_mem_right <| max'_mem _ _, fun a ha ‚Ü¶ ?_‚ü©
  have : a ‚àâ V := fun H ‚Ü¶ ha.not_le (le_max' _ _ H)
  have : a ‚àâ U := fun H ‚Ü¶ ha.not_lt ((le_max' _ _ H).trans_lt h)
  simp [‚Äπa ‚àâ U‚Ä∫, ‚Äπa ‚àâ V‚Ä∫]
private def UsefulCompression (U V : Finset Œ±) : Prop :=
  Disjoint U V ‚àß #U = #V ‚àß ‚àÉ (HU : U.Nonempty) (HV : V.Nonempty), max' U HU < max' V HV
private instance UsefulCompression.instDecidableRel : @DecidableRel (Finset Œ±) UsefulCompression :=
  fun _ _ ‚Ü¶ inferInstanceAs (Decidable (_ ‚àß _))
private lemma compression_improved (ùíú : Finset (Finset Œ±)) (h‚ÇÅ : UsefulCompression U V)
    (h‚ÇÇ : ‚àÄ ‚¶ÉU‚ÇÅ V‚ÇÅ‚¶Ñ, UsefulCompression U‚ÇÅ V‚ÇÅ ‚Üí #U‚ÇÅ < #U ‚Üí IsCompressed U‚ÇÅ V‚ÇÅ ùíú) :
    #(‚àÇ (ùìí U V ùíú)) ‚â§ #(‚àÇ ùíú) := by
  obtain ‚ü®UVd, same_size, hU, hV, max_lt‚ü© := h‚ÇÅ
  refine card_shadow_compression_le _ _ fun x Hx ‚Ü¶ ‚ü®min' V hV, min'_mem _ _, ?_‚ü©
  obtain hU' | hU' := eq_or_lt_of_le (succ_le_iff.2 hU.card_pos)
  ¬∑ rw [‚Üê hU'] at same_size
    have : erase U x = ‚àÖ := by rw [‚Üê Finset.card_eq_zero, card_erase_of_mem Hx, ‚Üê hU']
    have : erase V (min' V hV) = ‚àÖ := by
      rw [‚Üê Finset.card_eq_zero, card_erase_of_mem (min'_mem _ _), ‚Üê same_size]
    rw [‚Äπerase U x = ‚àÖ‚Ä∫, ‚Äπerase V (min' V hV) = ‚àÖ‚Ä∫]
    exact isCompressed_self _ _
  refine h‚ÇÇ ‚ü®UVd.mono (erase_subset ..) (erase_subset ..), ?_, ?_, ?_, ?_‚ü© (card_erase_lt_of_mem Hx)
  ¬∑ rw [card_erase_of_mem (min'_mem _ _), card_erase_of_mem Hx, same_size]
  ¬∑ rwa [‚Üê card_pos, card_erase_of_mem Hx, tsub_pos_iff_lt]
  ¬∑ rwa [‚Üê Finset.card_pos, card_erase_of_mem (min'_mem _ _), ‚Üê same_size, tsub_pos_iff_lt]
  ¬∑ exact (Finset.max'_subset _ <| erase_subset _ _).trans_lt (max_lt.trans_le <| le_max' _ _ <|
      mem_erase.2 ‚ü®(min'_lt_max'_of_card _ (by rwa [‚Üê same_size])).ne', max'_mem _ _‚ü©)
lemma isInitSeg_of_compressed {‚Ñ¨ : Finset (Finset Œ±)} {r : ‚Ñï} (h‚ÇÅ : (‚Ñ¨ : Set (Finset Œ±)).Sized r)
    (h‚ÇÇ : ‚àÄ U V, UsefulCompression U V ‚Üí IsCompressed U V ‚Ñ¨) : IsInitSeg ‚Ñ¨ r := by
  refine ‚ü®h‚ÇÅ, ?_‚ü©
  rintro A B hA ‚ü®hBA, sizeA‚ü©
  by_contra hB
  have hAB : A ‚â† B := ne_of_mem_of_not_mem hA hB
  have hAB' : #A = #B := (h‚ÇÅ hA).trans sizeA.symm
  have hU : (A \ B).Nonempty := sdiff_nonempty.2 fun h ‚Ü¶ hAB <| eq_of_subset_of_card_le h hAB'.ge
  have hV : (B \ A).Nonempty :=
    sdiff_nonempty.2 fun h ‚Ü¶ hAB.symm <| eq_of_subset_of_card_le h hAB'.le
  have disj : Disjoint (B \ A) (A \ B) := disjoint_sdiff.mono_left sdiff_subset
  have smaller : max' _ hV < max' _ hU := by
    obtain hlt | heq | hgt := lt_trichotomy (max' _ hU) (max' _ hV)
    ¬∑ rw [‚Üê compress_sdiff_sdiff A B] at hAB hBA
      cases hBA.not_lt <| toColex_compress_lt_toColex hlt hAB
    ¬∑ exact (disjoint_right.1 disj (max'_mem _ hU) <| heq.symm ‚ñ∏ max'_mem _ _).elim
    ¬∑ assumption
  refine hB ?_
  rw [‚Üê (h‚ÇÇ _ _ ‚ü®disj, card_sdiff_comm hAB'.symm, hV, hU, smaller‚ü©).eq]
  exact mem_compression.2 (Or.inr ‚ü®hB, A, hA, compress_sdiff_sdiff _ _‚ü©)
attribute [-instance] Fintype.decidableForallFintype
private def familyMeasure (ùíú : Finset (Finset (Fin n))) : ‚Ñï := ‚àë A in ùíú, ‚àë a in A, 2 ^ (a : ‚Ñï)
private lemma familyMeasure_compression_lt_familyMeasure {U V : Finset (Fin n)} {hU : U.Nonempty}
    {hV : V.Nonempty} (h : max' U hU < max' V hV) {ùíú : Finset (Finset (Fin n))} (a : ùìí U V ùíú ‚â† ùíú) :
    familyMeasure (ùìí U V ùíú) < familyMeasure ùíú := by
  rw [compression] at a ‚ä¢
  have q : ‚àÄ Q ‚àà {A ‚àà ùíú | compress U V A ‚àâ ùíú}, compress U V Q ‚â† Q := by
    simp_rw [mem_filter]
    intro Q hQ h
    rw [h] at hQ
    exact hQ.2 hQ.1
  have uA : {A ‚àà ùíú | compress U V A ‚àà ùíú} ‚à™ {A ‚àà ùíú | compress U V A ‚àâ ùíú} = ùíú :=
    filter_union_filter_neg_eq _ _
  have ne‚ÇÇ : {A ‚àà ùíú | compress U V A ‚àâ ùíú}.Nonempty := by
    refine nonempty_iff_ne_empty.2 fun z ‚Ü¶ a ?_
    rw [filter_image, z, image_empty, union_empty]
    rwa [z, union_empty] at uA
  rw [familyMeasure, familyMeasure, sum_union compress_disjoint]
  conv_rhs => rw [‚Üê uA]
  rw [sum_union (disjoint_filter_filter_neg _ _ _), add_lt_add_iff_left, filter_image,
    sum_image compress_injOn]
  refine sum_lt_sum_of_nonempty ne‚ÇÇ fun A hA ‚Ü¶ ?_
  simp_rw [‚Üê sum_image Fin.val_injective.injOn]
  rw [geomSum_lt_geomSum_iff_toColex_lt_toColex le_rfl,
    toColex_image_lt_toColex_image Fin.val_strictMono]
  exact toColex_compress_lt_toColex h <| q _ hA
private lemma kruskal_katona_helper {r : ‚Ñï} (ùíú : Finset (Finset (Fin n)))
    (h : (ùíú : Set (Finset (Fin n))).Sized r) :
    ‚àÉ ‚Ñ¨ : Finset (Finset (Fin n)), #(‚àÇ ‚Ñ¨) ‚â§ #(‚àÇ ùíú) ‚àß #ùíú = #‚Ñ¨ ‚àß
      (‚Ñ¨ : Set (Finset (Fin n))).Sized r ‚àß ‚àÄ U V, UsefulCompression U V ‚Üí IsCompressed U V ‚Ñ¨ := by
  classical
  set usable : Finset (Finset (Fin n) √ó Finset (Fin n)) :=
    {t | UsefulCompression t.1 t.2 ‚àß ¬¨ IsCompressed t.1 t.2 ùíú}
  obtain husable | husable := usable.eq_empty_or_nonempty
  ¬∑ refine ‚ü®ùíú, le_rfl, rfl, h, fun U V hUV ‚Ü¶ ?_‚ü©
    rw [eq_empty_iff_forall_not_mem] at husable
    by_contra h
    exact husable ‚ü®U, V‚ü© <| mem_filter.2 ‚ü®mem_univ _, hUV, h‚ü©
  obtain ‚ü®‚ü®U, V‚ü©, hUV, t‚ü© := exists_min_image usable (fun t ‚Ü¶ #t.1) husable
  rw [mem_filter] at hUV
  have h‚ÇÇ : ‚àÄ U‚ÇÅ V‚ÇÅ, UsefulCompression U‚ÇÅ V‚ÇÅ ‚Üí #U‚ÇÅ < #U ‚Üí IsCompressed U‚ÇÅ V‚ÇÅ ùíú := by
    rintro U‚ÇÅ V‚ÇÅ huseful hUcard
    by_contra h
    exact hUcard.not_le <| t ‚ü®U‚ÇÅ, V‚ÇÅ‚ü© <| mem_filter.2 ‚ü®mem_univ _, huseful, h‚ü©
  have p1 : #(‚àÇ (ùìí U V ùíú)) ‚â§ #(‚àÇ ùíú) := compression_improved _ hUV.2.1 h‚ÇÇ
  obtain ‚ü®-, hUV', hu, hv, hmax‚ü© := hUV.2.1
  have := familyMeasure_compression_lt_familyMeasure hmax hUV.2.2
  obtain ‚ü®t, q1, q2, q3, q4‚ü© := UV.kruskal_katona_helper (ùìí U V ùíú) (h.uvCompression hUV')
  exact ‚ü®t, q1.trans p1, (card_compression _ _ _).symm.trans q2, q3, q4‚ü©
termination_by familyMeasure ùíú
end UV
section KK
variable {r k i : ‚Ñï} {ùíú ùíû : Finset <| Finset <| Fin n}
theorem kruskal_katona (hùíúr : (ùíú : Set (Finset (Fin n))).Sized r) (hùíûùíú : #ùíû ‚â§ #ùíú)
    (hùíû : IsInitSeg ùíû r) : #(‚àÇ ùíû) ‚â§ #(‚àÇ ùíú) := by
  obtain ‚ü®ùíú', hùíú, hùíúùíû‚ü© := exists_subset_card_eq hùíûùíú
  obtain ‚ü®‚Ñ¨, h‚Ñ¨ùíú, hùíú‚Ñ¨, h‚Ñ¨r, h‚Ñ¨‚ü© := UV.kruskal_katona_helper ùíú' (hùíúr.mono (by gcongr))
  suffices ‚Ñ¨ = ùíû by subst ùíû; exact h‚Ñ¨ùíú.trans (by gcongr)
  have hcard : #‚Ñ¨ = #ùíû := hùíú‚Ñ¨.symm.trans hùíúùíû
  obtain hùíû‚Ñ¨ | h‚Ñ¨ùíû := hùíû.total (UV.isInitSeg_of_compressed h‚Ñ¨r h‚Ñ¨)
  ¬∑ exact (eq_of_subset_of_card_le hùíû‚Ñ¨ hcard.le).symm
  ¬∑ exact eq_of_subset_of_card_le h‚Ñ¨ùíû hcard.ge
theorem iterated_kk (h‚ÇÅ : (ùíú : Set (Finset (Fin n))).Sized r) (h‚ÇÇ : #ùíû ‚â§ #ùíú) (h‚ÇÉ : IsInitSeg ùíû r) :
    #(‚àÇ^[k] ùíû) ‚â§ #(‚àÇ^[k] ùíú) := by
  induction' k with _k ih generalizing r ùíú ùíû
  ¬∑ simpa
  ¬∑ refine ih h‚ÇÅ.shadow (kruskal_katona h‚ÇÅ h‚ÇÇ h‚ÇÉ) ?_
    convert h‚ÇÉ.shadow
theorem kruskal_katona_lovasz_form (hir : i ‚â§ r) (hrk : r ‚â§ k) (hkn : k ‚â§ n)
    (h‚ÇÅ : (ùíú : Set (Finset (Fin n))).Sized r) (h‚ÇÇ : k.choose r ‚â§ #ùíú) :
    k.choose (r - i) ‚â§ #(‚àÇ^[i] ùíú) := by
  set range'k : Finset (Fin n) :=
    attachFin (range k) fun m ‚Ü¶ by rw [mem_range]; apply forall_lt_iff_le.2 hkn
  set ùíû : Finset (Finset (Fin n)) := powersetCard r range'k
  have : (ùíû : Set (Finset (Fin n))).Sized r := Set.sized_powersetCard _ _
  calc
    k.choose (r - i)
    _ = #(powersetCard (r - i) range'k) := by rw [card_powersetCard, card_attachFin, card_range]
    _ = #(‚àÇ^[i] ùíû) := by
      congr!
      ext B
      rw [mem_powersetCard, mem_shadow_iterate_iff_exists_sdiff]
      constructor
      ¬∑ rintro ‚ü®hBk, hB‚ü©
        have := exists_subsuperset_card_eq hBk (Nat.le_add_left _ i) <| by
          rwa [hB, card_attachFin, card_range, ‚Üê Nat.add_sub_assoc hir, Nat.add_sub_cancel_left]
        obtain ‚ü®C, BsubC, hCrange, hcard‚ü© := this
        rw [hB, ‚Üê Nat.add_sub_assoc hir, Nat.add_sub_cancel_left] at hcard
        refine ‚ü®C, mem_powersetCard.2 ‚ü®hCrange, hcard‚ü©, BsubC, ?_‚ü©
        rw [card_sdiff BsubC, hcard, hB, Nat.sub_sub_self hir]
      ¬∑ rintro ‚ü®A, Ah, hBA, card_sdiff_i‚ü©
        rw [mem_powersetCard] at Ah
        refine ‚ü®hBA.trans Ah.1, eq_tsub_of_add_eq ?_‚ü©
        rw [‚Üê Ah.2, ‚Üê card_sdiff_i, add_comm, card_sdiff_add_card_eq_card hBA]
    _ ‚â§ #(‚àÇ ^[i] ùíú) := by
      refine iterated_kk h‚ÇÅ ?_ ‚ü®‚Äπ_‚Ä∫, ?_‚ü©
      ¬∑ rwa [card_powersetCard, card_attachFin, card_range]
      simp_rw [ùíû, mem_powersetCard]
      rintro A B hA ‚ü®HB‚ÇÅ, HB‚ÇÇ‚ü©
      refine ‚ü®fun t ht ‚Ü¶ ?_, ‚Äπ_‚Ä∫‚ü©
      rw [mem_attachFin, mem_range]
      have : toColex (image Fin.val B) < toColex (image Fin.val A) := by
        rwa [toColex_image_lt_toColex_image Fin.val_strictMono]
      apply Colex.forall_lt_mono this.le _ t (mem_image.2 ‚ü®t, ht, rfl‚ü©)
      simp_rw [mem_image]
      rintro _ ‚ü®a, ha, hab‚ü©
      simpa [range'k, hab] using hA.1 ha
end KK
theorem erdos_ko_rado {ùíú : Finset (Finset (Fin n))} {r : ‚Ñï}
    (hùíú : (ùíú : Set (Finset (Fin n))).Intersecting) (h‚ÇÇ : (ùíú : Set (Finset (Fin n))).Sized r)
    (h‚ÇÉ : r ‚â§ n / 2) :
    #ùíú ‚â§ (n - 1).choose (r - 1) := by
  cases' Nat.eq_zero_or_pos r with b h1r
  ¬∑ convert Nat.zero_le _
    rw [Finset.card_eq_zero, eq_empty_iff_forall_not_mem]
    refine fun A HA ‚Ü¶ hùíú HA HA ?_
    rw [disjoint_self_iff_empty, ‚Üê Finset.card_eq_zero, ‚Üê b]
    exact h‚ÇÇ HA
  refine le_of_not_lt fun size ‚Ü¶ ?_
  have : Disjoint ùíú (‚àÇ^[n - 2 * r] ùíú·∂úÀ¢) := disjoint_right.2 fun A hAbar hA ‚Ü¶ by
    simp [mem_shadow_iterate_iff_exists_sdiff, mem_compls] at hAbar
    obtain ‚ü®C, hC, hAC, _‚ü© := hAbar
    exact hùíú hA hC (disjoint_of_subset_left hAC disjoint_compl_right)
  have : r ‚â§ n := h‚ÇÉ.trans (Nat.div_le_self n 2)
  have : 1 ‚â§ n := ‚Äπ1 ‚â§ r‚Ä∫.trans ‚Äπr ‚â§ n‚Ä∫
  have z : (n - 1).choose (n - r) < #ùíú·∂úÀ¢ := by
    rwa [card_compls, choose_symm_of_eq_add (tsub_add_tsub_cancel ‚Äπr ‚â§ n‚Ä∫ ‚Äπ1 ‚â§ r‚Ä∫).symm]
  have hùíúbar : (ùíú·∂úÀ¢ : Set (Finset (Fin n))).Sized (n - r) := by simpa using h‚ÇÇ.compls
  have : n - 2 * r ‚â§ n - r := by
    rw [tsub_le_tsub_iff_left ‚Äπr ‚â§ n‚Ä∫]
    exact Nat.le_mul_of_pos_left _ zero_lt_two
  have kk := kruskal_katona_lovasz_form ‚Äπn - 2 * r ‚â§ n - r‚Ä∫ ((tsub_le_tsub_iff_left ‚Äπ1 ‚â§ n‚Ä∫).2 h1r)
      tsub_le_self hùíúbar z.le
  have : n - r - (n - 2 * r) = r := by omega
  rw [this] at kk
  have : n.choose r < #(ùíú ‚à™ ‚àÇ^[n - 2 * r] ùíú·∂úÀ¢) := by
    rw [card_union_of_disjoint ‚Äπ_‚Ä∫]
    convert lt_of_le_of_lt (add_le_add_left kk _) (add_lt_add_right size _) using 1
    convert Nat.choose_succ_succ _ _ using 3
    all_goals rwa [Nat.sub_one, Nat.succ_pred_eq_of_pos]
  apply this.not_le
  convert Set.Sized.card_le _
  ¬∑ rw [Fintype.card_fin]
  rw [coe_union, Set.sized_union]
  refine ‚ü®‚Äπ_‚Ä∫, ?_‚ü©
  convert hùíúbar.shadow_iterate
  omega
end Finset