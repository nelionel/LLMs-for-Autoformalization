import Mathlib.Topology.UniformSpace.CompactConvergence
import Mathlib.Topology.UniformSpace.Equicontinuity
import Mathlib.Topology.UniformSpace.Equiv
open Set Filter Uniformity Topology Function UniformConvergence
variable {Œπ X Œ± : Type*} [TopologicalSpace X] [UniformSpace Œ±] {F : Œπ ‚Üí X ‚Üí Œ±}
theorem Equicontinuous.comap_uniformFun_eq [CompactSpace X] (F_eqcont : Equicontinuous F) :
    (UniformFun.uniformSpace X Œ±).comap F =
    (Pi.uniformSpace _).comap F := by
  refine le_antisymm (UniformSpace.comap_mono UniformFun.uniformContinuous_toFun) ?_
  change comap _ _ ‚â§ comap _ _
  simp_rw [Pi.uniformity, Filter.comap_iInf, comap_comap, Function.comp_def]
  refine ((UniformFun.hasBasis_uniformity X Œ±).comap (Prod.map F F)).ge_iff.mpr ?_
  intro U hU
  rcases comp_comp_symm_mem_uniformity_sets hU with ‚ü®V, hV, Vsymm, hVU‚ü©
  let Œ© x : Set X := {y | ‚àÄ i, (F i x, F i y) ‚àà V}
  rcases CompactSpace.elim_nhds_subcover Œ© (fun x ‚Ü¶ F_eqcont x V hV) with ‚ü®A, Acover‚ü©
  have : (‚ãÇ a ‚àà A, {ij : Œπ √ó Œπ | (F ij.1 a, F ij.2 a) ‚àà V}) ‚äÜ
      (Prod.map F F) ‚Åª¬π' UniformFun.gen X Œ± U := by
    rintro ‚ü®i, j‚ü© hij x
    rw [mem_iInter‚ÇÇ] at hij
    rcases mem_iUnion‚ÇÇ.mp (Acover.symm.subset <| mem_univ x) with ‚ü®a, ha, hax‚ü©
    exact hVU (prod_mk_mem_compRel (prod_mk_mem_compRel
      (Vsymm.mk_mem_comm.mp (hax i)) (hij a ha)) (hax j))
  exact mem_of_superset
    (A.iInter_mem_sets.mpr fun x _ ‚Ü¶ mem_iInf_of_mem x <| preimage_mem_comap hV) this
lemma Equicontinuous.isUniformInducing_uniformFun_iff_pi [UniformSpace Œπ] [CompactSpace X]
    (F_eqcont : Equicontinuous F) :
    IsUniformInducing (UniformFun.ofFun ‚àò F) ‚Üî IsUniformInducing F := by
  rw [isUniformInducing_iff_uniformSpace, isUniformInducing_iff_uniformSpace,
      ‚Üê F_eqcont.comap_uniformFun_eq]
  rfl
@[deprecated (since := "2024-10-05")]
alias Equicontinuous.uniformInducing_uniformFun_iff_pi :=
  Equicontinuous.isUniformInducing_uniformFun_iff_pi
lemma Equicontinuous.inducing_uniformFun_iff_pi [TopologicalSpace Œπ] [CompactSpace X]
    (F_eqcont : Equicontinuous F) :
    IsInducing (UniformFun.ofFun ‚àò F) ‚Üî IsInducing F := by
  rw [isInducing_iff, isInducing_iff]
  change (_ = (UniformFun.uniformSpace X Œ± |>.comap F |>.toTopologicalSpace)) ‚Üî
         (_ = (Pi.uniformSpace _ |>.comap F |>.toTopologicalSpace))
  rw [F_eqcont.comap_uniformFun_eq]
theorem Equicontinuous.tendsto_uniformFun_iff_pi [CompactSpace X]
    (F_eqcont : Equicontinuous F) (‚Ñ± : Filter Œπ) (f : X ‚Üí Œ±) :
    Tendsto (UniformFun.ofFun ‚àò F) ‚Ñ± (ùìù <| UniformFun.ofFun f) ‚Üî
    Tendsto F ‚Ñ± (ùìù f) := by
  rcases ‚Ñ±.eq_or_neBot with rfl | ‚Ñ±_ne
  ¬∑ simp
  constructor <;> intro H
  ¬∑ exact UniformFun.uniformContinuous_toFun.continuous.tendsto _|>.comp H
  ¬∑ set S : Set (X ‚Üí Œ±) := closure (range F)
    set ùí¢ : Filter S := comap (‚Üë) (map F ‚Ñ±)
    have hS : S.Equicontinuous := closure' (by rwa [equicontinuous_iff_range] at F_eqcont)
      continuous_id
    have ind : IsInducing (UniformFun.ofFun ‚àò (‚Üë) : S ‚Üí X ‚Üí·µ§ Œ±) :=
      hS.inducing_uniformFun_iff_pi.mpr ‚ü®rfl‚ü©
    have f_mem : f ‚àà S := mem_closure_of_tendsto H range_mem_map
    have hùí¢‚Ñ± : map (‚Üë) ùí¢ = map F ‚Ñ± := Filter.map_comap_of_mem
      (Subtype.range_coe ‚ñ∏ mem_of_superset range_mem_map subset_closure)
    have H' : Tendsto id ùí¢ (ùìù ‚ü®f, f_mem‚ü©) := by
      rwa [tendsto_id', nhds_induced, ‚Üê map_le_iff_le_comap, hùí¢‚Ñ±]
    rwa [ind.tendsto_nhds_iff, comp_id, ‚Üê tendsto_map'_iff, hùí¢‚Ñ±] at H'
theorem EquicontinuousOn.comap_uniformOnFun_eq {ùîñ : Set (Set X)} (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K)
    (F_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn F K) :
    (UniformOnFun.uniformSpace X Œ± ùîñ).comap F =
    (Pi.uniformSpace _).comap ((‚ãÉ‚ÇÄ ùîñ).restrict ‚àò F) := by
  have H1 : (UniformOnFun.uniformSpace X Œ± ùîñ).comap F =
      ‚®Ö (K ‚àà ùîñ), (UniformFun.uniformSpace _ _).comap (K.restrict ‚àò F) := by
    simp_rw [UniformOnFun.uniformSpace, UniformSpace.comap_iInf, ‚Üê UniformSpace.comap_comap,
      UniformFun.ofFun, Equiv.coe_fn_mk, UniformOnFun.toFun, UniformOnFun.ofFun, Function.comp_def,
      UniformFun, Equiv.coe_fn_symm_mk]
  have H2 : (Pi.uniformSpace _).comap ((‚ãÉ‚ÇÄ ùîñ).restrict ‚àò F) =
      ‚®Ö (K ‚àà ùîñ), (Pi.uniformSpace _).comap (K.restrict ‚àò F) := by
    simp_rw [UniformSpace.comap_comap, Pi.uniformSpace_comap_restrict_sUnion (fun _ ‚Ü¶ Œ±) ùîñ,
      UniformSpace.comap_iInf]
  have H3 : ‚àÄ K ‚àà ùîñ, (UniformFun.uniformSpace K Œ±).comap (K.restrict ‚àò F) =
      (Pi.uniformSpace _).comap (K.restrict ‚àò F) := fun K hK ‚Ü¶ by
    have : CompactSpace K := isCompact_iff_compactSpace.mp (ùîñ_compact K hK)
    exact (equicontinuous_restrict_iff _ |>.mpr <| F_eqcont K hK).comap_uniformFun_eq
  simp_rw [H1, H2, iInf_congr fun K ‚Ü¶ iInf_congr fun hK ‚Ü¶ H3 K hK]
lemma EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi' [UniformSpace Œπ]
    {ùîñ : Set (Set X)} (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K)
    (F_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn F K) :
    IsUniformInducing (UniformOnFun.ofFun ùîñ ‚àò F) ‚Üî
    IsUniformInducing ((‚ãÉ‚ÇÄ ùîñ).restrict ‚àò F) := by
  rw [isUniformInducing_iff_uniformSpace, isUniformInducing_iff_uniformSpace,
      ‚Üê EquicontinuousOn.comap_uniformOnFun_eq ùîñ_compact F_eqcont]
  rfl
@[deprecated (since := "2024-10-05")]
alias EquicontinuousOn.uniformInducing_uniformOnFun_iff_pi' :=
  EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi'
lemma EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi [UniformSpace Œπ]
    {ùîñ : Set (Set X)} (ùîñ_covers : ‚ãÉ‚ÇÄ ùîñ = univ) (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K)
    (F_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn F K) :
    IsUniformInducing (UniformOnFun.ofFun ùîñ ‚àò F) ‚Üî
    IsUniformInducing F := by
  rw [eq_univ_iff_forall] at ùîñ_covers
  let œÜ : ((‚ãÉ‚ÇÄ ùîñ) ‚Üí Œ±) ‚âÉ·µ§ (X ‚Üí Œ±) := UniformEquiv.piCongrLeft (Œ≤ := fun _ ‚Ü¶ Œ±)
    (Equiv.subtypeUnivEquiv ùîñ_covers)
  rw [EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi' ùîñ_compact F_eqcont,
      show restrict (‚ãÉ‚ÇÄ ùîñ) ‚àò F = œÜ.symm ‚àò F by rfl]
  exact ‚ü®fun H ‚Ü¶ œÜ.isUniformInducing.comp H, fun H ‚Ü¶ œÜ.symm.isUniformInducing.comp H‚ü©
@[deprecated (since := "2024-10-05")]
alias EquicontinuousOn.uniformInducing_uniformOnFun_iff_pi :=
  EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi
lemma EquicontinuousOn.inducing_uniformOnFun_iff_pi' [TopologicalSpace Œπ]
    {ùîñ : Set (Set X)} (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K)
    (F_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn F K) :
    IsInducing (UniformOnFun.ofFun ùîñ ‚àò F) ‚Üî
    IsInducing ((‚ãÉ‚ÇÄ ùîñ).restrict ‚àò F) := by
  rw [isInducing_iff, isInducing_iff]
  change (_ = ((UniformOnFun.uniformSpace X Œ± ùîñ).comap F).toTopologicalSpace) ‚Üî
    (_ = ((Pi.uniformSpace _).comap ((‚ãÉ‚ÇÄ ùîñ).restrict ‚àò F)).toTopologicalSpace)
  rw [‚Üê EquicontinuousOn.comap_uniformOnFun_eq ùîñ_compact F_eqcont]
lemma EquicontinuousOn.isInducing_uniformOnFun_iff_pi [TopologicalSpace Œπ]
    {ùîñ : Set (Set X)} (ùîñ_covers : ‚ãÉ‚ÇÄ ùîñ = univ) (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K)
    (F_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn F K) :
    IsInducing (UniformOnFun.ofFun ùîñ ‚àò F) ‚Üî
    IsInducing F := by
  rw [eq_univ_iff_forall] at ùîñ_covers
  let œÜ : ((‚ãÉ‚ÇÄ ùîñ) ‚Üí Œ±) ‚âÉ‚Çú (X ‚Üí Œ±) := Homeomorph.piCongrLeft (Y := fun _ ‚Ü¶ Œ±)
    (Equiv.subtypeUnivEquiv ùîñ_covers)
  rw [EquicontinuousOn.inducing_uniformOnFun_iff_pi' ùîñ_compact F_eqcont,
      show restrict (‚ãÉ‚ÇÄ ùîñ) ‚àò F = œÜ.symm ‚àò F by rfl]
  exact ‚ü®fun H ‚Ü¶ œÜ.isInducing.comp H, fun H ‚Ü¶ œÜ.symm.isInducing.comp H‚ü©
@[deprecated (since := "2024-10-28")]
alias EquicontinuousOn.inducing_uniformOnFun_iff_pi :=
  EquicontinuousOn.isInducing_uniformOnFun_iff_pi
theorem EquicontinuousOn.tendsto_uniformOnFun_iff_pi'
    {ùîñ : Set (Set X)} (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K)
    (F_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn F K) (‚Ñ± : Filter Œπ) (f : X ‚Üí Œ±) :
    Tendsto (UniformOnFun.ofFun ùîñ ‚àò F) ‚Ñ± (ùìù <| UniformOnFun.ofFun ùîñ f) ‚Üî
    Tendsto ((‚ãÉ‚ÇÄ ùîñ).restrict ‚àò F) ‚Ñ± (ùìù <| (‚ãÉ‚ÇÄ ùîñ).restrict f) := by
  rw [‚Üê Filter.tendsto_comap_iff (g := (‚ãÉ‚ÇÄ ùîñ).restrict), ‚Üê nhds_induced]
  simp_rw [UniformOnFun.topologicalSpace_eq, Pi.induced_restrict_sUnion ùîñ (œÄ := fun _ ‚Ü¶ Œ±),
    _root_.nhds_iInf, nhds_induced, tendsto_iInf, tendsto_comap_iff]
  congrm ‚àÄ K (hK : K ‚àà ùîñ), ?_
  have : CompactSpace K := isCompact_iff_compactSpace.mp (ùîñ_compact K hK)
  rw [‚Üê (equicontinuous_restrict_iff _ |>.mpr <| F_eqcont K hK).tendsto_uniformFun_iff_pi]
  rfl
theorem EquicontinuousOn.tendsto_uniformOnFun_iff_pi
    {ùîñ : Set (Set X)} (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K) (ùîñ_covers : ‚ãÉ‚ÇÄ ùîñ = univ)
    (F_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn F K) (‚Ñ± : Filter Œπ) (f : X ‚Üí Œ±) :
    Tendsto (UniformOnFun.ofFun ùîñ ‚àò F) ‚Ñ± (ùìù <| UniformOnFun.ofFun ùîñ f) ‚Üî
    Tendsto F ‚Ñ± (ùìù f) := by
  rw [eq_univ_iff_forall] at ùîñ_covers
  let œÜ : ((‚ãÉ‚ÇÄ ùîñ) ‚Üí Œ±) ‚âÉ‚Çú (X ‚Üí Œ±) := Homeomorph.piCongrLeft (Y := fun _ ‚Ü¶ Œ±)
    (Equiv.subtypeUnivEquiv ùîñ_covers)
  rw [EquicontinuousOn.tendsto_uniformOnFun_iff_pi' ùîñ_compact F_eqcont,
      show restrict (‚ãÉ‚ÇÄ ùîñ) ‚àò F = œÜ.symm ‚àò F by rfl, show restrict (‚ãÉ‚ÇÄ ùîñ) f = œÜ.symm f by rfl,
      œÜ.symm.isInducing.tendsto_nhds_iff]
theorem EquicontinuousOn.isClosed_range_pi_of_uniformOnFun'
    {ùîñ : Set (Set X)} (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K)
    (F_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn F K)
    (H : IsClosed (range <| UniformOnFun.ofFun ùîñ ‚àò F)) :
    IsClosed (range <| (‚ãÉ‚ÇÄ ùîñ).restrict ‚àò F) := by
  rcases isEmpty_or_nonempty Œ± with _ | _
  ¬∑ simp [isClosed_discrete]
  simp_rw [isClosed_iff_clusterPt, ‚Üê Filter.map_top, ‚Üê mapClusterPt_def,
    mapClusterPt_iff_ultrafilter, range_comp, Subtype.coe_injective.surjective_comp_right.forall,
    ‚Üê restrict_eq, ‚Üê EquicontinuousOn.tendsto_uniformOnFun_iff_pi' ùîñ_compact F_eqcont]
  exact fun f ‚ü®u, _, hu‚ü© ‚Ü¶ mem_image_of_mem _ <| H.mem_of_tendsto hu <|
    Eventually.of_forall mem_range_self
theorem EquicontinuousOn.isClosed_range_uniformOnFun_iff_pi
    {ùîñ : Set (Set X)} (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K) (ùîñ_covers : ‚ãÉ‚ÇÄ ùîñ = univ)
    (F_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn F K) :
    IsClosed (range <| UniformOnFun.ofFun ùîñ ‚àò F) ‚Üî
    IsClosed (range F) := by
  simp_rw [isClosed_iff_clusterPt, ‚Üê Filter.map_top, ‚Üê mapClusterPt_def,
    mapClusterPt_iff_ultrafilter, range_comp, (UniformOnFun.ofFun ùîñ).surjective.forall,
    ‚Üê EquicontinuousOn.tendsto_uniformOnFun_iff_pi ùîñ_compact ùîñ_covers F_eqcont,
    (UniformOnFun.ofFun ùîñ).injective.mem_set_image]
alias ‚ü®EquicontinuousOn.isClosed_range_pi_of_uniformOnFun, _‚ü© :=
  EquicontinuousOn.isClosed_range_uniformOnFun_iff_pi
theorem ArzelaAscoli.compactSpace_of_closed_inducing' [TopologicalSpace Œπ] {ùîñ : Set (Set X)}
    (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K) (F_ind : IsInducing (UniformOnFun.ofFun ùîñ ‚àò F))
    (F_cl : IsClosed <| range <| UniformOnFun.ofFun ùîñ ‚àò F)
    (F_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn F K)
    (F_pointwiseCompact : ‚àÄ K ‚àà ùîñ, ‚àÄ x ‚àà K, ‚àÉ Q, IsCompact Q ‚àß ‚àÄ i, F i x ‚àà Q) :
    CompactSpace Œπ := by
  have : IsInducing (restrict (‚ãÉ‚ÇÄ ùîñ) ‚àò F) := by
    rwa [EquicontinuousOn.inducing_uniformOnFun_iff_pi' ùîñ_compact F_eqcont] at F_ind
  rw [‚Üê isCompact_univ_iff, this.isCompact_iff, image_univ]
  rw [‚Üê forall_sUnion] at F_pointwiseCompact
  choose! Q Q_compact F_in_Q using F_pointwiseCompact
  refine IsCompact.of_isClosed_subset (isCompact_univ_pi fun x ‚Ü¶ Q_compact x x.2)
    (EquicontinuousOn.isClosed_range_pi_of_uniformOnFun' ùîñ_compact F_eqcont F_cl)
    (range_subset_iff.mpr fun i x _ ‚Ü¶ F_in_Q x x.2 i)
theorem ArzelaAscoli.compactSpace_of_isClosedEmbedding [TopologicalSpace Œπ] {ùîñ : Set (Set X)}
    (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K) (F_clemb : IsClosedEmbedding (UniformOnFun.ofFun ùîñ ‚àò F))
    (F_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn F K)
    (F_pointwiseCompact : ‚àÄ K ‚àà ùîñ, ‚àÄ x ‚àà K, ‚àÉ Q, IsCompact Q ‚àß ‚àÄ i, F i x ‚àà Q) :
    CompactSpace Œπ :=
  compactSpace_of_closed_inducing' ùîñ_compact F_clemb.isInducing F_clemb.isClosed_range
    F_eqcont F_pointwiseCompact
@[deprecated (since := "2024-10-20")]
alias ArzelaAscoli.compactSpace_of_closedEmbedding := ArzelaAscoli.compactSpace_of_isClosedEmbedding
theorem ArzelaAscoli.isCompact_closure_of_isClosedEmbedding [TopologicalSpace Œπ] [T2Space Œ±]
    {ùîñ : Set (Set X)} (ùîñ_compact : ‚àÄ K ‚àà ùîñ, IsCompact K)
    (F_clemb : IsClosedEmbedding (UniformOnFun.ofFun ùîñ ‚àò F))
    {s : Set Œπ} (s_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn (F ‚àò ((‚Üë) : s ‚Üí Œπ)) K)
    (s_pointwiseCompact : ‚àÄ K ‚àà ùîñ, ‚àÄ x ‚àà K, ‚àÉ Q, IsCompact Q ‚àß ‚àÄ i ‚àà s, F i x ‚àà Q) :
    IsCompact (closure s) := by
  rw [isCompact_iff_compactSpace]
  have : ‚àÄ K ‚àà ùîñ, ‚àÄ x ‚àà K, Continuous (eval x ‚àò F) := fun K hK x hx ‚Ü¶
    UniformOnFun.uniformContinuous_eval_of_mem _ _ hx hK |>.continuous.comp F_clemb.continuous
  have cls_eqcont : ‚àÄ K ‚àà ùîñ, EquicontinuousOn (F ‚àò ((‚Üë) : closure s ‚Üí Œπ)) K :=
    fun K hK ‚Ü¶ (s_eqcont K hK).closure' <| show Continuous (K.restrict ‚àò F) from
      continuous_pi fun ‚ü®x, hx‚ü© ‚Ü¶ this K hK x hx
  have cls_pointwiseCompact : ‚àÄ K ‚àà ùîñ, ‚àÄ x ‚àà K, ‚àÉ Q, IsCompact Q ‚àß ‚àÄ i ‚àà closure s, F i x ‚àà Q :=
    fun K hK x hx ‚Ü¶ (s_pointwiseCompact K hK x hx).imp fun Q hQ ‚Ü¶ ‚ü®hQ.1, closure_minimal hQ.2 <|
      hQ.1.isClosed.preimage (this K hK x hx)‚ü©
  exact ArzelaAscoli.compactSpace_of_isClosedEmbedding ùîñ_compact
    (F_clemb.comp isClosed_closure.isClosedEmbedding_subtypeVal) cls_eqcont
    fun K hK x hx ‚Ü¶ (cls_pointwiseCompact K hK x hx).imp fun Q hQ ‚Ü¶ ‚ü®hQ.1, by simpa using hQ.2‚ü©
@[deprecated (since := "2024-10-20")]
alias ArzelaAscoli.isCompact_closure_of_closedEmbedding :=
  ArzelaAscoli.isCompact_closure_of_isClosedEmbedding
theorem ArzelaAscoli.isCompact_of_equicontinuous
    (S : Set C(X, Œ±)) (hS1 : IsCompact (ContinuousMap.toFun '' S))
    (hS2 : Equicontinuous ((‚Üë) : S ‚Üí X ‚Üí Œ±)) : IsCompact S := by
  suffices h : IsInducing (Equiv.Set.image _ S DFunLike.coe_injective) by
    rw [isCompact_iff_compactSpace] at hS1 ‚ä¢
    exact (Equiv.toHomeomorphOfIsInducing _ h).symm.compactSpace
  rw [‚Üê IsInducing.subtypeVal.of_comp_iff, ‚Üê EquicontinuousOn.isInducing_uniformOnFun_iff_pi _ _ _]
  ¬∑ exact ContinuousMap.isUniformEmbedding_toUniformOnFunIsCompact.isInducing.comp .subtypeVal
  ¬∑ exact eq_univ_iff_forall.mpr (fun x ‚Ü¶ mem_sUnion_of_mem (mem_singleton x) isCompact_singleton)
  ¬∑ exact fun _ ‚Ü¶ id
  ¬∑ exact fun K _ ‚Ü¶ hS2.equicontinuousOn K