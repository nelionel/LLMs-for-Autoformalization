import Mathlib.MeasureTheory.Measure.FiniteMeasure
import Mathlib.MeasureTheory.Integral.Average
noncomputable section
open Set Filter BoundedContinuousFunction Topology
open scoped ENNReal NNReal
namespace MeasureTheory
section ProbabilityMeasure
def ProbabilityMeasure (Œ© : Type*) [MeasurableSpace Œ©] : Type _ :=
  { Œº : Measure Œ© // IsProbabilityMeasure Œº }
namespace ProbabilityMeasure
variable {Œ© : Type*} [MeasurableSpace Œ©]
instance [Inhabited Œ©] : Inhabited (ProbabilityMeasure Œ©) :=
  ‚ü®‚ü®Measure.dirac default, Measure.dirac.isProbabilityMeasure‚ü©‚ü©
@[coe]
def toMeasure : ProbabilityMeasure Œ© ‚Üí Measure Œ© := Subtype.val
instance : Coe (ProbabilityMeasure Œ©) (MeasureTheory.Measure Œ©) := { coe := toMeasure }
instance (Œº : ProbabilityMeasure Œ©) : IsProbabilityMeasure (Œº : Measure Œ©) :=
  Œº.prop
@[simp, norm_cast] lemma coe_mk (Œº : Measure Œ©) (hŒº) : toMeasure ‚ü®Œº, hŒº‚ü© = Œº := rfl
@[simp]
theorem val_eq_to_measure (ŒΩ : ProbabilityMeasure Œ©) : ŒΩ.val = (ŒΩ : Measure Œ©) := rfl
theorem toMeasure_injective : Function.Injective ((‚Üë) : ProbabilityMeasure Œ© ‚Üí Measure Œ©) :=
  Subtype.coe_injective
instance instFunLike : FunLike (ProbabilityMeasure Œ©) (Set Œ©) ‚Ñù‚â•0 where
  coe Œº s := ((Œº : Measure Œ©) s).toNNReal
  coe_injective' Œº ŒΩ h := toMeasure_injective <| Measure.ext fun s _ ‚Ü¶ by
    simpa [ENNReal.toNNReal_eq_toNNReal_iff, measure_ne_top] using congr_fun h s
lemma coeFn_def (Œº : ProbabilityMeasure Œ©) : Œº = fun s ‚Ü¶ ((Œº : Measure Œ©) s).toNNReal := rfl
lemma coeFn_mk (Œº : Measure Œ©) (hŒº) :
    DFunLike.coe (F := ProbabilityMeasure Œ©) ‚ü®Œº, hŒº‚ü© = fun s ‚Ü¶ (Œº s).toNNReal := rfl
@[simp, norm_cast]
lemma mk_apply (Œº : Measure Œ©) (hŒº) (s : Set Œ©) :
    DFunLike.coe (F := ProbabilityMeasure Œ©) ‚ü®Œº, hŒº‚ü© s = (Œº s).toNNReal := rfl
@[simp, norm_cast]
theorem coeFn_univ (ŒΩ : ProbabilityMeasure Œ©) : ŒΩ univ = 1 :=
  congr_arg ENNReal.toNNReal ŒΩ.prop.measure_univ
theorem coeFn_univ_ne_zero (ŒΩ : ProbabilityMeasure Œ©) : ŒΩ univ ‚â† 0 := by
  simp only [coeFn_univ, Ne, one_ne_zero, not_false_iff]
def toFiniteMeasure (Œº : ProbabilityMeasure Œ©) : FiniteMeasure Œ© := ‚ü®Œº, inferInstance‚ü©
@[simp] lemma coeFn_toFiniteMeasure (Œº : ProbabilityMeasure Œ©) : ‚áëŒº.toFiniteMeasure = Œº := rfl
lemma toFiniteMeasure_apply (Œº : ProbabilityMeasure Œ©) (s : Set Œ©) :
    Œº.toFiniteMeasure s = Œº s := rfl
@[simp]
theorem toMeasure_comp_toFiniteMeasure_eq_toMeasure (ŒΩ : ProbabilityMeasure Œ©) :
    (ŒΩ.toFiniteMeasure : Measure Œ©) = (ŒΩ : Measure Œ©) := rfl
@[simp]
theorem coeFn_comp_toFiniteMeasure_eq_coeFn (ŒΩ : ProbabilityMeasure Œ©) :
    (ŒΩ.toFiniteMeasure : Set Œ© ‚Üí ‚Ñù‚â•0) = (ŒΩ : Set Œ© ‚Üí ‚Ñù‚â•0) := rfl
@[simp]
theorem toFiniteMeasure_apply_eq_apply (ŒΩ : ProbabilityMeasure Œ©) (s : Set Œ©) :
    ŒΩ.toFiniteMeasure s = ŒΩ s := rfl
@[simp]
theorem ennreal_coeFn_eq_coeFn_toMeasure (ŒΩ : ProbabilityMeasure Œ©) (s : Set Œ©) :
    (ŒΩ s : ‚Ñù‚â•0‚àû) = (ŒΩ : Measure Œ©) s := by
  rw [‚Üê coeFn_comp_toFiniteMeasure_eq_coeFn, FiniteMeasure.ennreal_coeFn_eq_coeFn_toMeasure,
    toMeasure_comp_toFiniteMeasure_eq_toMeasure]
@[simp]
theorem null_iff_toMeasure_null (ŒΩ : ProbabilityMeasure Œ©) (s : Set Œ©) :
    ŒΩ s = 0 ‚Üî (ŒΩ : Measure Œ©) s = 0 :=
  ‚ü®fun h ‚Ü¶ by rw [‚Üê ennreal_coeFn_eq_coeFn_toMeasure, h, ENNReal.coe_zero],
   fun h ‚Ü¶ congrArg ENNReal.toNNReal h‚ü©
theorem apply_mono (Œº : ProbabilityMeasure Œ©) {s‚ÇÅ s‚ÇÇ : Set Œ©} (h : s‚ÇÅ ‚äÜ s‚ÇÇ) : Œº s‚ÇÅ ‚â§ Œº s‚ÇÇ := by
  rw [‚Üê coeFn_comp_toFiniteMeasure_eq_coeFn]
  exact MeasureTheory.FiniteMeasure.apply_mono _ h
@[simp] theorem apply_le_one (Œº : ProbabilityMeasure Œ©) (s : Set Œ©) : Œº s ‚â§ 1 := by
  simpa using apply_mono Œº (subset_univ s)
theorem nonempty (Œº : ProbabilityMeasure Œ©) : Nonempty Œ© := by
  by_contra maybe_empty
  have zero : (Œº : Measure Œ©) univ = 0 := by
    rw [univ_eq_empty_iff.mpr (not_nonempty_iff.mp maybe_empty), measure_empty]
  rw [measure_univ] at zero
  exact zero_ne_one zero.symm
@[ext]
theorem eq_of_forall_toMeasure_apply_eq (Œº ŒΩ : ProbabilityMeasure Œ©)
    (h : ‚àÄ s : Set Œ©, MeasurableSet s ‚Üí (Œº : Measure Œ©) s = (ŒΩ : Measure Œ©) s) : Œº = ŒΩ := by
  apply toMeasure_injective
  ext1 s s_mble
  exact h s s_mble
theorem eq_of_forall_apply_eq (Œº ŒΩ : ProbabilityMeasure Œ©)
    (h : ‚àÄ s : Set Œ©, MeasurableSet s ‚Üí Œº s = ŒΩ s) : Œº = ŒΩ := by
  ext1 s s_mble
  simpa [ennreal_coeFn_eq_coeFn_toMeasure] using congr_arg ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) (h s s_mble)
@[simp]
theorem mass_toFiniteMeasure (Œº : ProbabilityMeasure Œ©) : Œº.toFiniteMeasure.mass = 1 :=
  Œº.coeFn_univ
theorem toFiniteMeasure_nonzero (Œº : ProbabilityMeasure Œ©) : Œº.toFiniteMeasure ‚â† 0 := by
  simp [‚Üê FiniteMeasure.mass_nonzero_iff]
section convergence_in_distribution
variable [TopologicalSpace Œ©] [OpensMeasurableSpace Œ©]
theorem testAgainstNN_lipschitz (Œº : ProbabilityMeasure Œ©) :
    LipschitzWith 1 fun f : Œ© ‚Üí·µá ‚Ñù‚â•0 ‚Ü¶ Œº.toFiniteMeasure.testAgainstNN f :=
  Œº.mass_toFiniteMeasure ‚ñ∏ Œº.toFiniteMeasure.testAgainstNN_lipschitz
instance : TopologicalSpace (ProbabilityMeasure Œ©) :=
  TopologicalSpace.induced toFiniteMeasure inferInstance
theorem toFiniteMeasure_continuous :
    Continuous (toFiniteMeasure : ProbabilityMeasure Œ© ‚Üí FiniteMeasure Œ©) :=
  continuous_induced_dom
def toWeakDualBCNN : ProbabilityMeasure Œ© ‚Üí WeakDual ‚Ñù‚â•0 (Œ© ‚Üí·µá ‚Ñù‚â•0) :=
  FiniteMeasure.toWeakDualBCNN ‚àò toFiniteMeasure
@[simp]
theorem coe_toWeakDualBCNN (Œº : ProbabilityMeasure Œ©) :
    ‚áëŒº.toWeakDualBCNN = Œº.toFiniteMeasure.testAgainstNN := rfl
@[simp]
theorem toWeakDualBCNN_apply (Œº : ProbabilityMeasure Œ©) (f : Œ© ‚Üí·µá ‚Ñù‚â•0) :
    Œº.toWeakDualBCNN f = (‚à´‚Åª œâ, f œâ ‚àÇ(Œº : Measure Œ©)).toNNReal := rfl
theorem toWeakDualBCNN_continuous : Continuous fun Œº : ProbabilityMeasure Œ© ‚Ü¶ Œº.toWeakDualBCNN :=
  FiniteMeasure.toWeakDualBCNN_continuous.comp toFiniteMeasure_continuous
theorem continuous_testAgainstNN_eval (f : Œ© ‚Üí·µá ‚Ñù‚â•0) :
    Continuous fun Œº : ProbabilityMeasure Œ© ‚Ü¶ Œº.toFiniteMeasure.testAgainstNN f :=
  (FiniteMeasure.continuous_testAgainstNN_eval f).comp toFiniteMeasure_continuous
theorem toFiniteMeasure_isEmbedding (Œ© : Type*) [MeasurableSpace Œ©] [TopologicalSpace Œ©]
    [OpensMeasurableSpace Œ©] :
    IsEmbedding (toFiniteMeasure : ProbabilityMeasure Œ© ‚Üí FiniteMeasure Œ©) where
  eq_induced := rfl
  injective _Œº _ŒΩ h := Subtype.eq <| congr_arg FiniteMeasure.toMeasure h
@[deprecated (since := "2024-10-26")]
alias toFiniteMeasure_embedding := toFiniteMeasure_isEmbedding
theorem tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds {Œ¥ : Type*} (F : Filter Œ¥)
    {Œºs : Œ¥ ‚Üí ProbabilityMeasure Œ©} {Œº‚ÇÄ : ProbabilityMeasure Œ©} :
    Tendsto Œºs F (ùìù Œº‚ÇÄ) ‚Üî Tendsto (toFiniteMeasure ‚àò Œºs) F (ùìù Œº‚ÇÄ.toFiniteMeasure) :=
  (toFiniteMeasure_isEmbedding Œ©).tendsto_nhds_iff
theorem tendsto_iff_forall_lintegral_tendsto {Œ≥ : Type*} {F : Filter Œ≥}
    {Œºs : Œ≥ ‚Üí ProbabilityMeasure Œ©} {Œº : ProbabilityMeasure Œ©} :
    Tendsto Œºs F (ùìù Œº) ‚Üî
      ‚àÄ f : Œ© ‚Üí·µá ‚Ñù‚â•0,
        Tendsto (fun i ‚Ü¶ ‚à´‚Åª œâ, f œâ ‚àÇ(Œºs i : Measure Œ©)) F (ùìù (‚à´‚Åª œâ, f œâ ‚àÇ(Œº : Measure Œ©))) := by
  rw [tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds]
  exact FiniteMeasure.tendsto_iff_forall_lintegral_tendsto
theorem tendsto_iff_forall_integral_tendsto {Œ≥ : Type*} {F : Filter Œ≥}
    {Œºs : Œ≥ ‚Üí ProbabilityMeasure Œ©} {Œº : ProbabilityMeasure Œ©} :
    Tendsto Œºs F (ùìù Œº) ‚Üî
      ‚àÄ f : Œ© ‚Üí·µá ‚Ñù,
        Tendsto (fun i ‚Ü¶ ‚à´ œâ, f œâ ‚àÇ(Œºs i : Measure Œ©)) F (ùìù (‚à´ œâ, f œâ ‚àÇ(Œº : Measure Œ©))) := by
  rw [tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds]
  rw [FiniteMeasure.tendsto_iff_forall_integral_tendsto]
  rfl
lemma continuous_integral_boundedContinuousFunction
    {Œ± : Type*} [TopologicalSpace Œ±] [MeasurableSpace Œ±] [OpensMeasurableSpace Œ±] (f : Œ± ‚Üí·µá ‚Ñù) :
    Continuous fun Œº : ProbabilityMeasure Œ± ‚Ü¶ ‚à´ x, f x ‚àÇŒº := by
  rw [continuous_iff_continuousAt]
  intro Œº
  exact continuousAt_of_tendsto_nhds
    (ProbabilityMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)
end convergence_in_distribution 
section Hausdorff
variable [TopologicalSpace Œ©] [HasOuterApproxClosed Œ©] [BorelSpace Œ©]
variable (Œ©)
instance t2Space : T2Space (ProbabilityMeasure Œ©) := (toFiniteMeasure_isEmbedding Œ©).t2Space
end Hausdorff 
end ProbabilityMeasure
end ProbabilityMeasure
section NormalizeFiniteMeasure
namespace FiniteMeasure
variable {Œ© : Type*} [Nonempty Œ©] {m0 : MeasurableSpace Œ©} (Œº : FiniteMeasure Œ©)
def normalize : ProbabilityMeasure Œ© :=
  if zero : Œº.mass = 0 then ‚ü®Measure.dirac ‚ÄπNonempty Œ©‚Ä∫.some, Measure.dirac.isProbabilityMeasure‚ü©
  else
    { val := ‚Üë(Œº.mass‚Åª¬π ‚Ä¢ Œº)
      property := by
        refine ‚ü®?_‚ü©
        rw [FiniteMeasure.toMeasure_smul]
        simp only [Measure.coe_smul, Pi.smul_apply, Measure.nnreal_smul_coe_apply, ne_eq,
          mass_zero_iff, ENNReal.coe_inv zero, ennreal_mass]
        rw [‚Üê Ne, ‚Üê ENNReal.coe_ne_zero, ennreal_mass] at zero
        exact ENNReal.inv_mul_cancel zero Œº.prop.measure_univ_lt_top.ne }
@[simp]
theorem self_eq_mass_mul_normalize (s : Set Œ©) : Œº s = Œº.mass * Œº.normalize s := by
  obtain rfl | h := eq_or_ne Œº 0
  ¬∑ simp
  have mass_nonzero : Œº.mass ‚â† 0 := by rwa [Œº.mass_nonzero_iff]
  simp only [normalize, dif_neg mass_nonzero]
  simp [ProbabilityMeasure.coe_mk, toMeasure_smul, mul_inv_cancel_left‚ÇÄ mass_nonzero, coeFn_def]
theorem self_eq_mass_smul_normalize : Œº = Œº.mass ‚Ä¢ Œº.normalize.toFiniteMeasure := by
  apply eq_of_forall_apply_eq
  intro s _s_mble
  rw [Œº.self_eq_mass_mul_normalize s, smul_apply, smul_eq_mul,
    ProbabilityMeasure.coeFn_comp_toFiniteMeasure_eq_coeFn]
theorem normalize_eq_of_nonzero (nonzero : Œº ‚â† 0) (s : Set Œ©) : Œº.normalize s = Œº.mass‚Åª¬π * Œº s := by
  simp only [Œº.self_eq_mass_mul_normalize, Œº.mass_nonzero_iff.mpr nonzero, inv_mul_cancel_left‚ÇÄ,
    Ne, not_false_iff]
theorem normalize_eq_inv_mass_smul_of_nonzero (nonzero : Œº ‚â† 0) :
    Œº.normalize.toFiniteMeasure = Œº.mass‚Åª¬π ‚Ä¢ Œº := by
  nth_rw 3 [Œº.self_eq_mass_smul_normalize]
  rw [‚Üê smul_assoc]
  simp only [Œº.mass_nonzero_iff.mpr nonzero, Algebra.id.smul_eq_mul, inv_mul_cancel‚ÇÄ, Ne,
    not_false_iff, one_smul]
theorem toMeasure_normalize_eq_of_nonzero (nonzero : Œº ‚â† 0) :
    (Œº.normalize : Measure Œ©) = Œº.mass‚Åª¬π ‚Ä¢ Œº := by
  ext1 s _s_mble
  rw [‚Üê Œº.normalize.ennreal_coeFn_eq_coeFn_toMeasure s, Œº.normalize_eq_of_nonzero nonzero s,
    ENNReal.coe_mul, ennreal_coeFn_eq_coeFn_toMeasure]
  exact Measure.coe_nnreal_smul_apply _ _ _
@[simp]
theorem _root_.ProbabilityMeasure.toFiniteMeasure_normalize_eq_self {m0 : MeasurableSpace Œ©}
    (Œº : ProbabilityMeasure Œ©) : Œº.toFiniteMeasure.normalize = Œº := by
  apply ProbabilityMeasure.eq_of_forall_apply_eq
  intro s _s_mble
  rw [Œº.toFiniteMeasure.normalize_eq_of_nonzero Œº.toFiniteMeasure_nonzero s]
  simp only [ProbabilityMeasure.mass_toFiniteMeasure, inv_one, one_mul, Œº.coeFn_toFiniteMeasure]
theorem average_eq_integral_normalize {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
    (nonzero : Œº ‚â† 0) (f : Œ© ‚Üí E) :
    average (Œº : Measure Œ©) f = ‚à´ œâ, f œâ ‚àÇ(Œº.normalize : Measure Œ©) := by
  rw [Œº.toMeasure_normalize_eq_of_nonzero nonzero, average]
  congr
  simp [ENNReal.coe_inv (Œº.mass_nonzero_iff.mpr nonzero), ennreal_mass]
variable [TopologicalSpace Œ©]
theorem testAgainstNN_eq_mass_mul (f : Œ© ‚Üí·µá ‚Ñù‚â•0) :
    Œº.testAgainstNN f = Œº.mass * Œº.normalize.toFiniteMeasure.testAgainstNN f := by
  nth_rw 1 [Œº.self_eq_mass_smul_normalize]
  rw [Œº.normalize.toFiniteMeasure.smul_testAgainstNN_apply Œº.mass f, smul_eq_mul]
theorem normalize_testAgainstNN (nonzero : Œº ‚â† 0) (f : Œ© ‚Üí·µá ‚Ñù‚â•0) :
    Œº.normalize.toFiniteMeasure.testAgainstNN f = Œº.mass‚Åª¬π * Œº.testAgainstNN f := by
  simp [Œº.testAgainstNN_eq_mass_mul, inv_mul_cancel_left‚ÇÄ <| Œº.mass_nonzero_iff.mpr nonzero]
variable [OpensMeasurableSpace Œ©]
variable {Œº}
theorem tendsto_testAgainstNN_of_tendsto_normalize_testAgainstNN_of_tendsto_mass {Œ≥ : Type*}
    {F : Filter Œ≥} {Œºs : Œ≥ ‚Üí FiniteMeasure Œ©}
    (Œºs_lim : Tendsto (fun i ‚Ü¶ (Œºs i).normalize) F (ùìù Œº.normalize))
    (mass_lim : Tendsto (fun i ‚Ü¶ (Œºs i).mass) F (ùìù Œº.mass)) (f : Œ© ‚Üí·µá ‚Ñù‚â•0) :
    Tendsto (fun i ‚Ü¶ (Œºs i).testAgainstNN f) F (ùìù (Œº.testAgainstNN f)) := by
  by_cases h_mass : Œº.mass = 0
  ¬∑ simp only [Œº.mass_zero_iff.mp h_mass, zero_testAgainstNN_apply, zero_mass,
      eq_self_iff_true] at mass_lim ‚ä¢
    exact tendsto_zero_testAgainstNN_of_tendsto_zero_mass mass_lim f
  simp_rw [fun i ‚Ü¶ (Œºs i).testAgainstNN_eq_mass_mul f, Œº.testAgainstNN_eq_mass_mul f]
  rw [ProbabilityMeasure.tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds] at Œºs_lim
  rw [tendsto_iff_forall_testAgainstNN_tendsto] at Œºs_lim
  have lim_pair :
    Tendsto (fun i ‚Ü¶ (‚ü®(Œºs i).mass, (Œºs i).normalize.toFiniteMeasure.testAgainstNN f‚ü© : ‚Ñù‚â•0 √ó ‚Ñù‚â•0))
      F (ùìù ‚ü®Œº.mass, Œº.normalize.toFiniteMeasure.testAgainstNN f‚ü©) :=
    (Prod.tendsto_iff _ _).mpr ‚ü®mass_lim, Œºs_lim f‚ü©
  exact tendsto_mul.comp lim_pair
theorem tendsto_normalize_testAgainstNN_of_tendsto {Œ≥ : Type*} {F : Filter Œ≥}
    {Œºs : Œ≥ ‚Üí FiniteMeasure Œ©} (Œºs_lim : Tendsto Œºs F (ùìù Œº)) (nonzero : Œº ‚â† 0) (f : Œ© ‚Üí·µá ‚Ñù‚â•0) :
    Tendsto (fun i ‚Ü¶ (Œºs i).normalize.toFiniteMeasure.testAgainstNN f) F
      (ùìù (Œº.normalize.toFiniteMeasure.testAgainstNN f)) := by
  have lim_mass := Œºs_lim.mass
  have aux : {(0 : ‚Ñù‚â•0)}·∂ú ‚àà ùìù Œº.mass :=
    isOpen_compl_singleton.mem_nhds (Œº.mass_nonzero_iff.mpr nonzero)
  have eventually_nonzero : ‚àÄ·∂† i in F, Œºs i ‚â† 0 := by
    simp_rw [‚Üê mass_nonzero_iff]
    exact lim_mass aux
  have eve : ‚àÄ·∂† i in F,
      (Œºs i).normalize.toFiniteMeasure.testAgainstNN f =
        (Œºs i).mass‚Åª¬π * (Œºs i).testAgainstNN f := by
    filter_upwards [eventually_iff.mp eventually_nonzero]
    intro i hi
    apply normalize_testAgainstNN _ hi
  simp_rw [tendsto_congr' eve, Œº.normalize_testAgainstNN nonzero]
  have lim_pair :
    Tendsto (fun i ‚Ü¶ (‚ü®(Œºs i).mass‚Åª¬π, (Œºs i).testAgainstNN f‚ü© : ‚Ñù‚â•0 √ó ‚Ñù‚â•0)) F
      (ùìù ‚ü®Œº.mass‚Åª¬π, Œº.testAgainstNN f‚ü©) := by
    refine (Prod.tendsto_iff _ _).mpr ‚ü®?_, ?_‚ü©
    ¬∑ exact (continuousOn_inv‚ÇÄ.continuousAt aux).tendsto.comp lim_mass
    ¬∑ exact tendsto_iff_forall_testAgainstNN_tendsto.mp Œºs_lim f
  exact tendsto_mul.comp lim_pair
theorem tendsto_of_tendsto_normalize_testAgainstNN_of_tendsto_mass {Œ≥ : Type*} {F : Filter Œ≥}
    {Œºs : Œ≥ ‚Üí FiniteMeasure Œ©} (Œºs_lim : Tendsto (fun i ‚Ü¶ (Œºs i).normalize) F (ùìù Œº.normalize))
    (mass_lim : Tendsto (fun i ‚Ü¶ (Œºs i).mass) F (ùìù Œº.mass)) : Tendsto Œºs F (ùìù Œº) := by
  rw [tendsto_iff_forall_testAgainstNN_tendsto]
  exact fun f ‚Ü¶
    tendsto_testAgainstNN_of_tendsto_normalize_testAgainstNN_of_tendsto_mass Œºs_lim mass_lim f
theorem tendsto_normalize_of_tendsto {Œ≥ : Type*} {F : Filter Œ≥} {Œºs : Œ≥ ‚Üí FiniteMeasure Œ©}
    (Œºs_lim : Tendsto Œºs F (ùìù Œº)) (nonzero : Œº ‚â† 0) :
    Tendsto (fun i ‚Ü¶ (Œºs i).normalize) F (ùìù Œº.normalize) := by
  rw [ProbabilityMeasure.tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds,
    tendsto_iff_forall_testAgainstNN_tendsto]
  exact fun f ‚Ü¶ tendsto_normalize_testAgainstNN_of_tendsto Œºs_lim nonzero f
theorem tendsto_normalize_iff_tendsto {Œ≥ : Type*} {F : Filter Œ≥} {Œºs : Œ≥ ‚Üí FiniteMeasure Œ©}
    (nonzero : Œº ‚â† 0) :
    Tendsto (fun i ‚Ü¶ (Œºs i).normalize) F (ùìù Œº.normalize) ‚àß
        Tendsto (fun i ‚Ü¶ (Œºs i).mass) F (ùìù Œº.mass) ‚Üî
      Tendsto Œºs F (ùìù Œº) := by
  constructor
  ¬∑ rintro ‚ü®normalized_lim, mass_lim‚ü©
    exact tendsto_of_tendsto_normalize_testAgainstNN_of_tendsto_mass normalized_lim mass_lim
  ¬∑ intro Œºs_lim
    exact ‚ü®tendsto_normalize_of_tendsto Œºs_lim nonzero, Œºs_lim.mass‚ü©
end FiniteMeasure 
end NormalizeFiniteMeasure 
section map
variable {Œ© Œ©' : Type*} [MeasurableSpace Œ©] [MeasurableSpace Œ©']
namespace ProbabilityMeasure
noncomputable def map (ŒΩ : ProbabilityMeasure Œ©) {f : Œ© ‚Üí Œ©'} (f_aemble : AEMeasurable f ŒΩ) :
    ProbabilityMeasure Œ©' :=
  ‚ü®(ŒΩ : Measure Œ©).map f,
   ‚ü®by simp only [Measure.map_apply_of_aemeasurable f_aemble MeasurableSet.univ,
                  preimage_univ, measure_univ]‚ü©‚ü©
@[simp] lemma toMeasure_map (ŒΩ : ProbabilityMeasure Œ©) {f : Œ© ‚Üí Œ©'} (hf : AEMeasurable f ŒΩ) :
    (ŒΩ.map hf).toMeasure = ŒΩ.toMeasure.map f := rfl
lemma map_apply' (ŒΩ : ProbabilityMeasure Œ©) {f : Œ© ‚Üí Œ©'} (f_aemble : AEMeasurable f ŒΩ)
    {A : Set Œ©'} (A_mble : MeasurableSet A) :
    (ŒΩ.map f_aemble : Measure Œ©') A = (ŒΩ : Measure Œ©) (f ‚Åª¬π' A) :=
  Measure.map_apply_of_aemeasurable f_aemble A_mble
lemma map_apply_of_aemeasurable (ŒΩ : ProbabilityMeasure Œ©) {f : Œ© ‚Üí Œ©'}
    (f_aemble : AEMeasurable f ŒΩ) {A : Set Œ©'} (A_mble : MeasurableSet A) :
    (ŒΩ.map f_aemble) A = ŒΩ (f ‚Åª¬π' A) := by
  exact (ENNReal.toNNReal_eq_toNNReal_iff' (measure_ne_top _ _) (measure_ne_top _ _)).mpr <|
    ŒΩ.map_apply' f_aemble A_mble
lemma map_apply (ŒΩ : ProbabilityMeasure Œ©) {f : Œ© ‚Üí Œ©'} (f_aemble : AEMeasurable f ŒΩ)
    {A : Set Œ©'} (A_mble : MeasurableSet A) :
    (ŒΩ.map f_aemble) A = ŒΩ (f ‚Åª¬π' A) :=
  map_apply_of_aemeasurable ŒΩ f_aemble A_mble
variable [TopologicalSpace Œ©] [OpensMeasurableSpace Œ©]
variable [TopologicalSpace Œ©'] [BorelSpace Œ©']
lemma tendsto_map_of_tendsto_of_continuous {Œπ : Type*} {L : Filter Œπ}
    (ŒΩs : Œπ ‚Üí ProbabilityMeasure Œ©) (ŒΩ : ProbabilityMeasure Œ©) (lim : Tendsto ŒΩs L (ùìù ŒΩ))
    {f : Œ© ‚Üí Œ©'} (f_cont : Continuous f) :
    Tendsto (fun i ‚Ü¶ (ŒΩs i).map f_cont.measurable.aemeasurable) L
      (ùìù (ŒΩ.map f_cont.measurable.aemeasurable)) := by
  rw [ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto] at lim ‚ä¢
  intro g
  convert lim (g.compContinuous ‚ü®f, f_cont‚ü©) <;>
  ¬∑ simp only [map, compContinuous_apply, ContinuousMap.coe_mk]
    refine lintegral_map ?_ f_cont.measurable
    exact (ENNReal.continuous_coe.comp g.continuous).measurable
lemma continuous_map {f : Œ© ‚Üí Œ©'} (f_cont : Continuous f) :
    Continuous (fun ŒΩ ‚Ü¶ ProbabilityMeasure.map ŒΩ f_cont.measurable.aemeasurable) := by
  rw [continuous_iff_continuousAt]
  exact fun _ ‚Ü¶ tendsto_map_of_tendsto_of_continuous _ _ continuous_id.continuousAt f_cont
end ProbabilityMeasure 
end map 
end MeasureTheory 