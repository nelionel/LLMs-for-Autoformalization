import Mathlib.CategoryTheory.Bicategory.Basic
namespace CategoryTheory
open Category Bicategory
open Bicategory
universe w‚ÇÅ w‚ÇÇ w‚ÇÉ v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
section
variable (B : Type u‚ÇÅ) [Quiver.{v‚ÇÅ + 1} B] [‚àÄ a b : B, Quiver.{w‚ÇÅ + 1} (a ‚ü∂ b)]
variable (C : Type u‚ÇÇ) [Quiver.{v‚ÇÇ + 1} C] [‚àÄ a b : C, Quiver.{w‚ÇÇ + 1} (a ‚ü∂ b)]
variable {D : Type u‚ÇÉ} [Quiver.{v‚ÇÉ + 1} D] [‚àÄ a b : D, Quiver.{w‚ÇÉ + 1} (a ‚ü∂ b)]
structure PrelaxFunctorStruct extends Prefunctor B C where
  map‚ÇÇ {a b : B} {f g : a ‚ü∂ b} : (f ‚ü∂ g) ‚Üí (map f ‚ü∂ map g)
initialize_simps_projections PrelaxFunctorStruct (+toPrefunctor, -obj, -map)
add_decl_doc PrelaxFunctorStruct.toPrefunctor
variable {B} {C}
namespace PrelaxFunctorStruct
@[simps]
def mkOfHomPrefunctors (F : B ‚Üí C) (F' : (a : B) ‚Üí (b : B) ‚Üí Prefunctor (a ‚ü∂ b) (F a ‚ü∂ F b)) :
    PrelaxFunctorStruct B C where
  obj := F
  map {a b} := (F' a b).obj
  map‚ÇÇ {a b} := (F' a b).map
@[simps]
def id (B : Type u‚ÇÅ) [Quiver.{v‚ÇÅ + 1} B] [‚àÄ a b : B, Quiver.{w‚ÇÅ + 1} (a ‚ü∂ b)] :
    PrelaxFunctorStruct B B :=
  { Prefunctor.id B with map‚ÇÇ := fun Œ∑ => Œ∑ }
instance : Inhabited (PrelaxFunctorStruct B B) :=
  ‚ü®PrelaxFunctorStruct.id B‚ü©
@[simps]
def comp (F : PrelaxFunctorStruct B C) (G : PrelaxFunctorStruct C D) : PrelaxFunctorStruct B D where
  toPrefunctor := F.toPrefunctor.comp G.toPrefunctor
  map‚ÇÇ := fun Œ∑ => G.map‚ÇÇ (F.map‚ÇÇ Œ∑)
end PrelaxFunctorStruct
end
structure PrelaxFunctor (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] (C : Type u‚ÇÇ) [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]
    extends PrelaxFunctorStruct B C where
  map‚ÇÇ_id : ‚àÄ {a b : B} (f : a ‚ü∂ b), map‚ÇÇ (ùüô f) = ùüô (map f) := by aesop 
  map‚ÇÇ_comp : ‚àÄ {a b : B} {f g h : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) (Œ∏ : g ‚ü∂ h),
      map‚ÇÇ (Œ∑ ‚â´ Œ∏) = map‚ÇÇ Œ∑ ‚â´ map‚ÇÇ Œ∏ := by aesop_cat
namespace PrelaxFunctor
initialize_simps_projections PrelaxFunctor (+toPrelaxFunctorStruct, -obj, -map, -map‚ÇÇ)
attribute [simp] map‚ÇÇ_id
attribute [reassoc] map‚ÇÇ_comp
attribute [simp] map‚ÇÇ_comp
add_decl_doc PrelaxFunctor.toPrelaxFunctorStruct
variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]
variable {D : Type u‚ÇÉ} [Bicategory.{w‚ÇÉ, v‚ÇÉ} D]
@[simps]
def mkOfHomFunctors (F : B ‚Üí C) (F' : (a : B) ‚Üí (b : B) ‚Üí (a ‚ü∂ b) ‚•§ (F a ‚ü∂ F b)) :
    PrelaxFunctor B C where
  toPrelaxFunctorStruct := PrelaxFunctorStruct.mkOfHomPrefunctors F fun a b => (F' a b).toPrefunctor
  map‚ÇÇ_id {a b} := (F' a b).map_id
  map‚ÇÇ_comp {a b} := (F' a b).map_comp
@[simps]
def id (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] : PrelaxFunctor B B where
  toPrelaxFunctorStruct := PrelaxFunctorStruct.id B
instance : Inhabited (PrelaxFunctorStruct B B) :=
  ‚ü®PrelaxFunctorStruct.id B‚ü©
variable (F : PrelaxFunctor B C)
@[simps]
def comp (G : PrelaxFunctor C D) : PrelaxFunctor B D where
  toPrelaxFunctorStruct := PrelaxFunctorStruct.comp F.toPrelaxFunctorStruct G.toPrelaxFunctorStruct
@[simps]
def mapFunctor (a b : B) : (a ‚ü∂ b) ‚•§ (F.obj a ‚ü∂ F.obj b) where
  obj f := F.map f
  map Œ∑ := F.map‚ÇÇ Œ∑
@[simp]
lemma mkOfHomFunctors_mapFunctor (F : B ‚Üí C) (F' : (a : B) ‚Üí (b : B) ‚Üí (a ‚ü∂ b) ‚•§ (F a ‚ü∂ F b))
    (a b : B) : (mkOfHomFunctors F F').mapFunctor a b = F' a b :=
  rfl
section
variable {a b : B}
@[simps!]
abbrev map‚ÇÇIso {f g : a ‚ü∂ b} (Œ∑ : f ‚âÖ g) : F.map f ‚âÖ F.map g :=
  (F.mapFunctor a b).mapIso Œ∑
instance map‚ÇÇ_isIso {f g : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) [IsIso Œ∑] : IsIso (F.map‚ÇÇ Œ∑) :=
  (F.map‚ÇÇIso (asIso Œ∑)).isIso_hom
@[simp]
lemma map‚ÇÇ_inv {f g : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) [IsIso Œ∑] : F.map‚ÇÇ (inv Œ∑) = inv (F.map‚ÇÇ Œ∑) := by
  apply IsIso.eq_inv_of_hom_inv_id
  simp [‚Üê F.map‚ÇÇ_comp Œ∑ (inv Œ∑)]
@[reassoc, simp]
lemma map‚ÇÇ_hom_inv {f g : a ‚ü∂ b} (Œ∑ : f ‚âÖ g) :
    F.map‚ÇÇ Œ∑.hom ‚â´ F.map‚ÇÇ Œ∑.inv = ùüô (F.map f) := by
  rw [‚Üê F.map‚ÇÇ_comp, Iso.hom_inv_id, F.map‚ÇÇ_id]
@[reassoc]
lemma map‚ÇÇ_hom_inv_isIso {f g : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) [IsIso Œ∑] :
    F.map‚ÇÇ Œ∑ ‚â´ F.map‚ÇÇ (inv Œ∑) = ùüô (F.map f) := by
  simp
@[reassoc, simp]
lemma map‚ÇÇ_inv_hom {f g : a ‚ü∂ b} (Œ∑ : f ‚âÖ g) :
    F.map‚ÇÇ Œ∑.inv ‚â´ F.map‚ÇÇ Œ∑.hom = ùüô (F.map g) := by
  rw [‚Üê F.map‚ÇÇ_comp, Iso.inv_hom_id, F.map‚ÇÇ_id]
@[reassoc]
lemma map‚ÇÇ_inv_hom_isIso {f g : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) [IsIso Œ∑] :
    F.map‚ÇÇ (inv Œ∑) ‚â´ F.map‚ÇÇ Œ∑ = ùüô (F.map g) := by
  simp
end
end PrelaxFunctor
end CategoryTheory