import Mathlib.Topology.Category.CompHaus.Basic
import Mathlib.Topology.Compactification.OnePoint
universe u v w x
open TopologicalSpace Filter Topology Set
section UCompactlyGeneratedSpace
variable {X : Type w} {Y : Type x}
def TopologicalSpace.compactlyGenerated (X : Type w) [TopologicalSpace X] : TopologicalSpace X :=
  let f : (Œ£ (i : (S : CompHaus.{u}) √ó C(S, X)), i.fst) ‚Üí X := fun ‚ü®‚ü®_, i‚ü©, s‚ü© ‚Ü¶ i s
  coinduced f inferInstance
lemma continuous_from_compactlyGenerated [TopologicalSpace X] [t : TopologicalSpace Y] (f : X ‚Üí Y)
    (h : ‚àÄ (S : CompHaus.{u}) (g : C(S, X)), Continuous (f ‚àò g)) :
        Continuous[compactlyGenerated.{u} X, t] f := by
  rw [continuous_coinduced_dom]
  continuity
class UCompactlyGeneratedSpace (X : Type v) [t : TopologicalSpace X] : Prop where
  le_compactlyGenerated : t ‚â§ compactlyGenerated.{u} X
lemma eq_compactlyGenerated [t : TopologicalSpace X] [UCompactlyGeneratedSpace.{u} X] :
    t = compactlyGenerated.{u} X := by
  apply le_antisymm
  ¬∑ exact UCompactlyGeneratedSpace.le_compactlyGenerated
  ¬∑ simp only [compactlyGenerated, ‚Üê continuous_iff_coinduced_le, continuous_sigma_iff,
      Sigma.forall]
    exact fun S f ‚Ü¶ f.2
instance (X : Type v) [t : TopologicalSpace X] [DiscreteTopology X] :
    UCompactlyGeneratedSpace.{u} X where
  le_compactlyGenerated := by
    rw [DiscreteTopology.eq_bot (t := t)]
    exact bot_le
#adaptation_note
set_option linter.unusedVariables false in
lemma uCompactlyGeneratedSpace_of_continuous_maps [t : TopologicalSpace X]
    (h : ‚àÄ {Y : Type w} [tY : TopologicalSpace Y] (f : X ‚Üí Y),
      (‚àÄ (S : CompHaus.{u}) (g : C(S, X)), Continuous (f ‚àò g)) ‚Üí Continuous f) :
        UCompactlyGeneratedSpace.{u} X where
  le_compactlyGenerated := by
    suffices Continuous[t, compactlyGenerated.{u} X] (id : X ‚Üí X) by
      rwa [‚Üê continuous_id_iff_le]
    apply h (tY := compactlyGenerated.{u} X)
    intro S g
    let f : (Œ£ (i : (T : CompHaus.{u}) √ó C(T, X)), i.fst) ‚Üí X := fun ‚ü®‚ü®_, i‚ü©, s‚ü© ‚Ü¶ i s
    suffices ‚àÄ (i : (T : CompHaus.{u}) √ó C(T, X)),
      Continuous[inferInstance, compactlyGenerated X] (fun (a : i.fst) ‚Ü¶ f ‚ü®i, a‚ü©) from this ‚ü®S, g‚ü©
    rw [‚Üê @continuous_sigma_iff]
    apply continuous_coinduced_rng
variable [tX : TopologicalSpace X] [tY : TopologicalSpace Y]
lemma continuous_from_uCompactlyGeneratedSpace [UCompactlyGeneratedSpace.{u} X] (f : X ‚Üí Y)
    (h : ‚àÄ (S : CompHaus.{u}) (g : C(S, X)), Continuous (f ‚àò g)) : Continuous f := by
  apply continuous_le_dom UCompactlyGeneratedSpace.le_compactlyGenerated
  exact continuous_from_compactlyGenerated f h
theorem uCompactlyGeneratedSpace_of_isClosed
    (h : ‚àÄ (s : Set X), (‚àÄ (S : CompHaus.{u}) (f : C(S, X)), IsClosed (f ‚Åª¬π' s)) ‚Üí IsClosed s) :
    UCompactlyGeneratedSpace.{u} X :=
  uCompactlyGeneratedSpace_of_continuous_maps fun _ h' ‚Ü¶
    continuous_iff_isClosed.2 fun _ hs ‚Ü¶ h _ fun S g ‚Ü¶ hs.preimage (h' S g)
theorem uCompactlyGeneratedSpace_of_isOpen
    (h : ‚àÄ (s : Set X), (‚àÄ (S : CompHaus.{u}) (f : C(S, X)), IsOpen (f ‚Åª¬π' s)) ‚Üí IsOpen s) :
    UCompactlyGeneratedSpace.{u} X :=
  uCompactlyGeneratedSpace_of_continuous_maps fun _ h' ‚Ü¶
    continuous_def.2 fun _ hs ‚Ü¶ h _ fun S g ‚Ü¶ hs.preimage (h' S g)
theorem UCompactlyGeneratedSpace.isClosed [UCompactlyGeneratedSpace.{u} X] {s : Set X}
    (hs : ‚àÄ (S : CompHaus.{u}) (f : C(S, X)), IsClosed (f ‚Åª¬π' s)) : IsClosed s := by
  rw [eq_compactlyGenerated (X := X), TopologicalSpace.compactlyGenerated, isClosed_coinduced,
    isClosed_sigma_iff]
  exact fun ‚ü®S, f‚ü© ‚Ü¶ hs S f
theorem UCompactlyGeneratedSpace.isOpen [UCompactlyGeneratedSpace.{u} X] {s : Set X}
    (hs : ‚àÄ (S : CompHaus.{u}) (f : C(S, X)), IsOpen (f ‚Åª¬π' s)) : IsOpen s := by
  rw [eq_compactlyGenerated (X := X), TopologicalSpace.compactlyGenerated, isOpen_coinduced,
    isOpen_sigma_iff]
  exact fun ‚ü®S, f‚ü© ‚Ü¶ hs S f
theorem uCompactlyGeneratedSpace_of_coinduced
    [UCompactlyGeneratedSpace.{u} X] {f : X ‚Üí Y} (hf : Continuous f) (ht : tY = coinduced f tX) :
    UCompactlyGeneratedSpace.{u} Y := by
  refine uCompactlyGeneratedSpace_of_isClosed fun s h ‚Ü¶ ?_
  rw [ht, isClosed_coinduced]
  exact UCompactlyGeneratedSpace.isClosed fun _ ‚ü®g, hg‚ü© ‚Ü¶ h _ ‚ü®_, hf.comp hg‚ü©
instance {S : Setoid X} [UCompactlyGeneratedSpace.{u} X] :
    UCompactlyGeneratedSpace.{u} (Quotient S) :=
  uCompactlyGeneratedSpace_of_coinduced continuous_quotient_mk' rfl
instance [UCompactlyGeneratedSpace.{u} X] [UCompactlyGeneratedSpace.{v} Y] :
    UCompactlyGeneratedSpace.{max u v} (X ‚äï Y) := by
  refine uCompactlyGeneratedSpace_of_isClosed fun s h ‚Ü¶ isClosed_sum_iff.2 ‚ü®?_, ?_‚ü©
  all_goals
    refine UCompactlyGeneratedSpace.isClosed fun S ‚ü®f, hf‚ü© ‚Ü¶ ?_
  ¬∑ let g : ULift.{v} S ‚Üí X ‚äï Y := Sum.inl ‚àò f ‚àò ULift.down
    have hg : Continuous g := continuous_inl.comp <| hf.comp continuous_uLift_down
    exact (h (CompHaus.of (ULift.{v} S)) ‚ü®g, hg‚ü©).preimage continuous_uLift_up
  ¬∑ let g : ULift.{u} S ‚Üí X ‚äï Y := Sum.inr ‚àò f ‚àò ULift.down
    have hg : Continuous g := continuous_inr.comp <| hf.comp continuous_uLift_down
    exact (h (CompHaus.of (ULift.{u} S)) ‚ü®g, hg‚ü©).preimage continuous_uLift_up
instance {Œπ : Type v} {X : Œπ ‚Üí Type w} [‚àÄ i, TopologicalSpace (X i)]
    [‚àÄ i, UCompactlyGeneratedSpace.{u} (X i)] : UCompactlyGeneratedSpace.{u} (Œ£ i, X i) :=
  uCompactlyGeneratedSpace_of_isClosed fun _ h ‚Ü¶ isClosed_sigma_iff.2 fun i ‚Ü¶
    UCompactlyGeneratedSpace.isClosed fun S ‚ü®f, hf‚ü© ‚Ü¶
      h S ‚ü®Sigma.mk i ‚àò f, continuous_sigmaMk.comp hf‚ü©
open OnePoint in
instance (priority := 100) [SequentialSpace X] : UCompactlyGeneratedSpace.{u} X := by
  refine uCompactlyGeneratedSpace_of_isClosed fun s h ‚Ü¶
    SequentialSpace.isClosed_of_seq _ fun u p hu hup ‚Ü¶ ?_
  let g : ULift.{u} (OnePoint ‚Ñï) ‚Üí X := (continuousMapMkNat u p hup) ‚àò ULift.down
  change ULift.up ‚àû ‚àà g ‚Åª¬π' s
  have : Filter.Tendsto (@OnePoint.some ‚Ñï) Filter.atTop (ùìù ‚àû) := by
    rw [‚Üê Nat.cofinite_eq_atTop, ‚Üê cocompact_eq_cofinite, ‚Üê coclosedCompact_eq_cocompact]
    exact tendsto_coe_infty
  apply IsClosed.mem_of_tendsto _ ((continuous_uLift_up.tendsto ‚àû).comp this)
  ¬∑ simp only [Function.comp_apply, mem_preimage, eventually_atTop, ge_iff_le]
    exact ‚ü®0, fun b _ ‚Ü¶ hu b‚ü©
  ¬∑ exact h (CompHaus.of (ULift.{u} (OnePoint ‚Ñï)))
      ‚ü®g, (continuousMapMkNat u p hup).continuous.comp continuous_uLift_down‚ü©
end UCompactlyGeneratedSpace
section CompactlyGeneratedSpace
variable {X : Type u} {Y : Type v} [TopologicalSpace X] [TopologicalSpace Y]
abbrev CompactlyGeneratedSpace (X : Type u) [TopologicalSpace X] : Prop :=
  UCompactlyGeneratedSpace.{u} X
lemma continuous_from_compactlyGeneratedSpace [CompactlyGeneratedSpace X] (f : X ‚Üí Y)
    (h : ‚àÄ (K : Type u) [TopologicalSpace K], [CompactSpace K] ‚Üí [T2Space K] ‚Üí
      (‚àÄ g : K ‚Üí X, Continuous g ‚Üí Continuous (f ‚àò g))) : Continuous f :=
  continuous_from_uCompactlyGeneratedSpace f fun K ‚ü®g, hg‚ü© ‚Ü¶ h K g hg
lemma compactlyGeneratedSpace_of_continuous_maps
    (h : ‚àÄ {Y : Type u} [TopologicalSpace Y] (f : X ‚Üí Y),
      (‚àÄ (K : Type u) [TopologicalSpace K], [CompactSpace K] ‚Üí [T2Space K] ‚Üí
        (‚àÄ g : K ‚Üí X, Continuous g ‚Üí Continuous (f ‚àò g))) ‚Üí Continuous f) :
    CompactlyGeneratedSpace X :=
  uCompactlyGeneratedSpace_of_continuous_maps fun f h' ‚Ü¶ h f fun K _ _ _ g hg ‚Ü¶
    h' (CompHaus.of K) ‚ü®g, hg‚ü©
theorem compactlyGeneratedSpace_of_isClosed
    (h : ‚àÄ (s : Set X), (‚àÄ (K : Type u) [TopologicalSpace K], [CompactSpace K] ‚Üí [T2Space K] ‚Üí
      ‚àÄ (f : K ‚Üí X), Continuous f ‚Üí IsClosed (f ‚Åª¬π' s)) ‚Üí IsClosed s) :
    CompactlyGeneratedSpace X :=
  uCompactlyGeneratedSpace_of_isClosed fun s h' ‚Ü¶ h s fun K _ _ _ f hf ‚Ü¶ h' (CompHaus.of K) ‚ü®f, hf‚ü©
theorem CompactlyGeneratedSpace.isClosed' [CompactlyGeneratedSpace X] {s : Set X}
    (hs : ‚àÄ (K : Type u) [TopologicalSpace K], [CompactSpace K] ‚Üí [T2Space K] ‚Üí
      ‚àÄ (f : K ‚Üí X), Continuous f ‚Üí IsClosed (f ‚Åª¬π' s)) : IsClosed s :=
  UCompactlyGeneratedSpace.isClosed fun S ‚ü®f, hf‚ü© ‚Ü¶ hs S f hf
theorem CompactlyGeneratedSpace.isClosed [CompactlyGeneratedSpace X] {s : Set X}
    (hs : ‚àÄ ‚¶ÉK‚¶Ñ, IsCompact K ‚Üí IsClosed (s ‚à© K)) : IsClosed s := by
   refine isClosed' fun K _ _ _ f hf ‚Ü¶ ?_
   rw [‚Üê Set.preimage_inter_range]
   exact (hs (isCompact_range hf)).preimage hf
theorem compactlyGeneratedSpace_of_isOpen
    (h : ‚àÄ (s : Set X), (‚àÄ (K : Type u) [TopologicalSpace K], [CompactSpace K] ‚Üí [T2Space K] ‚Üí
      ‚àÄ (f : K ‚Üí X), Continuous f ‚Üí IsOpen (f ‚Åª¬π' s)) ‚Üí IsOpen s) :
    CompactlyGeneratedSpace X :=
  uCompactlyGeneratedSpace_of_isOpen fun s h' ‚Ü¶ h s fun K _ _ _ f hf ‚Ü¶ h' (CompHaus.of K) ‚ü®f, hf‚ü©
theorem CompactlyGeneratedSpace.isOpen' [CompactlyGeneratedSpace X] {s : Set X}
    (hs : ‚àÄ (K : Type u) [TopologicalSpace K], [CompactSpace K] ‚Üí [T2Space K] ‚Üí
      ‚àÄ (f : K ‚Üí X), Continuous f ‚Üí IsOpen (f ‚Åª¬π' s)) : IsOpen s :=
  UCompactlyGeneratedSpace.isOpen fun S ‚ü®f, hf‚ü© ‚Ü¶ hs S f hf
theorem CompactlyGeneratedSpace.isOpen [CompactlyGeneratedSpace X] {s : Set X}
    (hs : ‚àÄ ‚¶ÉK‚¶Ñ, IsCompact K ‚Üí IsOpen (s ‚à© K)) : IsOpen s := by
   refine isOpen' fun K _ _ _ f hf ‚Ü¶ ?_
   rw [‚Üê Set.preimage_inter_range]
   exact (hs (isCompact_range hf)).preimage hf
theorem compactlyGeneratedSpace_of_coinduced
    {X : Type u} [tX : TopologicalSpace X] {Y : Type u} [tY : TopologicalSpace Y]
    [CompactlyGeneratedSpace X] {f : X ‚Üí Y} (hf : Continuous f) (ht : tY = coinduced f tX) :
    CompactlyGeneratedSpace Y := uCompactlyGeneratedSpace_of_coinduced hf ht
instance {Œπ : Type u} {X : Œπ ‚Üí Type v}
    [‚àÄ i, TopologicalSpace (X i)] [‚àÄ i, CompactlyGeneratedSpace (X i)] :
    CompactlyGeneratedSpace (Œ£ i, X i) := by
  refine compactlyGeneratedSpace_of_isClosed fun s h ‚Ü¶ isClosed_sigma_iff.2 fun i ‚Ü¶
    CompactlyGeneratedSpace.isClosed' fun K _ _ _ f hf ‚Ü¶ ?_
  let g : ULift.{u} K ‚Üí (Œ£ i, X i) := Sigma.mk i ‚àò f ‚àò ULift.down
  have hg : Continuous g := continuous_sigmaMk.comp <| hf.comp continuous_uLift_down
  exact (h _ g hg).preimage continuous_uLift_up
variable [T2Space X]
theorem CompactlyGeneratedSpace.isClosed_iff_of_t2 [CompactlyGeneratedSpace X] (s : Set X) :
    IsClosed s ‚Üî ‚àÄ ‚¶ÉK‚¶Ñ, IsCompact K ‚Üí IsClosed (s ‚à© K) where
  mp hs _ hK := hs.inter hK.isClosed
  mpr := CompactlyGeneratedSpace.isClosed
theorem compactlyGeneratedSpace_of_isClosed_of_t2
    (h : ‚àÄ s, (‚àÄ (K : Set X), IsCompact K ‚Üí IsClosed (s ‚à© K)) ‚Üí IsClosed s) :
    CompactlyGeneratedSpace X := by
  refine compactlyGeneratedSpace_of_isClosed fun s hs ‚Ü¶ h s fun K hK ‚Ü¶ ?_
  rw [Set.inter_comm, ‚Üê Subtype.image_preimage_coe]
  apply hK.isClosed.isClosedMap_subtype_val
  have : CompactSpace ‚ÜëK := isCompact_iff_compactSpace.1 hK
  exact hs _ Subtype.val continuous_subtype_val
open scoped Set.Notation in
theorem compactlyGeneratedSpace_of_isOpen_of_t2
    (h : ‚àÄ s, (‚àÄ (K : Set X), IsCompact K ‚Üí IsOpen (K ‚Üì‚à© s)) ‚Üí IsOpen s) :
    CompactlyGeneratedSpace X := by
  refine compactlyGeneratedSpace_of_isOpen fun s hs ‚Ü¶ h s fun K hK ‚Ü¶ ?_
  have : CompactSpace ‚ÜëK := isCompact_iff_compactSpace.1 hK
  exact hs _ Subtype.val continuous_subtype_val
instance (priority := 100) [WeaklyLocallyCompactSpace X] :
    CompactlyGeneratedSpace X := by
  refine compactlyGeneratedSpace_of_isClosed_of_t2 fun s h ‚Ü¶ ?_
  rw [isClosed_iff_forall_filter]
  intro x ‚Ñ± h‚Ñ±‚ÇÅ h‚Ñ±‚ÇÇ h‚Ñ±‚ÇÉ
  rcases exists_compact_mem_nhds x with ‚ü®K, hK, K_mem‚ü©
  exact Set.mem_of_mem_inter_left <| isClosed_iff_forall_filter.1 (h _ hK) x ‚Ñ± h‚Ñ±‚ÇÅ
    (Filter.inf_principal ‚ñ∏ le_inf h‚Ñ±‚ÇÇ (le_trans h‚Ñ±‚ÇÉ <| Filter.le_principal_iff.2 K_mem)) h‚Ñ±‚ÇÉ
end CompactlyGeneratedSpace