import Mathlib.Topology.MetricSpace.Antilipschitz
import Mathlib.Topology.MetricSpace.Lipschitz
open NNReal
section Uniformity
open Uniformity
variable {Œ± Œ≤ : Type*} [PseudoEMetricSpace Œ±] [PseudoEMetricSpace Œ≤]
variable {K‚ÇÅ K‚ÇÇ : ‚Ñù‚â•0} {f : Œ± ‚Üí Œ≤}
lemma uniformity_eq_of_bilipschitz (hf‚ÇÅ : AntilipschitzWith K‚ÇÅ f) (hf‚ÇÇ : LipschitzWith K‚ÇÇ f) :
    ùì§[(inferInstance : UniformSpace Œ≤).comap f] = ùì§ Œ± :=
  hf‚ÇÅ.isUniformInducing hf‚ÇÇ.uniformContinuous |>.comap_uniformity
end Uniformity
section Bornology
open Bornology Filter
variable {Œ± Œ≤ : Type*} [PseudoMetricSpace Œ±] [PseudoMetricSpace Œ≤]
variable {K‚ÇÅ K‚ÇÇ : ‚Ñù‚â•0} {f : Œ± ‚Üí Œ≤}
lemma bornology_eq_of_bilipschitz (hf‚ÇÅ : AntilipschitzWith K‚ÇÅ f) (hf‚ÇÇ : LipschitzWith K‚ÇÇ f) :
    @cobounded _ (induced f) = cobounded Œ± :=
  le_antisymm hf‚ÇÇ.comap_cobounded_le hf‚ÇÅ.tendsto_cobounded.le_comap
lemma isBounded_iff_of_bilipschitz (hf‚ÇÅ : AntilipschitzWith K‚ÇÅ f) (hf‚ÇÇ : LipschitzWith K‚ÇÇ f)
    (s : Set Œ±) : @IsBounded _ (induced f) s ‚Üî Bornology.IsBounded s :=
  Filter.ext_iff.1 (bornology_eq_of_bilipschitz hf‚ÇÅ hf‚ÇÇ) (s·∂ú)
end Bornology