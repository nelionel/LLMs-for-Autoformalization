import Mathlib.Condensed.TopComparison
import Mathlib.Topology.Category.CompactlyGenerated
universe u
open Condensed CondensedSet CategoryTheory CompHaus
attribute [local instance] ConcreteCategory.instFunLike
variable (X : CondensedSet.{u})
private def CondensedSet.coinducingCoprod :
    (Œ£ (i : (S : CompHaus.{u}) √ó X.val.obj ‚ü®S‚ü©), i.fst) ‚Üí X.val.obj ‚ü®of PUnit‚ü© :=
  fun ‚ü®‚ü®_, i‚ü©, s‚ü© ‚Ü¶ X.val.map ((of PUnit.{u+1}).const s).op i
local instance : TopologicalSpace (X.val.obj ‚ü®CompHaus.of PUnit‚ü©) :=
  TopologicalSpace.coinduced (coinducingCoprod X) inferInstance
def CondensedSet.toTopCat : TopCat.{u+1} := TopCat.of (X.val.obj ‚ü®of PUnit‚ü©)
namespace CondensedSet
lemma continuous_coinducingCoprod {S : CompHaus.{u}} (x : X.val.obj ‚ü®S‚ü©) :
    Continuous fun a ‚Ü¶ (X.coinducingCoprod ‚ü®‚ü®S, x‚ü©, a‚ü©) := by
  suffices ‚àÄ (i : (T : CompHaus.{u}) √ó X.val.obj ‚ü®T‚ü©),
      Continuous (fun (a : i.fst) ‚Ü¶ X.coinducingCoprod ‚ü®i, a‚ü©) from this ‚ü®_, _‚ü©
  rw [‚Üê continuous_sigma_iff]
  apply continuous_coinduced_rng
variable {X} {Y : CondensedSet} (f : X ‚ü∂ Y)
@[simps]
def toTopCatMap : X.toTopCat ‚ü∂ Y.toTopCat where
  toFun := f.val.app ‚ü®of PUnit‚ü©
  continuous_toFun := by
    rw [continuous_coinduced_dom]
    apply continuous_sigma
    intro ‚ü®S, x‚ü©
    simp only [Function.comp_apply, coinducingCoprod]
    rw [show (fun (a : S) ‚Ü¶ f.val.app ‚ü®of PUnit‚ü© (X.val.map ((of PUnit.{u+1}).const a).op x)) = _
      from funext fun a ‚Ü¶ NatTrans.naturality_apply f.val ((of PUnit.{u+1}).const a).op x]
    exact continuous_coinducingCoprod Y _
end CondensedSet
@[simps]
def condensedSetToTopCat : CondensedSet.{u} ‚•§ TopCat.{u+1} where
  obj X := X.toTopCat
  map f := toTopCatMap f
namespace CondensedSet
@[simps]
def topCatAdjunctionCounit (X : TopCat.{u+1}) : X.toCondensedSet.toTopCat ‚ü∂ X where
  toFun x := x.1 PUnit.unit
  continuous_toFun := by
    rw [continuous_coinduced_dom]
    continuity
def topCatAdjunctionCounitEquiv (X : TopCat.{u+1}) : X.toCondensedSet.toTopCat ‚âÉ X where
  toFun := topCatAdjunctionCounit X
  invFun x := ContinuousMap.const _ x
  left_inv _ := rfl
  right_inv _ := rfl
lemma topCatAdjunctionCounit_bijective (X : TopCat.{u+1}) :
    Function.Bijective (topCatAdjunctionCounit X) :=
  (topCatAdjunctionCounitEquiv X).bijective
@[simps val_app val_app_apply]
def topCatAdjunctionUnit (X : CondensedSet.{u}) : X ‚ü∂ X.toTopCat.toCondensedSet where
  val := {
    app := fun S x ‚Ü¶ {
      toFun := fun s ‚Ü¶ X.val.map ((of PUnit.{u+1}).const s).op x
      continuous_toFun := by
        suffices ‚àÄ (i : (T : CompHaus.{u}) √ó X.val.obj ‚ü®T‚ü©),
          Continuous (fun (a : i.fst) ‚Ü¶ X.coinducingCoprod ‚ü®i, a‚ü©) from this ‚ü®_, _‚ü©
        rw [‚Üê continuous_sigma_iff]
        apply continuous_coinduced_rng }
    naturality := fun _ _ _ ‚Ü¶ by
      ext
      simp only [TopCat.toSheafCompHausLike_val_obj, CompHausLike.compHausLikeToTop_obj,
        Opposite.op_unop, types_comp_apply, TopCat.toSheafCompHausLike_val_map,
        ‚Üê FunctorToTypes.map_comp_apply]
      rfl }
noncomputable def topCatAdjunction : condensedSetToTopCat.{u} ‚ä£ topCatToCondensedSet where
  unit := { app := topCatAdjunctionUnit }
  counit := { app := topCatAdjunctionCounit }
  left_triangle_components Y := by
    ext
    change Y.val.map (ùüô _) _ = _
    simp
instance (X : TopCat) : Epi (topCatAdjunction.counit.app X) := by
  rw [TopCat.epi_iff_surjective]
  exact (topCatAdjunctionCounit_bijective _).2
instance : topCatToCondensedSet.Faithful := topCatAdjunction.faithful_R_of_epi_counit_app
open CompactlyGenerated
instance (X : CondensedSet.{u}) : UCompactlyGeneratedSpace.{u, u+1} X.toTopCat := by
  apply uCompactlyGeneratedSpace_of_continuous_maps
  intro Y _ f h
  rw [continuous_coinduced_dom, continuous_sigma_iff]
  exact fun ‚ü®S, s‚ü© ‚Ü¶ h S ‚ü®_, continuous_coinducingCoprod X _‚ü©
instance (X : CondensedSet.{u}) : UCompactlyGeneratedSpace.{u, u+1} (condensedSetToTopCat.obj X) :=
  inferInstanceAs (UCompactlyGeneratedSpace.{u, u+1} X.toTopCat)
def condensedSetToCompactlyGenerated : CondensedSet.{u} ‚•§ CompactlyGenerated.{u, u+1} where
  obj X := CompactlyGenerated.of (condensedSetToTopCat.obj X)
  map f := toTopCatMap f
noncomputable def compactlyGeneratedToCondensedSet :
    CompactlyGenerated.{u, u+1} ‚•§ CondensedSet.{u} :=
  compactlyGeneratedToTop ‚ãô topCatToCondensedSet
noncomputable def compactlyGeneratedAdjunction :
    condensedSetToCompactlyGenerated ‚ä£ compactlyGeneratedToCondensedSet :=
  topCatAdjunction.restrictFullyFaithful (iC := ùü≠ _) (iD := compactlyGeneratedToTop)
    (Functor.FullyFaithful.id _) fullyFaithfulCompactlyGeneratedToTop
    (Iso.refl _) (Iso.refl _)
def compactlyGeneratedAdjunctionCounitHomeo (X : TopCat.{u+1}) [UCompactlyGeneratedSpace.{u} X] :
    X.toCondensedSet.toTopCat ‚âÉ‚Çú X where
  toEquiv := topCatAdjunctionCounitEquiv X
  continuous_toFun := (topCatAdjunctionCounit X).continuous
  continuous_invFun := by
    apply continuous_from_uCompactlyGeneratedSpace
    exact fun _ _ ‚Ü¶ continuous_coinducingCoprod X.toCondensedSet _
noncomputable def compactlyGeneratedAdjunctionCounitIso (X : CompactlyGenerated.{u, u+1}) :
    condensedSetToCompactlyGenerated.obj (compactlyGeneratedToCondensedSet.obj X) ‚âÖ X :=
  isoOfHomeo (compactlyGeneratedAdjunctionCounitHomeo X.toTop)
instance : IsIso compactlyGeneratedAdjunction.counit := by
  rw [NatTrans.isIso_iff_isIso_app]
  intro X
  exact inferInstanceAs (IsIso (compactlyGeneratedAdjunctionCounitIso X).hom)
noncomputable def fullyFaithfulCompactlyGeneratedToCondensedSet :
    compactlyGeneratedToCondensedSet.FullyFaithful :=
  compactlyGeneratedAdjunction.fullyFaithfulROfIsIsoCounit
end CondensedSet