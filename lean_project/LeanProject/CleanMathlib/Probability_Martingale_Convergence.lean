import Mathlib.MeasureTheory.Constructions.Polish.Basic
import Mathlib.MeasureTheory.Function.UniformIntegrable
import Mathlib.Probability.Martingale.Upcrossing
open TopologicalSpace Filter MeasureTheory.Filtration
open scoped NNReal ENNReal MeasureTheory ProbabilityTheory Topology
namespace MeasureTheory
variable {Œ© : Type*} {m0 : MeasurableSpace Œ©} {Œº : Measure Œ©} {‚Ñ± : Filtration ‚Ñï m0}
variable {a b : ‚Ñù} {f : ‚Ñï ‚Üí Œ© ‚Üí ‚Ñù} {œâ : Œ©} {R : ‚Ñù‚â•0}
section AeConvergence
theorem not_frequently_of_upcrossings_lt_top (hab : a < b) (hœâ : upcrossings a b f œâ ‚â† ‚àû) :
    ¬¨((‚àÉ·∂† n in atTop, f n œâ < a) ‚àß ‚àÉ·∂† n in atTop, b < f n œâ) := by
  rw [‚Üê lt_top_iff_ne_top, upcrossings_lt_top_iff] at hœâ
  replace hœâ : ‚àÉ k, ‚àÄ N, upcrossingsBefore a b f N œâ < k := by
    obtain ‚ü®k, hk‚ü© := hœâ
    exact ‚ü®k + 1, fun N => lt_of_le_of_lt (hk N) k.lt_succ_self‚ü©
  rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
  rw [frequently_atTop] at h‚ÇÅ h‚ÇÇ
  refine Classical.not_not.2 hœâ ?_
  push_neg
  intro k
  induction' k with k ih
  ¬∑ simp only [zero_le, exists_const]
  ¬∑ obtain ‚ü®N, hN‚ü© := ih
    obtain ‚ü®N‚ÇÅ, hN‚ÇÅ, hN‚ÇÅ'‚ü© := h‚ÇÅ N
    obtain ‚ü®N‚ÇÇ, hN‚ÇÇ, hN‚ÇÇ'‚ü© := h‚ÇÇ N‚ÇÅ
    exact ‚ü®N‚ÇÇ + 1, Nat.succ_le_of_lt <|
      lt_of_le_of_lt hN (upcrossingsBefore_lt_of_exists_upcrossing hab hN‚ÇÅ hN‚ÇÅ' hN‚ÇÇ hN‚ÇÇ')‚ü©
theorem upcrossings_eq_top_of_frequently_lt (hab : a < b) (h‚ÇÅ : ‚àÉ·∂† n in atTop, f n œâ < a)
    (h‚ÇÇ : ‚àÉ·∂† n in atTop, b < f n œâ) : upcrossings a b f œâ = ‚àû :=
  by_contradiction fun h => not_frequently_of_upcrossings_lt_top hab h ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
theorem tendsto_of_uncrossing_lt_top (hf‚ÇÅ : liminf (fun n => (‚Äñf n œâ‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) atTop < ‚àû)
    (hf‚ÇÇ : ‚àÄ a b : ‚Ñö, a < b ‚Üí upcrossings a b f œâ < ‚àû) :
    ‚àÉ c, Tendsto (fun n => f n œâ) atTop (ùìù c) := by
  by_cases h : IsBoundedUnder (¬∑ ‚â§ ¬∑) atTop fun n => |f n œâ|
  ¬∑ rw [isBoundedUnder_le_abs] at h
    refine tendsto_of_no_upcrossings Rat.denseRange_cast ?_ h.1 h.2
    rintro _ ‚ü®a, rfl‚ü© _ ‚ü®b, rfl‚ü© hab
    exact not_frequently_of_upcrossings_lt_top hab (hf‚ÇÇ a b (Rat.cast_lt.1 hab)).ne
  ¬∑ obtain ‚ü®a, b, hab, h‚ÇÅ, h‚ÇÇ‚ü© := ENNReal.exists_upcrossings_of_not_bounded_under hf‚ÇÅ.ne h
    exact
      False.elim ((hf‚ÇÇ a b hab).ne (upcrossings_eq_top_of_frequently_lt (Rat.cast_lt.2 hab) h‚ÇÅ h‚ÇÇ))
theorem Submartingale.upcrossings_ae_lt_top' [IsFiniteMeasure Œº] (hf : Submartingale f ‚Ñ± Œº)
    (hbdd : ‚àÄ n, eLpNorm (f n) 1 Œº ‚â§ R) (hab : a < b) : ‚àÄ·µê œâ ‚àÇŒº, upcrossings a b f œâ < ‚àû := by
  refine ae_lt_top (hf.adapted.measurable_upcrossings hab) ?_
  have := hf.mul_lintegral_upcrossings_le_lintegral_pos_part a b
  rw [mul_comm, ‚Üê ENNReal.le_div_iff_mul_le] at this
  ¬∑ refine (lt_of_le_of_lt this (ENNReal.div_lt_top ?_ ?_)).ne
    ¬∑ have hR' : ‚àÄ n, ‚à´‚Åª œâ, ‚Äñf n œâ - a‚Äñ‚Çä ‚àÇŒº ‚â§ R + ‚Äña‚Äñ‚Çä * Œº Set.univ := by
        simp_rw [eLpNorm_one_eq_lintegral_nnnorm] at hbdd
        intro n
        refine (lintegral_mono ?_ : ‚à´‚Åª œâ, ‚Äñf n œâ - a‚Äñ‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª œâ, ‚Äñf n œâ‚Äñ‚Çä + ‚Äña‚Äñ‚Çä ‚àÇŒº).trans ?_
        ¬∑ intro œâ
          simp_rw [sub_eq_add_neg, ‚Üê nnnorm_neg a, ‚Üê ENNReal.coe_add, ENNReal.coe_le_coe]
          exact nnnorm_add_le _ _
        ¬∑ simp_rw [lintegral_add_right _ measurable_const, lintegral_const]
          exact add_le_add (hbdd _) le_rfl
      refine ne_of_lt (iSup_lt_iff.2 ‚ü®R + ‚Äña‚Äñ‚Çä * Œº Set.univ, ENNReal.add_lt_top.2
        ‚ü®ENNReal.coe_lt_top, ENNReal.mul_lt_top ENNReal.coe_lt_top (measure_lt_top _ _)‚ü©,
        fun n => le_trans ?_ (hR' n)‚ü©)
      refine lintegral_mono fun œâ => ?_
      rw [ENNReal.ofReal_le_iff_le_toReal, ENNReal.coe_toReal, coe_nnnorm]
      ¬∑ by_cases hnonneg : 0 ‚â§ f n œâ - a
        ¬∑ rw [posPart_eq_self.2 hnonneg, Real.norm_eq_abs, abs_of_nonneg hnonneg]
        ¬∑ rw [posPart_eq_zero.2 (not_le.1 hnonneg).le]
          exact norm_nonneg _
      ¬∑ simp only [Ne, ENNReal.coe_ne_top, not_false_iff]
    ¬∑ simp only [hab, Ne, ENNReal.ofReal_eq_zero, sub_nonpos, not_le]
  ¬∑ simp only [hab, Ne, ENNReal.ofReal_eq_zero, sub_nonpos, not_le, true_or]
  ¬∑ simp only [Ne, ENNReal.ofReal_ne_top, not_false_iff, true_or]
theorem Submartingale.upcrossings_ae_lt_top [IsFiniteMeasure Œº] (hf : Submartingale f ‚Ñ± Œº)
    (hbdd : ‚àÄ n, eLpNorm (f n) 1 Œº ‚â§ R) : ‚àÄ·µê œâ ‚àÇŒº, ‚àÄ a b : ‚Ñö, a < b ‚Üí upcrossings a b f œâ < ‚àû := by
  simp only [ae_all_iff, eventually_imp_distrib_left]
  rintro a b hab
  exact hf.upcrossings_ae_lt_top' hbdd (Rat.cast_lt.2 hab)
theorem Submartingale.exists_ae_tendsto_of_bdd [IsFiniteMeasure Œº] (hf : Submartingale f ‚Ñ± Œº)
    (hbdd : ‚àÄ n, eLpNorm (f n) 1 Œº ‚â§ R) : ‚àÄ·µê œâ ‚àÇŒº, ‚àÉ c, Tendsto (fun n => f n œâ) atTop (ùìù c) := by
  filter_upwards [hf.upcrossings_ae_lt_top hbdd, ae_bdd_liminf_atTop_of_eLpNorm_bdd one_ne_zero
    (fun n => (hf.stronglyMeasurable n).measurable.mono (‚Ñ±.le n) le_rfl) hbdd] with œâ h‚ÇÅ h‚ÇÇ
  exact tendsto_of_uncrossing_lt_top h‚ÇÇ h‚ÇÅ
theorem Submartingale.exists_ae_trim_tendsto_of_bdd [IsFiniteMeasure Œº] (hf : Submartingale f ‚Ñ± Œº)
    (hbdd : ‚àÄ n, eLpNorm (f n) 1 Œº ‚â§ R) :
    ‚àÄ·µê œâ ‚àÇŒº.trim (sSup_le fun _ ‚ü®_, hn‚ü© => hn ‚ñ∏ ‚Ñ±.le _ : ‚®Ü n, ‚Ñ± n ‚â§ m0),
      ‚àÉ c, Tendsto (fun n => f n œâ) atTop (ùìù c) := by
  letI := (‚®Ü n, ‚Ñ± n)
  rw [ae_iff, trim_measurableSet_eq]
  ¬∑ exact hf.exists_ae_tendsto_of_bdd hbdd
  ¬∑ exact MeasurableSet.compl <| measurableSet_exists_tendsto
      fun n => (hf.stronglyMeasurable n).measurable.mono (le_sSup ‚ü®n, rfl‚ü©) le_rfl
theorem Submartingale.ae_tendsto_limitProcess [IsFiniteMeasure Œº] (hf : Submartingale f ‚Ñ± Œº)
    (hbdd : ‚àÄ n, eLpNorm (f n) 1 Œº ‚â§ R) :
    ‚àÄ·µê œâ ‚àÇŒº, Tendsto (fun n => f n œâ) atTop (ùìù (‚Ñ±.limitProcess f Œº œâ)) := by
  classical
  suffices
      ‚àÉ g, StronglyMeasurable[‚®Ü n, ‚Ñ± n] g ‚àß ‚àÄ·µê œâ ‚àÇŒº, Tendsto (fun n => f n œâ) atTop (ùìù (g œâ)) by
    rw [limitProcess, dif_pos this]
    exact (Classical.choose_spec this).2
  set g' : Œ© ‚Üí ‚Ñù := fun œâ => if h : ‚àÉ c, Tendsto (fun n => f n œâ) atTop (ùìù c) then h.choose else 0
  have hle : ‚®Ü n, ‚Ñ± n ‚â§ m0 := sSup_le fun m ‚ü®n, hn‚ü© => hn ‚ñ∏ ‚Ñ±.le _
  have hg' : ‚àÄ·µê œâ ‚àÇŒº.trim hle, Tendsto (fun n => f n œâ) atTop (ùìù (g' œâ)) := by
    filter_upwards [hf.exists_ae_trim_tendsto_of_bdd hbdd] with œâ hœâ
    simp_rw [g', dif_pos hœâ]
    exact hœâ.choose_spec
  have hg'm : @AEStronglyMeasurable _ _ _ (‚®Ü n, ‚Ñ± n) g' (Œº.trim hle) :=
    (@aemeasurable_of_tendsto_metrizable_ae' _ _ (‚®Ü n, ‚Ñ± n) _ _ _ _ _ _ _
      (fun n => ((hf.stronglyMeasurable n).measurable.mono (le_sSup ‚ü®n, rfl‚ü© : ‚Ñ± n ‚â§ ‚®Ü n, ‚Ñ± n)
        le_rfl).aemeasurable) hg').aestronglyMeasurable
  obtain ‚ü®g, hgm, hae‚ü© := hg'm
  have hg : ‚àÄ·µê œâ ‚àÇŒº.trim hle, Tendsto (fun n => f n œâ) atTop (ùìù (g œâ)) := by
    filter_upwards [hae, hg'] with œâ hœâ hg'œâ
    exact hœâ ‚ñ∏ hg'œâ
  exact ‚ü®g, hgm, measure_eq_zero_of_trim_eq_zero hle hg‚ü©
theorem Submartingale.mem‚Ñíp_limitProcess {p : ‚Ñù‚â•0‚àû} (hf : Submartingale f ‚Ñ± Œº)
    (hbdd : ‚àÄ n, eLpNorm (f n) p Œº ‚â§ R) : Mem‚Ñíp (‚Ñ±.limitProcess f Œº) p Œº :=
  mem‚Ñíp_limitProcess_of_eLpNorm_bdd
    (fun n => ((hf.stronglyMeasurable n).mono (‚Ñ±.le n)).aestronglyMeasurable) hbdd
end AeConvergence
section L1Convergence
variable [IsFiniteMeasure Œº] {g : Œ© ‚Üí ‚Ñù}
theorem Submartingale.tendsto_eLpNorm_one_limitProcess (hf : Submartingale f ‚Ñ± Œº)
    (hunif : UniformIntegrable f 1 Œº) :
    Tendsto (fun n => eLpNorm (f n - ‚Ñ±.limitProcess f Œº) 1 Œº) atTop (ùìù 0) := by
  obtain ‚ü®R, hR‚ü© := hunif.2.2
  have hmeas : ‚àÄ n, AEStronglyMeasurable (f n) Œº := fun n =>
    ((hf.stronglyMeasurable n).mono (‚Ñ±.le _)).aestronglyMeasurable
  exact tendsto_Lp_finite_of_tendstoInMeasure le_rfl ENNReal.one_ne_top hmeas
    (mem‚Ñíp_limitProcess_of_eLpNorm_bdd hmeas hR) hunif.2.1
    (tendstoInMeasure_of_tendsto_ae hmeas <| hf.ae_tendsto_limitProcess hR)
@[deprecated (since := "2024-07-27")]
alias Submartingale.tendsto_snorm_one_limitProcess := Submartingale.tendsto_eLpNorm_one_limitProcess
theorem Submartingale.ae_tendsto_limitProcess_of_uniformIntegrable (hf : Submartingale f ‚Ñ± Œº)
    (hunif : UniformIntegrable f 1 Œº) :
    ‚àÄ·µê œâ ‚àÇŒº, Tendsto (fun n => f n œâ) atTop (ùìù (‚Ñ±.limitProcess f Œº œâ)) :=
  let ‚ü®_, hR‚ü© := hunif.2.2
  hf.ae_tendsto_limitProcess hR
theorem Martingale.eq_condexp_of_tendsto_eLpNorm {Œº : Measure Œ©} (hf : Martingale f ‚Ñ± Œº)
    (hg : Integrable g Œº) (hgtends : Tendsto (fun n => eLpNorm (f n - g) 1 Œº) atTop (ùìù 0)) (n : ‚Ñï) :
    f n =·µê[Œº] Œº[g|‚Ñ± n] := by
  rw [‚Üê sub_ae_eq_zero, ‚Üê eLpNorm_eq_zero_iff (((hf.stronglyMeasurable n).mono (‚Ñ±.le _)).sub
    (stronglyMeasurable_condexp.mono (‚Ñ±.le _))).aestronglyMeasurable one_ne_zero]
  have ht : Tendsto (fun m => eLpNorm (Œº[f m - g|‚Ñ± n]) 1 Œº) atTop (ùìù 0) :=
    haveI hint : ‚àÄ m, Integrable (f m - g) Œº := fun m => (hf.integrable m).sub hg
    tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds hgtends (fun m => zero_le _)
      fun m => eLpNorm_one_condexp_le_eLpNorm _
  have hev : ‚àÄ m ‚â• n, eLpNorm (Œº[f m - g|‚Ñ± n]) 1 Œº = eLpNorm (f n - Œº[g|‚Ñ± n]) 1 Œº := by
    refine fun m hm => eLpNorm_congr_ae ((condexp_sub (hf.integrable m) hg).trans ?_)
    filter_upwards [hf.2 n m hm] with x hx
    simp only [hx, Pi.sub_apply]
  exact tendsto_nhds_unique (tendsto_atTop_of_eventually_const hev) ht
@[deprecated (since := "2024-07-27")]
alias Martingale.eq_condexp_of_tendsto_snorm := Martingale.eq_condexp_of_tendsto_eLpNorm
theorem Martingale.ae_eq_condexp_limitProcess (hf : Martingale f ‚Ñ± Œº)
    (hbdd : UniformIntegrable f 1 Œº) (n : ‚Ñï) : f n =·µê[Œº] Œº[‚Ñ±.limitProcess f Œº|‚Ñ± n] :=
  let ‚ü®_, hR‚ü© := hbdd.2.2
  hf.eq_condexp_of_tendsto_eLpNorm ((mem‚Ñíp_limitProcess_of_eLpNorm_bdd hbdd.1 hR).integrable le_rfl)
    (hf.submartingale.tendsto_eLpNorm_one_limitProcess hbdd) n
theorem Integrable.tendsto_ae_condexp (hg : Integrable g Œº)
    (hgmeas : StronglyMeasurable[‚®Ü n, ‚Ñ± n] g) :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => (Œº[g|‚Ñ± n]) x) atTop (ùìù (g x)) := by
  have hle : ‚®Ü n, ‚Ñ± n ‚â§ m0 := sSup_le fun m ‚ü®n, hn‚ü© => hn ‚ñ∏ ‚Ñ±.le _
  have hunif : UniformIntegrable (fun n => Œº[g|‚Ñ± n]) 1 Œº :=
    hg.uniformIntegrable_condexp_filtration
  obtain ‚ü®R, hR‚ü© := hunif.2.2
  have hlimint : Integrable (‚Ñ±.limitProcess (fun n => Œº[g|‚Ñ± n]) Œº) Œº :=
    (mem‚Ñíp_limitProcess_of_eLpNorm_bdd hunif.1 hR).integrable le_rfl
  suffices g =·µê[Œº] ‚Ñ±.limitProcess (fun n x => (Œº[g|‚Ñ± n]) x) Œº by
    filter_upwards [this, (martingale_condexp g ‚Ñ± Œº).submartingale.ae_tendsto_limitProcess hR] with
      x heq ht
    rwa [heq]
  have : ‚àÄ n s, MeasurableSet[‚Ñ± n] s ‚Üí
      ‚à´ x in s, g x ‚àÇŒº = ‚à´ x in s, ‚Ñ±.limitProcess (fun n x => (Œº[g|‚Ñ± n]) x) Œº x ‚àÇŒº := by
    intro n s hs
    rw [‚Üê setIntegral_condexp (‚Ñ±.le n) hg hs, ‚Üê setIntegral_condexp (‚Ñ±.le n) hlimint hs]
    refine setIntegral_congr_ae (‚Ñ±.le _ _ hs) ?_
    filter_upwards [(martingale_condexp g ‚Ñ± Œº).ae_eq_condexp_limitProcess hunif n] with x hx _
    rw [hx]
  refine ae_eq_of_forall_setIntegral_eq_of_sigmaFinite' hle (fun s _ _ => hg.integrableOn)
    (fun s _ _ => hlimint.integrableOn) (fun s hs => ?_) hgmeas.aeStronglyMeasurable'
    stronglyMeasurable_limitProcess.aeStronglyMeasurable'
  apply @MeasurableSpace.induction_on_inter _ _ _ (‚®Ü n, ‚Ñ± n)
    (MeasurableSpace.measurableSpace_iSup_eq ‚Ñ±) _ _ _ _ _ _ hs
  ¬∑ rintro s ‚ü®n, hs‚ü© t ‚ü®m, ht‚ü© -
    by_cases hnm : n ‚â§ m
    ¬∑ exact ‚ü®m, (‚Ñ±.mono hnm _ hs).inter ht‚ü©
    ¬∑ exact ‚ü®n, hs.inter (‚Ñ±.mono (not_le.1 hnm).le _ ht)‚ü©
  ¬∑ simp only [measure_empty, ENNReal.zero_lt_top, Measure.restrict_empty, integral_zero_measure,
      forall_true_left]
  ¬∑ rintro t ‚ü®n, ht‚ü© -
    exact this n _ ht
  ¬∑ rintro t htmeas ht -
    have hgeq := @setIntegral_compl _ _ (‚®Ü n, ‚Ñ± n) _ _ _ _ _ htmeas (hg.trim hle hgmeas)
    have hheq := @setIntegral_compl _ _ (‚®Ü n, ‚Ñ± n) _ _ _ _ _ htmeas
      (hlimint.trim hle stronglyMeasurable_limitProcess)
    rw [setIntegral_trim hle hgmeas htmeas.compl,
      setIntegral_trim hle stronglyMeasurable_limitProcess htmeas.compl, hgeq, hheq, ‚Üê
      setIntegral_trim hle hgmeas htmeas, ‚Üê
      setIntegral_trim hle stronglyMeasurable_limitProcess htmeas, ‚Üê integral_trim hle hgmeas, ‚Üê
      integral_trim hle stronglyMeasurable_limitProcess, ‚Üê setIntegral_univ,
      this 0 _ MeasurableSet.univ, setIntegral_univ, ht (measure_lt_top _ _)]
  ¬∑ rintro f hf hfmeas heq -
    rw [integral_iUnion (fun n => hle _ (hfmeas n)) hf hg.integrableOn,
      integral_iUnion (fun n => hle _ (hfmeas n)) hf hlimint.integrableOn]
    exact tsum_congr fun n => heq _ (measure_lt_top _ _)
theorem Integrable.tendsto_eLpNorm_condexp (hg : Integrable g Œº)
    (hgmeas : StronglyMeasurable[‚®Ü n, ‚Ñ± n] g) :
    Tendsto (fun n => eLpNorm (Œº[g|‚Ñ± n] - g) 1 Œº) atTop (ùìù 0) :=
  tendsto_Lp_finite_of_tendstoInMeasure le_rfl ENNReal.one_ne_top
    (fun n => (stronglyMeasurable_condexp.mono (‚Ñ±.le n)).aestronglyMeasurable)
    (mem‚Ñíp_one_iff_integrable.2 hg) hg.uniformIntegrable_condexp_filtration.2.1
    (tendstoInMeasure_of_tendsto_ae
      (fun n => (stronglyMeasurable_condexp.mono (‚Ñ±.le n)).aestronglyMeasurable)
      (hg.tendsto_ae_condexp hgmeas))
@[deprecated (since := "2024-07-27")]
alias Integrable.tendsto_snorm_condexp := Integrable.tendsto_eLpNorm_condexp
theorem tendsto_ae_condexp (g : Œ© ‚Üí ‚Ñù) :
    ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => (Œº[g|‚Ñ± n]) x) atTop (ùìù ((Œº[g|‚®Ü n, ‚Ñ± n]) x)) := by
  have ht : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => (Œº[Œº[g|‚®Ü n, ‚Ñ± n]|‚Ñ± n]) x) atTop (ùìù ((Œº[g|‚®Ü n, ‚Ñ± n]) x)) :=
    integrable_condexp.tendsto_ae_condexp stronglyMeasurable_condexp
  have heq : ‚àÄ n, ‚àÄ·µê x ‚àÇŒº, (Œº[Œº[g|‚®Ü n, ‚Ñ± n]|‚Ñ± n]) x = (Œº[g|‚Ñ± n]) x := fun n =>
    condexp_condexp_of_le (le_iSup _ n) (iSup_le fun n => ‚Ñ±.le n)
  rw [‚Üê ae_all_iff] at heq
  filter_upwards [heq, ht] with x hxeq hxt
  exact hxt.congr hxeq
theorem tendsto_eLpNorm_condexp (g : Œ© ‚Üí ‚Ñù) :
    Tendsto (fun n => eLpNorm (Œº[g|‚Ñ± n] - Œº[g|‚®Ü n, ‚Ñ± n]) 1 Œº) atTop (ùìù 0) := by
  have ht : Tendsto (fun n => eLpNorm (Œº[Œº[g|‚®Ü n, ‚Ñ± n]|‚Ñ± n] - Œº[g|‚®Ü n, ‚Ñ± n]) 1 Œº) atTop (ùìù 0) :=
    integrable_condexp.tendsto_eLpNorm_condexp stronglyMeasurable_condexp
  have heq : ‚àÄ n, ‚àÄ·µê x ‚àÇŒº, (Œº[Œº[g|‚®Ü n, ‚Ñ± n]|‚Ñ± n]) x = (Œº[g|‚Ñ± n]) x := fun n =>
    condexp_condexp_of_le (le_iSup _ n) (iSup_le fun n => ‚Ñ±.le n)
  refine ht.congr fun n => eLpNorm_congr_ae ?_
  filter_upwards [heq n] with x hxeq
  simp only [hxeq, Pi.sub_apply]
@[deprecated (since := "2024-07-27")]
alias tendsto_snorm_condexp := tendsto_eLpNorm_condexp
end L1Convergence
end MeasureTheory