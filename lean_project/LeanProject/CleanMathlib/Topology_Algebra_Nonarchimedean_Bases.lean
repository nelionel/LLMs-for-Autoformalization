import Mathlib.Topology.Algebra.Nonarchimedean.Basic
import Mathlib.Topology.Algebra.FilterBasis
import Mathlib.Algebra.Module.Submodule.Pointwise
open Set Filter Function Lattice
open Topology Filter Pointwise
structure RingSubgroupsBasis {A Œπ : Type*} [Ring A] (B : Œπ ‚Üí AddSubgroup A) : Prop where
  inter : ‚àÄ i j, ‚àÉ k, B k ‚â§ B i ‚äì B j
  mul : ‚àÄ i, ‚àÉ j, (B j : Set A) * B j ‚äÜ B i
  leftMul : ‚àÄ x : A, ‚àÄ i, ‚àÉ j, (B j : Set A) ‚äÜ (x * ¬∑) ‚Åª¬π' B i
  rightMul : ‚àÄ x : A, ‚àÄ i, ‚àÉ j, (B j : Set A) ‚äÜ (¬∑ * x) ‚Åª¬π' B i
namespace RingSubgroupsBasis
variable {A Œπ : Type*} [Ring A]
theorem of_comm {A Œπ : Type*} [CommRing A] (B : Œπ ‚Üí AddSubgroup A)
    (inter : ‚àÄ i j, ‚àÉ k, B k ‚â§ B i ‚äì B j) (mul : ‚àÄ i, ‚àÉ j, (B j : Set A) * B j ‚äÜ B i)
    (leftMul : ‚àÄ x : A, ‚àÄ i, ‚àÉ j, (B j : Set A) ‚äÜ (fun y : A => x * y) ‚Åª¬π' B i) :
    RingSubgroupsBasis B :=
  { inter
    mul
    leftMul
    rightMul := fun x i ‚Ü¶ (leftMul x i).imp fun j hj ‚Ü¶ by simpa only [mul_comm] using hj }
def toRingFilterBasis [Nonempty Œπ] {B : Œπ ‚Üí AddSubgroup A} (hB : RingSubgroupsBasis B) :
    RingFilterBasis A where
  sets := { U | ‚àÉ i, U = B i }
  nonempty := by
    inhabit Œπ
    exact ‚ü®B default, default, rfl‚ü©
  inter_sets := by
    rintro _ _ ‚ü®i, rfl‚ü© ‚ü®j, rfl‚ü©
    cases' hB.inter i j with k hk
    use B k
    constructor
    ¬∑ use k
    ¬∑ exact hk
  zero' := by
    rintro _ ‚ü®i, rfl‚ü©
    exact (B i).zero_mem
  add' := by
    rintro _ ‚ü®i, rfl‚ü©
    use B i
    constructor
    ¬∑ use i
    ¬∑ rintro x ‚ü®y, y_in, z, z_in, rfl‚ü©
      exact (B i).add_mem y_in z_in
  neg' := by
    rintro _ ‚ü®i, rfl‚ü©
    use B i
    constructor
    ¬∑ use i
    ¬∑ intro x x_in
      exact (B i).neg_mem x_in
  conj' := by
    rintro x‚ÇÄ _ ‚ü®i, rfl‚ü©
    use B i
    constructor
    ¬∑ use i
    ¬∑ simp
  mul' := by
    rintro _ ‚ü®i, rfl‚ü©
    cases' hB.mul i with k hk
    use B k
    constructor
    ¬∑ use k
    ¬∑ exact hk
  mul_left' := by
    rintro x‚ÇÄ _ ‚ü®i, rfl‚ü©
    cases' hB.leftMul x‚ÇÄ i with k hk
    use B k
    constructor
    ¬∑ use k
    ¬∑ exact hk
  mul_right' := by
    rintro x‚ÇÄ _ ‚ü®i, rfl‚ü©
    cases' hB.rightMul x‚ÇÄ i with k hk
    use B k
    constructor
    ¬∑ use k
    ¬∑ exact hk
variable [Nonempty Œπ] {B : Œπ ‚Üí AddSubgroup A} (hB : RingSubgroupsBasis B)
theorem mem_addGroupFilterBasis_iff {V : Set A} :
    V ‚àà hB.toRingFilterBasis.toAddGroupFilterBasis ‚Üî ‚àÉ i, V = B i :=
  Iff.rfl
theorem mem_addGroupFilterBasis (i) : (B i : Set A) ‚àà hB.toRingFilterBasis.toAddGroupFilterBasis :=
  ‚ü®i, rfl‚ü©
def topology : TopologicalSpace A :=
  hB.toRingFilterBasis.toAddGroupFilterBasis.topology
theorem hasBasis_nhds_zero : HasBasis (@nhds A hB.topology 0) (fun _ => True) fun i => B i :=
  ‚ü®by
    intro s
    rw [hB.toRingFilterBasis.toAddGroupFilterBasis.nhds_zero_hasBasis.mem_iff]
    constructor
    ¬∑ rintro ‚ü®-, ‚ü®i, rfl‚ü©, hi‚ü©
      exact ‚ü®i, trivial, hi‚ü©
    ¬∑ rintro ‚ü®i, -, hi‚ü©
      exact ‚ü®B i, ‚ü®i, rfl‚ü©, hi‚ü©‚ü©
theorem hasBasis_nhds (a : A) :
    HasBasis (@nhds A hB.topology a) (fun _ => True) fun i => { b | b - a ‚àà B i } :=
  ‚ü®by
    intro s
    rw [(hB.toRingFilterBasis.toAddGroupFilterBasis.nhds_hasBasis a).mem_iff]
    simp only [true_and]
    constructor
    ¬∑ rintro ‚ü®-, ‚ü®i, rfl‚ü©, hi‚ü©
      use i
      suffices h : { b : A | b - a ‚àà B i } = (fun y => a + y) '' ‚Üë(B i) by
        rw [h]
        assumption
      simp only [image_add_left, neg_add_eq_sub]
      ext b
      simp
    ¬∑ rintro ‚ü®i, hi‚ü©
      use B i
      constructor
      ¬∑ use i
      ¬∑ rw [image_subset_iff]
        rintro b b_in
        apply hi
        simpa using b_in‚ü©
def openAddSubgroup (i : Œπ) : @OpenAddSubgroup A _ hB.topology :=
  let _ := hB.topology
  { B i with
    isOpen' := by
      rw [isOpen_iff_mem_nhds]
      intro a a_in
      rw [(hB.hasBasis_nhds a).mem_iff]
      use i, trivial
      rintro b b_in
      simpa using (B i).add_mem a_in b_in }
theorem nonarchimedean : @NonarchimedeanRing A _ hB.topology := by
  letI := hB.topology
  constructor
  intro U hU
  obtain ‚ü®i, -, hi : (B i : Set A) ‚äÜ U‚ü© := hB.hasBasis_nhds_zero.mem_iff.mp hU
  exact ‚ü®hB.openAddSubgroup i, hi‚ü©
end RingSubgroupsBasis
variable {Œπ R A : Type*} [CommRing R] [CommRing A] [Algebra R A]
structure SubmodulesRingBasis (B : Œπ ‚Üí Submodule R A) : Prop where
  inter : ‚àÄ i j, ‚àÉ k, B k ‚â§ B i ‚äì B j
  leftMul : ‚àÄ (a : A) (i), ‚àÉ j, a ‚Ä¢ B j ‚â§ B i
  mul : ‚àÄ i, ‚àÉ j, (B j : Set A) * B j ‚äÜ B i
namespace SubmodulesRingBasis
variable {B : Œπ ‚Üí Submodule R A} (hB : SubmodulesRingBasis B)
theorem toRing_subgroups_basis (hB : SubmodulesRingBasis B) :
    RingSubgroupsBasis fun i => (B i).toAddSubgroup := by
  apply RingSubgroupsBasis.of_comm (fun i => (B i).toAddSubgroup) hB.inter hB.mul
  intro a i
  rcases hB.leftMul a i with ‚ü®j, hj‚ü©
  use j
  rintro b (b_in : b ‚àà B j)
  exact hj ‚ü®b, b_in, rfl‚ü©
def topology [Nonempty Œπ] (hB : SubmodulesRingBasis B) : TopologicalSpace A :=
  hB.toRing_subgroups_basis.topology
end SubmodulesRingBasis
variable {M : Type*} [AddCommGroup M] [Module R M]
structure SubmodulesBasis [TopologicalSpace R] (B : Œπ ‚Üí Submodule R M) : Prop where
  inter : ‚àÄ i j, ‚àÉ k, B k ‚â§ B i ‚äì B j
  smul : ‚àÄ (m : M) (i : Œπ), ‚àÄ·∂† a in ùìù (0 : R), a ‚Ä¢ m ‚àà B i
namespace SubmodulesBasis
variable [TopologicalSpace R] [Nonempty Œπ] {B : Œπ ‚Üí Submodule R M} (hB : SubmodulesBasis B)
def toModuleFilterBasis : ModuleFilterBasis R M where
  sets := { U | ‚àÉ i, U = B i }
  nonempty := by
    inhabit Œπ
    exact ‚ü®B default, default, rfl‚ü©
  inter_sets := by
    rintro _ _ ‚ü®i, rfl‚ü© ‚ü®j, rfl‚ü©
    cases' hB.inter i j with k hk
    use B k
    constructor
    ¬∑ use k
    ¬∑ exact hk
  zero' := by
    rintro _ ‚ü®i, rfl‚ü©
    exact (B i).zero_mem
  add' := by
    rintro _ ‚ü®i, rfl‚ü©
    use B i
    constructor
    ¬∑ use i
    ¬∑ rintro x ‚ü®y, y_in, z, z_in, rfl‚ü©
      exact (B i).add_mem y_in z_in
  neg' := by
    rintro _ ‚ü®i, rfl‚ü©
    use B i
    constructor
    ¬∑ use i
    ¬∑ intro x x_in
      exact (B i).neg_mem x_in
  conj' := by
    rintro x‚ÇÄ _ ‚ü®i, rfl‚ü©
    use B i
    constructor
    ¬∑ use i
    ¬∑ simp
  smul' := by
    rintro _ ‚ü®i, rfl‚ü©
    use univ
    constructor
    ¬∑ exact univ_mem
    ¬∑ use B i
      constructor
      ¬∑ use i
      ¬∑ rintro _ ‚ü®a, -, m, hm, rfl‚ü©
        exact (B i).smul_mem _ hm
  smul_left' := by
    rintro x‚ÇÄ _ ‚ü®i, rfl‚ü©
    use B i
    constructor
    ¬∑ use i
    ¬∑ intro m
      exact (B i).smul_mem _
  smul_right' := by
    rintro m‚ÇÄ _ ‚ü®i, rfl‚ü©
    exact hB.smul m‚ÇÄ i
def topology : TopologicalSpace M :=
  hB.toModuleFilterBasis.toAddGroupFilterBasis.topology
def openAddSubgroup (i : Œπ) : @OpenAddSubgroup M _ hB.topology :=
  let _ := hB.topology 
  { (B i).toAddSubgroup with
    isOpen' := by
      letI := hB.topology
      rw [isOpen_iff_mem_nhds]
      intro a a_in
      rw [(hB.toModuleFilterBasis.toAddGroupFilterBasis.nhds_hasBasis a).mem_iff]
      use B i
      constructor
      ¬∑ use i
      ¬∑ rintro - ‚ü®b, b_in, rfl‚ü©
        exact (B i).add_mem a_in b_in }
theorem nonarchimedean (hB : SubmodulesBasis B) : @NonarchimedeanAddGroup M _ hB.topology := by
  letI := hB.topology
  constructor
  intro U hU
  obtain ‚ü®-, ‚ü®i, rfl‚ü©, hi : (B i : Set M) ‚äÜ U‚ü© :=
    hB.toModuleFilterBasis.toAddGroupFilterBasis.nhds_zero_hasBasis.mem_iff.mp hU
  exact ‚ü®hB.openAddSubgroup i, hi‚ü©
library_note "nonarchimedean non instances"
end SubmodulesBasis
section
variable [TopologicalSpace R] {B : Œπ ‚Üí Submodule R A} (hB : SubmodulesRingBasis B)
  (hsmul : ‚àÄ (m : A) (i : Œπ), ‚àÄ·∂† a : R in ùìù 0, a ‚Ä¢ m ‚àà B i)
include hB hsmul
theorem SubmodulesRingBasis.toSubmodulesBasis : SubmodulesBasis B :=
  { inter := hB.inter
    smul := hsmul }
example [Nonempty Œπ] : hB.topology = (hB.toSubmodulesBasis hsmul).topology :=
  rfl
end
structure RingFilterBasis.SubmodulesBasis (BR : RingFilterBasis R) (B : Œπ ‚Üí Submodule R M) :
    Prop where
  inter : ‚àÄ i j, ‚àÉ k, B k ‚â§ B i ‚äì B j
  smul : ‚àÄ (m : M) (i : Œπ), ‚àÉ U ‚àà BR, U ‚äÜ (¬∑ ‚Ä¢ m) ‚Åª¬π' B i
theorem RingFilterBasis.submodulesBasisIsBasis (BR : RingFilterBasis R) {B : Œπ ‚Üí Submodule R M}
    (hB : BR.SubmodulesBasis B) : @_root_.SubmodulesBasis Œπ R _ M _ _ BR.topology B :=
  let _ := BR.topology 
  { inter := hB.inter
    smul := by
      letI := BR.topology
      intro m i
      rcases hB.smul m i with ‚ü®V, V_in, hV‚ü©
      exact mem_of_superset (BR.toAddGroupFilterBasis.mem_nhds_zero V_in) hV }
def RingFilterBasis.moduleFilterBasis [Nonempty Œπ] (BR : RingFilterBasis R) {B : Œπ ‚Üí Submodule R M}
    (hB : BR.SubmodulesBasis B) : @ModuleFilterBasis R M _ BR.topology _ _ :=
  @SubmodulesBasis.toModuleFilterBasis Œπ R _ M _ _ BR.topology _ _ (BR.submodulesBasisIsBasis hB)