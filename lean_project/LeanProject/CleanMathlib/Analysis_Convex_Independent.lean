import Mathlib.Analysis.Convex.Combination
import Mathlib.Analysis.Convex.Extreme
open scoped Classical
open Affine
open Finset Function
variable {ùïú E Œπ : Type*}
section OrderedSemiring
variable (ùïú) [OrderedSemiring ùïú] [AddCommGroup E] [Module ùïú E]
def ConvexIndependent (p : Œπ ‚Üí E) : Prop :=
  ‚àÄ (s : Set Œπ) (x : Œπ), p x ‚àà convexHull ùïú (p '' s) ‚Üí x ‚àà s
variable {ùïú}
theorem Subsingleton.convexIndependent [Subsingleton Œπ] (p : Œπ ‚Üí E) : ConvexIndependent ùïú p := by
  intro s x hx
  have : (convexHull ùïú (p '' s)).Nonempty := ‚ü®p x, hx‚ü©
  rw [convexHull_nonempty_iff, Set.image_nonempty] at this
  rwa [Subsingleton.mem_iff_nonempty]
protected theorem ConvexIndependent.injective {p : Œπ ‚Üí E} (hc : ConvexIndependent ùïú p) :
    Function.Injective p := by
  refine fun i j hij => hc {j} i ?_
  rw [hij, Set.image_singleton, convexHull_singleton]
  exact Set.mem_singleton _
theorem ConvexIndependent.comp_embedding {Œπ' : Type*} (f : Œπ' ‚Ü™ Œπ) {p : Œπ ‚Üí E}
    (hc : ConvexIndependent ùïú p) : ConvexIndependent ùïú (p ‚àò f) := by
  intro s x hx
  rw [‚Üê f.injective.mem_set_image]
  exact hc _ _ (by rwa [Set.image_image])
protected theorem ConvexIndependent.subtype {p : Œπ ‚Üí E} (hc : ConvexIndependent ùïú p) (s : Set Œπ) :
    ConvexIndependent ùïú fun i : s => p i :=
  hc.comp_embedding (Embedding.subtype _)
protected theorem ConvexIndependent.range {p : Œπ ‚Üí E} (hc : ConvexIndependent ùïú p) :
    ConvexIndependent ùïú ((‚Üë) : Set.range p ‚Üí E) := by
  let f : Set.range p ‚Üí Œπ := fun x => x.property.choose
  have hf : ‚àÄ x, p (f x) = x := fun x => x.property.choose_spec
  let fe : Set.range p ‚Ü™ Œπ := ‚ü®f, fun x‚ÇÅ x‚ÇÇ he => Subtype.ext (hf x‚ÇÅ ‚ñ∏ hf x‚ÇÇ ‚ñ∏ he ‚ñ∏ rfl)‚ü©
  convert hc.comp_embedding fe
  ext
  rw [Embedding.coeFn_mk, comp_apply, hf]
protected theorem ConvexIndependent.mono {s t : Set E} (hc : ConvexIndependent ùïú ((‚Üë) : t ‚Üí E))
    (hs : s ‚äÜ t) : ConvexIndependent ùïú ((‚Üë) : s ‚Üí E) :=
  hc.comp_embedding (s.embeddingOfSubset t hs)
theorem Function.Injective.convexIndependent_iff_set {p : Œπ ‚Üí E} (hi : Function.Injective p) :
    ConvexIndependent ùïú ((‚Üë) : Set.range p ‚Üí E) ‚Üî ConvexIndependent ùïú p :=
  ‚ü®fun hc =>
    hc.comp_embedding
      (‚ü®fun i => ‚ü®p i, Set.mem_range_self _‚ü©, fun _ _ h => hi (Subtype.mk_eq_mk.1 h)‚ü© :
        Œπ ‚Ü™ Set.range p),
    ConvexIndependent.range‚ü©
@[simp]
protected theorem ConvexIndependent.mem_convexHull_iff {p : Œπ ‚Üí E} (hc : ConvexIndependent ùïú p)
    (s : Set Œπ) (i : Œπ) : p i ‚àà convexHull ùïú (p '' s) ‚Üî i ‚àà s :=
  ‚ü®hc _ _, fun hi => subset_convexHull ùïú _ (Set.mem_image_of_mem p hi)‚ü©
theorem convexIndependent_iff_not_mem_convexHull_diff {p : Œπ ‚Üí E} :
    ConvexIndependent ùïú p ‚Üî ‚àÄ i s, p i ‚àâ convexHull ùïú (p '' (s \ {i})) := by
  refine ‚ü®fun hc i s h => ?_, fun h s i hi => ?_‚ü©
  ¬∑ rw [hc.mem_convexHull_iff] at h
    exact h.2 (Set.mem_singleton _)
  ¬∑ by_contra H
    refine h i s ?_
    rw [Set.diff_singleton_eq_self H]
    exact hi
theorem convexIndependent_set_iff_inter_convexHull_subset {s : Set E} :
    ConvexIndependent ùïú ((‚Üë) : s ‚Üí E) ‚Üî ‚àÄ t, t ‚äÜ s ‚Üí s ‚à© convexHull ùïú t ‚äÜ t := by
  constructor
  ¬∑ rintro hc t h x ‚ü®hxs, hxt‚ü©
    refine hc { x | ‚Üëx ‚àà t } ‚ü®x, hxs‚ü© ?_
    rw [Subtype.coe_image_of_subset h]
    exact hxt
  ¬∑ intro hc t x h
    rw [‚Üê Subtype.coe_injective.mem_set_image]
    exact hc (t.image ((‚Üë) : s ‚Üí E)) (Subtype.coe_image_subset s t) ‚ü®x.prop, h‚ü©
theorem convexIndependent_set_iff_not_mem_convexHull_diff {s : Set E} :
    ConvexIndependent ùïú ((‚Üë) : s ‚Üí E) ‚Üî ‚àÄ x ‚àà s, x ‚àâ convexHull ùïú (s \ {x}) := by
  rw [convexIndependent_set_iff_inter_convexHull_subset]
  constructor
  ¬∑ rintro hs x hxs hx
    exact (hs _ Set.diff_subset ‚ü®hxs, hx‚ü©).2 (Set.mem_singleton _)
  ¬∑ rintro hs t ht x ‚ü®hxs, hxt‚ü©
    by_contra h
    exact hs _ hxs (convexHull_mono (Set.subset_diff_singleton ht h) hxt)
end OrderedSemiring
section LinearOrderedField
variable [LinearOrderedField ùïú] [AddCommGroup E] [Module ùïú E] {s : Set E}
theorem convexIndependent_iff_finset {p : Œπ ‚Üí E} :
    ConvexIndependent ùïú p ‚Üî
      ‚àÄ (s : Finset Œπ) (x : Œπ), p x ‚àà convexHull ùïú (s.image p : Set E) ‚Üí x ‚àà s := by
  refine ‚ü®fun hc s x hx => hc s x ?_, fun h s x hx => ?_‚ü©
  ¬∑ rwa [Finset.coe_image] at hx
  have hp : Injective p := by
    rintro a b hab
    rw [‚Üê mem_singleton]
    refine h {b} a ?_
    rw [hab, image_singleton, coe_singleton, convexHull_singleton]
    exact Set.mem_singleton _
  rw [convexHull_eq_union_convexHull_finite_subsets] at hx
  simp_rw [Set.mem_iUnion] at hx
  obtain ‚ü®t, ht, hx‚ü© := hx
  rw [‚Üê hp.mem_set_image]
  refine ht ?_
  suffices x ‚àà t.preimage p hp.injOn by rwa [mem_preimage, ‚Üê mem_coe] at this
  refine h _ x ?_
  rwa [t.image_preimage p hp.injOn, filter_true_of_mem]
  exact fun y hy => s.image_subset_range p (ht <| mem_coe.2 hy)
theorem Convex.convexIndependent_extremePoints (hs : Convex ùïú s) :
    ConvexIndependent ùïú ((‚Üë) : s.extremePoints ùïú ‚Üí E) :=
  convexIndependent_set_iff_not_mem_convexHull_diff.2 fun _ hx h =>
    (extremePoints_convexHull_subset
          (inter_extremePoints_subset_extremePoints_of_subset
            (convexHull_min (Set.diff_subset.trans extremePoints_subset) hs) ‚ü®h, hx‚ü©)).2
      (Set.mem_singleton _)
end LinearOrderedField