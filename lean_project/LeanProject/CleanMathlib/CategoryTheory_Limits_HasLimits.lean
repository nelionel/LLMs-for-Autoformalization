import Mathlib.CategoryTheory.Limits.IsLimit
import Mathlib.CategoryTheory.Category.ULift
import Mathlib.CategoryTheory.EssentiallySmall
import Mathlib.Logic.Equiv.Basic
noncomputable section
open CategoryTheory CategoryTheory.Category CategoryTheory.Functor Opposite
namespace CategoryTheory.Limits
universe v‚ÇÅ u‚ÇÅ v‚ÇÇ u‚ÇÇ v‚ÇÉ u‚ÇÉ v v' v'' u u' u''
variable {J : Type u‚ÇÅ} [Category.{v‚ÇÅ} J] {K : Type u‚ÇÇ} [Category.{v‚ÇÇ} K]
variable {C : Type u} [Category.{v} C]
variable {F : J ‚•§ C}
section Limit
structure LimitCone (F : J ‚•§ C) where
  cone : Cone F
  isLimit : IsLimit cone
class HasLimit (F : J ‚•§ C) : Prop where mk' ::
  exists_limit : Nonempty (LimitCone F)
theorem HasLimit.mk {F : J ‚•§ C} (d : LimitCone F) : HasLimit F :=
  ‚ü®Nonempty.intro d‚ü©
def getLimitCone (F : J ‚•§ C) [HasLimit F] : LimitCone F :=
  Classical.choice <| HasLimit.exists_limit
variable (J C)
class HasLimitsOfShape : Prop where
  has_limit : ‚àÄ F : J ‚•§ C, HasLimit F := by infer_instance
@[pp_with_univ]
class HasLimitsOfSize (C : Type u) [Category.{v} C] : Prop where
  has_limits_of_shape : ‚àÄ (J : Type u‚ÇÅ) [Category.{v‚ÇÅ} J], HasLimitsOfShape J C := by
    infer_instance
abbrev HasLimits (C : Type u) [Category.{v} C] : Prop :=
  HasLimitsOfSize.{v, v} C
theorem HasLimits.has_limits_of_shape {C : Type u} [Category.{v} C] [HasLimits C] (J : Type v)
    [Category.{v} J] : HasLimitsOfShape J C :=
  HasLimitsOfSize.has_limits_of_shape J
variable {J C}
instance (priority := 100) hasLimitOfHasLimitsOfShape {J : Type u‚ÇÅ} [Category.{v‚ÇÅ} J]
    [HasLimitsOfShape J C] (F : J ‚•§ C) : HasLimit F :=
  HasLimitsOfShape.has_limit F
instance (priority := 100) hasLimitsOfShapeOfHasLimits {J : Type u‚ÇÅ} [Category.{v‚ÇÅ} J]
    [HasLimitsOfSize.{v‚ÇÅ, u‚ÇÅ} C] : HasLimitsOfShape J C :=
  HasLimitsOfSize.has_limits_of_shape J
def limit.cone (F : J ‚•§ C) [HasLimit F] : Cone F :=
  (getLimitCone F).cone
def limit (F : J ‚•§ C) [HasLimit F] :=
  (limit.cone F).pt
def limit.œÄ (F : J ‚•§ C) [HasLimit F] (j : J) : limit F ‚ü∂ F.obj j :=
  (limit.cone F).œÄ.app j
@[reassoc]
theorem limit.œÄ_comp_eqToHom (F : J ‚•§ C) [HasLimit F] {j j' : J} (hj : j = j') :
    limit.œÄ F j ‚â´ eqToHom (by subst hj; rfl) = limit.œÄ F j' := by
  subst hj
  simp
@[simp]
theorem limit.cone_x {F : J ‚•§ C} [HasLimit F] : (limit.cone F).pt = limit F :=
  rfl
@[simp]
theorem limit.cone_œÄ {F : J ‚•§ C} [HasLimit F] : (limit.cone F).œÄ.app = limit.œÄ _ :=
  rfl
@[reassoc (attr := simp)]
theorem limit.w (F : J ‚•§ C) [HasLimit F] {j j' : J} (f : j ‚ü∂ j') :
    limit.œÄ F j ‚â´ F.map f = limit.œÄ F j' :=
  (limit.cone F).w f
def limit.isLimit (F : J ‚•§ C) [HasLimit F] : IsLimit (limit.cone F) :=
  (getLimitCone F).isLimit
def limit.lift (F : J ‚•§ C) [HasLimit F] (c : Cone F) : c.pt ‚ü∂ limit F :=
  (limit.isLimit F).lift c
@[simp]
theorem limit.isLimit_lift {F : J ‚•§ C} [HasLimit F] (c : Cone F) :
    (limit.isLimit F).lift c = limit.lift F c :=
  rfl
@[reassoc (attr := simp)]
theorem limit.lift_œÄ {F : J ‚•§ C} [HasLimit F] (c : Cone F) (j : J) :
    limit.lift F c ‚â´ limit.œÄ F j = c.œÄ.app j :=
  IsLimit.fac _ c j
def limMap {F G : J ‚•§ C} [HasLimit F] [HasLimit G] (Œ± : F ‚ü∂ G) : limit F ‚ü∂ limit G :=
  IsLimit.map _ (limit.isLimit G) Œ±
@[reassoc (attr := simp)]
theorem limMap_œÄ {F G : J ‚•§ C} [HasLimit F] [HasLimit G] (Œ± : F ‚ü∂ G) (j : J) :
    limMap Œ± ‚â´ limit.œÄ G j = limit.œÄ F j ‚â´ Œ±.app j :=
  limit.lift_œÄ _ j
def limit.coneMorphism {F : J ‚•§ C} [HasLimit F] (c : Cone F) : c ‚ü∂ limit.cone F :=
  (limit.isLimit F).liftConeMorphism c
@[simp]
theorem limit.coneMorphism_hom {F : J ‚•§ C} [HasLimit F] (c : Cone F) :
    (limit.coneMorphism c).hom = limit.lift F c :=
  rfl
theorem limit.coneMorphism_œÄ {F : J ‚•§ C} [HasLimit F] (c : Cone F) (j : J) :
    (limit.coneMorphism c).hom ‚â´ limit.œÄ F j = c.œÄ.app j := by simp
@[reassoc (attr := simp)]
theorem limit.conePointUniqueUpToIso_hom_comp {F : J ‚•§ C} [HasLimit F] {c : Cone F} (hc : IsLimit c)
    (j : J) : (IsLimit.conePointUniqueUpToIso hc (limit.isLimit _)).hom ‚â´ limit.œÄ F j = c.œÄ.app j :=
  IsLimit.conePointUniqueUpToIso_hom_comp _ _ _
@[reassoc (attr := simp)]
theorem limit.conePointUniqueUpToIso_inv_comp {F : J ‚•§ C} [HasLimit F] {c : Cone F} (hc : IsLimit c)
    (j : J) : (IsLimit.conePointUniqueUpToIso (limit.isLimit _) hc).inv ‚â´ limit.œÄ F j = c.œÄ.app j :=
  IsLimit.conePointUniqueUpToIso_inv_comp _ _ _
theorem limit.existsUnique {F : J ‚•§ C} [HasLimit F] (t : Cone F) :
    ‚àÉ! l : t.pt ‚ü∂ limit F, ‚àÄ j, l ‚â´ limit.œÄ F j = t.œÄ.app j :=
  (limit.isLimit F).existsUnique _
def limit.isoLimitCone {F : J ‚•§ C} [HasLimit F] (t : LimitCone F) : limit F ‚âÖ t.cone.pt :=
  IsLimit.conePointUniqueUpToIso (limit.isLimit F) t.isLimit
@[reassoc (attr := simp)]
theorem limit.isoLimitCone_hom_œÄ {F : J ‚•§ C} [HasLimit F] (t : LimitCone F) (j : J) :
    (limit.isoLimitCone t).hom ‚â´ t.cone.œÄ.app j = limit.œÄ F j := by
  dsimp [limit.isoLimitCone, IsLimit.conePointUniqueUpToIso]
  aesop_cat
@[reassoc (attr := simp)]
theorem limit.isoLimitCone_inv_œÄ {F : J ‚•§ C} [HasLimit F] (t : LimitCone F) (j : J) :
    (limit.isoLimitCone t).inv ‚â´ limit.œÄ F j = t.cone.œÄ.app j := by
  dsimp [limit.isoLimitCone, IsLimit.conePointUniqueUpToIso]
  aesop_cat
@[ext]
theorem limit.hom_ext {F : J ‚•§ C} [HasLimit F] {X : C} {f f' : X ‚ü∂ limit F}
    (w : ‚àÄ j, f ‚â´ limit.œÄ F j = f' ‚â´ limit.œÄ F j) : f = f' :=
  (limit.isLimit F).hom_ext w
@[simp]
theorem limit.lift_map {F G : J ‚•§ C} [HasLimit F] [HasLimit G] (c : Cone F) (Œ± : F ‚ü∂ G) :
    limit.lift F c ‚â´ limMap Œ± = limit.lift G ((Cones.postcompose Œ±).obj c) := by
  ext
  rw [assoc, limMap_œÄ, limit.lift_œÄ_assoc, limit.lift_œÄ]
  rfl
@[simp]
theorem limit.lift_cone {F : J ‚•§ C} [HasLimit F] : limit.lift F (limit.cone F) = ùüô (limit F) :=
  (limit.isLimit _).lift_self
def limit.homIso (F : J ‚•§ C) [HasLimit F] (W : C) :
    ULift.{u‚ÇÅ} (W ‚ü∂ limit F : Type v) ‚âÖ F.cones.obj (op W) :=
  (limit.isLimit F).homIso W
@[simp]
theorem limit.homIso_hom (F : J ‚•§ C) [HasLimit F] {W : C} (f : ULift (W ‚ü∂ limit F)) :
    (limit.homIso F W).hom f = (const J).map f.down ‚â´ (limit.cone F).œÄ :=
  (limit.isLimit F).homIso_hom f
def limit.homIso' (F : J ‚•§ C) [HasLimit F] (W : C) :
    ULift.{u‚ÇÅ} (W ‚ü∂ limit F : Type v) ‚âÖ
      { p : ‚àÄ j, W ‚ü∂ F.obj j // ‚àÄ {j j' : J} (f : j ‚ü∂ j'), p j ‚â´ F.map f = p j' } :=
  (limit.isLimit F).homIso' W
theorem limit.lift_extend {F : J ‚•§ C} [HasLimit F] (c : Cone F) {X : C} (f : X ‚ü∂ c.pt) :
    limit.lift F (c.extend f) = f ‚â´ limit.lift F c := by aesop_cat
theorem hasLimitOfIso {F G : J ‚•§ C} [HasLimit F] (Œ± : F ‚âÖ G) : HasLimit G :=
  HasLimit.mk
    { cone := (Cones.postcompose Œ±.hom).obj (limit.cone F)
      isLimit := (IsLimit.postcomposeHomEquiv _ _).symm (limit.isLimit F) }
theorem HasLimit.ofConesIso {J K : Type u‚ÇÅ} [Category.{v‚ÇÅ} J] [Category.{v‚ÇÇ} K] (F : J ‚•§ C)
    (G : K ‚•§ C) (h : F.cones ‚âÖ G.cones) [HasLimit F] : HasLimit G :=
  HasLimit.mk ‚ü®_, IsLimit.ofNatIso (IsLimit.natIso (limit.isLimit F) ‚â™‚â´ h)‚ü©
def HasLimit.isoOfNatIso {F G : J ‚•§ C} [HasLimit F] [HasLimit G] (w : F ‚âÖ G) : limit F ‚âÖ limit G :=
  IsLimit.conePointsIsoOfNatIso (limit.isLimit F) (limit.isLimit G) w
@[reassoc (attr := simp)]
theorem HasLimit.isoOfNatIso_hom_œÄ {F G : J ‚•§ C} [HasLimit F] [HasLimit G] (w : F ‚âÖ G) (j : J) :
    (HasLimit.isoOfNatIso w).hom ‚â´ limit.œÄ G j = limit.œÄ F j ‚â´ w.hom.app j :=
  IsLimit.conePointsIsoOfNatIso_hom_comp _ _ _ _
@[reassoc (attr := simp)]
theorem HasLimit.isoOfNatIso_inv_œÄ {F G : J ‚•§ C} [HasLimit F] [HasLimit G] (w : F ‚âÖ G) (j : J) :
    (HasLimit.isoOfNatIso w).inv ‚â´ limit.œÄ F j = limit.œÄ G j ‚â´ w.inv.app j :=
  IsLimit.conePointsIsoOfNatIso_inv_comp _ _ _ _
@[reassoc (attr := simp)]
theorem HasLimit.lift_isoOfNatIso_hom {F G : J ‚•§ C} [HasLimit F] [HasLimit G] (t : Cone F)
    (w : F ‚âÖ G) :
    limit.lift F t ‚â´ (HasLimit.isoOfNatIso w).hom =
      limit.lift G ((Cones.postcompose w.hom).obj _) :=
  IsLimit.lift_comp_conePointsIsoOfNatIso_hom _ _ _
@[reassoc (attr := simp)]
theorem HasLimit.lift_isoOfNatIso_inv {F G : J ‚•§ C} [HasLimit F] [HasLimit G] (t : Cone G)
    (w : F ‚âÖ G) :
    limit.lift G t ‚â´ (HasLimit.isoOfNatIso w).inv =
      limit.lift F ((Cones.postcompose w.inv).obj _) :=
  IsLimit.lift_comp_conePointsIsoOfNatIso_inv _ _ _
def HasLimit.isoOfEquivalence {F : J ‚•§ C} [HasLimit F] {G : K ‚•§ C} [HasLimit G] (e : J ‚âå K)
    (w : e.functor ‚ãô G ‚âÖ F) : limit F ‚âÖ limit G :=
  IsLimit.conePointsIsoOfEquivalence (limit.isLimit F) (limit.isLimit G) e w
@[simp]
theorem HasLimit.isoOfEquivalence_hom_œÄ {F : J ‚•§ C} [HasLimit F] {G : K ‚•§ C} [HasLimit G]
    (e : J ‚âå K) (w : e.functor ‚ãô G ‚âÖ F) (k : K) :
    (HasLimit.isoOfEquivalence e w).hom ‚â´ limit.œÄ G k =
      limit.œÄ F (e.inverse.obj k) ‚â´ w.inv.app (e.inverse.obj k) ‚â´ G.map (e.counit.app k) := by
  simp only [HasLimit.isoOfEquivalence, IsLimit.conePointsIsoOfEquivalence_hom]
  dsimp
  simp
@[simp]
theorem HasLimit.isoOfEquivalence_inv_œÄ {F : J ‚•§ C} [HasLimit F] {G : K ‚•§ C} [HasLimit G]
    (e : J ‚âå K) (w : e.functor ‚ãô G ‚âÖ F) (j : J) :
    (HasLimit.isoOfEquivalence e w).inv ‚â´ limit.œÄ F j =
    limit.œÄ G (e.functor.obj j) ‚â´ w.hom.app j := by
  simp only [HasLimit.isoOfEquivalence, IsLimit.conePointsIsoOfEquivalence_hom]
  dsimp
  simp
section Pre
variable (F)
variable [HasLimit F] (E : K ‚•§ J) [HasLimit (E ‚ãô F)]
def limit.pre : limit F ‚ü∂ limit (E ‚ãô F) :=
  limit.lift (E ‚ãô F) ((limit.cone F).whisker E)
@[reassoc (attr := simp)]
theorem limit.pre_œÄ (k : K) : limit.pre F E ‚â´ limit.œÄ (E ‚ãô F) k = limit.œÄ F (E.obj k) := by
  erw [IsLimit.fac]
  rfl
@[simp]
theorem limit.lift_pre (c : Cone F) :
    limit.lift F c ‚â´ limit.pre F E = limit.lift (E ‚ãô F) (c.whisker E) := by ext; simp
variable {L : Type u‚ÇÉ} [Category.{v‚ÇÉ} L]
variable (D : L ‚•§ K)
@[simp]
theorem limit.pre_pre [h : HasLimit (D ‚ãô E ‚ãô F)] : haveI : HasLimit ((D ‚ãô E) ‚ãô F) := h
    limit.pre F E ‚â´ limit.pre (E ‚ãô F) D = limit.pre F (D ‚ãô E) := by
  haveI : HasLimit ((D ‚ãô E) ‚ãô F) := h
  ext j; erw [assoc, limit.pre_œÄ, limit.pre_œÄ, limit.pre_œÄ]; rfl
variable {E F}
theorem limit.pre_eq (s : LimitCone (E ‚ãô F)) (t : LimitCone F) :
    limit.pre F E = (limit.isoLimitCone t).hom ‚â´ s.isLimit.lift (t.cone.whisker E) ‚â´
      (limit.isoLimitCone s).inv := by aesop_cat
end Pre
section Post
variable {D : Type u'} [Category.{v'} D]
variable (F : J ‚•§ C) [HasLimit F] (G : C ‚•§ D) [HasLimit (F ‚ãô G)]
def limit.post : G.obj (limit F) ‚ü∂ limit (F ‚ãô G) :=
  limit.lift (F ‚ãô G) (G.mapCone (limit.cone F))
@[reassoc (attr := simp)]
theorem limit.post_œÄ (j : J) : limit.post F G ‚â´ limit.œÄ (F ‚ãô G) j = G.map (limit.œÄ F j) := by
  erw [IsLimit.fac]
  rfl
@[simp]
theorem limit.lift_post (c : Cone F) :
    G.map (limit.lift F c) ‚â´ limit.post F G = limit.lift (F ‚ãô G) (G.mapCone c) := by
  ext
  rw [assoc, limit.post_œÄ, ‚Üê G.map_comp, limit.lift_œÄ, limit.lift_œÄ]
  rfl
@[simp]
theorem limit.post_post {E : Type u''} [Category.{v''} E] (H : D ‚•§ E) [h : HasLimit ((F ‚ãô G) ‚ãô H)] :
    haveI : HasLimit (F ‚ãô G ‚ãô H) := h
    H.map (limit.post F G) ‚â´ limit.post (F ‚ãô G) H = limit.post F (G ‚ãô H) := by
  haveI : HasLimit (F ‚ãô G ‚ãô H) := h
  ext; erw [assoc, limit.post_œÄ, ‚Üê H.map_comp, limit.post_œÄ, limit.post_œÄ]; rfl
end Post
theorem limit.pre_post {D : Type u'} [Category.{v'} D] (E : K ‚•§ J) (F : J ‚•§ C) (G : C ‚•§ D)
    [HasLimit F] [HasLimit (E ‚ãô F)] [HasLimit (F ‚ãô G)]
    [h : HasLimit ((E ‚ãô F) ‚ãô G)] :
    haveI : HasLimit (E ‚ãô F ‚ãô G) := h
    G.map (limit.pre F E) ‚â´ limit.post (E ‚ãô F) G = limit.post F G ‚â´ limit.pre (F ‚ãô G) E := by
  haveI : HasLimit (E ‚ãô F ‚ãô G) := h
  ext; erw [assoc, limit.post_œÄ, ‚Üê G.map_comp, limit.pre_œÄ, assoc, limit.pre_œÄ, limit.post_œÄ]
open CategoryTheory.Equivalence
instance hasLimitEquivalenceComp (e : K ‚âå J) [HasLimit F] : HasLimit (e.functor ‚ãô F) :=
  HasLimit.mk
    { cone := Cone.whisker e.functor (limit.cone F)
      isLimit := IsLimit.whiskerEquivalence (limit.isLimit F) e }
theorem hasLimitOfEquivalenceComp (e : K ‚âå J) [HasLimit (e.functor ‚ãô F)] : HasLimit F := by
  haveI : HasLimit (e.inverse ‚ãô e.functor ‚ãô F) := Limits.hasLimitEquivalenceComp e.symm
  apply hasLimitOfIso (e.invFunIdAssoc F)
section LimFunctor
variable [HasLimitsOfShape J C]
section
@[simps]
def lim : (J ‚•§ C) ‚•§ C where
  obj F := limit F
  map Œ± := limMap Œ±
  map_id F := by
    apply Limits.limit.hom_ext; intro j
    erw [limMap_œÄ, Category.id_comp, Category.comp_id]
  map_comp Œ± Œ≤ := by
    apply Limits.limit.hom_ext; intro j
    erw [assoc, IsLimit.fac, IsLimit.fac, ‚Üê assoc, IsLimit.fac, assoc]; rfl
end
variable {G : J ‚•§ C} (Œ± : F ‚ü∂ G)
theorem limit.map_pre [HasLimitsOfShape K C] (E : K ‚•§ J) :
    lim.map Œ± ‚â´ limit.pre G E = limit.pre F E ‚â´ lim.map (whiskerLeft E Œ±) := by
  ext
  simp
theorem limit.map_pre' [HasLimitsOfShape K C] (F : J ‚•§ C) {E‚ÇÅ E‚ÇÇ : K ‚•§ J} (Œ± : E‚ÇÅ ‚ü∂ E‚ÇÇ) :
    limit.pre F E‚ÇÇ = limit.pre F E‚ÇÅ ‚â´ lim.map (whiskerRight Œ± F) := by
  ext1; simp [‚Üê category.assoc]
theorem limit.id_pre (F : J ‚•§ C) : limit.pre F (ùü≠ _) = lim.map (Functor.leftUnitor F).inv := by
  aesop_cat
theorem limit.map_post {D : Type u'} [Category.{v'} D] [HasLimitsOfShape J D] (H : C ‚•§ D) :
    H.map (limMap Œ±) ‚â´ limit.post G H = limit.post F H ‚â´ limMap (whiskerRight Œ± H) := by
  ext
  simp only [whiskerRight_app, limMap_œÄ, assoc, limit.post_œÄ_assoc, limit.post_œÄ, ‚Üê H.map_comp]
def limYoneda :
    lim ‚ãô yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{u‚ÇÅ} ‚âÖ CategoryTheory.cones J C :=
  NatIso.ofComponents fun F => NatIso.ofComponents fun W => limit.homIso F (unop W)
def constLimAdj : (const J : C ‚•§ J ‚•§ C) ‚ä£ lim := Adjunction.mk' {
  homEquiv := fun c g ‚Ü¶
    { toFun := fun f => limit.lift _ ‚ü®c, f‚ü©
      invFun := fun f =>
        { app := fun _ => f ‚â´ limit.œÄ _ _ }
      left_inv := by aesop_cat
      right_inv := by aesop_cat }
  unit := { app := fun _ => limit.lift _ ‚ü®_, ùüô _‚ü© }
  counit := { app := fun g => { app := limit.œÄ _ } } }
instance : IsRightAdjoint (lim : (J ‚•§ C) ‚•§ C) :=
  ‚ü®_, ‚ü®constLimAdj‚ü©‚ü©
end LimFunctor
instance limMap_mono' {F G : J ‚•§ C} [HasLimitsOfShape J C] (Œ± : F ‚ü∂ G) [Mono Œ±] : Mono (limMap Œ±) :=
  (lim : (J ‚•§ C) ‚•§ C).map_mono Œ±
instance limMap_mono {F G : J ‚•§ C} [HasLimit F] [HasLimit G] (Œ± : F ‚ü∂ G) [‚àÄ j, Mono (Œ±.app j)] :
    Mono (limMap Œ±) :=
  ‚ü®fun {Z} u v h =>
    limit.hom_ext fun j => (cancel_mono (Œ±.app j)).1 <| by simpa using h =‚â´ limit.œÄ _ j‚ü©
section Adjunction
variable {L : (J ‚•§ C) ‚•§ C} (adj : Functor.const _ ‚ä£ L)
@[simps]
noncomputable def coneOfAdj (F : J ‚•§ C) : Cone F where
  pt := L.obj F
  œÄ := adj.counit.app F
@[simps]
def isLimitConeOfAdj (F : J ‚•§ C) :
    IsLimit (coneOfAdj adj F) where
  lift s := adj.homEquiv _ _ s.œÄ
  fac s j := by
    have eq := NatTrans.congr_app (adj.counit.naturality s.œÄ) j
    have eq' := NatTrans.congr_app (adj.left_triangle_components s.pt) j
    dsimp at eq eq' ‚ä¢
    rw [adj.homEquiv_unit, assoc, eq, reassoc_of% eq']
  uniq s m hm := (adj.homEquiv _ _).symm.injective (by ext j; simpa using hm j)
end Adjunction
theorem hasLimitsOfShape_of_equivalence {J' : Type u‚ÇÇ} [Category.{v‚ÇÇ} J'] (e : J ‚âå J')
    [HasLimitsOfShape J C] : HasLimitsOfShape J' C := by
  constructor
  intro F
  apply hasLimitOfEquivalenceComp e
variable (C)
theorem hasLimitsOfSizeOfUnivLE [UnivLE.{v‚ÇÇ, v‚ÇÅ}] [UnivLE.{u‚ÇÇ, u‚ÇÅ}]
    [HasLimitsOfSize.{v‚ÇÅ, u‚ÇÅ} C] : HasLimitsOfSize.{v‚ÇÇ, u‚ÇÇ} C where
  has_limits_of_shape J {_} := hasLimitsOfShape_of_equivalence
    ((ShrinkHoms.equivalence J).trans <| Shrink.equivalence _).symm
theorem hasLimitsOfSizeShrink [HasLimitsOfSize.{max v‚ÇÅ v‚ÇÇ, max u‚ÇÅ u‚ÇÇ} C] :
    HasLimitsOfSize.{v‚ÇÅ, u‚ÇÅ} C := hasLimitsOfSizeOfUnivLE.{max v‚ÇÅ v‚ÇÇ, max u‚ÇÅ u‚ÇÇ} C
instance (priority := 100) hasSmallestLimitsOfHasLimits [HasLimits C] : HasLimitsOfSize.{0, 0} C :=
  hasLimitsOfSizeShrink.{0, 0} C
end Limit
section Colimit
structure ColimitCocone (F : J ‚•§ C) where
  cocone : Cocone F
  isColimit : IsColimit cocone
class HasColimit (F : J ‚•§ C) : Prop where mk' ::
  exists_colimit : Nonempty (ColimitCocone F)
theorem HasColimit.mk {F : J ‚•§ C} (d : ColimitCocone F) : HasColimit F :=
  ‚ü®Nonempty.intro d‚ü©
def getColimitCocone (F : J ‚•§ C) [HasColimit F] : ColimitCocone F :=
  Classical.choice <| HasColimit.exists_colimit
variable (J C)
class HasColimitsOfShape : Prop where
  has_colimit : ‚àÄ F : J ‚•§ C, HasColimit F := by infer_instance
@[pp_with_univ]
class HasColimitsOfSize (C : Type u) [Category.{v} C] : Prop where
  has_colimits_of_shape : ‚àÄ (J : Type u‚ÇÅ) [Category.{v‚ÇÅ} J], HasColimitsOfShape J C := by
    infer_instance
abbrev HasColimits (C : Type u) [Category.{v} C] : Prop :=
  HasColimitsOfSize.{v, v} C
theorem HasColimits.hasColimitsOfShape {C : Type u} [Category.{v} C] [HasColimits C] (J : Type v)
    [Category.{v} J] : HasColimitsOfShape J C :=
  HasColimitsOfSize.has_colimits_of_shape J
variable {J C}
instance (priority := 100) hasColimitOfHasColimitsOfShape {J : Type u‚ÇÅ} [Category.{v‚ÇÅ} J]
    [HasColimitsOfShape J C] (F : J ‚•§ C) : HasColimit F :=
  HasColimitsOfShape.has_colimit F
instance (priority := 100) hasColimitsOfShapeOfHasColimitsOfSize {J : Type u‚ÇÅ} [Category.{v‚ÇÅ} J]
    [HasColimitsOfSize.{v‚ÇÅ, u‚ÇÅ} C] : HasColimitsOfShape J C :=
  HasColimitsOfSize.has_colimits_of_shape J
def colimit.cocone (F : J ‚•§ C) [HasColimit F] : Cocone F :=
  (getColimitCocone F).cocone
def colimit (F : J ‚•§ C) [HasColimit F] :=
  (colimit.cocone F).pt
def colimit.Œπ (F : J ‚•§ C) [HasColimit F] (j : J) : F.obj j ‚ü∂ colimit F :=
  (colimit.cocone F).Œπ.app j
@[reassoc]
theorem colimit.eqToHom_comp_Œπ (F : J ‚•§ C) [HasColimit F] {j j' : J} (hj : j = j') :
    eqToHom (by subst hj; rfl) ‚â´ colimit.Œπ F j = colimit.Œπ F j'  := by
  subst hj
  simp
@[simp]
theorem colimit.cocone_Œπ {F : J ‚•§ C} [HasColimit F] (j : J) :
    (colimit.cocone F).Œπ.app j = colimit.Œπ _ j :=
  rfl
@[simp]
theorem colimit.cocone_x {F : J ‚•§ C} [HasColimit F] : (colimit.cocone F).pt = colimit F :=
  rfl
@[reassoc (attr := simp)]
theorem colimit.w (F : J ‚•§ C) [HasColimit F] {j j' : J} (f : j ‚ü∂ j') :
    F.map f ‚â´ colimit.Œπ F j' = colimit.Œπ F j :=
  (colimit.cocone F).w f
def colimit.isColimit (F : J ‚•§ C) [HasColimit F] : IsColimit (colimit.cocone F) :=
  (getColimitCocone F).isColimit
def colimit.desc (F : J ‚•§ C) [HasColimit F] (c : Cocone F) : colimit F ‚ü∂ c.pt :=
  (colimit.isColimit F).desc c
@[simp]
theorem colimit.isColimit_desc {F : J ‚•§ C} [HasColimit F] (c : Cocone F) :
    (colimit.isColimit F).desc c = colimit.desc F c :=
  rfl
@[reassoc (attr := simp)]
theorem colimit.Œπ_desc {F : J ‚•§ C} [HasColimit F] (c : Cocone F) (j : J) :
    colimit.Œπ F j ‚â´ colimit.desc F c = c.Œπ.app j :=
  IsColimit.fac _ c j
def colimMap {F G : J ‚•§ C} [HasColimit F] [HasColimit G] (Œ± : F ‚ü∂ G) : colimit F ‚ü∂ colimit G :=
  IsColimit.map (colimit.isColimit F) _ Œ±
@[reassoc (attr := simp)]
theorem Œπ_colimMap {F G : J ‚•§ C} [HasColimit F] [HasColimit G] (Œ± : F ‚ü∂ G) (j : J) :
    colimit.Œπ F j ‚â´ colimMap Œ± = Œ±.app j ‚â´ colimit.Œπ G j :=
  colimit.Œπ_desc _ j
def colimit.coconeMorphism {F : J ‚•§ C} [HasColimit F] (c : Cocone F) : colimit.cocone F ‚ü∂ c :=
  (colimit.isColimit F).descCoconeMorphism c
@[simp]
theorem colimit.coconeMorphism_hom {F : J ‚•§ C} [HasColimit F] (c : Cocone F) :
    (colimit.coconeMorphism c).hom = colimit.desc F c :=
  rfl
theorem colimit.Œπ_coconeMorphism {F : J ‚•§ C} [HasColimit F] (c : Cocone F) (j : J) :
    colimit.Œπ F j ‚â´ (colimit.coconeMorphism c).hom = c.Œπ.app j := by simp
@[reassoc (attr := simp)]
theorem colimit.comp_coconePointUniqueUpToIso_hom {F : J ‚•§ C} [HasColimit F] {c : Cocone F}
    (hc : IsColimit c) (j : J) :
    colimit.Œπ F j ‚â´ (IsColimit.coconePointUniqueUpToIso (colimit.isColimit _) hc).hom = c.Œπ.app j :=
  IsColimit.comp_coconePointUniqueUpToIso_hom _ _ _
@[reassoc (attr := simp)]
theorem colimit.comp_coconePointUniqueUpToIso_inv {F : J ‚•§ C} [HasColimit F] {c : Cocone F}
    (hc : IsColimit c) (j : J) :
    colimit.Œπ F j ‚â´ (IsColimit.coconePointUniqueUpToIso hc (colimit.isColimit _)).inv = c.Œπ.app j :=
  IsColimit.comp_coconePointUniqueUpToIso_inv _ _ _
theorem colimit.existsUnique {F : J ‚•§ C} [HasColimit F] (t : Cocone F) :
    ‚àÉ! d : colimit F ‚ü∂ t.pt, ‚àÄ j, colimit.Œπ F j ‚â´ d = t.Œπ.app j :=
  (colimit.isColimit F).existsUnique _
def colimit.isoColimitCocone {F : J ‚•§ C} [HasColimit F] (t : ColimitCocone F) :
    colimit F ‚âÖ t.cocone.pt :=
  IsColimit.coconePointUniqueUpToIso (colimit.isColimit F) t.isColimit
@[reassoc (attr := simp)]
theorem colimit.isoColimitCocone_Œπ_hom {F : J ‚•§ C} [HasColimit F] (t : ColimitCocone F) (j : J) :
    colimit.Œπ F j ‚â´ (colimit.isoColimitCocone t).hom = t.cocone.Œπ.app j := by
  dsimp [colimit.isoColimitCocone, IsColimit.coconePointUniqueUpToIso]
  aesop_cat
@[reassoc (attr := simp)]
theorem colimit.isoColimitCocone_Œπ_inv {F : J ‚•§ C} [HasColimit F] (t : ColimitCocone F) (j : J) :
    t.cocone.Œπ.app j ‚â´ (colimit.isoColimitCocone t).inv = colimit.Œπ F j := by
  dsimp [colimit.isoColimitCocone, IsColimit.coconePointUniqueUpToIso]
  aesop_cat
@[ext]
theorem colimit.hom_ext {F : J ‚•§ C} [HasColimit F] {X : C} {f f' : colimit F ‚ü∂ X}
    (w : ‚àÄ j, colimit.Œπ F j ‚â´ f = colimit.Œπ F j ‚â´ f') : f = f' :=
  (colimit.isColimit F).hom_ext w
@[simp]
theorem colimit.desc_cocone {F : J ‚•§ C} [HasColimit F] :
    colimit.desc F (colimit.cocone F) = ùüô (colimit F) :=
  (colimit.isColimit _).desc_self
def colimit.homIso (F : J ‚•§ C) [HasColimit F] (W : C) :
    ULift.{u‚ÇÅ} (colimit F ‚ü∂ W : Type v) ‚âÖ F.cocones.obj W :=
  (colimit.isColimit F).homIso W
@[simp]
theorem colimit.homIso_hom (F : J ‚•§ C) [HasColimit F] {W : C} (f : ULift (colimit F ‚ü∂ W)) :
    (colimit.homIso F W).hom f = (colimit.cocone F).Œπ ‚â´ (const J).map f.down :=
  (colimit.isColimit F).homIso_hom f
def colimit.homIso' (F : J ‚•§ C) [HasColimit F] (W : C) :
    ULift.{u‚ÇÅ} (colimit F ‚ü∂ W : Type v) ‚âÖ
      { p : ‚àÄ j, F.obj j ‚ü∂ W // ‚àÄ {j j'} (f : j ‚ü∂ j'), F.map f ‚â´ p j' = p j } :=
  (colimit.isColimit F).homIso' W
theorem colimit.desc_extend (F : J ‚•§ C) [HasColimit F] (c : Cocone F) {X : C} (f : c.pt ‚ü∂ X) :
    colimit.desc F (c.extend f) = colimit.desc F c ‚â´ f := by ext1; rw [‚Üê Category.assoc]; simp
theorem hasColimitOfIso {F G : J ‚•§ C} [HasColimit F] (Œ± : G ‚âÖ F) : HasColimit G :=
  HasColimit.mk
    { cocone := (Cocones.precompose Œ±.hom).obj (colimit.cocone F)
      isColimit := (IsColimit.precomposeHomEquiv _ _).symm (colimit.isColimit F) }
theorem HasColimit.ofCoconesIso {K : Type u‚ÇÅ} [Category.{v‚ÇÇ} K] (F : J ‚•§ C) (G : K ‚•§ C)
    (h : F.cocones ‚âÖ G.cocones) [HasColimit F] : HasColimit G :=
  HasColimit.mk ‚ü®_, IsColimit.ofNatIso (IsColimit.natIso (colimit.isColimit F) ‚â™‚â´ h)‚ü©
def HasColimit.isoOfNatIso {F G : J ‚•§ C} [HasColimit F] [HasColimit G] (w : F ‚âÖ G) :
    colimit F ‚âÖ colimit G :=
  IsColimit.coconePointsIsoOfNatIso (colimit.isColimit F) (colimit.isColimit G) w
@[reassoc (attr := simp)]
theorem HasColimit.isoOfNatIso_Œπ_hom {F G : J ‚•§ C} [HasColimit F] [HasColimit G] (w : F ‚âÖ G)
    (j : J) : colimit.Œπ F j ‚â´ (HasColimit.isoOfNatIso w).hom = w.hom.app j ‚â´ colimit.Œπ G j :=
  IsColimit.comp_coconePointsIsoOfNatIso_hom _ _ _ _
@[reassoc (attr := simp)]
theorem HasColimit.isoOfNatIso_Œπ_inv {F G : J ‚•§ C} [HasColimit F] [HasColimit G] (w : F ‚âÖ G)
    (j : J) : colimit.Œπ G j ‚â´ (HasColimit.isoOfNatIso w).inv = w.inv.app j ‚â´ colimit.Œπ F j :=
  IsColimit.comp_coconePointsIsoOfNatIso_inv _ _ _ _
@[reassoc (attr := simp)]
theorem HasColimit.isoOfNatIso_hom_desc {F G : J ‚•§ C} [HasColimit F] [HasColimit G] (t : Cocone G)
    (w : F ‚âÖ G) :
    (HasColimit.isoOfNatIso w).hom ‚â´ colimit.desc G t =
      colimit.desc F ((Cocones.precompose w.hom).obj _) :=
  IsColimit.coconePointsIsoOfNatIso_hom_desc _ _ _
@[reassoc (attr := simp)]
theorem HasColimit.isoOfNatIso_inv_desc {F G : J ‚•§ C} [HasColimit F] [HasColimit G] (t : Cocone F)
    (w : F ‚âÖ G) :
    (HasColimit.isoOfNatIso w).inv ‚â´ colimit.desc F t =
      colimit.desc G ((Cocones.precompose w.inv).obj _) :=
  IsColimit.coconePointsIsoOfNatIso_inv_desc _ _ _
def HasColimit.isoOfEquivalence {F : J ‚•§ C} [HasColimit F] {G : K ‚•§ C} [HasColimit G] (e : J ‚âå K)
    (w : e.functor ‚ãô G ‚âÖ F) : colimit F ‚âÖ colimit G :=
  IsColimit.coconePointsIsoOfEquivalence (colimit.isColimit F) (colimit.isColimit G) e w
@[simp]
theorem HasColimit.isoOfEquivalence_hom_œÄ {F : J ‚•§ C} [HasColimit F] {G : K ‚•§ C} [HasColimit G]
    (e : J ‚âå K) (w : e.functor ‚ãô G ‚âÖ F) (j : J) :
    colimit.Œπ F j ‚â´ (HasColimit.isoOfEquivalence e w).hom =
      F.map (e.unit.app j) ‚â´ w.inv.app _ ‚â´ colimit.Œπ G _ := by
  simp [HasColimit.isoOfEquivalence, IsColimit.coconePointsIsoOfEquivalence_inv]
@[simp]
theorem HasColimit.isoOfEquivalence_inv_œÄ {F : J ‚•§ C} [HasColimit F] {G : K ‚•§ C} [HasColimit G]
    (e : J ‚âå K) (w : e.functor ‚ãô G ‚âÖ F) (k : K) :
    colimit.Œπ G k ‚â´ (HasColimit.isoOfEquivalence e w).inv =
      G.map (e.counitInv.app k) ‚â´ w.hom.app (e.inverse.obj k) ‚â´ colimit.Œπ F (e.inverse.obj k) := by
  simp [HasColimit.isoOfEquivalence, IsColimit.coconePointsIsoOfEquivalence_inv]
section Pre
variable (F)
variable [HasColimit F] (E : K ‚•§ J) [HasColimit (E ‚ãô F)]
def colimit.pre : colimit (E ‚ãô F) ‚ü∂ colimit F :=
  colimit.desc (E ‚ãô F) ((colimit.cocone F).whisker E)
@[reassoc (attr := simp)]
theorem colimit.Œπ_pre (k : K) : colimit.Œπ (E ‚ãô F) k ‚â´ colimit.pre F E = colimit.Œπ F (E.obj k) := by
  erw [IsColimit.fac]
  rfl
@[reassoc (attr := simp)]
theorem colimit.Œπ_inv_pre [IsIso (pre F E)] (k : K) :
    colimit.Œπ F (E.obj k) ‚â´ inv (colimit.pre F E) = colimit.Œπ (E ‚ãô F) k := by
  simp [IsIso.comp_inv_eq]
@[reassoc (attr := simp)]
theorem colimit.pre_desc (c : Cocone F) :
    colimit.pre F E ‚â´ colimit.desc F c = colimit.desc (E ‚ãô F) (c.whisker E) := by
  ext; rw [‚Üê assoc, colimit.Œπ_pre]; simp
variable {L : Type u‚ÇÉ} [Category.{v‚ÇÉ} L]
variable (D : L ‚•§ K)
@[simp]
theorem colimit.pre_pre [h : HasColimit (D ‚ãô E ‚ãô F)] :
    haveI : HasColimit ((D ‚ãô E) ‚ãô F) := h
    colimit.pre (E ‚ãô F) D ‚â´ colimit.pre F E = colimit.pre F (D ‚ãô E) := by
  ext j
  rw [‚Üê assoc, colimit.Œπ_pre, colimit.Œπ_pre]
  haveI : HasColimit ((D ‚ãô E) ‚ãô F) := h
  exact (colimit.Œπ_pre F (D ‚ãô E) j).symm
variable {E F}
theorem colimit.pre_eq (s : ColimitCocone (E ‚ãô F)) (t : ColimitCocone F) :
    colimit.pre F E =
      (colimit.isoColimitCocone s).hom ‚â´
        s.isColimit.desc (t.cocone.whisker E) ‚â´ (colimit.isoColimitCocone t).inv := by
  aesop_cat
end Pre
section Post
variable {D : Type u'} [Category.{v'} D]
variable (F)
variable [HasColimit F] (G : C ‚•§ D) [HasColimit (F ‚ãô G)]
def colimit.post : colimit (F ‚ãô G) ‚ü∂ G.obj (colimit F) :=
  colimit.desc (F ‚ãô G) (G.mapCocone (colimit.cocone F))
@[reassoc (attr := simp)]
theorem colimit.Œπ_post (j : J) :
    colimit.Œπ (F ‚ãô G) j ‚â´ colimit.post F G = G.map (colimit.Œπ F j) := by
  erw [IsColimit.fac]
  rfl
@[simp]
theorem colimit.post_desc (c : Cocone F) :
    colimit.post F G ‚â´ G.map (colimit.desc F c) = colimit.desc (F ‚ãô G) (G.mapCocone c) := by
  ext
  rw [‚Üê assoc, colimit.Œπ_post, ‚Üê G.map_comp, colimit.Œπ_desc, colimit.Œπ_desc]
  rfl
@[simp]
theorem colimit.post_post {E : Type u''} [Category.{v''} E] (H : D ‚•§ E)
    [h : HasColimit ((F ‚ãô G) ‚ãô H)] : haveI : HasColimit (F ‚ãô G ‚ãô H) := h
    colimit.post (F ‚ãô G) H ‚â´ H.map (colimit.post F G) = colimit.post F (G ‚ãô H) := by
  ext j
  rw [‚Üê assoc, colimit.Œπ_post, ‚Üê H.map_comp, colimit.Œπ_post]
  haveI : HasColimit (F ‚ãô G ‚ãô H) := h
  exact (colimit.Œπ_post F (G ‚ãô H) j).symm
end Post
theorem colimit.pre_post {D : Type u'} [Category.{v'} D] (E : K ‚•§ J) (F : J ‚•§ C) (G : C ‚•§ D)
    [HasColimit F] [HasColimit (E ‚ãô F)] [HasColimit (F ‚ãô G)] [h : HasColimit ((E ‚ãô F) ‚ãô G)] :
    haveI : HasColimit (E ‚ãô F ‚ãô G) := h
    colimit.post (E ‚ãô F) G ‚â´ G.map (colimit.pre F E) =
      colimit.pre (F ‚ãô G) E ‚â´ colimit.post F G := by
  ext j
  rw [‚Üê assoc, colimit.Œπ_post, ‚Üê G.map_comp, colimit.Œπ_pre, ‚Üê assoc]
  haveI : HasColimit (E ‚ãô F ‚ãô G) := h
  erw [colimit.Œπ_pre (F ‚ãô G) E j, colimit.Œπ_post]
open CategoryTheory.Equivalence
instance hasColimit_equivalence_comp (e : K ‚âå J) [HasColimit F] : HasColimit (e.functor ‚ãô F) :=
  HasColimit.mk
    { cocone := Cocone.whisker e.functor (colimit.cocone F)
      isColimit := IsColimit.whiskerEquivalence (colimit.isColimit F) e }
theorem hasColimit_of_equivalence_comp (e : K ‚âå J) [HasColimit (e.functor ‚ãô F)] : HasColimit F := by
  haveI : HasColimit (e.inverse ‚ãô e.functor ‚ãô F) := Limits.hasColimit_equivalence_comp e.symm
  apply hasColimitOfIso (e.invFunIdAssoc F).symm
section ColimFunctor
variable [HasColimitsOfShape J C]
section
@[simps] 
def colim : (J ‚•§ C) ‚•§ C where
  obj F := colimit F
  map Œ± := colimMap Œ±
end
variable {G : J ‚•§ C} (Œ± : F ‚ü∂ G)
@[reassoc]
theorem colimit.Œπ_map (j : J) : colimit.Œπ F j ‚â´ colim.map Œ± = Œ±.app j ‚â´ colimit.Œπ G j := by simp
@[simp] 
theorem colimit.map_desc (c : Cocone G) :
    colimMap Œ± ‚â´ colimit.desc G c = colimit.desc F ((Cocones.precompose Œ±).obj c) := by
  ext j
  simp [‚Üê assoc, colimit.Œπ_map, assoc, colimit.Œπ_desc, colimit.Œπ_desc]
theorem colimit.pre_map [HasColimitsOfShape K C] (E : K ‚•§ J) :
    colimit.pre F E ‚â´ colim.map Œ± = colim.map (whiskerLeft E Œ±) ‚â´ colimit.pre G E := by
  ext
  rw [‚Üê assoc, colimit.Œπ_pre, colimit.Œπ_map, ‚Üê assoc, colimit.Œπ_map, assoc, colimit.Œπ_pre]
  rfl
theorem colimit.pre_map' [HasColimitsOfShape K C] (F : J ‚•§ C) {E‚ÇÅ E‚ÇÇ : K ‚•§ J} (Œ± : E‚ÇÅ ‚ü∂ E‚ÇÇ) :
    colimit.pre F E‚ÇÅ = colim.map (whiskerRight Œ± F) ‚â´ colimit.pre F E‚ÇÇ := by
  ext1
  simp [‚Üê assoc, assoc]
theorem colimit.pre_id (F : J ‚•§ C) :
    colimit.pre F (ùü≠ _) = colim.map (Functor.leftUnitor F).hom := by aesop_cat
theorem colimit.map_post {D : Type u'} [Category.{v'} D] [HasColimitsOfShape J D]
    (H : C ‚•§ D) :
          colimit.post
          F H ‚â´
        H.map (colim.map Œ±) =
      colim.map (whiskerRight Œ± H) ‚â´ colimit.post G H := by
  ext
  rw [‚Üê assoc, colimit.Œπ_post, ‚Üê H.map_comp, colimit.Œπ_map, H.map_comp]
  rw [‚Üê assoc, colimit.Œπ_map, assoc, colimit.Œπ_post]
  rfl
def colimCoyoneda : colim.op ‚ãô coyoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{u‚ÇÅ}
    ‚âÖ CategoryTheory.cocones J C :=
  NatIso.ofComponents fun F => NatIso.ofComponents fun W => colimit.homIso (unop F) W
def colimConstAdj : (colim : (J ‚•§ C) ‚•§ C) ‚ä£ const J := Adjunction.mk' {
  homEquiv := fun f c ‚Ü¶
    { toFun := fun g =>
        { app := fun _ => colimit.Œπ _ _ ‚â´ g }
      invFun := fun g => colimit.desc _ ‚ü®_, g‚ü©
      left_inv := by aesop_cat
      right_inv := by aesop_cat }
  unit := { app := fun g => { app := colimit.Œπ _ } }
  counit := { app := fun _ => colimit.desc _ ‚ü®_, ùüô _‚ü© } }
instance : IsLeftAdjoint (colim : (J ‚•§ C) ‚•§ C) :=
  ‚ü®_, ‚ü®colimConstAdj‚ü©‚ü©
end ColimFunctor
instance colimMap_epi' {F G : J ‚•§ C} [HasColimitsOfShape J C] (Œ± : F ‚ü∂ G) [Epi Œ±] :
    Epi (colimMap Œ±) :=
  (colim : (J ‚•§ C) ‚•§ C).map_epi Œ±
instance colimMap_epi {F G : J ‚•§ C} [HasColimit F] [HasColimit G] (Œ± : F ‚ü∂ G) [‚àÄ j, Epi (Œ±.app j)] :
    Epi (colimMap Œ±) :=
  ‚ü®fun {Z} u v h =>
    colimit.hom_ext fun j => (cancel_epi (Œ±.app j)).1 <| by simpa using colimit.Œπ _ j ‚â´= h‚ü©
theorem hasColimitsOfShape_of_equivalence {J' : Type u‚ÇÇ} [Category.{v‚ÇÇ} J'] (e : J ‚âå J')
    [HasColimitsOfShape J C] : HasColimitsOfShape J' C := by
  constructor
  intro F
  apply hasColimit_of_equivalence_comp e
variable (C)
theorem hasColimitsOfSizeOfUnivLE [UnivLE.{v‚ÇÇ, v‚ÇÅ}] [UnivLE.{u‚ÇÇ, u‚ÇÅ}]
    [HasColimitsOfSize.{v‚ÇÅ, u‚ÇÅ} C] : HasColimitsOfSize.{v‚ÇÇ, u‚ÇÇ} C where
  has_colimits_of_shape J {_} := hasColimitsOfShape_of_equivalence
    ((ShrinkHoms.equivalence J).trans <| Shrink.equivalence _).symm
theorem hasColimitsOfSizeShrink [HasColimitsOfSize.{max v‚ÇÅ v‚ÇÇ, max u‚ÇÅ u‚ÇÇ} C] :
    HasColimitsOfSize.{v‚ÇÅ, u‚ÇÅ} C := hasColimitsOfSizeOfUnivLE.{max v‚ÇÅ v‚ÇÇ, max u‚ÇÅ u‚ÇÇ} C
instance (priority := 100) hasSmallestColimitsOfHasColimits [HasColimits C] :
    HasColimitsOfSize.{0, 0} C :=
  hasColimitsOfSizeShrink.{0, 0} C
end Colimit
section Opposite
def IsLimit.op {t : Cone F} (P : IsLimit t) : IsColimit t.op where
  desc s := (P.lift s.unop).op
  fac s j := congrArg Quiver.Hom.op (P.fac s.unop (unop j))
  uniq s m w := by
    dsimp
    rw [‚Üê P.uniq s.unop m.unop]
    ¬∑ rfl
    ¬∑ dsimp
      intro j
      rw [‚Üê w]
      rfl
def IsColimit.op {t : Cocone F} (P : IsColimit t) : IsLimit t.op where
  lift s := (P.desc s.unop).op
  fac s j := congrArg Quiver.Hom.op (P.fac s.unop (unop j))
  uniq s m w := by
    dsimp
    rw [‚Üê P.uniq s.unop m.unop]
    ¬∑ rfl
    ¬∑ dsimp
      intro j
      rw [‚Üê w]
      rfl
def IsLimit.unop {t : Cone F.op} (P : IsLimit t) : IsColimit t.unop where
  desc s := (P.lift s.op).unop
  fac s j := congrArg Quiver.Hom.unop (P.fac s.op (Opposite.op j))
  uniq s m w := by
    dsimp
    rw [‚Üê P.uniq s.op m.op]
    ¬∑ rfl
    ¬∑ dsimp
      intro j
      rw [‚Üê w]
      rfl
def IsColimit.unop {t : Cocone F.op} (P : IsColimit t) : IsLimit t.unop where
  lift s := (P.desc s.op).unop
  fac s j := congrArg Quiver.Hom.unop (P.fac s.op (Opposite.op j))
  uniq s m w := by
    dsimp
    rw [‚Üê P.uniq s.op m.op]
    ¬∑ rfl
    ¬∑ dsimp
      intro j
      rw [‚Üê w]
      rfl
def isLimitOfOp {t : Cone F} (P : IsColimit t.op) : IsLimit t :=
  P.unop
def isColimitOfOp {t : Cocone F} (P : IsLimit t.op) : IsColimit t :=
  P.unop
def isLimitOfUnop {t : Cone F.op} (P : IsColimit t.unop) : IsLimit t :=
  P.op
def isColimitOfUnop {t : Cocone F.op} (P : IsLimit t.unop) : IsColimit t :=
  P.op
def isLimitEquivIsColimitOp {t : Cone F} : IsLimit t ‚âÉ IsColimit t.op :=
  equivOfSubsingletonOfSubsingleton IsLimit.op isLimitOfOp
def isColimitEquivIsLimitOp {t : Cocone F} : IsColimit t ‚âÉ IsLimit t.op :=
  equivOfSubsingletonOfSubsingleton IsColimit.op isColimitOfOp
end Opposite
end Limits
end CategoryTheory