import Mathlib.RingTheory.WittVector.IsPoly
namespace WittVector
variable {p : ‚Ñï} {R : Type*} [hp : Fact p.Prime] [CommRing R]
local notation "ùïé" => WittVector p 
open MvPolynomial
noncomputable section
variable (p)
noncomputable def wittMulN : ‚Ñï ‚Üí ‚Ñï ‚Üí MvPolynomial ‚Ñï ‚Ñ§
  | 0 => 0
  | n + 1 => fun k => bind‚ÇÅ (Function.uncurry <| ![wittMulN n, X]) (wittAdd p k)
variable {p}
theorem mulN_coeff (n : ‚Ñï) (x : ùïé R) (k : ‚Ñï) :
    (x * n).coeff k = aeval x.coeff (wittMulN p n k) := by
  induction' n with n ih generalizing k
  ¬∑ simp only [Nat.cast_zero, mul_zero, zero_coeff, wittMulN, Pi.zero_apply, map_zero]
  ¬∑ rw [wittMulN, Nat.cast_add, Nat.cast_one, mul_add, mul_one, aeval_bind‚ÇÅ, add_coeff]
    apply eval‚ÇÇHom_congr (RingHom.ext_int _ _) _ rfl
    ext1 ‚ü®b, i‚ü©
    fin_cases b
    ¬∑ simp [Function.uncurry, Matrix.cons_val_zero, ih]
    ¬∑ simp [Function.uncurry, Matrix.cons_val_one, Matrix.head_cons, aeval_X]
variable (p)
@[is_poly]
theorem mulN_isPoly (n : ‚Ñï) : IsPoly p fun _ _Rcr x => x * n :=
  ‚ü®‚ü®wittMulN p n, fun R _Rcr x => by funext k; exact mulN_coeff n x k‚ü©‚ü©
@[simp]
theorem bind‚ÇÅ_wittMulN_wittPolynomial (n k : ‚Ñï) :
    bind‚ÇÅ (wittMulN p n) (wittPolynomial p ‚Ñ§ k) = n * wittPolynomial p ‚Ñ§ k := by
  induction' n with n ih
  ¬∑ simp [wittMulN, Nat.cast_zero, zero_mul, bind‚ÇÅ_zero_wittPolynomial]
  ¬∑ rw [wittMulN, ‚Üê bind‚ÇÅ_bind‚ÇÅ, wittAdd, wittStructureInt_prop]
    simp only [map_add, Nat.cast_succ, bind‚ÇÅ_X_right]
    rw [add_mul, one_mul, bind‚ÇÅ_rename, bind‚ÇÅ_rename]
    simp only [ih, Function.uncurry, Function.comp_def, bind‚ÇÅ_X_left, AlgHom.id_apply,
      Matrix.cons_val_zero, Matrix.head_cons, Matrix.cons_val_one]
end
end WittVector