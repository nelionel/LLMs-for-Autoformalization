import Mathlib.Topology.Sheaves.SheafOfFunctions
import Mathlib.Topology.Sheaves.Stalks
import Mathlib.Topology.Sheaves.SheafCondition.UniqueGluing
universe v
noncomputable section
variable {X : TopCat.{v}}
variable (T : X ‚Üí Type v)
open TopologicalSpace
open Opposite
open CategoryTheory
open CategoryTheory.Limits
open CategoryTheory.Limits.Types
namespace TopCat
structure PrelocalPredicate where
  pred : ‚àÄ {U : Opens X}, (‚àÄ x : U, T x) ‚Üí Prop
  res : ‚àÄ {U V : Opens X} (i : U ‚ü∂ V) (f : ‚àÄ x : V, T x) (_ : pred f), pred fun x : U => f (i x)
variable (X)
@[simps!]
def continuousPrelocal (T : TopCat.{v}) : PrelocalPredicate fun _ : X => T where
  pred {_} f := Continuous f
  res {_ _} i _ h := Continuous.comp h (Opens.isOpenEmbedding_of_le i.le).continuous
instance inhabitedPrelocalPredicate (T : TopCat.{v}) :
    Inhabited (PrelocalPredicate fun _ : X => T) :=
  ‚ü®continuousPrelocal X T‚ü©
variable {X}
structure LocalPredicate extends PrelocalPredicate T where
  locality :
    ‚àÄ {U : Opens X} (f : ‚àÄ x : U, T x)
      (_ : ‚àÄ x : U, ‚àÉ (V : Opens X) (_ : x.1 ‚àà V) (i : V ‚ü∂ U),
        pred fun x : V => f (i x : U)), pred f
variable (X)
def continuousLocal (T : TopCat.{v}) : LocalPredicate fun _ : X => T :=
  { continuousPrelocal X T with
    locality := fun {U} f w => by
      apply continuous_iff_continuousAt.2
      intro x
      specialize w x
      rcases w with ‚ü®V, m, i, w‚ü©
      dsimp at w
      rw [continuous_iff_continuousAt] at w
      specialize w ‚ü®x, m‚ü©
      simpa using (Opens.isOpenEmbedding_of_le i.le).continuousAt_iff.1 w }
instance inhabitedLocalPredicate (T : TopCat.{v}) : Inhabited (LocalPredicate fun _ : X => T) :=
  ‚ü®continuousLocal X T‚ü©
variable {X T}
def PrelocalPredicate.sheafify {T : X ‚Üí Type v} (P : PrelocalPredicate T) : LocalPredicate T where
  pred {U} f := ‚àÄ x : U, ‚àÉ (V : Opens X) (_ : x.1 ‚àà V) (i : V ‚ü∂ U), P.pred fun x : V => f (i x : U)
  res {V U} i f w x := by
    specialize w (i x)
    rcases w with ‚ü®V', m', i', p‚ü©
    refine ‚ü®V ‚äì V', ‚ü®x.2, m'‚ü©, Opens.infLELeft _ _, ?_‚ü©
    convert P.res (Opens.infLERight V V') _ p
  locality {U} f w x := by
    specialize w x
    rcases w with ‚ü®V, m, i, p‚ü©
    specialize p ‚ü®x.1, m‚ü©
    rcases p with ‚ü®V', m', i', p'‚ü©
    exact ‚ü®V', m', i' ‚â´ i, p'‚ü©
theorem PrelocalPredicate.sheafifyOf {T : X ‚Üí Type v} {P : PrelocalPredicate T} {U : Opens X}
    {f : ‚àÄ x : U, T x} (h : P.pred f) : P.sheafify.pred f := fun x =>
  ‚ü®U, x.2, ùüô _, by convert h‚ü©
@[simps!]
def subpresheafToTypes (P : PrelocalPredicate T) : Presheaf (Type v) X where
  obj U := { f : ‚àÄ x : U.unop , T x // P.pred f }
  map {_ _} i f := ‚ü®fun x => f.1 (i.unop x), P.res i.unop f.1 f.2‚ü©
namespace subpresheafToTypes
variable (P : PrelocalPredicate T)
def subtype : subpresheafToTypes P ‚ü∂ presheafToTypes X T where app _ f := f.1
open TopCat.Presheaf
theorem isSheaf (P : LocalPredicate T) : (subpresheafToTypes P.toPrelocalPredicate).IsSheaf :=
  Presheaf.isSheaf_of_isSheafUniqueGluing_types.{v} _ fun Œπ U sf sf_comp => by
    let sf' : ‚àÄ i : Œπ, (presheafToTypes X T).obj (op (U i)) := fun i => (sf i).val
    have sf'_comp : (presheafToTypes X T).IsCompatible U sf' := fun i j =>
      congr_arg Subtype.val (sf_comp i j)
    obtain ‚ü®gl, gl_spec, gl_uniq‚ü© := (sheafToTypes X T).existsUnique_gluing U sf' sf'_comp
    refine ‚ü®‚ü®gl, ?_‚ü©, ?_, ?_‚ü©
    ¬∑ 
      apply P.locality
      rintro ‚ü®x, mem‚ü©
      choose i hi using Opens.mem_iSup.mp mem
      use U i, hi, Opens.leSupr U i
      convert (sf i).property using 1
      exact gl_spec i
    ¬∑ exact fun i => Subtype.ext (gl_spec i)
    ¬∑ intro gl' hgl'
      refine Subtype.ext ?_
      exact gl_uniq gl'.1 fun i => congr_arg Subtype.val (hgl' i)
end subpresheafToTypes
@[simps]
def subsheafToTypes (P : LocalPredicate T) : Sheaf (Type v) X :=
  ‚ü®subpresheafToTypes P.toPrelocalPredicate, subpresheafToTypes.isSheaf P‚ü©
def stalkToFiber (P : LocalPredicate T) (x : X) : (subsheafToTypes P).presheaf.stalk x ‚ü∂ T x := by
  refine
    colimit.desc _
      { pt := T x
        Œπ :=
          { app := fun U f => ?_
            naturality := ?_ } }
  ¬∑ exact f.1 ‚ü®x, (unop U).2‚ü©
  ¬∑ aesop
theorem stalkToFiber_germ (P : LocalPredicate T) (U : Opens X) (x : X) (hx : x ‚àà U) (f) :
    stalkToFiber P x ((subsheafToTypes P).presheaf.germ U x hx f) = f.1 ‚ü®x, hx‚ü© := by
  simp [Presheaf.germ, stalkToFiber]
theorem stalkToFiber_surjective (P : LocalPredicate T) (x : X)
    (w : ‚àÄ t : T x, ‚àÉ (U : OpenNhds x) (f : ‚àÄ y : U.1, T y) (_ : P.pred f), f ‚ü®x, U.2‚ü© = t) :
    Function.Surjective (stalkToFiber P x) := fun t => by
  rcases w t with ‚ü®U, f, h, rfl‚ü©
  fconstructor
  ¬∑ exact (subsheafToTypes P).presheaf.germ _ x U.2 ‚ü®f, h‚ü©
  ¬∑ exact stalkToFiber_germ P U.1 x U.2 ‚ü®f, h‚ü©
theorem stalkToFiber_injective (P : LocalPredicate T) (x : X)
    (w :
      ‚àÄ (U V : OpenNhds x) (fU : ‚àÄ y : U.1, T y) (_ : P.pred fU) (fV : ‚àÄ y : V.1, T y)
        (_ : P.pred fV) (_ : fU ‚ü®x, U.2‚ü© = fV ‚ü®x, V.2‚ü©),
        ‚àÉ (W : OpenNhds x) (iU : W ‚ü∂ U) (iV : W ‚ü∂ V), ‚àÄ w : W.1,
          fU (iU w : U.1) = fV (iV w : V.1)) :
    Function.Injective (stalkToFiber P x) := fun tU tV h => by
  let Q :
    ‚àÉ (W : (OpenNhds x)·µí·µñ) (s : ‚àÄ w : (unop W).1, T w) (hW : P.pred s),
      tU = (subsheafToTypes P).presheaf.germ _ x (unop W).2 ‚ü®s, hW‚ü© ‚àß
        tV = (subsheafToTypes P).presheaf.germ _ x (unop W).2 ‚ü®s, hW‚ü© :=
    ?_
  ¬∑ choose W s hW e using Q
    exact e.1.trans e.2.symm
  obtain ‚ü®U, ‚ü®fU, hU‚ü©, rfl‚ü© := jointly_surjective'.{v, v} tU
  obtain ‚ü®V, ‚ü®fV, hV‚ü©, rfl‚ü© := jointly_surjective'.{v, v} tV
  dsimp
  simp only [stalkToFiber, Types.Colimit.Œπ_desc_apply'] at h
  specialize w (unop U) (unop V) fU hU fV hV h
  rcases w with ‚ü®W, iU, iV, w‚ü©
  refine ‚ü®op W, fun w => fU (iU w : (unop U).1), P.res ?_ _ hU, ?_‚ü©
  ¬∑ rcases W with ‚ü®W, m‚ü©
    exact iU
  ¬∑ exact ‚ü®colimit_sound iU.op (Subtype.eq rfl), colimit_sound iV.op (Subtype.eq (funext w).symm)‚ü©
def subpresheafContinuousPrelocalIsoPresheafToTop (T : TopCat.{v}) :
    subpresheafToTypes (continuousPrelocal X T) ‚âÖ presheafToTop X T :=
  NatIso.ofComponents fun X =>
    { hom := by rintro ‚ü®f, c‚ü©; exact ‚ü®f, c‚ü©
      inv := by rintro ‚ü®f, c‚ü©; exact ‚ü®f, c‚ü© }
def sheafToTop (T : TopCat.{v}) : Sheaf (Type v) X :=
  ‚ü®presheafToTop X T,
    Presheaf.isSheaf_of_iso (subpresheafContinuousPrelocalIsoPresheafToTop T)
      (subpresheafToTypes.isSheaf (continuousLocal X T))‚ü©
end TopCat