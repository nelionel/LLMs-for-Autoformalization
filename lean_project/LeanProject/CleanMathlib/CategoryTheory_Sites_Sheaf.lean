import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Equalizers
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Products
import Mathlib.CategoryTheory.Limits.Yoneda
import Mathlib.CategoryTheory.Preadditive.FunctorCategory
import Mathlib.CategoryTheory.Sites.SheafOfTypes
import Mathlib.CategoryTheory.Sites.EqualizerSheafCondition
import Mathlib.CategoryTheory.Limits.Constructions.EpiMono
universe w v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
noncomputable section
namespace CategoryTheory
open Opposite CategoryTheory Category Limits Sieve
namespace Presheaf
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
variable {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A]
variable (J : GrothendieckTopology C)
def IsSheaf (P : C·µí·µñ ‚•§ A) : Prop :=
  ‚àÄ E : A, Presieve.IsSheaf J (P ‚ãô coyoneda.obj (op E))
attribute [local instance] ConcreteCategory.hasCoeToSort ConcreteCategory.instFunLike in
def IsSeparated (P : C·µí·µñ ‚•§ A) [ConcreteCategory A] : Prop :=
  ‚àÄ (X : C) (S : Sieve X) (_ : S ‚àà J X) (x y : P.obj (op X)),
    (‚àÄ (Y : C) (f : Y ‚ü∂ X) (_ : S f), P.map f.op x = P.map f.op y) ‚Üí x = y
section LimitSheafCondition
open Presieve Presieve.FamilyOfElements Limits
variable (P : C·µí·µñ ‚•§ A) {X : C} (S : Sieve X) (R : Presieve X) (E : A·µí·µñ)
@[simps]
def conesEquivSieveCompatibleFamily :
    (S.arrows.diagram.op ‚ãô P).cones.obj E ‚âÉ
      { x : FamilyOfElements (P ‚ãô coyoneda.obj E) (S : Presieve X) // x.SieveCompatible } where
  toFun œÄ :=
    ‚ü®fun _ f h => œÄ.app (op ‚ü®Over.mk f, h‚ü©), fun X Y f g hf => by
      apply (id_comp _).symm.trans
      dsimp
      exact œÄ.naturality (Quiver.Hom.op (Over.homMk _ (by rfl)))‚ü©
  invFun x :=
    { app := fun f => x.1 f.unop.1.hom f.unop.2
      naturality := fun f f' g => by
        refine Eq.trans ?_ (x.2 f.unop.1.hom g.unop.left f.unop.2)
        dsimp
        rw [id_comp]
        convert rfl
        rw [Over.w] }
  left_inv _ := rfl
  right_inv _ := rfl
attribute [nolint simpNF] CategoryTheory.Presheaf.conesEquivSieveCompatibleFamily_apply_coe
  CategoryTheory.Presheaf.conesEquivSieveCompatibleFamily_symm_apply_app
variable {P S E}
variable {x : FamilyOfElements (P ‚ãô coyoneda.obj E) S.arrows} (hx : SieveCompatible x)
@[simp]
def _root_.CategoryTheory.Presieve.FamilyOfElements.SieveCompatible.cone :
    Cone (S.arrows.diagram.op ‚ãô P) where
  pt := E.unop
  œÄ := (conesEquivSieveCompatibleFamily P S E).invFun ‚ü®x, hx‚ü©
def homEquivAmalgamation :
    (hx.cone ‚ü∂ P.mapCone S.arrows.cocone.op) ‚âÉ { t // x.IsAmalgamation t } where
  toFun l := ‚ü®l.hom, fun _ f hf => l.w (op ‚ü®Over.mk f, hf‚ü©)‚ü©
  invFun t := ‚ü®t.1, fun f => t.2 f.unop.1.hom f.unop.2‚ü©
  left_inv _ := rfl
  right_inv _ := rfl
variable (P S)
theorem isLimit_iff_isSheafFor :
    Nonempty (IsLimit (P.mapCone S.arrows.cocone.op)) ‚Üî
      ‚àÄ E : A·µí·µñ, IsSheafFor (P ‚ãô coyoneda.obj E) S.arrows := by
  dsimp [IsSheafFor]; simp_rw [compatible_iff_sieveCompatible]
  rw [((Cone.isLimitEquivIsTerminal _).trans (isTerminalEquivUnique _ _)).nonempty_congr]
  rw [Classical.nonempty_pi]; constructor
  ¬∑ intro hu E x hx
    specialize hu hx.cone
    rw [(homEquivAmalgamation hx).uniqueCongr.nonempty_congr] at hu
    exact (unique_subtype_iff_exists_unique _).1 hu
  ¬∑ rintro h ‚ü®E, œÄ‚ü©
    let eqv := conesEquivSieveCompatibleFamily P S (op E)
    rw [‚Üê eqv.left_inv œÄ]
    erw [(homEquivAmalgamation (eqv œÄ).2).uniqueCongr.nonempty_congr]
    rw [unique_subtype_iff_exists_unique]
    exact h _ _ (eqv œÄ).2
theorem subsingleton_iff_isSeparatedFor :
    (‚àÄ c, Subsingleton (c ‚ü∂ P.mapCone S.arrows.cocone.op)) ‚Üî
      ‚àÄ E : A·µí·µñ, IsSeparatedFor (P ‚ãô coyoneda.obj E) S.arrows := by
  constructor
  ¬∑ intro hs E x t‚ÇÅ t‚ÇÇ h‚ÇÅ h‚ÇÇ
    have hx := is_compatible_of_exists_amalgamation x ‚ü®t‚ÇÅ, h‚ÇÅ‚ü©
    rw [compatible_iff_sieveCompatible] at hx
    specialize hs hx.cone
    rcases hs with ‚ü®hs‚ü©
    simpa only [Subtype.mk.injEq] using (show Subtype.mk t‚ÇÅ h‚ÇÅ = ‚ü®t‚ÇÇ, h‚ÇÇ‚ü© from
      (homEquivAmalgamation hx).symm.injective (hs _ _))
  ¬∑ rintro h ‚ü®E, œÄ‚ü©
    let eqv := conesEquivSieveCompatibleFamily P S (op E)
    constructor
    rw [‚Üê eqv.left_inv œÄ]
    intro f‚ÇÅ f‚ÇÇ
    let eqv' := homEquivAmalgamation (eqv œÄ).2
    apply eqv'.injective
    ext
    apply h _ (eqv œÄ).1 <;> exact (eqv' _).2
theorem isSheaf_iff_isLimit :
    IsSheaf J P ‚Üî
      ‚àÄ ‚¶ÉX : C‚¶Ñ (S : Sieve X), S ‚àà J X ‚Üí Nonempty (IsLimit (P.mapCone S.arrows.cocone.op)) :=
  ‚ü®fun h _ S hS => (isLimit_iff_isSheafFor P S).2 fun E => h E.unop S hS, fun h E _ S hS =>
    (isLimit_iff_isSheafFor P S).1 (h S hS) (op E)‚ü©
theorem isSeparated_iff_subsingleton :
    (‚àÄ E : A, Presieve.IsSeparated J (P ‚ãô coyoneda.obj (op E))) ‚Üî
      ‚àÄ ‚¶ÉX : C‚¶Ñ (S : Sieve X), S ‚àà J X ‚Üí ‚àÄ c, Subsingleton (c ‚ü∂ P.mapCone S.arrows.cocone.op) :=
  ‚ü®fun h _ S hS => (subsingleton_iff_isSeparatedFor P S).2 fun E => h E.unop S hS, fun h E _ S hS =>
    (subsingleton_iff_isSeparatedFor P S).1 (h S hS) (op E)‚ü©
theorem isLimit_iff_isSheafFor_presieve :
    Nonempty (IsLimit (P.mapCone (generate R).arrows.cocone.op)) ‚Üî
      ‚àÄ E : A·µí·µñ, IsSheafFor (P ‚ãô coyoneda.obj E) R :=
  (isLimit_iff_isSheafFor P _).trans (forall_congr' fun _ => (isSheafFor_iff_generate _).symm)
theorem isSheaf_iff_isLimit_pretopology [HasPullbacks C] (K : Pretopology C) :
    IsSheaf (K.toGrothendieck C) P ‚Üî
      ‚àÄ ‚¶ÉX : C‚¶Ñ (R : Presieve X),
        R ‚àà K X ‚Üí Nonempty (IsLimit (P.mapCone (generate R).arrows.cocone.op)) := by
  dsimp [IsSheaf]
  simp_rw [isSheaf_pretopology]
  exact
    ‚ü®fun h X R hR => (isLimit_iff_isSheafFor_presieve P R).2 fun E => h E.unop R hR,
      fun h E X R hR => (isLimit_iff_isSheafFor_presieve P R).1 (h R hR) (op E)‚ü©
end LimitSheafCondition
variable {J}
def IsSheaf.amalgamate {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A] {E : A} {X : C} {P : C·µí·µñ ‚•§ A}
    (hP : Presheaf.IsSheaf J P) (S : J.Cover X) (x : ‚àÄ I : S.Arrow, E ‚ü∂ P.obj (op I.Y))
    (hx : ‚àÄ ‚¶ÉI‚ÇÅ I‚ÇÇ : S.Arrow‚¶Ñ (r : I‚ÇÅ.Relation I‚ÇÇ),
       x I‚ÇÅ ‚â´ P.map r.g‚ÇÅ.op = x I‚ÇÇ ‚â´ P.map r.g‚ÇÇ.op) : E ‚ü∂ P.obj (op X) :=
  (hP _ _ S.condition).amalgamate (fun Y f hf => x ‚ü®Y, f, hf‚ü©) fun _ _ _ _ _ _ _ h‚ÇÅ h‚ÇÇ w =>
    @hx { hf := h‚ÇÅ } { hf := h‚ÇÇ } { w := w }
@[reassoc (attr := simp)]
theorem IsSheaf.amalgamate_map {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A] {E : A} {X : C} {P : C·µí·µñ ‚•§ A}
    (hP : Presheaf.IsSheaf J P) (S : J.Cover X) (x : ‚àÄ I : S.Arrow, E ‚ü∂ P.obj (op I.Y))
    (hx : ‚àÄ ‚¶ÉI‚ÇÅ I‚ÇÇ : S.Arrow‚¶Ñ (r : I‚ÇÅ.Relation I‚ÇÇ),
       x I‚ÇÅ ‚â´ P.map r.g‚ÇÅ.op = x I‚ÇÇ ‚â´ P.map r.g‚ÇÇ.op)
    (I : S.Arrow) :
    hP.amalgamate S x hx ‚â´ P.map I.f.op = x _ := by
  apply (hP _ _ S.condition).valid_glue
theorem IsSheaf.hom_ext {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A] {E : A} {X : C} {P : C·µí·µñ ‚•§ A}
    (hP : Presheaf.IsSheaf J P) (S : J.Cover X) (e‚ÇÅ e‚ÇÇ : E ‚ü∂ P.obj (op X))
    (h : ‚àÄ I : S.Arrow, e‚ÇÅ ‚â´ P.map I.f.op = e‚ÇÇ ‚â´ P.map I.f.op) : e‚ÇÅ = e‚ÇÇ :=
  (hP _ _ S.condition).isSeparatedFor.ext fun Y f hf => h ‚ü®Y, f, hf‚ü©
lemma IsSheaf.hom_ext_ofArrows
    {P : C·µí·µñ ‚•§ A} (hP : Presheaf.IsSheaf J P) {I : Type*} {S : C} {X : I ‚Üí C}
    (f : ‚àÄ i, X i ‚ü∂ S) (hf : Sieve.ofArrows _ f ‚àà J S) {E : A}
    {x y : E ‚ü∂ P.obj (op S)} (h : ‚àÄ i, x ‚â´ P.map (f i).op = y ‚â´ P.map (f i).op) :
    x = y := by
  apply hP.hom_ext ‚ü®_, hf‚ü©
  rintro ‚ü®Z, _, _, g, _, ‚ü®i‚ü©, rfl‚ü©
  dsimp
  rw [P.map_comp, reassoc_of% (h i)]
section
variable {P : C·µí·µñ ‚•§ A} (hP : Presheaf.IsSheaf J P) {I : Type*} {S : C} {X : I ‚Üí C}
  (f : ‚àÄ i, X i ‚ü∂ S) (hf : Sieve.ofArrows _ f ‚àà J S) {E : A}
  (x : ‚àÄ i, E ‚ü∂ P.obj (op (X i)))
  (hx : ‚àÄ ‚¶ÉW : C‚¶Ñ ‚¶Éi j : I‚¶Ñ (a : W ‚ü∂ X i) (b : W ‚ü∂ X j),
    a ‚â´ f i = b ‚â´ f j ‚Üí x i ‚â´ P.map a.op = x j ‚â´ P.map b.op)
include hP hf hx
lemma IsSheaf.exists_unique_amalgamation_ofArrows :
    ‚àÉ! (g : E ‚ü∂ P.obj (op S)), ‚àÄ (i : I), g ‚â´ P.map (f i).op = x i :=
  (Presieve.isSheafFor_arrows_iff _ _).1
    ((Presieve.isSheafFor_iff_generate _).2 (hP E _ hf)) x (fun _ _ _ _ _ w => hx _ _ w)
def IsSheaf.amalgamateOfArrows : E ‚ü∂ P.obj (op S) :=
  (hP.exists_unique_amalgamation_ofArrows f hf x hx).choose
@[reassoc (attr := simp)]
lemma IsSheaf.amalgamateOfArrows_map (i : I) :
    hP.amalgamateOfArrows f hf x hx ‚â´ P.map (f i).op = x i :=
  (hP.exists_unique_amalgamation_ofArrows f hf x hx).choose_spec.1 i
end
theorem isSheaf_of_iso_iff {P P' : C·µí·µñ ‚•§ A} (e : P ‚âÖ P') : IsSheaf J P ‚Üî IsSheaf J P' :=
  forall_congr' fun _ =>
    ‚ü®Presieve.isSheaf_iso J (isoWhiskerRight e _),
      Presieve.isSheaf_iso J (isoWhiskerRight e.symm _)‚ü©
variable (J)
theorem isSheaf_of_isTerminal {X : A} (hX : IsTerminal X) :
    Presheaf.IsSheaf J ((CategoryTheory.Functor.const _).obj X) := fun _ _ _ _ _ _ =>
  ‚ü®hX.from _, fun _ _ _ => hX.hom_ext _ _, fun _ _ => hX.hom_ext _ _‚ü©
end Presheaf
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
variable (J : GrothendieckTopology C)
variable (A : Type u‚ÇÇ) [Category.{v‚ÇÇ} A]
structure Sheaf where
  val : C·µí·µñ ‚•§ A
  cond : Presheaf.IsSheaf J val
namespace Sheaf
variable {J A}
@[ext]
structure Hom (X Y : Sheaf J A) where
  val : X.val ‚ü∂ Y.val
@[simps id_val comp_val]
instance instCategorySheaf : Category (Sheaf J A) where
  Hom := Hom
  id _ := ‚ü®ùüô _‚ü©
  comp f g := ‚ü®f.val ‚â´ g.val‚ü©
  id_comp _ := Hom.ext <| id_comp _
  comp_id _ := Hom.ext <| comp_id _
  assoc _ _ _ := Hom.ext <| assoc _ _ _
instance (X : Sheaf J A) : Inhabited (Hom X X) :=
  ‚ü®ùüô X‚ü©
@[ext]
lemma hom_ext {X Y : Sheaf J A} (x y : X ‚ü∂ Y) (h : x.val = y.val) : x = y :=
  Sheaf.Hom.ext h
end Sheaf
@[simps]
def sheafToPresheaf : Sheaf J A ‚•§ C·µí·µñ ‚•§ A where
  obj := Sheaf.val
  map f := f.val
  map_id _ := rfl
  map_comp _ _ := rfl
abbrev sheafSections : C·µí·µñ ‚•§ Sheaf J A ‚•§ A := (sheafToPresheaf J A).flip
@[simps]
def fullyFaithfulSheafToPresheaf : (sheafToPresheaf J A).FullyFaithful where
  preimage f := ‚ü®f‚ü©
variable {J A} in
abbrev Sheaf.homEquiv {X Y : Sheaf J A} : (X ‚ü∂ Y) ‚âÉ (X.val ‚ü∂ Y.val) :=
  (fullyFaithfulSheafToPresheaf J A).homEquiv
instance : (sheafToPresheaf J A).Full :=
  (fullyFaithfulSheafToPresheaf J A).full
instance : (sheafToPresheaf J A).Faithful :=
  (fullyFaithfulSheafToPresheaf J A).faithful
instance : (sheafToPresheaf J A).ReflectsIsomorphisms :=
  (fullyFaithfulSheafToPresheaf J A).reflectsIsomorphisms
theorem Sheaf.Hom.mono_of_presheaf_mono {F G : Sheaf J A} (f : F ‚ü∂ G) [h : Mono f.1] : Mono f :=
  (sheafToPresheaf J A).mono_of_mono_map h
instance Sheaf.Hom.epi_of_presheaf_epi {F G : Sheaf J A} (f : F ‚ü∂ G) [h : Epi f.1] : Epi f :=
  (sheafToPresheaf J A).epi_of_epi_map h
theorem isSheaf_iff_isSheaf_of_type (P : C·µí·µñ ‚•§ Type w) :
    Presheaf.IsSheaf J P ‚Üî Presieve.IsSheaf J P := by
  constructor
  ¬∑ intro hP
    refine Presieve.isSheaf_iso J ?_ (hP PUnit)
    exact isoWhiskerLeft _ Coyoneda.punitIso ‚â™‚â´ P.rightUnitor
  ¬∑ intro hP X Y S hS z hz
    refine ‚ü®fun x => (hP S hS).amalgamate (fun Z f hf => z f hf x) ?_, ?_, ?_‚ü©
    ¬∑ intro Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ h
      exact congr_fun (hz g‚ÇÅ g‚ÇÇ hf‚ÇÅ hf‚ÇÇ h) x
    ¬∑ intro Z f hf
      funext x
      apply Presieve.IsSheafFor.valid_glue
    ¬∑ intro y hy
      funext x
      apply (hP S hS).isSeparatedFor.ext
      intro Y' f hf
      rw [Presieve.IsSheafFor.valid_glue _ _ _ hf, ‚Üê hy _ hf]
      rfl
@[simps]
def sheafOver {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A] {J : GrothendieckTopology C} (‚Ñ± : Sheaf J A) (E : A) :
    Sheaf J (Type _) where
  val := ‚Ñ±.val ‚ãô coyoneda.obj (op E)
  cond := by
    rw [isSheaf_iff_isSheaf_of_type]
    exact ‚Ñ±.cond E
variable {J} in
lemma Presheaf.IsSheaf.isSheafFor {P : C·µí·µñ ‚•§ Type w} (hP : Presheaf.IsSheaf J P)
    {X : C} (S : Sieve X) (hS : S ‚àà J X) : Presieve.IsSheafFor P S.arrows := by
  rw [isSheaf_iff_isSheaf_of_type] at hP
  exact hP S hS
variable {A} in
lemma Presheaf.isSheaf_bot (P : C·µí·µñ ‚•§ A) : IsSheaf ‚ä• P := fun _ ‚Ü¶ Presieve.isSheaf_bot
@[simps]
def sheafBotEquivalence : Sheaf (‚ä• : GrothendieckTopology C) A ‚âå C·µí·µñ ‚•§ A where
  functor := sheafToPresheaf _ _
  inverse :=
    { obj := fun P => ‚ü®P, Presheaf.isSheaf_bot P‚ü©
      map := fun f => ‚ü®f‚ü© }
  unitIso := Iso.refl _
  counitIso := Iso.refl _
instance : Inhabited (Sheaf (‚ä• : GrothendieckTopology C) (Type w)) :=
  ‚ü®(sheafBotEquivalence _).inverse.obj ((Functor.const _).obj default)‚ü©
variable {J} {A}
def Sheaf.isTerminalOfBotCover (F : Sheaf J A) (X : C) (H : ‚ä• ‚àà J X) :
    IsTerminal (F.1.obj (op X)) := by
  refine @IsTerminal.ofUnique _ _ _ ?_
  intro Y
  choose t h using F.2 Y _ H (by tauto) (by tauto)
  exact ‚ü®‚ü®t‚ü©, fun a => h.2 a (by tauto)‚ü©
section Preadditive
open Preadditive
variable [Preadditive A] {P Q : Sheaf J A}
instance sheafHomHasZSMul : SMul ‚Ñ§ (P ‚ü∂ Q) where
  smul n f :=
    Sheaf.Hom.mk
      { app := fun U => n ‚Ä¢ f.1.app U
        naturality := fun U V i => by
          induction' n using Int.induction_on with n ih n ih
          ¬∑ simp only [zero_smul, comp_zero, zero_comp]
          ¬∑ simpa only [add_zsmul, one_zsmul, comp_add, NatTrans.naturality, add_comp,
              add_left_inj]
          ¬∑ simpa only [sub_smul, one_zsmul, comp_sub, NatTrans.naturality, sub_comp,
              sub_left_inj] using ih }
instance : Sub (P ‚ü∂ Q) where sub f g := Sheaf.Hom.mk <| f.1 - g.1
instance : Neg (P ‚ü∂ Q) where neg f := Sheaf.Hom.mk <| -f.1
instance sheafHomHasNSMul : SMul ‚Ñï (P ‚ü∂ Q) where
  smul n f :=
    Sheaf.Hom.mk
      { app := fun U => n ‚Ä¢ f.1.app U
        naturality := fun U V i => by
          induction n with
          | zero => simp only [zero_smul, comp_zero, zero_comp]
          | succ n ih => simp only [Nat.succ_eq_add_one, add_smul, ih, one_nsmul, comp_add,
              NatTrans.naturality, add_comp] }
instance : Zero (P ‚ü∂ Q) where zero := Sheaf.Hom.mk 0
instance : Add (P ‚ü∂ Q) where add f g := Sheaf.Hom.mk <| f.1 + g.1
@[simp]
theorem Sheaf.Hom.add_app (f g : P ‚ü∂ Q) (U) : (f + g).1.app U = f.1.app U + g.1.app U :=
  rfl
instance Sheaf.Hom.addCommGroup : AddCommGroup (P ‚ü∂ Q) :=
  Function.Injective.addCommGroup (fun f : Sheaf.Hom P Q => f.1)
    (fun _ _ h => Sheaf.Hom.ext h) rfl (fun _ _ => rfl) (fun _ => rfl) (fun _ _ => rfl)
    (fun _ _ => by aesop_cat) (fun _ _ => by aesop_cat)
instance : Preadditive (Sheaf J A) where
  homGroup _ _ := Sheaf.Hom.addCommGroup
end Preadditive
end CategoryTheory
namespace CategoryTheory
open Opposite CategoryTheory Category Limits Sieve
namespace Presheaf
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
variable {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A]
variable {A' : Type u‚ÇÇ} [Category.{max v‚ÇÅ u‚ÇÅ} A']
variable {B : Type u‚ÇÉ} [Category.{v‚ÇÉ} B]
variable (J : GrothendieckTopology C)
variable {U : C} (R : Presieve U)
variable (P : C·µí·µñ ‚•§ A) (P' : C·µí·µñ ‚•§ A')
section MultiequalizerConditions
def isLimitOfIsSheaf {X : C} (S : J.Cover X) (hP : IsSheaf J P) : IsLimit (S.multifork P) where
  lift := fun E : Multifork _ => hP.amalgamate S (fun _ => E.Œπ _)
    (fun _ _ r => E.condition ‚ü®_, _, r‚ü©)
  fac := by
    rintro (E : Multifork _) (a | b)
    ¬∑ apply hP.amalgamate_map
    ¬∑ rw [‚Üê E.w (WalkingMulticospan.Hom.fst b),
        ‚Üê (S.multifork P).w (WalkingMulticospan.Hom.fst b), ‚Üê assoc]
      congr 1
      apply hP.amalgamate_map
  uniq := by
    rintro (E : Multifork _) m hm
    apply hP.hom_ext S
    intro I
    erw [hm (WalkingMulticospan.left I)]
    symm
    apply hP.amalgamate_map
theorem isSheaf_iff_multifork :
    IsSheaf J P ‚Üî ‚àÄ (X : C) (S : J.Cover X), Nonempty (IsLimit (S.multifork P)) := by
  refine ‚ü®fun hP X S => ‚ü®isLimitOfIsSheaf _ _ _ hP‚ü©, ?_‚ü©
  intro h E X S hS x hx
  let T : J.Cover X := ‚ü®S, hS‚ü©
  obtain ‚ü®hh‚ü© := h _ T
  let K : Multifork (T.index P) := Multifork.ofŒπ _ E (fun I => x I.f I.hf)
    (fun I => hx _ _ _ _ I.r.w)
  use hh.lift K
  dsimp; constructor
  ¬∑ intro Y f hf
    apply hh.fac K (WalkingMulticospan.left ‚ü®Y, f, hf‚ü©)
  ¬∑ intro e he
    apply hh.uniq K
    rintro (a | b)
    ¬∑ apply he
    ¬∑ rw [‚Üê K.w (WalkingMulticospan.Hom.fst b), ‚Üê
        (T.multifork P).w (WalkingMulticospan.Hom.fst b), ‚Üê assoc]
      congr 1
      apply he
variable {J P} in
def IsSheaf.isLimitMultifork
    (hP : Presheaf.IsSheaf J P) {X : C} (S : J.Cover X) : IsLimit (S.multifork P) := by
  rw [Presheaf.isSheaf_iff_multifork] at hP
  exact (hP X S).some
theorem isSheaf_iff_multiequalizer [‚àÄ (X : C) (S : J.Cover X), HasMultiequalizer (S.index P)] :
    IsSheaf J P ‚Üî ‚àÄ (X : C) (S : J.Cover X), IsIso (S.toMultiequalizer P) := by
  rw [isSheaf_iff_multifork]
  refine forall‚ÇÇ_congr fun X S => ‚ü®?_, ?_‚ü©
  ¬∑ rintro ‚ü®h‚ü©
    let e : P.obj (op X) ‚âÖ multiequalizer (S.index P) :=
      h.conePointUniqueUpToIso (limit.isLimit _)
    exact (inferInstance : IsIso e.hom)
  ¬∑ intro h
    refine ‚ü®IsLimit.ofIsoLimit (limit.isLimit _) (Cones.ext ?_ ?_)‚ü©
    ¬∑ apply (@asIso _ _ _ _ _ h).symm
    ¬∑ intro a
      symm
      erw [IsIso.inv_comp_eq]
      simp
end MultiequalizerConditions
section
variable [HasProducts.{max u‚ÇÅ v‚ÇÅ} A]
variable [HasProducts.{max u‚ÇÅ v‚ÇÅ} A']
def firstObj : A :=
  ‚àè·∂ú fun f : Œ£V, { f : V ‚ü∂ U // R f } => P.obj (op f.1)
def forkMap : P.obj (op U) ‚ü∂ firstObj R P :=
  Pi.lift fun f => P.map f.2.1.op
variable [HasPullbacks C]
def secondObj : A :=
  ‚àè·∂ú fun fg : (Œ£V, { f : V ‚ü∂ U // R f }) √ó Œ£W, { g : W ‚ü∂ U // R g } =>
    P.obj (op (pullback fg.1.2.1 fg.2.2.1))
def firstMap : firstObj R P ‚ü∂ secondObj R P :=
  Pi.lift fun _ => Pi.œÄ _ _ ‚â´ P.map (pullback.fst _ _).op
def secondMap : firstObj R P ‚ü∂ secondObj R P :=
  Pi.lift fun _ => Pi.œÄ _ _ ‚â´ P.map (pullback.snd _ _).op
theorem w : forkMap R P ‚â´ firstMap R P = forkMap R P ‚â´ secondMap R P := by
  apply limit.hom_ext
  rintro ‚ü®‚ü®Y, f, hf‚ü©, ‚ü®Z, g, hg‚ü©‚ü©
  simp only [firstMap, secondMap, forkMap, limit.lift_œÄ, limit.lift_œÄ_assoc, assoc, Fan.mk_œÄ_app,
    Subtype.coe_mk]
  rw [‚Üê P.map_comp, ‚Üê op_comp, pullback.condition]
  simp
def IsSheaf' (P : C·µí·µñ ‚•§ A) : Prop :=
  ‚àÄ (U : C) (R : Presieve U) (_ : generate R ‚àà J U), Nonempty (IsLimit (Fork.ofŒπ _ (w R P)))
def isSheafForIsSheafFor' (P : C·µí·µñ ‚•§ A) (s : A ‚•§ Type max v‚ÇÅ u‚ÇÅ)
    [‚àÄ J, PreservesLimitsOfShape (Discrete.{max v‚ÇÅ u‚ÇÅ} J) s] (U : C) (R : Presieve U) :
    IsLimit (s.mapCone (Fork.ofŒπ _ (w R P))) ‚âÉ
      IsLimit (Fork.ofŒπ _ (Equalizer.Presieve.w (P ‚ãô s) R)) := by
  let e : parallelPair (s.map (firstMap R P)) (s.map (secondMap R P)) ‚âÖ
    parallelPair (Equalizer.Presieve.firstMap (P ‚ãô s) R)
      (Equalizer.Presieve.secondMap (P ‚ãô s) R) := by
    refine parallelPair.ext (PreservesProduct.iso s _) ((PreservesProduct.iso s _))
      (limit.hom_ext (fun j => ?_)) (limit.hom_ext (fun j => ?_))
    ¬∑ dsimp [Equalizer.Presieve.firstMap, firstMap]
      simp only [map_lift_piComparison, Functor.map_comp, limit.lift_œÄ, Fan.mk_pt,
        Fan.mk_œÄ_app, assoc, piComparison_comp_œÄ_assoc]
    ¬∑ dsimp [Equalizer.Presieve.secondMap, secondMap]
      simp only [map_lift_piComparison, Functor.map_comp, limit.lift_œÄ, Fan.mk_pt,
        Fan.mk_œÄ_app, assoc, piComparison_comp_œÄ_assoc]
  refine Equiv.trans (isLimitMapConeForkEquiv _ _) ?_
  refine (IsLimit.postcomposeHomEquiv e _).symm.trans
    (IsLimit.equivIsoLimit (Fork.ext (Iso.refl _) ?_))
  dsimp [Equalizer.forkMap, forkMap, e, Fork.Œπ]
  simp only [id_comp, map_lift_piComparison]
theorem isSheaf_iff_isSheaf' : IsSheaf J P' ‚Üî IsSheaf' J P' := by
  constructor
  ¬∑ intro h U R hR
    refine ‚ü®?_‚ü©
    apply coyonedaJointlyReflectsLimits
    intro X
    have q : Presieve.IsSheafFor (P' ‚ãô coyoneda.obj X) _ := h X.unop _ hR
    rw [‚Üê Presieve.isSheafFor_iff_generate] at q
    rw [Equalizer.Presieve.sheaf_condition] at q
    replace q := Classical.choice q
    apply (isSheafForIsSheafFor' _ _ _ _).symm q
  ¬∑ intro h U X S hS
    rw [Equalizer.Presieve.sheaf_condition]
    refine ‚ü®?_‚ü©
    refine isSheafForIsSheafFor' _ _ _ _ ?_
    letI := preservesSmallestLimits_of_preservesLimits (coyoneda.obj (op U))
    apply isLimitOfPreserves
    apply Classical.choice (h _ S.arrows _)
    simpa
end
section Concrete
theorem isSheaf_of_isSheaf_comp (s : A ‚•§ B) [ReflectsLimitsOfSize.{v‚ÇÅ, max v‚ÇÅ u‚ÇÅ} s]
    (h : IsSheaf J (P ‚ãô s)) : IsSheaf J P := by
  rw [isSheaf_iff_isLimit] at h ‚ä¢
  exact fun X S hS ‚Ü¶ (h S hS).map fun t ‚Ü¶ isLimitOfReflects s t
theorem isSheaf_comp_of_isSheaf (s : A ‚•§ B) [PreservesLimitsOfSize.{v‚ÇÅ, max v‚ÇÅ u‚ÇÅ} s]
    (h : IsSheaf J P) : IsSheaf J (P ‚ãô s) := by
  rw [isSheaf_iff_isLimit] at h ‚ä¢
  apply fun X S hS ‚Ü¶ (h S hS).map fun t ‚Ü¶ isLimitOfPreserves s t
theorem isSheaf_iff_isSheaf_comp (s : A ‚•§ B) [HasLimitsOfSize.{v‚ÇÅ, max v‚ÇÅ u‚ÇÅ} A]
    [PreservesLimitsOfSize.{v‚ÇÅ, max v‚ÇÅ u‚ÇÅ} s] [s.ReflectsIsomorphisms] :
    IsSheaf J P ‚Üî IsSheaf J (P ‚ãô s) := by
  letI : ReflectsLimitsOfSize s := reflectsLimits_of_reflectsIsomorphisms
  exact ‚ü®isSheaf_comp_of_isSheaf J P s, isSheaf_of_isSheaf_comp J P s‚ü©
theorem isSheaf_iff_isSheaf_forget (s : A' ‚•§ Type max v‚ÇÅ u‚ÇÅ) [HasLimits A'] [PreservesLimits s]
    [s.ReflectsIsomorphisms] : IsSheaf J P' ‚Üî IsSheaf J (P' ‚ãô s) := by
  have : HasLimitsOfSize.{v‚ÇÅ, max v‚ÇÅ u‚ÇÅ} A' := hasLimitsOfSizeShrink.{_, _, u‚ÇÅ, 0} A'
  have : PreservesLimitsOfSize.{v‚ÇÅ, max v‚ÇÅ u‚ÇÅ} s := preservesLimitsOfSize_shrink.{_, 0, _, u‚ÇÅ} s
  apply isSheaf_iff_isSheaf_comp
end Concrete
end Presheaf
end CategoryTheory