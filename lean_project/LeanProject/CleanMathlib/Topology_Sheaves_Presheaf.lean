import Mathlib.Topology.Category.TopCat.Opens
import Mathlib.CategoryTheory.Adjunction.Unique
import Mathlib.CategoryTheory.Functor.KanExtension.Adjunction
import Mathlib.Topology.Sheaves.Init
import Mathlib.Data.Set.Subsingleton
universe w v u
open CategoryTheory TopologicalSpace Opposite
variable (C : Type u) [Category.{v} C]
namespace TopCat
def Presheaf (X : TopCat.{w}) : Type max u v w :=
  (Opens X)แตแต โฅค C
instance (X : TopCat.{w}) : Category (Presheaf.{w, v, u} C X) :=
  inferInstanceAs (Category ((Opens X)แตแต โฅค C : Type max u v w))
variable {C}
namespace Presheaf
@[simp] theorem comp_app {X : TopCat} {U : (Opens X)แตแต} {P Q R : Presheaf C X}
    (f : P โถ Q) (g : Q โถ R) :
    (f โซ g).app U = f.app U โซ g.app U := rfl
@[ext]
lemma ext {X : TopCat} {P Q : Presheaf C X} {f g : P โถ Q}
    (w : โ U : Opens X, f.app (op U) = g.app (op U)) :
    f = g := by
  apply NatTrans.ext
  ext U
  induction U with | _ U => ?_
  apply w
attribute [local instance] CategoryTheory.ConcreteCategory.hasCoeToSort
  CategoryTheory.ConcreteCategory.instFunLike
macro "sheaf_restrict" : attr =>
  `(attr|aesop safe 50 apply (rule_sets := [$(Lean.mkIdent `Restrict):ident]))
attribute [sheaf_restrict] bot_le le_top le_refl inf_le_left inf_le_right
  le_sup_left le_sup_right
macro (name := restrict_tac) "restrict_tac" c:Aesop.tactic_clause* : tactic =>
`(tactic| first | assumption |
  aesop $c*
    (config := { terminal := true
                 assumptionTransparency := .reducible
                 enableSimp := false })
    (rule_sets := [-default, -builtin, $(Lean.mkIdent `Restrict):ident]))
macro (name := restrict_tac?) "restrict_tac?" c:Aesop.tactic_clause* : tactic =>
`(tactic|
  aesop? $c*
    (config := { terminal := true
                 assumptionTransparency := .reducible
                 enableSimp := false
                 maxRuleApplications := 300 })
  (rule_sets := [-default, -builtin, $(Lean.mkIdent `Restrict):ident]))
attribute[aesop 10% (rule_sets := [Restrict])] le_trans
attribute[aesop safe destruct (rule_sets := [Restrict])] Eq.trans_le
attribute[aesop safe -50 (rule_sets := [Restrict])] Aesop.BuiltinRules.assumption
example {X} [CompleteLattice X] (v : Nat โ X) (w x y z : X) (e : v 0 = v 1) (_ : v 1 = v 2)
    (hโ : v 1 โค x) (_ : x โค z โ w) (hโ : x โค y โ z) : v 0 โค y := by
  restrict_tac
def restrict {X : TopCat} {C : Type*} [Category C] [ConcreteCategory C] {F : X.Presheaf C}
    {V : Opens X} (x : F.obj (op V)) {U : Opens X} (h : U โถ V) : F.obj (op U) :=
  F.map h.op x
scoped[AlgebraicGeometry] infixl:80 " |_โ " => TopCat.Presheaf.restrict
scoped[AlgebraicGeometry] notation:80 x " |_โ " U " โช" e "โซ " =>
  @TopCat.Presheaf.restrict _ _ _ _ _ _ x U (@homOfLE (Opens _) _ U _ e)
open AlgebraicGeometry
abbrev restrictOpen {X : TopCat} {C : Type*} [Category C] [ConcreteCategory C] {F : X.Presheaf C}
    {V : Opens X} (x : F.obj (op V)) (U : Opens X)
    (e : U โค V := by restrict_tac) :
    F.obj (op U) :=
  x |_โ U โชeโซ
scoped[AlgebraicGeometry] infixl:80 " |_ " => TopCat.Presheaf.restrictOpen
theorem restrict_restrict {X : TopCat} {C : Type*} [Category C] [ConcreteCategory C]
    {F : X.Presheaf C} {U V W : Opens X} (eโ : U โค V) (eโ : V โค W) (x : F.obj (op W)) :
    x |_ V |_ U = x |_ U := by
  delta restrictOpen restrict
  rw [โ comp_apply, โ Functor.map_comp]
  rfl
theorem map_restrict {X : TopCat} {C : Type*} [Category C] [ConcreteCategory C]
    {F G : X.Presheaf C} (e : F โถ G) {U V : Opens X} (h : U โค V) (x : F.obj (op V)) :
    e.app _ (x |_ U) = e.app _ x |_ U := by
  delta restrictOpen restrict
  rw [โ comp_apply, NatTrans.naturality, comp_apply]
open CategoryTheory.Limits
variable (C)
@[simps!]
def pushforward {X Y : TopCat.{w}} (f : X โถ Y) : X.Presheaf C โฅค Y.Presheaf C :=
  (whiskeringLeft _ _ _).obj (Opens.map f).op
scoped[AlgebraicGeometry] notation f:80 " _* " P:81 =>
  Prefunctor.obj (Functor.toPrefunctor (TopCat.Presheaf.pushforward _ f)) P
@[simp]
theorem pushforward_map_app' {X Y : TopCat.{w}} (f : X โถ Y) {โฑ ๐ข : X.Presheaf C} (ฮฑ : โฑ โถ ๐ข)
    {U : (Opens Y)แตแต} : ((pushforward C f).map ฮฑ).app U = ฮฑ.app (op <| (Opens.map f).obj U.unop) :=
  rfl
lemma id_pushforward (X : TopCat.{w}) : pushforward C (๐ X) = ๐ญ (X.Presheaf C) := rfl
variable {C}
namespace Pushforward
def id {X : TopCat.{w}} (โฑ : X.Presheaf C) : ๐ X _* โฑ โ โฑ := Iso.refl _
@[simp]
theorem id_hom_app {X : TopCat.{w}} (โฑ : X.Presheaf C) (U) : (id โฑ).hom.app U = ๐ _ := rfl
@[simp]
theorem id_inv_app {X : TopCat.{w}} (โฑ : X.Presheaf C) (U) :
    (id โฑ).inv.app U = ๐ _ := rfl
theorem id_eq {X : TopCat.{w}} (โฑ : X.Presheaf C) : ๐ X _* โฑ = โฑ := rfl
def comp {X Y Z : TopCat.{w}} (f : X โถ Y) (g : Y โถ Z) (โฑ : X.Presheaf C) :
    (f โซ g) _* โฑ โ g _* (f _* โฑ) := Iso.refl _
theorem comp_eq {X Y Z : TopCat.{w}} (f : X โถ Y) (g : Y โถ Z) (โฑ : X.Presheaf C) :
    (f โซ g) _* โฑ = g _* (f _* โฑ) :=
  rfl
@[simp]
theorem comp_hom_app {X Y Z : TopCat.{w}} (f : X โถ Y) (g : Y โถ Z) (โฑ : X.Presheaf C) (U) :
    (comp f g โฑ).hom.app U = ๐ _ := rfl
@[simp]
theorem comp_inv_app {X Y Z : TopCat.{w}} (f : X โถ Y) (g : Y โถ Z) (โฑ : X.Presheaf C) (U) :
    (comp f g โฑ).inv.app U = ๐ _ := rfl
end Pushforward
def pushforwardEq {X Y : TopCat.{w}} {f g : X โถ Y} (h : f = g) (โฑ : X.Presheaf C) :
    f _* โฑ โ g _* โฑ :=
  isoWhiskerRight (NatIso.op (Opens.mapIso f g h).symm) โฑ
theorem pushforward_eq' {X Y : TopCat.{w}} {f g : X โถ Y} (h : f = g) (โฑ : X.Presheaf C) :
    f _* โฑ = g _* โฑ := by rw [h]
@[simp]
theorem pushforwardEq_hom_app {X Y : TopCat.{w}} {f g : X โถ Y}
    (h : f = g) (โฑ : X.Presheaf C) (U) :
    (pushforwardEq h โฑ).hom.app U = โฑ.map (eqToHom (by aesop_cat)) := by
  simp [pushforwardEq]
variable (C)
section Iso
@[simps!]
def presheafEquivOfIso {X Y : TopCat} (H : X โ Y) : X.Presheaf C โ Y.Presheaf C :=
  Equivalence.congrLeft (Opens.mapMapIso H).symm.op
variable {C}
def toPushforwardOfIso {X Y : TopCat} (H : X โ Y) {โฑ : X.Presheaf C} {๐ข : Y.Presheaf C}
    (ฮฑ : H.hom _* โฑ โถ ๐ข) : โฑ โถ H.inv _* ๐ข :=
  (presheafEquivOfIso _ H).toAdjunction.homEquiv โฑ ๐ข ฮฑ
@[simp]
theorem toPushforwardOfIso_app {X Y : TopCat} (Hโ : X โ Y) {โฑ : X.Presheaf C} {๐ข : Y.Presheaf C}
    (Hโ : Hโ.hom _* โฑ โถ ๐ข) (U : (Opens X)แตแต) :
    (toPushforwardOfIso Hโ Hโ).app U =
      โฑ.map (eqToHom (by simp [Opens.map, Set.preimage_preimage])) โซ
        Hโ.app (op ((Opens.map Hโ.inv).obj (unop U))) := by
  simp [toPushforwardOfIso, Adjunction.homEquiv_unit]
def pushforwardToOfIso {X Y : TopCat} (Hโ : X โ Y) {โฑ : Y.Presheaf C} {๐ข : X.Presheaf C}
    (Hโ : โฑ โถ Hโ.hom _* ๐ข) : Hโ.inv _* โฑ โถ ๐ข :=
  ((presheafEquivOfIso _ Hโ.symm).toAdjunction.homEquiv โฑ ๐ข).symm Hโ
@[simp]
theorem pushforwardToOfIso_app {X Y : TopCat} (Hโ : X โ Y) {โฑ : Y.Presheaf C} {๐ข : X.Presheaf C}
    (Hโ : โฑ โถ Hโ.hom _* ๐ข) (U : (Opens X)แตแต) :
    (pushforwardToOfIso Hโ Hโ).app U =
      Hโ.app (op ((Opens.map Hโ.inv).obj (unop U))) โซ
        ๐ข.map (eqToHom (by simp [Opens.map, Set.preimage_preimage])) := by
  simp [pushforwardToOfIso, Equivalence.toAdjunction, Adjunction.homEquiv_counit]
end Iso
variable [HasColimits C]
noncomputable section
def pullback {X Y : TopCat.{v}} (f : X โถ Y) : Y.Presheaf C โฅค X.Presheaf C :=
  (Opens.map f).op.lan
def pushforwardPullbackAdjunction {X Y : TopCat.{v}} (f : X โถ Y) :
    pullback C f โฃ pushforward C f :=
  Functor.lanAdjunction _ _
def pullbackHomIsoPushforwardInv {X Y : TopCat.{v}} (H : X โ Y) :
    pullback C H.hom โ pushforward C H.inv :=
  Adjunction.leftAdjointUniq (pushforwardPullbackAdjunction C H.hom)
    (presheafEquivOfIso C H.symm).toAdjunction
def pullbackInvIsoPushforwardHom {X Y : TopCat.{v}} (H : X โ Y) :
    pullback C H.inv โ pushforward C H.hom :=
  Adjunction.leftAdjointUniq (pushforwardPullbackAdjunction C H.inv)
    (presheafEquivOfIso C H).toAdjunction
variable {C}
def pullbackObjObjOfImageOpen {X Y : TopCat.{v}} (f : X โถ Y) (โฑ : Y.Presheaf C) (U : Opens X)
    (H : IsOpen (f '' SetLike.coe U)) : ((pullback C f).obj โฑ).obj (op U) โ โฑ.obj (op โจ_, Hโฉ) := by
  let x : CostructuredArrow (Opens.map f).op (op U) := CostructuredArrow.mk
    (@homOfLE _ _ _ ((Opens.map f).obj โจ_, Hโฉ) (Set.image_preimage.le_u_l _)).op
  have hx : IsTerminal x :=
    { lift := fun s โฆ by
        fapply CostructuredArrow.homMk
        ยท change op (unop _) โถ op (โจ_, Hโฉ : Opens _)
          refine (homOfLE ?_).op
          apply (Set.image_subset f s.pt.hom.unop.le).trans
          exact Set.image_preimage.l_u_le (SetLike.coe s.pt.left.unop)
        ยท simp [eq_iff_true_of_subsingleton] }
  exact IsColimit.coconePointUniqueUpToIso
    ((Opens.map f).op.isPointwiseLeftKanExtensionLeftKanExtensionUnit โฑ (op U))
    (colimitOfDiagramTerminal hx _)
end
end Presheaf
end TopCat