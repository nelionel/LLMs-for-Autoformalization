import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Quotient
import Mathlib.Combinatorics.Quiver.Path
universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ
namespace CategoryTheory
section
def Paths (V : Type u‚ÇÅ) : Type u‚ÇÅ := V
instance (V : Type u‚ÇÅ) [Inhabited V] : Inhabited (Paths V) := ‚ü®(default : V)‚ü©
variable (V : Type u‚ÇÅ) [Quiver.{v‚ÇÅ + 1} V]
namespace Paths
instance categoryPaths : Category.{max u‚ÇÅ v‚ÇÅ} (Paths V) where
  Hom := fun X Y : V => Quiver.Path X Y
  id _ := Quiver.Path.nil
  comp f g := Quiver.Path.comp f g
variable {V}
@[simps]
def of : V ‚•§q Paths V where
  obj X := X
  map f := f.toPath
lemma induction_fixed_source {a : Paths V} (P : ‚àÄ {b : Paths V}, (a ‚ü∂ b) ‚Üí Prop)
    (id : P (ùüô a))
    (comp : ‚àÄ {u v : V} (p : a ‚ü∂ of.obj u) (q : u ‚ü∂ v), P p ‚Üí P (p ‚â´ of.map q)) :
    ‚àÄ {b : Paths V} (f : a ‚ü∂ b), P f := by
  intro _ f
  induction f with
  | nil => exact id
  | cons _ w h => exact comp _ w h
lemma induction_fixed_target {b : Paths V} (P : ‚àÄ {a : Paths V}, (a ‚ü∂ b) ‚Üí Prop)
    (id : P (ùüô b))
    (comp : ‚àÄ {u v : V} (p : of.obj v ‚ü∂ b) (q : u ‚ü∂ v), P p ‚Üí P (of.map q ‚â´ p)) :
    ‚àÄ {a : Paths V} (f : a ‚ü∂ b), P f := by
  intro a f
  generalize h : f.length = k
  induction k generalizing f a with
  | zero => cases f with
    | nil => exact id
    | cons _ _ => simp at h
  | succ k h' =>
    obtain ‚ü®c, f, q, hq, rfl‚ü© := f.eq_toPath_comp_of_length_eq_succ h
    exact comp _ _ (h' _ hq)
lemma induction (P : ‚àÄ {a b : Paths V}, (a ‚ü∂ b) ‚Üí Prop)
    (id : ‚àÄ {v : V}, P (ùüô (of.obj v)))
    (comp : ‚àÄ {u v w : V} (p : of.obj u ‚ü∂ of.obj v) (q : v ‚ü∂ w), P p ‚Üí P (p ‚â´ of.map q)) :
    ‚àÄ {a b : Paths V} (f : a ‚ü∂ b), P f :=
  fun {_} ‚Ü¶ induction_fixed_source _ id comp
lemma induction' (P : ‚àÄ {a b : Paths V}, (a ‚ü∂ b) ‚Üí Prop)
    (id : ‚àÄ {v : V}, P (ùüô (of.obj v)))
    (comp : ‚àÄ {u v w : V} (p : u ‚ü∂ v) (q : of.obj v ‚ü∂ of.obj w), P q ‚Üí P (of.map p ‚â´ q)) :
    ‚àÄ {a b : Paths V} (f : a ‚ü∂ b), P f := by
  intro a b
  revert a
  exact induction_fixed_target (P := fun f ‚Ü¶ P f) id (fun _ _ ‚Ü¶ comp _ _)
attribute [local ext (iff := false)] Functor.ext
def lift {C} [Category C] (œÜ : V ‚•§q C) : Paths V ‚•§ C where
  obj := œÜ.obj
  map {X} {Y} f :=
    @Quiver.Path.rec V _ X (fun Y _ => œÜ.obj X ‚ü∂ œÜ.obj Y) (ùüô <| œÜ.obj X)
      (fun _ f ihp => ihp ‚â´ œÜ.map f) Y f
  map_id _ := rfl
  map_comp f g := by
    induction g with
    | nil =>
      rw [Category.comp_id]
      rfl
    | cons g' p ih =>
      have : f ‚â´ Quiver.Path.cons g' p = (f ‚â´ g').cons p := by apply Quiver.Path.comp_cons
      rw [this]
      simp only at ih ‚ä¢
      rw [ih, Category.assoc]
@[simp]
theorem lift_nil {C} [Category C] (œÜ : V ‚•§q C) (X : V) :
    (lift œÜ).map Quiver.Path.nil = ùüô (œÜ.obj X) := rfl
@[simp]
theorem lift_cons {C} [Category C] (œÜ : V ‚•§q C) {X Y Z : V} (p : Quiver.Path X Y) (f : Y ‚ü∂ Z) :
    (lift œÜ).map (p.cons f) = (lift œÜ).map p ‚â´ œÜ.map f := rfl
@[simp]
theorem lift_toPath {C} [Category C] (œÜ : V ‚•§q C) {X Y : V} (f : X ‚ü∂ Y) :
    (lift œÜ).map f.toPath = œÜ.map f := by
  dsimp [Quiver.Hom.toPath, lift]
  simp
theorem lift_spec {C} [Category C] (œÜ : V ‚•§q C) : of ‚ãôq (lift œÜ).toPrefunctor = œÜ := by
  fapply Prefunctor.ext
  ¬∑ rintro X
    rfl
  ¬∑ rintro X Y f
    rcases œÜ with ‚ü®œÜo, œÜm‚ü©
    dsimp [lift, Quiver.Hom.toPath]
    simp only [Category.id_comp]
theorem lift_unique {C} [Category C] (œÜ : V ‚•§q C) (Œ¶ : Paths V ‚•§ C)
    (hŒ¶ : of ‚ãôq Œ¶.toPrefunctor = œÜ) : Œ¶ = lift œÜ := by
  subst_vars
  fapply Functor.ext
  ¬∑ rintro X
    rfl
  ¬∑ rintro X Y f
    dsimp [lift]
    induction f with
    | nil =>
      simp only [Category.comp_id]
      apply Functor.map_id
    | cons p f' ih =>
      simp only [Category.comp_id, Category.id_comp] at ih ‚ä¢
      have : Œ¶.map (Quiver.Path.cons p f') = Œ¶.map p ‚â´ Œ¶.map (Quiver.Hom.toPath f') := by
        convert Functor.map_comp Œ¶ p (Quiver.Hom.toPath f')
      rw [this, ih]
@[ext (iff := false)]
theorem ext_functor {C} [Category C] {F G : Paths V ‚•§ C} (h_obj : F.obj = G.obj)
    (h : ‚àÄ (a b : V) (e : a ‚ü∂ b), F.map e.toPath =
        eqToHom (congr_fun h_obj a) ‚â´ G.map e.toPath ‚â´ eqToHom (congr_fun h_obj.symm b)) :
    F = G := by
  fapply Functor.ext
  ¬∑ intro X
    rw [h_obj]
  ¬∑ intro X Y f
    induction' f with Y' Z' g e ih
    ¬∑ erw [F.map_id, G.map_id, Category.id_comp, eqToHom_trans, eqToHom_refl]
    ¬∑ erw [F.map_comp g (Quiver.Hom.toPath e), G.map_comp g (Quiver.Hom.toPath e), ih, h]
      simp only [Category.id_comp, eqToHom_refl, eqToHom_trans_assoc, Category.assoc]
end Paths
variable (W : Type u‚ÇÇ) [Quiver.{v‚ÇÇ + 1} W]
@[simp]
theorem Prefunctor.mapPath_comp' (F : V ‚•§q W) {X Y Z : Paths V} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    F.mapPath (f ‚â´ g) = (F.mapPath f).comp (F.mapPath g) :=
  Prefunctor.mapPath_comp _ _ _
end
section
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
open Quiver
def composePath {X : C} : ‚àÄ {Y : C} (_ : Path X Y), X ‚ü∂ Y
  | _, .nil => ùüô X
  | _, .cons p e => composePath p ‚â´ e
@[simp] lemma composePath_nil {X : C} : composePath (Path.nil : Path X X) = ùüô X := rfl
@[simp] lemma composePath_cons {X Y Z : C} (p : Path X Y) (e : Y ‚ü∂ Z) :
  composePath (p.cons e) = composePath p ‚â´ e := rfl
@[simp]
theorem composePath_toPath {X Y : C} (f : X ‚ü∂ Y) : composePath f.toPath = f := Category.id_comp _
@[simp]
theorem composePath_comp {X Y Z : C} (f : Path X Y) (g : Path Y Z) :
    composePath (f.comp g) = composePath f ‚â´ composePath g := by
  induction' g with Y' Z' g e ih
  ¬∑ simp
  ¬∑ simp [ih]
@[simp]
theorem composePath_id {X : Paths C} : composePath (ùüô X) = ùüô (id X : C) := rfl
@[simp]
theorem composePath_comp' {X Y Z : Paths C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    composePath (f ‚â´ g) = composePath f ‚â´ composePath g :=
  composePath_comp f g
variable (C)
@[simps]
def pathComposition : Paths C ‚•§ C where
  obj X := X
  map f := composePath f
@[simp]
def pathsHomRel : HomRel (Paths C) := fun _ _ p q =>
  (pathComposition C).map p = (pathComposition C).map q
@[simps]
def toQuotientPaths : C ‚•§ Quotient (pathsHomRel C) where
  obj X := Quotient.mk X
  map f := Quot.mk _ f.toPath
  map_id X := Quot.sound (Quotient.CompClosure.of _ _ _ (by simp))
  map_comp f g := Quot.sound (Quotient.CompClosure.of _ _ _ (by simp))
@[simps!]
def quotientPathsTo : Quotient (pathsHomRel C) ‚•§ C :=
  Quotient.lift _ (pathComposition C) fun _ _ _ _ w => w
def quotientPathsEquiv : Quotient (pathsHomRel C) ‚âå C where
  functor := quotientPathsTo C
  inverse := toQuotientPaths C
  unitIso :=
    NatIso.ofComponents
      (fun X => by cases X; rfl)
      (Quot.ind fun f => by
        apply Quot.sound
        apply Quotient.CompClosure.of
        simp [Category.comp_id, Category.id_comp, pathsHomRel])
  counitIso := NatIso.ofComponents (fun _ => Iso.refl _) (fun f => by simp [Quot.liftOn_mk])
  functor_unitIso_comp X := by
    cases X
    simp only [pathsHomRel, pathComposition_obj, pathComposition_map, Functor.id_obj,
               quotientPathsTo_obj, Functor.comp_obj, toQuotientPaths_obj_as,
               NatIso.ofComponents_hom_app, Iso.refl_hom, quotientPathsTo_map, Category.comp_id]
    rfl
end
end CategoryTheory