import Mathlib.CategoryTheory.Functor.KanExtension.Basic
import Mathlib.CategoryTheory.Localization.Predicate
namespace CategoryTheory
namespace Functor
variable {C C' D D' H H' : Type _} [Category C] [Category C']
  [Category D] [Category D'] [Category H] [Category H']
  (RF RF' RF'' : D ‚•§ H) {F F' F'' : C ‚•§ H} (e : F ‚âÖ F') {L : C ‚•§ D}
  (Œ± : F ‚ü∂ L ‚ãô RF) (Œ±' : F' ‚ü∂ L ‚ãô RF') (Œ±'' : F'' ‚ü∂ L ‚ãô RF'') (Œ±'‚ÇÇ : F ‚ü∂ L ‚ãô RF')
  (W : MorphismProperty C)
class IsRightDerivedFunctor [L.IsLocalization W] : Prop where
  isLeftKanExtension' : RF.IsLeftKanExtension Œ±
lemma IsRightDerivedFunctor.isLeftKanExtension
    [L.IsLocalization W] [RF.IsRightDerivedFunctor Œ± W] :
    RF.IsLeftKanExtension Œ± :=
  IsRightDerivedFunctor.isLeftKanExtension' W
lemma isRightDerivedFunctor_iff_isLeftKanExtension [L.IsLocalization W] :
    RF.IsRightDerivedFunctor Œ± W ‚Üî RF.IsLeftKanExtension Œ± := by
  constructor
  ¬∑ exact fun _ => IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  ¬∑ exact fun h => ‚ü®h‚ü©
variable {RF RF'} in
lemma isRightDerivedFunctor_iff_of_iso (Œ±' : F ‚ü∂ L ‚ãô RF') (W : MorphismProperty C)
    [L.IsLocalization W] (e : RF ‚âÖ RF') (comm : Œ± ‚â´ whiskerLeft L e.hom = Œ±') :
    RF.IsRightDerivedFunctor Œ± W ‚Üî RF'.IsRightDerivedFunctor Œ±' W := by
  simp only [isRightDerivedFunctor_iff_isLeftKanExtension]
  exact isLeftKanExtension_iff_of_iso e _ _ comm
section
variable [L.IsLocalization W] [RF.IsRightDerivedFunctor Œ± W]
noncomputable def rightDerivedDesc (G : D ‚•§ H) (Œ≤ : F ‚ü∂ L ‚ãô G) : RF ‚ü∂ G :=
  have := IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  RF.descOfIsLeftKanExtension Œ± G Œ≤
@[reassoc (attr := simp)]
lemma rightDerived_fac (G : D ‚•§ H) (Œ≤ : F ‚ü∂ L ‚ãô G) :
    Œ± ‚â´ whiskerLeft L (RF.rightDerivedDesc Œ± W G Œ≤) = Œ≤ :=
  have := IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  RF.descOfIsLeftKanExtension_fac Œ± G Œ≤
@[reassoc (attr := simp)]
lemma rightDerived_fac_app (G : D ‚•§ H) (Œ≤ : F ‚ü∂ L ‚ãô G) (X : C) :
    Œ±.app X ‚â´ (RF.rightDerivedDesc Œ± W G Œ≤).app (L.obj X) = Œ≤.app X :=
  have := IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  RF.descOfIsLeftKanExtension_fac_app Œ± G Œ≤ X
include W in
lemma rightDerived_ext (G : D ‚•§ H) (Œ≥‚ÇÅ Œ≥‚ÇÇ : RF ‚ü∂ G)
    (hŒ≥ : Œ± ‚â´ whiskerLeft L Œ≥‚ÇÅ = Œ± ‚â´ whiskerLeft L Œ≥‚ÇÇ) : Œ≥‚ÇÅ = Œ≥‚ÇÇ :=
  have := IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  RF.hom_ext_of_isLeftKanExtension Œ± Œ≥‚ÇÅ Œ≥‚ÇÇ hŒ≥
noncomputable def rightDerivedNatTrans (œÑ : F ‚ü∂ F') : RF ‚ü∂ RF' :=
  RF.rightDerivedDesc Œ± W RF' (œÑ ‚â´ Œ±')
@[reassoc (attr := simp)]
lemma rightDerivedNatTrans_fac (œÑ : F ‚ü∂ F') :
    Œ± ‚â´ whiskerLeft L (rightDerivedNatTrans RF RF' Œ± Œ±' W œÑ) = œÑ ‚â´ Œ±' := by
  dsimp only [rightDerivedNatTrans]
  simp
@[reassoc (attr := simp)]
lemma rightDerivedNatTrans_app (œÑ : F ‚ü∂ F') (X : C) :
    Œ±.app X ‚â´ (rightDerivedNatTrans RF RF' Œ± Œ±' W œÑ).app (L.obj X) =
    œÑ.app X ‚â´ Œ±'.app X := by
  dsimp only [rightDerivedNatTrans]
  simp
@[simp]
lemma rightDerivedNatTrans_id :
    rightDerivedNatTrans RF RF Œ± Œ± W (ùüô F) = ùüô RF :=
  rightDerived_ext RF Œ± W _ _ _ (by aesop_cat)
variable [RF'.IsRightDerivedFunctor Œ±' W]
@[reassoc (attr := simp)]
lemma rightDerivedNatTrans_comp (œÑ : F ‚ü∂ F') (œÑ' : F' ‚ü∂ F'') :
    rightDerivedNatTrans RF RF' Œ± Œ±' W œÑ ‚â´ rightDerivedNatTrans RF' RF'' Œ±' Œ±'' W œÑ' =
    rightDerivedNatTrans RF RF'' Œ± Œ±'' W (œÑ ‚â´ œÑ') :=
  rightDerived_ext RF Œ± W _ _ _ (by aesop_cat)
@[simps]
noncomputable def rightDerivedNatIso (œÑ : F ‚âÖ F') :
    RF ‚âÖ RF' where
  hom := rightDerivedNatTrans RF RF' Œ± Œ±' W œÑ.hom
  inv := rightDerivedNatTrans RF' RF Œ±' Œ± W œÑ.inv
noncomputable abbrev rightDerivedUnique [RF'.IsRightDerivedFunctor Œ±'‚ÇÇ W] : RF ‚âÖ RF' :=
  rightDerivedNatIso RF RF' Œ± Œ±'‚ÇÇ W (Iso.refl F)
lemma isRightDerivedFunctor_iff_isIso_rightDerivedDesc (G : D ‚•§ H) (Œ≤ : F ‚ü∂ L ‚ãô G) :
    G.IsRightDerivedFunctor Œ≤ W ‚Üî IsIso (RF.rightDerivedDesc Œ± W G Œ≤) := by
  rw [isRightDerivedFunctor_iff_isLeftKanExtension]
  have := IsRightDerivedFunctor.isLeftKanExtension _ Œ± W
  exact isLeftKanExtension_iff_isIso _ Œ± _ (by simp)
end
variable (F)
class HasRightDerivedFunctor : Prop where
  hasLeftKanExtension' : HasLeftKanExtension W.Q F
variable (L)
variable [L.IsLocalization W]
lemma hasRightDerivedFunctor_iff :
    F.HasRightDerivedFunctor W ‚Üî HasLeftKanExtension L F := by
  have : HasRightDerivedFunctor F W ‚Üî HasLeftKanExtension W.Q F :=
    ‚ü®fun h => h.hasLeftKanExtension', fun h => ‚ü®h‚ü©‚ü©
  rw [this, hasLeftExtension_iff_postcomp‚ÇÅ (Localization.compUniqFunctor W.Q L W) F]
variable {F}
include e in
lemma hasRightDerivedFunctor_iff_of_iso :
    HasRightDerivedFunctor F W ‚Üî HasRightDerivedFunctor F' W := by
  rw [hasRightDerivedFunctor_iff F W.Q W, hasRightDerivedFunctor_iff F' W.Q W,
    hasLeftExtension_iff_of_iso‚ÇÇ W.Q e]
variable (F)
lemma HasRightDerivedFunctor.hasLeftKanExtension [HasRightDerivedFunctor F W] :
    HasLeftKanExtension L F := by
  simpa only [‚Üê hasRightDerivedFunctor_iff F L W]
variable {F L W}
lemma HasRightDerivedFunctor.mk' [RF.IsRightDerivedFunctor Œ± W] :
    HasRightDerivedFunctor F W := by
  have := IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  simpa only [hasRightDerivedFunctor_iff F L W] using HasLeftKanExtension.mk RF Œ±
section
variable [F.HasRightDerivedFunctor W] (L W)
noncomputable def totalRightDerived : D ‚•§ H :=
  have := HasRightDerivedFunctor.hasLeftKanExtension F L W
  leftKanExtension L F
noncomputable def totalRightDerivedUnit : F ‚ü∂ L ‚ãô F.totalRightDerived L W :=
  have := HasRightDerivedFunctor.hasLeftKanExtension F L W
  leftKanExtensionUnit L F
instance : (F.totalRightDerived L W).IsRightDerivedFunctor
    (F.totalRightDerivedUnit L W) W where
  isLeftKanExtension' := by
    dsimp [totalRightDerived, totalRightDerivedUnit]
    infer_instance
end
end Functor
end CategoryTheory