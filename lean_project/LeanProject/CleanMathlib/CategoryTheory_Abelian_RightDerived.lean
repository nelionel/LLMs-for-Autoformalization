import Mathlib.Algebra.Homology.Additive
import Mathlib.CategoryTheory.Abelian.InjectiveResolution
universe v u
namespace CategoryTheory
open Category Limits
variable {C : Type u} [Category.{v} C] {D : Type*} [Category D]
  [Abelian C] [HasInjectiveResolutions C] [Abelian D]
noncomputable def Functor.rightDerivedToHomotopyCategory (F : C ‚•§ D) [F.Additive] :
    C ‚•§ HomotopyCategory D (ComplexShape.up ‚Ñï) :=
  injectiveResolutions C ‚ãô F.mapHomotopyCategory _
noncomputable def InjectiveResolution.isoRightDerivedToHomotopyCategoryObj {X : C}
    (I : InjectiveResolution X) (F : C ‚•§ D) [F.Additive] :
    F.rightDerivedToHomotopyCategory.obj X ‚âÖ
      (F.mapHomologicalComplex _ ‚ãô HomotopyCategory.quotient _ _).obj I.cocomplex :=
  (F.mapHomotopyCategory _).mapIso I.iso ‚â™‚â´
    (F.mapHomotopyCategoryFactors _).app I.cocomplex
@[reassoc]
lemma InjectiveResolution.isoRightDerivedToHomotopyCategoryObj_hom_naturality
    {X Y : C} (f : X ‚ü∂ Y) (I : InjectiveResolution X) (J : InjectiveResolution Y)
    (œÜ : I.cocomplex ‚ü∂ J.cocomplex) (comm : I.Œπ.f 0 ‚â´ œÜ.f 0 = f ‚â´ J.Œπ.f 0)
    (F : C ‚•§ D) [F.Additive] :
    F.rightDerivedToHomotopyCategory.map f ‚â´ (J.isoRightDerivedToHomotopyCategoryObj F).hom =
      (I.isoRightDerivedToHomotopyCategoryObj F).hom ‚â´
        (F.mapHomologicalComplex _ ‚ãô HomotopyCategory.quotient _ _).map œÜ := by
  dsimp [Functor.rightDerivedToHomotopyCategory, isoRightDerivedToHomotopyCategoryObj]
  rw [‚Üê Functor.map_comp_assoc, iso_hom_naturality f I J œÜ comm, Functor.map_comp,
    assoc, assoc]
  erw [(F.mapHomotopyCategoryFactors (ComplexShape.up ‚Ñï)).hom.naturality]
  rfl
@[reassoc]
lemma InjectiveResolution.isoRightDerivedToHomotopyCategoryObj_inv_naturality
    {X Y : C} (f : X ‚ü∂ Y) (I : InjectiveResolution X) (J : InjectiveResolution Y)
    (œÜ : I.cocomplex ‚ü∂ J.cocomplex) (comm : I.Œπ.f 0 ‚â´ œÜ.f 0 = f ‚â´ J.Œπ.f 0)
    (F : C ‚•§ D) [F.Additive] :
    (I.isoRightDerivedToHomotopyCategoryObj F).inv ‚â´ F.rightDerivedToHomotopyCategory.map f =
      (F.mapHomologicalComplex _ ‚ãô HomotopyCategory.quotient _ _).map œÜ ‚â´
        (J.isoRightDerivedToHomotopyCategoryObj F).inv := by
    rw [‚Üê cancel_epi (I.isoRightDerivedToHomotopyCategoryObj F).hom, Iso.hom_inv_id_assoc]
    dsimp
    rw [‚Üê isoRightDerivedToHomotopyCategoryObj_hom_naturality_assoc f I J œÜ comm F,
      Iso.hom_inv_id, comp_id]
noncomputable def Functor.rightDerived (F : C ‚•§ D) [F.Additive] (n : ‚Ñï) : C ‚•§ D :=
  F.rightDerivedToHomotopyCategory ‚ãô HomotopyCategory.homologyFunctor D _ n
noncomputable def InjectiveResolution.isoRightDerivedObj {X : C} (I : InjectiveResolution X)
    (F : C ‚•§ D) [F.Additive] (n : ‚Ñï) :
    (F.rightDerived n).obj X ‚âÖ
      (HomologicalComplex.homologyFunctor D _ n).obj
        ((F.mapHomologicalComplex _).obj I.cocomplex) :=
  (HomotopyCategory.homologyFunctor D _ n).mapIso
    (I.isoRightDerivedToHomotopyCategoryObj F) ‚â™‚â´
    (HomotopyCategory.homologyFunctorFactors D (ComplexShape.up ‚Ñï) n).app _
@[reassoc]
lemma InjectiveResolution.isoRightDerivedObj_hom_naturality
    {X Y : C} (f : X ‚ü∂ Y) (I : InjectiveResolution X) (J : InjectiveResolution Y)
    (œÜ : I.cocomplex ‚ü∂ J.cocomplex) (comm : I.Œπ.f 0 ‚â´ œÜ.f 0 = f ‚â´ J.Œπ.f 0)
    (F : C ‚•§ D) [F.Additive] (n : ‚Ñï) :
    (F.rightDerived n).map f ‚â´ (J.isoRightDerivedObj F n).hom =
      (I.isoRightDerivedObj F n).hom ‚â´
        (F.mapHomologicalComplex _ ‚ãô HomologicalComplex.homologyFunctor _ _ n).map œÜ := by
  dsimp [isoRightDerivedObj, Functor.rightDerived]
  rw [assoc, ‚Üê Functor.map_comp_assoc,
    InjectiveResolution.isoRightDerivedToHomotopyCategoryObj_hom_naturality f I J œÜ comm F,
    Functor.map_comp, assoc]
  erw [(HomotopyCategory.homologyFunctorFactors D (ComplexShape.up ‚Ñï) n).hom.naturality]
  rfl
@[reassoc]
lemma InjectiveResolution.isoRightDerivedObj_inv_naturality
    {X Y : C} (f : X ‚ü∂ Y) (I : InjectiveResolution X) (J : InjectiveResolution Y)
    (œÜ : I.cocomplex ‚ü∂ J.cocomplex) (comm : I.Œπ.f 0 ‚â´ œÜ.f 0 = f ‚â´ J.Œπ.f 0)
    (F : C ‚•§ D) [F.Additive] (n : ‚Ñï) :
    (I.isoRightDerivedObj F n).inv ‚â´ (F.rightDerived n).map f =
        (F.mapHomologicalComplex _ ‚ãô HomologicalComplex.homologyFunctor _ _ n).map œÜ ‚â´
          (J.isoRightDerivedObj F n).inv := by
  rw [‚Üê cancel_mono (J.isoRightDerivedObj F n).hom, assoc, assoc,
    InjectiveResolution.isoRightDerivedObj_hom_naturality f I J œÜ comm F n,
    Iso.inv_hom_id_assoc, Iso.inv_hom_id, comp_id]
lemma Functor.isZero_rightDerived_obj_injective_succ
    (F : C ‚•§ D) [F.Additive] (n : ‚Ñï) (X : C) [Injective X] :
    IsZero ((F.rightDerived (n+1)).obj X) := by
  refine IsZero.of_iso ?_ ((InjectiveResolution.self X).isoRightDerivedObj F (n + 1))
  erw [‚Üê HomologicalComplex.exactAt_iff_isZero_homology]
  exact ShortComplex.exact_of_isZero_X‚ÇÇ _ (F.map_isZero (by apply isZero_zero))
theorem Functor.rightDerived_map_eq (F : C ‚•§ D) [F.Additive] (n : ‚Ñï) {X Y : C} (f : X ‚ü∂ Y)
    {P : InjectiveResolution X} {Q : InjectiveResolution Y} (g : P.cocomplex ‚ü∂ Q.cocomplex)
    (w : P.Œπ ‚â´ g = (CochainComplex.single‚ÇÄ C).map f ‚â´ Q.Œπ) :
    (F.rightDerived n).map f =
      (P.isoRightDerivedObj F n).hom ‚â´
        (F.mapHomologicalComplex _ ‚ãô HomologicalComplex.homologyFunctor _ _ n).map g ‚â´
          (Q.isoRightDerivedObj F n).inv := by
  rw [‚Üê cancel_mono (Q.isoRightDerivedObj F n).hom,
    InjectiveResolution.isoRightDerivedObj_hom_naturality f P Q g _ F n,
    assoc, assoc, Iso.inv_hom_id, comp_id]
  rw [‚Üê HomologicalComplex.comp_f, w, HomologicalComplex.comp_f,
    CochainComplex.single‚ÇÄ_map_f_zero]
noncomputable def NatTrans.rightDerivedToHomotopyCategory
    {F G : C ‚•§ D} [F.Additive] [G.Additive] (Œ± : F ‚ü∂ G) :
    F.rightDerivedToHomotopyCategory ‚ü∂ G.rightDerivedToHomotopyCategory :=
  whiskerLeft _ (NatTrans.mapHomotopyCategory Œ± (ComplexShape.up ‚Ñï))
lemma InjectiveResolution.rightDerivedToHomotopyCategory_app_eq
    {F G : C ‚•§ D} [F.Additive] [G.Additive] (Œ± : F ‚ü∂ G) {X : C} (P : InjectiveResolution X) :
    (NatTrans.rightDerivedToHomotopyCategory Œ±).app X =
      (P.isoRightDerivedToHomotopyCategoryObj F).hom ‚â´
        (HomotopyCategory.quotient _ _).map
          ((NatTrans.mapHomologicalComplex Œ± _).app P.cocomplex) ‚â´
          (P.isoRightDerivedToHomotopyCategoryObj G).inv := by
  rw [‚Üê cancel_mono (P.isoRightDerivedToHomotopyCategoryObj G).hom, assoc, assoc,
      Iso.inv_hom_id, comp_id]
  dsimp [isoRightDerivedToHomotopyCategoryObj, Functor.mapHomotopyCategoryFactors,
    NatTrans.rightDerivedToHomotopyCategory]
  rw [assoc]
  erw [id_comp, comp_id]
  obtain ‚ü®Œ≤, hŒ≤‚ü© := (HomotopyCategory.quotient _ _).map_surjective (iso P).hom
  rw [‚Üê hŒ≤]
  dsimp
  simp only [‚Üê Functor.map_comp, NatTrans.mapHomologicalComplex_naturality]
  rfl
@[simp]
lemma NatTrans.rightDerivedToHomotopyCategory_id (F : C ‚•§ D) [F.Additive] :
    NatTrans.rightDerivedToHomotopyCategory (ùüô F) = ùüô _ := rfl
@[simp, reassoc]
lemma NatTrans.rightDerivedToHomotopyCategory_comp {F G H : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H)
    [F.Additive] [G.Additive] [H.Additive] :
    NatTrans.rightDerivedToHomotopyCategory (Œ± ‚â´ Œ≤) =
      NatTrans.rightDerivedToHomotopyCategory Œ± ‚â´
        NatTrans.rightDerivedToHomotopyCategory Œ≤ := rfl
noncomputable def NatTrans.rightDerived
    {F G : C ‚•§ D} [F.Additive] [G.Additive] (Œ± : F ‚ü∂ G) (n : ‚Ñï) :
    F.rightDerived n ‚ü∂ G.rightDerived n :=
  whiskerRight (NatTrans.rightDerivedToHomotopyCategory Œ±) _
@[simp]
theorem NatTrans.rightDerived_id (F : C ‚•§ D) [F.Additive] (n : ‚Ñï) :
    NatTrans.rightDerived (ùüô F) n = ùüô (F.rightDerived n) := by
  dsimp only [rightDerived]
  simp only [rightDerivedToHomotopyCategory_id, whiskerRight_id']
  rfl
@[simp, reassoc]
theorem NatTrans.rightDerived_comp {F G H : C ‚•§ D} [F.Additive] [G.Additive] [H.Additive]
    (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) (n : ‚Ñï) :
    NatTrans.rightDerived (Œ± ‚â´ Œ≤) n = NatTrans.rightDerived Œ± n ‚â´ NatTrans.rightDerived Œ≤ n := by
  simp [NatTrans.rightDerived]
namespace InjectiveResolution
lemma rightDerived_app_eq
    {F G : C ‚•§ D} [F.Additive] [G.Additive] (Œ± : F ‚ü∂ G) {X : C} (P : InjectiveResolution X)
    (n : ‚Ñï) : (NatTrans.rightDerived Œ± n).app X =
      (P.isoRightDerivedObj F n).hom ‚â´
        (HomologicalComplex.homologyFunctor D (ComplexShape.up ‚Ñï) n).map
        ((NatTrans.mapHomologicalComplex Œ± _).app P.cocomplex) ‚â´
        (P.isoRightDerivedObj G n).inv := by
  dsimp [NatTrans.rightDerived, isoRightDerivedObj]
  rw [InjectiveResolution.rightDerivedToHomotopyCategory_app_eq Œ± P,
    Functor.map_comp, Functor.map_comp, assoc]
  erw [‚Üê (HomotopyCategory.homologyFunctorFactors D (ComplexShape.up ‚Ñï) n).hom.naturality_assoc
    ((NatTrans.mapHomologicalComplex Œ± (ComplexShape.up ‚Ñï)).app P.cocomplex)]
  simp only [Functor.comp_map, Iso.hom_inv_id_app_assoc]
noncomputable def toRightDerivedZero' {X : C}
    (P : InjectiveResolution X) (F : C ‚•§ D) [F.Additive] :
    F.obj X ‚ü∂ ((F.mapHomologicalComplex _).obj P.cocomplex).cycles 0 :=
  HomologicalComplex.liftCycles _ (F.map (P.Œπ.f 0)) 1 (by simp) (by
    dsimp
    rw [‚Üê F.map_comp, HomologicalComplex.Hom.comm, HomologicalComplex.single_obj_d,
      zero_comp, F.map_zero])
@[reassoc (attr := simp)]
lemma toRightDerivedZero'_comp_iCycles {C} [Category C] [Abelian C] {X : C}
    (P : InjectiveResolution X) (F : C ‚•§ D) [F.Additive] :
    P.toRightDerivedZero' F ‚â´
      HomologicalComplex.iCycles _ _ = F.map (P.Œπ.f 0) := by
  simp [toRightDerivedZero']
@[reassoc]
lemma toRightDerivedZero'_naturality {C} [Category C] [Abelian C] {X Y : C} (f : X ‚ü∂ Y)
    (P : InjectiveResolution X) (Q : InjectiveResolution Y)
    (œÜ : P.cocomplex ‚ü∂ Q.cocomplex) (comm : P.Œπ.f 0 ‚â´ œÜ.f 0 = f ‚â´ Q.Œπ.f 0)
    (F : C ‚•§ D) [F.Additive] :
    F.map f ‚â´ Q.toRightDerivedZero' F =
      P.toRightDerivedZero' F ‚â´
        HomologicalComplex.cyclesMap ((F.mapHomologicalComplex _).map œÜ) 0 := by
  simp only [‚Üê cancel_mono (HomologicalComplex.iCycles _ _),
    Functor.mapHomologicalComplex_obj_X, assoc, toRightDerivedZero'_comp_iCycles,
    CochainComplex.single‚ÇÄ_obj_zero, HomologicalComplex.cyclesMap_i,
    Functor.mapHomologicalComplex_map_f, toRightDerivedZero'_comp_iCycles_assoc,
    ‚Üê F.map_comp, comm]
instance (F : C ‚•§ D) [F.Additive] (X : C) [Injective X] :
    IsIso ((InjectiveResolution.self X).toRightDerivedZero' F) := by
  dsimp [InjectiveResolution.toRightDerivedZero']
  rw [CochainComplex.isIso_liftCycles_iff]
  refine ‚ü®ShortComplex.Splitting.exact ?_, inferInstance‚ü©
  exact
    { r := ùüô _
      s := 0
      s_g := (F.map_isZero (isZero_zero _)).eq_of_src _ _ }
end InjectiveResolution
noncomputable def Functor.toRightDerivedZero (F : C ‚•§ D) [F.Additive] :
    F ‚ü∂ F.rightDerived 0 where
  app X := (injectiveResolution X).toRightDerivedZero' F ‚â´
    (CochainComplex.isoHomologyœÄ‚ÇÄ _).hom ‚â´
      (HomotopyCategory.homologyFunctorFactors D (ComplexShape.up ‚Ñï) 0).inv.app _
  naturality {X Y} f := by
    dsimp [rightDerived]
    rw [assoc, assoc, InjectiveResolution.toRightDerivedZero'_naturality_assoc f
      (injectiveResolution X) (injectiveResolution Y)
      (InjectiveResolution.desc f _ _) (by simp),
      ‚Üê HomologicalComplex.homologyœÄ_naturality_assoc]
    erw [‚Üê NatTrans.naturality]
    rfl
lemma InjectiveResolution.toRightDerivedZero_eq
    {X : C} (I : InjectiveResolution X) (F : C ‚•§ D) [F.Additive] :
    F.toRightDerivedZero.app X = I.toRightDerivedZero' F ‚â´
      (CochainComplex.isoHomologyœÄ‚ÇÄ _).hom ‚â´ (I.isoRightDerivedObj F 0).inv := by
  dsimp [Functor.toRightDerivedZero, isoRightDerivedObj]
  have h‚ÇÅ := InjectiveResolution.toRightDerivedZero'_naturality
    (ùüô X) (injectiveResolution X) I (desc (ùüô X) _ _) (by simp) F
  simp only [Functor.map_id, id_comp] at h‚ÇÅ
  have h‚ÇÇ : (I.isoRightDerivedToHomotopyCategoryObj F).hom =
    (F.mapHomologicalComplex _ ‚ãô HomotopyCategory.quotient _ _).map (desc (ùüô X) _ _) :=
    comp_id _
  rw [‚Üê cancel_mono ((HomotopyCategory.homologyFunctor _ _ 0).map
      (I.isoRightDerivedToHomotopyCategoryObj F).hom),
    assoc, assoc, assoc, assoc, assoc, ‚Üê Functor.map_comp,
    Iso.inv_hom_id, Functor.map_id, comp_id,
    reassoc_of% h‚ÇÅ, h‚ÇÇ, ‚Üê HomologicalComplex.homologyœÄ_naturality_assoc]
  erw [‚Üê NatTrans.naturality]
  rfl
instance (F : C ‚•§ D) [F.Additive] (X : C) [Injective X] :
    IsIso (F.toRightDerivedZero.app X) := by
  rw [(InjectiveResolution.self X).toRightDerivedZero_eq F]
  infer_instance
section
variable (F : C ‚•§ D) [F.Additive] [PreservesFiniteLimits F]
instance {X : C} (P : InjectiveResolution X) :
    IsIso (P.toRightDerivedZero' F) := by
  dsimp [InjectiveResolution.toRightDerivedZero']
  rw [CochainComplex.isIso_liftCycles_iff, ShortComplex.exact_and_mono_f_iff_f_is_kernel]
  exact ‚ü®KernelFork.mapIsLimit _ (P.isLimitKernelFork) F‚ü©
instance (X : C) : IsIso (F.toRightDerivedZero.app X) := by
  dsimp [Functor.toRightDerivedZero]
  infer_instance
instance : IsIso F.toRightDerivedZero :=
  NatIso.isIso_of_isIso_app _
namespace Functor
@[simps! inv]
noncomputable def rightDerivedZeroIsoSelf : F.rightDerived 0 ‚âÖ F :=
  (asIso F.toRightDerivedZero).symm
@[reassoc (attr := simp)]
lemma rightDerivedZeroIsoSelf_hom_inv_id :
    F.rightDerivedZeroIsoSelf.hom ‚â´ F.toRightDerivedZero = ùüô _ :=
  F.rightDerivedZeroIsoSelf.hom_inv_id
@[reassoc (attr := simp)]
lemma rightDerivedZeroIsoSelf_inv_hom_id :
    F.toRightDerivedZero ‚â´ F.rightDerivedZeroIsoSelf.hom = ùüô _ :=
  F.rightDerivedZeroIsoSelf.inv_hom_id
@[reassoc (attr := simp)]
lemma rightDerivedZeroIsoSelf_hom_inv_id_app (X : C) :
    F.rightDerivedZeroIsoSelf.hom.app X ‚â´ F.toRightDerivedZero.app X = ùüô _ :=
  F.rightDerivedZeroIsoSelf.hom_inv_id_app X
@[reassoc (attr := simp)]
lemma rightDerivedZeroIsoSelf_inv_hom_id_app (X : C) :
    F.toRightDerivedZero.app X ‚â´ F.rightDerivedZeroIsoSelf.hom.app X = ùüô _ :=
  F.rightDerivedZeroIsoSelf.inv_hom_id_app X
end Functor
end
end CategoryTheory