import Mathlib.Topology.ContinuousMap.Bounded.Star
import Mathlib.Topology.ContinuousMap.Star
import Mathlib.Topology.UniformSpace.Compact
import Mathlib.Topology.CompactOpen
import Mathlib.Topology.Sets.Compacts
import Mathlib.Analysis.Normed.Group.InfiniteSum
noncomputable section
open NNReal BoundedContinuousFunction Set Metric
namespace ContinuousMap
variable {Œ± Œ≤ E : Type*}
variable [TopologicalSpace Œ±] [CompactSpace Œ±] [PseudoMetricSpace Œ≤] [SeminormedAddCommGroup E]
section
variable (Œ± Œ≤)
@[simps (config := .asFn)]
def equivBoundedOfCompact : C(Œ±, Œ≤) ‚âÉ (Œ± ‚Üí·µá Œ≤) :=
  ‚ü®mkOfCompact, BoundedContinuousFunction.toContinuousMap, fun f => by
    ext
    rfl, fun f => by
    ext
    rfl‚ü©
theorem isUniformInducing_equivBoundedOfCompact : IsUniformInducing (equivBoundedOfCompact Œ± Œ≤) :=
  IsUniformInducing.mk'
    (by
      simp only [hasBasis_compactConvergenceUniformity.mem_iff, uniformity_basis_dist_le.mem_iff]
      exact fun s =>
        ‚ü®fun ‚ü®‚ü®a, b‚ü©, ‚ü®_, ‚ü®Œµ, hŒµ, hb‚ü©‚ü©, hs‚ü© =>
          ‚ü®{ p | ‚àÄ x, (p.1 x, p.2 x) ‚àà b }, ‚ü®Œµ, hŒµ, fun _ h x => hb ((dist_le hŒµ.le).mp h x)‚ü©,
            fun f g h => hs fun x _ => h x‚ü©,
          fun ‚ü®_, ‚ü®Œµ, hŒµ, ht‚ü©, hs‚ü© =>
          ‚ü®‚ü®Set.univ, { p | dist p.1 p.2 ‚â§ Œµ }‚ü©, ‚ü®isCompact_univ, ‚ü®Œµ, hŒµ, fun _ h => h‚ü©‚ü©,
            fun ‚ü®f, g‚ü© h => hs _ _ (ht ((dist_le hŒµ.le).mpr fun x => h x (mem_univ x)))‚ü©‚ü©)
@[deprecated (since := "2024-10-05")]
alias uniformInducing_equivBoundedOfCompact := isUniformInducing_equivBoundedOfCompact
theorem isUniformEmbedding_equivBoundedOfCompact : IsUniformEmbedding (equivBoundedOfCompact Œ± Œ≤) :=
  { isUniformInducing_equivBoundedOfCompact Œ± Œ≤ with
    injective := (equivBoundedOfCompact Œ± Œ≤).injective }
@[deprecated (since := "2024-10-01")]
alias uniformEmbedding_equivBoundedOfCompact := isUniformEmbedding_equivBoundedOfCompact
def addEquivBoundedOfCompact [AddMonoid Œ≤] [LipschitzAdd Œ≤] : C(Œ±, Œ≤) ‚âÉ+ (Œ± ‚Üí·µá Œ≤) :=
  ({ toContinuousMapAddHom Œ± Œ≤, (equivBoundedOfCompact Œ± Œ≤).symm with } : (Œ± ‚Üí·µá Œ≤) ‚âÉ+ C(Œ±, Œ≤)).symm
@[simp]
theorem addEquivBoundedOfCompact_symm_apply [AddMonoid Œ≤] [LipschitzAdd Œ≤] :
    ‚áë((addEquivBoundedOfCompact Œ± Œ≤).symm) = toContinuousMapAddHom Œ± Œ≤ :=
  rfl
@[simp]
theorem addEquivBoundedOfCompact_apply [AddMonoid Œ≤] [LipschitzAdd Œ≤] :
    ‚áë(addEquivBoundedOfCompact Œ± Œ≤) = mkOfCompact :=
  rfl
instance instPseudoMetricSpace : PseudoMetricSpace C(Œ±, Œ≤) :=
  (isUniformEmbedding_equivBoundedOfCompact Œ± Œ≤).comapPseudoMetricSpace _
instance instMetricSpace {Œ≤ : Type*} [MetricSpace Œ≤] :
    MetricSpace C(Œ±, Œ≤) :=
  (isUniformEmbedding_equivBoundedOfCompact Œ± Œ≤).comapMetricSpace _
@[simps! (config := .asFn) toEquiv apply symm_apply]
def isometryEquivBoundedOfCompact : C(Œ±, Œ≤) ‚âÉ·µ¢ (Œ± ‚Üí·µá Œ≤) where
  isometry_toFun _ _ := rfl
  toEquiv := equivBoundedOfCompact Œ± Œ≤
end
@[simp]
theorem _root_.BoundedContinuousFunction.dist_mkOfCompact (f g : C(Œ±, Œ≤)) :
    dist (mkOfCompact f) (mkOfCompact g) = dist f g :=
  rfl
@[simp]
theorem _root_.BoundedContinuousFunction.dist_toContinuousMap (f g : Œ± ‚Üí·µá Œ≤) :
    dist f.toContinuousMap g.toContinuousMap = dist f g :=
  rfl
open BoundedContinuousFunction
section
variable {f g : C(Œ±, Œ≤)} {C : ‚Ñù}
theorem dist_apply_le_dist (x : Œ±) : dist (f x) (g x) ‚â§ dist f g := by
  simp only [‚Üê dist_mkOfCompact, dist_coe_le_dist, ‚Üê mkOfCompact_apply]
theorem dist_le (C0 : (0 : ‚Ñù) ‚â§ C) : dist f g ‚â§ C ‚Üî ‚àÄ x : Œ±, dist (f x) (g x) ‚â§ C := by
  simp only [‚Üê dist_mkOfCompact, BoundedContinuousFunction.dist_le C0, mkOfCompact_apply]
theorem dist_le_iff_of_nonempty [Nonempty Œ±] : dist f g ‚â§ C ‚Üî ‚àÄ x, dist (f x) (g x) ‚â§ C := by
  simp only [‚Üê dist_mkOfCompact, BoundedContinuousFunction.dist_le_iff_of_nonempty,
    mkOfCompact_apply]
theorem dist_lt_iff_of_nonempty [Nonempty Œ±] : dist f g < C ‚Üî ‚àÄ x : Œ±, dist (f x) (g x) < C := by
  simp only [‚Üê dist_mkOfCompact, dist_lt_iff_of_nonempty_compact, mkOfCompact_apply]
theorem dist_lt_of_nonempty [Nonempty Œ±] (w : ‚àÄ x : Œ±, dist (f x) (g x) < C) : dist f g < C :=
  dist_lt_iff_of_nonempty.2 w
theorem dist_lt_iff (C0 : (0 : ‚Ñù) < C) : dist f g < C ‚Üî ‚àÄ x : Œ±, dist (f x) (g x) < C := by
  rw [‚Üê dist_mkOfCompact, dist_lt_iff_of_compact C0]
  simp only [mkOfCompact_apply]
instance {R} [Zero R] [Zero Œ≤] [PseudoMetricSpace R] [SMul R Œ≤] [BoundedSMul R Œ≤] :
    BoundedSMul R C(Œ±, Œ≤) where
  dist_smul_pair' r f g := by
    simpa only [‚Üê dist_mkOfCompact] using dist_smul_pair r (mkOfCompact f) (mkOfCompact g)
  dist_pair_smul' r‚ÇÅ r‚ÇÇ f := by
    simpa only [‚Üê dist_mkOfCompact] using dist_pair_smul r‚ÇÅ r‚ÇÇ (mkOfCompact f)
end
instance : Norm C(Œ±, E) where norm x := dist x 0
@[simp]
theorem _root_.BoundedContinuousFunction.norm_mkOfCompact (f : C(Œ±, E)) : ‚ÄñmkOfCompact f‚Äñ = ‚Äñf‚Äñ :=
  rfl
@[simp]
theorem _root_.BoundedContinuousFunction.norm_toContinuousMap_eq (f : Œ± ‚Üí·µá E) :
    ‚Äñf.toContinuousMap‚Äñ = ‚Äñf‚Äñ :=
  rfl
open BoundedContinuousFunction
instance : SeminormedAddCommGroup C(Œ±, E) where
  __ := ContinuousMap.instPseudoMetricSpace _ _
  __ := ContinuousMap.instAddCommGroupContinuousMap
  dist_eq x y := by
    rw [‚Üê norm_mkOfCompact, ‚Üê dist_mkOfCompact, dist_eq_norm, mkOfCompact_sub]
  dist := dist
  norm := norm
instance {E : Type*} [NormedAddCommGroup E] : NormedAddCommGroup C(Œ±, E) where
  __ : SeminormedAddCommGroup C(Œ±, E) := inferInstance
  __ : MetricSpace C(Œ±, E) := inferInstance
instance [Nonempty Œ±] [One E] [NormOneClass E] : NormOneClass C(Œ±, E) where
  norm_one := by simp only [‚Üê norm_mkOfCompact, mkOfCompact_one, norm_one]
section
variable (f : C(Œ±, E))
theorem norm_coe_le_norm (x : Œ±) : ‚Äñf x‚Äñ ‚â§ ‚Äñf‚Äñ :=
  (mkOfCompact f).norm_coe_le_norm x
theorem dist_le_two_norm (x y : Œ±) : dist (f x) (f y) ‚â§ 2 * ‚Äñf‚Äñ :=
  (mkOfCompact f).dist_le_two_norm x y
theorem norm_le {C : ‚Ñù} (C0 : (0 : ‚Ñù) ‚â§ C) : ‚Äñf‚Äñ ‚â§ C ‚Üî ‚àÄ x : Œ±, ‚Äñf x‚Äñ ‚â§ C :=
  @BoundedContinuousFunction.norm_le _ _ _ _ (mkOfCompact f) _ C0
theorem norm_le_of_nonempty [Nonempty Œ±] {M : ‚Ñù} : ‚Äñf‚Äñ ‚â§ M ‚Üî ‚àÄ x, ‚Äñf x‚Äñ ‚â§ M :=
  @BoundedContinuousFunction.norm_le_of_nonempty _ _ _ _ _ (mkOfCompact f) _
theorem norm_lt_iff {M : ‚Ñù} (M0 : 0 < M) : ‚Äñf‚Äñ < M ‚Üî ‚àÄ x, ‚Äñf x‚Äñ < M :=
  @BoundedContinuousFunction.norm_lt_iff_of_compact _ _ _ _ _ (mkOfCompact f) _ M0
theorem nnnorm_lt_iff {M : ‚Ñù‚â•0} (M0 : 0 < M) : ‚Äñf‚Äñ‚Çä < M ‚Üî ‚àÄ x : Œ±, ‚Äñf x‚Äñ‚Çä < M :=
  f.norm_lt_iff M0
theorem norm_lt_iff_of_nonempty [Nonempty Œ±] {M : ‚Ñù} : ‚Äñf‚Äñ < M ‚Üî ‚àÄ x, ‚Äñf x‚Äñ < M :=
  @BoundedContinuousFunction.norm_lt_iff_of_nonempty_compact _ _ _ _ _ _ (mkOfCompact f) _
theorem nnnorm_lt_iff_of_nonempty [Nonempty Œ±] {M : ‚Ñù‚â•0} : ‚Äñf‚Äñ‚Çä < M ‚Üî ‚àÄ x, ‚Äñf x‚Äñ‚Çä < M :=
  f.norm_lt_iff_of_nonempty
theorem apply_le_norm (f : C(Œ±, ‚Ñù)) (x : Œ±) : f x ‚â§ ‚Äñf‚Äñ :=
  le_trans (le_abs.mpr (Or.inl (le_refl (f x)))) (f.norm_coe_le_norm x)
theorem neg_norm_le_apply (f : C(Œ±, ‚Ñù)) (x : Œ±) : -‚Äñf‚Äñ ‚â§ f x :=
  le_trans (neg_le_neg (f.norm_coe_le_norm x)) (neg_le.mp (neg_le_abs (f x)))
theorem nnnorm_eq_iSup_nnnorm : ‚Äñf‚Äñ‚Çä = ‚®Ü x : Œ±, ‚Äñf x‚Äñ‚Çä :=
  (mkOfCompact f).nnnorm_eq_iSup_nnnorm
theorem norm_eq_iSup_norm : ‚Äñf‚Äñ = ‚®Ü x : Œ±, ‚Äñf x‚Äñ :=
  (mkOfCompact f).norm_eq_iSup_norm
instance {X : Type*} [TopologicalSpace X] (K : TopologicalSpace.Compacts X) :
    CompactSpace (K : Set X) :=
  TopologicalSpace.Compacts.instCompactSpaceSubtypeMem ..
theorem norm_restrict_mono_set {X : Type*} [TopologicalSpace X] (f : C(X, E))
    {K L : TopologicalSpace.Compacts X} (hKL : K ‚â§ L) : ‚Äñf.restrict K‚Äñ ‚â§ ‚Äñf.restrict L‚Äñ :=
  (norm_le _ (norm_nonneg _)).mpr fun x => norm_coe_le_norm (f.restrict L) <| Set.inclusion hKL x
end
section
variable {R : Type*}
instance [NonUnitalSeminormedRing R] : NonUnitalSeminormedRing C(Œ±, R) where
  __ : SeminormedAddCommGroup C(Œ±, R) := inferInstance
  __ : NonUnitalRing C(Œ±, R) := inferInstance
  norm_mul f g := norm_mul_le (mkOfCompact f) (mkOfCompact g)
instance [NonUnitalSeminormedCommRing R] : NonUnitalSeminormedCommRing C(Œ±, R) where
  __ : NonUnitalSeminormedRing C(Œ±, R) := inferInstance
  __ : NonUnitalCommRing C(Œ±, R) := inferInstance
instance [SeminormedRing R] : SeminormedRing C(Œ±, R) where
  __ : NonUnitalSeminormedRing C(Œ±, R) := inferInstance
  __ : Ring C(Œ±, R) := inferInstance
instance [SeminormedCommRing R] : SeminormedCommRing C(Œ±, R) where
  __ : SeminormedRing C(Œ±, R) := inferInstance
  __ : CommRing C(Œ±, R) := inferInstance
instance [NonUnitalNormedRing R] : NonUnitalNormedRing C(Œ±, R) where
  __ : NormedAddCommGroup C(Œ±, R) := inferInstance
  __ : NonUnitalSeminormedRing C(Œ±, R) := inferInstance
instance [NonUnitalNormedCommRing R] : NonUnitalNormedCommRing C(Œ±, R) where
  __ : NonUnitalNormedRing C(Œ±, R) := inferInstance
  __ : NonUnitalCommRing C(Œ±, R) := inferInstance
instance [NormedRing R] : NormedRing C(Œ±, R) where
  __ : NormedAddCommGroup C(Œ±, R) := inferInstance
  __ : SeminormedRing C(Œ±, R) := inferInstance
instance [NormedCommRing R] : NormedCommRing C(Œ±, R) where
  __ : NormedRing C(Œ±, R) := inferInstance
  __ : CommRing C(Œ±, R) := inferInstance
end
section
variable {ùïú : Type*} [NormedField ùïú] [NormedSpace ùïú E]
instance normedSpace : NormedSpace ùïú C(Œ±, E) where
  norm_smul_le := norm_smul_le
section
variable (Œ± ùïú E)
def linearIsometryBoundedOfCompact : C(Œ±, E) ‚âÉ‚Çó·µ¢[ùïú] Œ± ‚Üí·µá E :=
  { addEquivBoundedOfCompact Œ± E with
    map_smul' := fun c f => by
      ext
      norm_cast
    norm_map' := fun _ => rfl }
variable {Œ± E}
def evalCLM (x : Œ±) : C(Œ±, E) ‚ÜíL[ùïú] E :=
  (BoundedContinuousFunction.evalCLM ùïú x).comp
    (linearIsometryBoundedOfCompact Œ± E ùïú).toLinearIsometry.toContinuousLinearMap
end
@[simp]
theorem linearIsometryBoundedOfCompact_symm_apply (f : Œ± ‚Üí·µá E) :
    (linearIsometryBoundedOfCompact Œ± E ùïú).symm f = f.toContinuousMap :=
  rfl
@[simp]
theorem linearIsometryBoundedOfCompact_apply_apply (f : C(Œ±, E)) (a : Œ±) :
    (linearIsometryBoundedOfCompact Œ± E ùïú f) a = f a :=
  rfl
@[simp]
theorem linearIsometryBoundedOfCompact_toIsometryEquiv :
    (linearIsometryBoundedOfCompact Œ± E ùïú).toIsometryEquiv = isometryEquivBoundedOfCompact Œ± E :=
  rfl
@[simp]
theorem linearIsometryBoundedOfCompact_toAddEquiv :
    ((linearIsometryBoundedOfCompact Œ± E ùïú).toLinearEquiv : C(Œ±, E) ‚âÉ+ (Œ± ‚Üí·µá E)) =
      addEquivBoundedOfCompact Œ± E :=
  rfl
@[simp]
theorem linearIsometryBoundedOfCompact_of_compact_toEquiv :
    (linearIsometryBoundedOfCompact Œ± E ùïú).toLinearEquiv.toEquiv = equivBoundedOfCompact Œ± E :=
  rfl
end
@[simp] lemma nnnorm_smul_const {R Œ≤ : Type*} [NormedAddCommGroup Œ≤] [NormedDivisionRing R]
    [Module R Œ≤] [BoundedSMul R Œ≤] (f : C(Œ±, R)) (b : Œ≤) :
    ‚Äñf ‚Ä¢ const Œ± b‚Äñ‚Çä = ‚Äñf‚Äñ‚Çä * ‚Äñb‚Äñ‚Çä := by
  simp only [nnnorm_eq_iSup_nnnorm, smul_apply', const_apply, nnnorm_smul, iSup_mul]
@[simp] lemma norm_smul_const {R Œ≤ : Type*} [NormedAddCommGroup Œ≤] [NormedDivisionRing R]
    [Module R Œ≤] [BoundedSMul R Œ≤] (f : C(Œ±, R)) (b : Œ≤) :
    ‚Äñf ‚Ä¢ const Œ± b‚Äñ = ‚Äñf‚Äñ * ‚Äñb‚Äñ := by
  simp only [‚Üê coe_nnnorm, NNReal.coe_mul, nnnorm_smul_const]
section
variable {ùïú : Type*} {Œ≥ : Type*} [NormedField ùïú] [SeminormedRing Œ≥] [NormedAlgebra ùïú Œ≥]
instance : NormedAlgebra ùïú C(Œ±, Œ≥) :=
  { ContinuousMap.normedSpace, ContinuousMap.algebra with }
end
end ContinuousMap
namespace ContinuousMap
section UniformContinuity
variable {Œ± Œ≤ : Type*}
variable [PseudoMetricSpace Œ±] [CompactSpace Œ±] [PseudoMetricSpace Œ≤]
theorem uniform_continuity (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) :
    ‚àÉ Œ¥ > 0, ‚àÄ {x y}, dist x y < Œ¥ ‚Üí dist (f x) (f y) < Œµ :=
  Metric.uniformContinuous_iff.mp (CompactSpace.uniformContinuous_of_continuous f.continuous) Œµ h
def modulus (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) : ‚Ñù :=
  Classical.choose (uniform_continuity f Œµ h)
theorem modulus_pos (f : C(Œ±, Œ≤)) {Œµ : ‚Ñù} {h : 0 < Œµ} : 0 < f.modulus Œµ h :=
  (Classical.choose_spec (uniform_continuity f Œµ h)).1
theorem dist_lt_of_dist_lt_modulus (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) {a b : Œ±}
    (w : dist a b < f.modulus Œµ h) : dist (f a) (f b) < Œµ :=
  (Classical.choose_spec (uniform_continuity f Œµ h)).2 w
end UniformContinuity
end ContinuousMap
section CompLeft
variable (X : Type*) {ùïú Œ≤ Œ≥ : Type*} [TopologicalSpace X] [CompactSpace X]
  [NontriviallyNormedField ùïú]
variable [SeminormedAddCommGroup Œ≤] [NormedSpace ùïú Œ≤] [SeminormedAddCommGroup Œ≥] [NormedSpace ùïú Œ≥]
open ContinuousMap
protected def ContinuousLinearMap.compLeftContinuousCompact (g : Œ≤ ‚ÜíL[ùïú] Œ≥) :
    C(X, Œ≤) ‚ÜíL[ùïú] C(X, Œ≥) :=
  (linearIsometryBoundedOfCompact X Œ≥ ùïú).symm.toLinearIsometry.toContinuousLinearMap.comp <|
    (g.compLeftContinuousBounded X).comp <|
      (linearIsometryBoundedOfCompact X Œ≤ ùïú).toLinearIsometry.toContinuousLinearMap
@[simp]
theorem ContinuousLinearMap.toLinear_compLeftContinuousCompact (g : Œ≤ ‚ÜíL[ùïú] Œ≥) :
    (g.compLeftContinuousCompact X : C(X, Œ≤) ‚Üí‚Çó[ùïú] C(X, Œ≥)) = g.compLeftContinuous ùïú X := by
  ext f
  rfl
@[simp]
theorem ContinuousLinearMap.compLeftContinuousCompact_apply (g : Œ≤ ‚ÜíL[ùïú] Œ≥) (f : C(X, Œ≤)) (x : X) :
    g.compLeftContinuousCompact X f x = g (f x) :=
  rfl
end CompLeft
namespace ContinuousMap
section LocalNormalConvergence
open TopologicalSpace
variable {X : Type*} [TopologicalSpace X] [LocallyCompactSpace X]
variable {E : Type*} [NormedAddCommGroup E] [CompleteSpace E]
theorem summable_of_locally_summable_norm {Œπ : Type*} {F : Œπ ‚Üí C(X, E)}
    (hF : ‚àÄ K : Compacts X, Summable fun i => ‚Äñ(F i).restrict K‚Äñ) : Summable F := by
  classical
  refine (ContinuousMap.exists_tendsto_compactOpen_iff_forall _).2 fun K hK => ?_
  lift K to Compacts X using hK
  have A : ‚àÄ s : Finset Œπ, restrict (‚ÜëK) (‚àë i ‚àà s, F i) = ‚àë i ‚àà s, restrict K (F i) := by
    intro s
    ext1 x
    simp
    erw [restrict_apply, restrict_apply, restrict_apply, restrict_apply]
    simp? says simp only [coe_sum, Finset.sum_apply]
    congr!
  simpa only [HasSum, A] using (hF K).of_norm
end LocalNormalConvergence
section NormedSpace
variable {Œ± : Type*} {Œ≤ : Type*}
variable [TopologicalSpace Œ±] [SeminormedAddCommGroup Œ≤] [StarAddMonoid Œ≤] [NormedStarGroup Œ≤]
theorem _root_.BoundedContinuousFunction.mkOfCompact_star [CompactSpace Œ±] (f : C(Œ±, Œ≤)) :
    mkOfCompact (star f) = star (mkOfCompact f) :=
  rfl
instance [CompactSpace Œ±] : NormedStarGroup C(Œ±, Œ≤) where
  norm_star f := by
    rw [‚Üê BoundedContinuousFunction.norm_mkOfCompact, BoundedContinuousFunction.mkOfCompact_star,
      norm_star, BoundedContinuousFunction.norm_mkOfCompact]
end NormedSpace
section CStarRing
variable {Œ± : Type*} {Œ≤ : Type*}
variable [TopologicalSpace Œ±] [CompactSpace Œ±]
instance [NonUnitalNormedRing Œ≤] [StarRing Œ≤] [CStarRing Œ≤] : CStarRing C(Œ±, Œ≤) where
  norm_mul_self_le f := by
    rw [‚Üê sq, ‚Üê Real.le_sqrt (norm_nonneg _) (norm_nonneg _),
      ContinuousMap.norm_le _ (Real.sqrt_nonneg _)]
    intro x
    rw [Real.le_sqrt (norm_nonneg _) (norm_nonneg _), sq, ‚Üê CStarRing.norm_star_mul_self]
    exact ContinuousMap.norm_coe_le_norm (star f * f) x
end CStarRing
end ContinuousMap