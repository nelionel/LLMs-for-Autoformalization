import Mathlib.Topology.Homeomorph
import Mathlib.Data.Option.Basic
open Set Filter Function
open Filter Topology
universe u v w
class ParacompactSpace (X : Type v) [TopologicalSpace X] : Prop where
  locallyFinite_refinement :
    ‚àÄ (Œ± : Type v) (s : Œ± ‚Üí Set X), (‚àÄ a, IsOpen (s a)) ‚Üí (‚ãÉ a, s a = univ) ‚Üí
      ‚àÉ (Œ≤ : Type v) (t : Œ≤ ‚Üí Set X),
        (‚àÄ b, IsOpen (t b)) ‚àß (‚ãÉ b, t b = univ) ‚àß LocallyFinite t ‚àß ‚àÄ b, ‚àÉ a, t b ‚äÜ s a
variable {Œπ : Type u} {X : Type v} {Y : Type w} [TopologicalSpace X] [TopologicalSpace Y]
theorem precise_refinement [ParacompactSpace X] (u : Œπ ‚Üí Set X) (uo : ‚àÄ a, IsOpen (u a))
    (uc : ‚ãÉ i, u i = univ) : ‚àÉ v : Œπ ‚Üí Set X, (‚àÄ a, IsOpen (v a)) ‚àß ‚ãÉ i, v i = univ ‚àß
    LocallyFinite v ‚àß ‚àÄ a, v a ‚äÜ u a := by
  have := ParacompactSpace.locallyFinite_refinement (range u) (fun r ‚Ü¶ (r : Set X))
    (forall_subtype_range_iff.2 uo) (by rwa [‚Üê sUnion_range, Subtype.range_coe])
  simp only [exists_subtype_range_iff, iUnion_eq_univ_iff] at this
  choose Œ± t hto hXt htf ind hind using this
  choose t_inv ht_inv using hXt
  choose U hxU hU using htf
  refine ‚ü®fun i ‚Ü¶ ‚ãÉ (a : Œ±) (_ : ind a = i), t a, ?_, ?_, ?_, ?_‚ü©
  ¬∑ exact fun a ‚Ü¶ isOpen_iUnion fun a ‚Ü¶ isOpen_iUnion fun _ ‚Ü¶ hto a
  ¬∑ simp only [eq_univ_iff_forall, mem_iUnion]
    exact fun x ‚Ü¶ ‚ü®ind (t_inv x), _, rfl, ht_inv _‚ü©
  ¬∑ refine fun x ‚Ü¶ ‚ü®U x, hxU x, ((hU x).image ind).subset ?_‚ü©
    simp only [subset_def, mem_iUnion, mem_setOf_eq, Set.Nonempty, mem_inter_iff]
    rintro i ‚ü®y, ‚ü®a, rfl, hya‚ü©, hyU‚ü©
    exact mem_image_of_mem _ ‚ü®y, hya, hyU‚ü©
  ¬∑ simp only [subset_def, mem_iUnion]
    rintro i x ‚ü®a, rfl, hxa‚ü©
    exact hind _ hxa
theorem precise_refinement_set [ParacompactSpace X] {s : Set X} (hs : IsClosed s) (u : Œπ ‚Üí Set X)
    (uo : ‚àÄ i, IsOpen (u i)) (us : s ‚äÜ ‚ãÉ i, u i) :
    ‚àÉ v : Œπ ‚Üí Set X, (‚àÄ i, IsOpen (v i)) ‚àß (s ‚äÜ ‚ãÉ i, v i) ‚àß LocallyFinite v ‚àß ‚àÄ i, v i ‚äÜ u i := by
  have uc : (iUnion fun i => Option.elim' s·∂ú u i) = univ := by
    apply Subset.antisymm (subset_univ _)
    ¬∑ simp_rw [‚Üê compl_union_self s, Option.elim', iUnion_option]
      apply union_subset_union_right s·∂ú us
  rcases precise_refinement (Option.elim' s·∂ú u) (Option.forall.2 ‚ü®isOpen_compl_iff.2 hs, uo‚ü©)
      uc with
    ‚ü®v, vo, vc, vf, vu‚ü©
  refine ‚ü®v ‚àò some, fun i ‚Ü¶ vo _, ?_, vf.comp_injective (Option.some_injective _), fun i ‚Ü¶ vu _‚ü©
  ¬∑ simp only [iUnion_option, ‚Üê compl_subset_iff_union] at vc
    exact Subset.trans (subset_compl_comm.1 <| vu Option.none) vc
theorem Topology.IsClosedEmbedding.paracompactSpace [ParacompactSpace Y] {e : X ‚Üí Y}
    (he : IsClosedEmbedding e) : ParacompactSpace X where
  locallyFinite_refinement Œ± s ho hu := by
    choose U hUo hU using fun a ‚Ü¶ he.isOpen_iff.1 (ho a)
    simp only [‚Üê hU] at hu ‚ä¢
    have heU : range e ‚äÜ ‚ãÉ i, U i := by
      simpa only [range_subset_iff, mem_iUnion, iUnion_eq_univ_iff] using hu
    rcases precise_refinement_set he.isClosed_range U hUo heU with ‚ü®V, hVo, heV, hVf, hVU‚ü©
    refine ‚ü®Œ±, fun a ‚Ü¶ e ‚Åª¬π' (V a), fun a ‚Ü¶ (hVo a).preimage he.continuous, ?_,
      hVf.preimage_continuous he.continuous, fun a ‚Ü¶ ‚ü®a, preimage_mono (hVU a)‚ü©‚ü©
    simpa only [range_subset_iff, mem_iUnion, iUnion_eq_univ_iff] using heV
@[deprecated (since := "2024-10-20")]
alias ClosedEmbedding.paracompactSpace := IsClosedEmbedding.paracompactSpace
theorem Homeomorph.paracompactSpace_iff (e : X ‚âÉ‚Çú Y) : ParacompactSpace X ‚Üî ParacompactSpace Y :=
  ‚ü®fun _ ‚Ü¶ e.symm.isClosedEmbedding.paracompactSpace, fun _ ‚Ü¶ e.isClosedEmbedding.paracompactSpace‚ü©
instance (priority := 200) [CompactSpace X] [ParacompactSpace Y] : ParacompactSpace (X √ó Y) where
  locallyFinite_refinement Œ± s ho hu := by
    have : ‚àÄ (x : X) (y : Y), ‚àÉ (a : Œ±) (U : Set X) (V : Set Y),
        IsOpen U ‚àß IsOpen V ‚àß x ‚àà U ‚àß y ‚àà V ‚àß U √óÀ¢ V ‚äÜ s a := fun x y ‚Ü¶
      (iUnion_eq_univ_iff.1 hu (x, y)).imp fun a ha ‚Ü¶ isOpen_prod_iff.1 (ho a) x y ha
    choose a U V hUo hVo hxU hyV hUV using this
    choose T hT using fun y ‚Ü¶ CompactSpace.elim_nhds_subcover (U ¬∑ y) fun x ‚Ü¶
      (hUo x y).mem_nhds (hxU x y)
    set W : Y ‚Üí Set Y := fun y ‚Ü¶ ‚ãÇ x ‚àà T y, V x y
    have hWo : ‚àÄ y, IsOpen (W y) := fun y ‚Ü¶ isOpen_biInter_finset fun _ _ ‚Ü¶ hVo _ _
    have hW : ‚àÄ y, y ‚àà W y := fun _ ‚Ü¶ mem_iInter‚ÇÇ.2 fun _ _ ‚Ü¶ hyV _ _
    rcases precise_refinement W hWo (iUnion_eq_univ_iff.2 fun y ‚Ü¶ ‚ü®y, hW y‚ü©)
      with ‚ü®E, hEo, hE, hEf, hEA‚ü©
    refine ‚ü®Œ£ y, T y, fun z ‚Ü¶ U z.2.1 z.1 √óÀ¢ E z.1, fun _ ‚Ü¶ (hUo _ _).prod (hEo _),
      iUnion_eq_univ_iff.2 fun (x, y) ‚Ü¶ ?_, fun (x, y) ‚Ü¶ ?_, fun ‚ü®y, x, hx‚ü© ‚Ü¶ ?_‚ü©
    ¬∑ rcases iUnion_eq_univ_iff.1 hE y with ‚ü®b, hb‚ü©
      rcases iUnion‚ÇÇ_eq_univ_iff.1 (hT b) x with ‚ü®a, ha, hx‚ü©
      exact ‚ü®‚ü®b, a, ha‚ü©, hx, hb‚ü©
    ¬∑ rcases hEf y with ‚ü®t, ht, htf‚ü©
      refine ‚ü®univ √óÀ¢ t, prod_mem_nhds univ_mem ht, ?_‚ü©
      refine (htf.biUnion fun y _ ‚Ü¶ finite_range (Sigma.mk y)).subset ?_
      rintro ‚ü®b, a, ha‚ü© ‚ü®‚ü®c, d‚ü©, ‚ü®-, hd : d ‚àà E b‚ü©, -, hdt : d ‚àà t‚ü©
      exact mem_iUnion‚ÇÇ.2 ‚ü®b, ‚ü®d, hd, hdt‚ü©, mem_range_self _‚ü©
    ¬∑ refine ‚ü®a x y, (Set.prod_mono Subset.rfl ?_).trans (hUV x y)‚ü©
      exact (hEA _).trans (iInter‚ÇÇ_subset x hx)
instance (priority := 200) [ParacompactSpace X] [CompactSpace Y] : ParacompactSpace (X √ó Y) :=
  (Homeomorph.prodComm X Y).paracompactSpace_iff.2 inferInstance
instance (priority := 100) paracompact_of_compact [CompactSpace X] : ParacompactSpace X := by
  refine ‚ü®fun Œπ s ho hu ‚Ü¶ ?_‚ü©
  rcases isCompact_univ.elim_finite_subcover _ ho hu.ge with ‚ü®T, hT‚ü©
  refine ‚ü®(T : Set Œπ), fun t ‚Ü¶ s t, fun t ‚Ü¶ ho _, ?_, locallyFinite_of_finite _,
    fun t ‚Ü¶ ‚ü®t, Subset.rfl‚ü©‚ü©
  simpa only [iUnion_coe_set, ‚Üê univ_subset_iff]
theorem refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set [WeaklyLocallyCompactSpace X]
    [SigmaCompactSpace X] [T2Space X] {Œπ : X ‚Üí Type u} {p : ‚àÄ x, Œπ x ‚Üí Prop} {B : ‚àÄ x, Œπ x ‚Üí Set X}
    {s : Set X} (hs : IsClosed s) (hB : ‚àÄ x ‚àà s, (ùìù x).HasBasis (p x) (B x)) :
    ‚àÉ (Œ± : Type v) (c : Œ± ‚Üí X) (r : ‚àÄ a, Œπ (c a)),
      (‚àÄ a, c a ‚àà s ‚àß p (c a) (r a)) ‚àß
        (s ‚äÜ ‚ãÉ a, B (c a) (r a)) ‚àß LocallyFinite fun a ‚Ü¶ B (c a) (r a) := by
  classical
    set K' : CompactExhaustion X := CompactExhaustion.choice X
    set K : CompactExhaustion X := K'.shiftr.shiftr
    set Kdiff := fun n ‚Ü¶ K (n + 1) \ interior (K n)
    have hKcov : ‚àÄ x, x ‚àà Kdiff (K'.find x + 1) := fun x ‚Ü¶ by
      simpa only [K'.find_shiftr] using
        diff_subset_diff_right interior_subset (K'.shiftr.mem_diff_shiftr_find x)
    have Kdiffc : ‚àÄ n, IsCompact (Kdiff n ‚à© s) :=
      fun n ‚Ü¶ ((K.isCompact _).diff isOpen_interior).inter_right hs
    have : ‚àÄ (n) (x : ‚Üë(Kdiff (n + 1) ‚à© s)), (K n)·∂ú ‚àà ùìù (x : X) :=
      fun n x ‚Ü¶ (K.isClosed n).compl_mem_nhds fun hx' ‚Ü¶ x.2.1.2 <| K.subset_interior_succ _ hx'
    choose! r hrp hr using fun n (x : ‚Üë(Kdiff (n + 1) ‚à© s)) ‚Ü¶ (hB x x.2.2).mem_iff.1 (this n x)
    have hxr : ‚àÄ (n x) (hx : x ‚àà Kdiff (n + 1) ‚à© s), B x (r n ‚ü®x, hx‚ü©) ‚àà ùìù x := fun n x hx ‚Ü¶
      (hB x hx.2).mem_of_mem (hrp _ ‚ü®x, hx‚ü©)
    choose T hT using fun n ‚Ü¶ (Kdiffc (n + 1)).elim_nhds_subcover' _ (hxr n)
    set T' : ‚àÄ n, Set ‚Üë(Kdiff (n + 1) ‚à© s) := fun n ‚Ü¶ T n
    refine ‚ü®Œ£n, T' n, fun a ‚Ü¶ a.2, fun a ‚Ü¶ r a.1 a.2, ?_, ?_, ?_‚ü©
    ¬∑ rintro ‚ü®n, x, hx‚ü©
      exact ‚ü®x.2.2, hrp _ _‚ü©
    ¬∑ refine fun x hx ‚Ü¶ mem_iUnion.2 ?_
      rcases mem_iUnion‚ÇÇ.1 (hT _ ‚ü®hKcov x, hx‚ü©) with ‚ü®‚ü®c, hc‚ü©, hcT, hcx‚ü©
      exact ‚ü®‚ü®_, ‚ü®c, hc‚ü©, hcT‚ü©, hcx‚ü©
    ¬∑ intro x
      refine
        ‚ü®interior (K (K'.find x + 3)),
          IsOpen.mem_nhds isOpen_interior (K.subset_interior_succ _ (hKcov x).1), ?_‚ü©
      have : (‚ãÉ k ‚â§ K'.find x + 2, range (Sigma.mk k) : Set (Œ£n, T' n)).Finite :=
        (finite_le_nat _).biUnion fun k _ ‚Ü¶ finite_range _
      apply this.subset
      rintro ‚ü®k, c, hc‚ü©
      simp only [mem_iUnion, mem_setOf_eq, mem_image, Subtype.coe_mk]
      rintro ‚ü®x, hxB : x ‚àà B c (r k c), hxK‚ü©
      refine ‚ü®k, ?_, ‚ü®c, hc‚ü©, rfl‚ü©
      have := (mem_compl_iff _ _).1 (hr k c hxB)
      contrapose! this with hnk
      exact K.subset hnk (interior_subset hxK)
theorem refinement_of_locallyCompact_sigmaCompact_of_nhds_basis [WeaklyLocallyCompactSpace X]
    [SigmaCompactSpace X] [T2Space X] {Œπ : X ‚Üí Type u} {p : ‚àÄ x, Œπ x ‚Üí Prop} {B : ‚àÄ x, Œπ x ‚Üí Set X}
    (hB : ‚àÄ x, (ùìù x).HasBasis (p x) (B x)) :
    ‚àÉ (Œ± : Type v) (c : Œ± ‚Üí X) (r : ‚àÄ a, Œπ (c a)),
      (‚àÄ a, p (c a) (r a)) ‚àß ‚ãÉ a, B (c a) (r a) = univ ‚àß LocallyFinite fun a ‚Ü¶ B (c a) (r a) :=
  let ‚ü®Œ±, c, r, hp, hU, hfin‚ü© :=
    refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set isClosed_univ fun x _ ‚Ü¶ hB x
  ‚ü®Œ±, c, r, fun a ‚Ü¶ (hp a).2, univ_subset_iff.1 hU, hfin‚ü©
instance (priority := 100) paracompact_of_locallyCompact_sigmaCompact [WeaklyLocallyCompactSpace X]
    [SigmaCompactSpace X] [T2Space X] : ParacompactSpace X := by
  refine ‚ü®fun Œ± s ho hc ‚Ü¶ ?_‚ü©
  choose i hi using iUnion_eq_univ_iff.1 hc
  have : ‚àÄ x : X, (ùìù x).HasBasis (fun t : Set X ‚Ü¶ (x ‚àà t ‚àß IsOpen t) ‚àß t ‚äÜ s (i x)) id :=
    fun x : X ‚Ü¶ (nhds_basis_opens x).restrict_subset (IsOpen.mem_nhds (ho (i x)) (hi x))
  rcases refinement_of_locallyCompact_sigmaCompact_of_nhds_basis this with
    ‚ü®Œ≤, c, t, hto, htc, htf‚ü©
  exact ‚ü®Œ≤, t, fun x ‚Ü¶ (hto x).1.2, htc, htf, fun b ‚Ü¶ ‚ü®i <| c b, (hto b).2‚ü©‚ü©
instance (priority := 100) T4Space.of_paracompactSpace_t2Space [T2Space X] [ParacompactSpace X] :
    T4Space X := by
  have : ‚àÄ s t : Set X, IsClosed s ‚Üí
      (‚àÄ x ‚àà s, ‚àÉ u v, IsOpen u ‚àß IsOpen v ‚àß x ‚àà u ‚àß t ‚äÜ v ‚àß Disjoint u v) ‚Üí
      ‚àÉ u v, IsOpen u ‚àß IsOpen v ‚àß s ‚äÜ u ‚àß t ‚äÜ v ‚àß Disjoint u v := fun s t hs H ‚Ü¶ by
    choose u v hu hv hxu htv huv using SetCoe.forall'.1 H
    rcases precise_refinement_set hs u hu fun x hx ‚Ü¶ mem_iUnion.2 ‚ü®‚ü®x, hx‚ü©, hxu _‚ü© with
      ‚ü®u', hu'o, hcov', hu'fin, hsub‚ü©
    refine ‚ü®‚ãÉ i, u' i, (closure (‚ãÉ i, u' i))·∂ú, isOpen_iUnion hu'o, isClosed_closure.isOpen_compl,
      hcov', ?_, disjoint_compl_right.mono le_rfl (compl_le_compl subset_closure)‚ü©
    rw [hu'fin.closure_iUnion, compl_iUnion, subset_iInter_iff]
    refine fun i x hxt hxu ‚Ü¶
      absurd (htv i hxt) (closure_minimal ?_ (isClosed_compl_iff.2 <| hv _) hxu)
    exact fun y hyu hyv ‚Ü¶ (huv i).le_bot ‚ü®hsub _ hyu, hyv‚ü©
  refine { normal := fun s t hs ht hst ‚Ü¶ this s t hs fun x hx ‚Ü¶ ?_ }
  rcases this t {x} ht fun y hy ‚Ü¶ (by
    simp_rw [singleton_subset_iff]
    exact t2_separation (hst.symm.ne_of_mem hy hx))
    with ‚ü®v, u, hv, hu, htv, hxu, huv‚ü©
  exact ‚ü®u, v, hu, hv, singleton_subset_iff.1 hxu, htv, huv.symm‚ü©