import Mathlib.Analysis.BoxIntegral.Basic
import Mathlib.Analysis.BoxIntegral.Partition.Additive
import Mathlib.Analysis.Calculus.FDeriv.Prod
open scoped NNReal ENNReal Topology BoxIntegral
open ContinuousLinearMap (lsmul)
open Filter Set Finset Metric
open BoxIntegral.IntegrationParams (GP gp_le)
noncomputable section
universe u
variable {E : Type u} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] {n : ‚Ñï}
namespace BoxIntegral
variable [CompleteSpace E] (I : Box (Fin (n + 1))) {i : Fin (n + 1)}
open MeasureTheory
theorem norm_volume_sub_integral_face_upper_sub_lower_smul_le {f : (Fin (n + 1) ‚Üí ‚Ñù) ‚Üí E}
    {f' : (Fin (n + 1) ‚Üí ‚Ñù) ‚ÜíL[‚Ñù] E} (hfc : ContinuousOn f (Box.Icc I)) {x : Fin (n + 1) ‚Üí ‚Ñù}
    (hxI : x ‚àà (Box.Icc I)) {a : E} {Œµ : ‚Ñù} (h0 : 0 < Œµ)
    (hŒµ : ‚àÄ y ‚àà (Box.Icc I), ‚Äñf y - a - f' (y - x)‚Äñ ‚â§ Œµ * ‚Äñy - x‚Äñ) {c : ‚Ñù‚â•0}
    (hc : I.distortion ‚â§ c) :
    ‚Äñ(‚àè j, (I.upper j - I.lower j)) ‚Ä¢ f' (Pi.single i 1) -
      (integral (I.face i) ‚ä• (f ‚àò i.insertNth (Œ± := fun _ ‚Ü¶ ‚Ñù) (I.upper i)) BoxAdditiveMap.volume -
        integral (I.face i) ‚ä• (f ‚àò i.insertNth (Œ± := fun _ ‚Ü¶ ‚Ñù) (I.lower i))
          BoxAdditiveMap.volume)‚Äñ ‚â§
      2 * Œµ * c * ‚àè j, (I.upper j - I.lower j) := by
  set e : ‚Ñù ‚Üí (Fin n ‚Üí ‚Ñù) ‚Üí (Fin (n + 1) ‚Üí ‚Ñù) := i.insertNth (Œ± := fun _ ‚Ü¶ ‚Ñù)
  have Hl : I.lower i ‚àà Icc (I.lower i) (I.upper i) := Set.left_mem_Icc.2 (I.lower_le_upper i)
  have Hu : I.upper i ‚àà Icc (I.lower i) (I.upper i) := Set.right_mem_Icc.2 (I.lower_le_upper i)
  have Hi : ‚àÄ x ‚àà Icc (I.lower i) (I.upper i),
      Integrable.{0, u, u} (I.face i) ‚ä• (f ‚àò e x) BoxAdditiveMap.volume := fun x hx =>
    integrable_of_continuousOn _ (Box.continuousOn_face_Icc hfc hx) volume
  have : ‚àÄ y ‚àà Box.Icc (I.face i),
      ‚Äñf' (Pi.single i (I.upper i - I.lower i)) -
          (f (e (I.upper i) y) - f (e (I.lower i) y))‚Äñ ‚â§
        2 * Œµ * diam (Box.Icc I) := fun y hy ‚Ü¶ by
    set g := fun y => f y - a - f' (y - x) with hg
    change ‚àÄ y ‚àà (Box.Icc I), ‚Äñg y‚Äñ ‚â§ Œµ * ‚Äñy - x‚Äñ at hŒµ
    clear_value g; obtain rfl : f = fun y => a + f' (y - x) + g y := by simp [hg]
    convert_to ‚Äñg (e (I.lower i) y) - g (e (I.upper i) y)‚Äñ ‚â§ _
    ¬∑ congr 1
      have := Fin.insertNth_sub_same (Œ± := fun _ ‚Ü¶ ‚Ñù) i (I.upper i) (I.lower i) y
      simp only [‚Üê this, f'.map_sub]; abel
    ¬∑ have : ‚àÄ z ‚àà Icc (I.lower i) (I.upper i), e z y ‚àà (Box.Icc I) := fun z hz =>
        I.mapsTo_insertNth_face_Icc hz hy
      replace hŒµ : ‚àÄ y ‚àà (Box.Icc I), ‚Äñg y‚Äñ ‚â§ Œµ * diam (Box.Icc I) := by
        intro y hy
        refine (hŒµ y hy).trans (mul_le_mul_of_nonneg_left ?_ h0.le)
        rw [‚Üê dist_eq_norm]
        exact dist_le_diam_of_mem I.isCompact_Icc.isBounded hy hxI
      rw [two_mul, add_mul]
      exact norm_sub_le_of_le (hŒµ _ (this _ Hl)) (hŒµ _ (this _ Hu))
  calc
    ‚Äñ(‚àè j, (I.upper j - I.lower j)) ‚Ä¢ f' (Pi.single i 1) -
            (integral (I.face i) ‚ä• (f ‚àò e (I.upper i)) BoxAdditiveMap.volume -
              integral (I.face i) ‚ä• (f ‚àò e (I.lower i)) BoxAdditiveMap.volume)‚Äñ =
        ‚Äñintegral.{0, u, u} (I.face i) ‚ä•
            (fun x : Fin n ‚Üí ‚Ñù =>
              f' (Pi.single i (I.upper i - I.lower i)) -
                (f (e (I.upper i) x) - f (e (I.lower i) x)))
            BoxAdditiveMap.volume‚Äñ := by
      rw [‚Üê integral_sub (Hi _ Hu) (Hi _ Hl), ‚Üê Box.volume_face_mul i, mul_smul, ‚Üê Box.volume_apply,
        ‚Üê BoxAdditiveMap.toSMul_apply, ‚Üê integral_const, ‚Üê BoxAdditiveMap.volume,
        ‚Üê integral_sub (integrable_const _) ((Hi _ Hu).sub (Hi _ Hl))]
      simp only [(¬∑ ‚àò ¬∑), Pi.sub_def, ‚Üê f'.map_smul, ‚Üê Pi.single_smul', smul_eq_mul, mul_one]
    _ ‚â§ (volume (I.face i : Set (Fin n ‚Üí ‚Ñù))).toReal * (2 * Œµ * c * (I.upper i - I.lower i)) := by
      refine norm_integral_le_of_le_const (fun y hy => (this y hy).trans ?_) volume
      rw [mul_assoc (2 * Œµ)]
      gcongr
      exact I.diam_Icc_le_of_distortion_le i hc
    _ = 2 * Œµ * c * ‚àè j, (I.upper j - I.lower j) := by
      rw [‚Üê Measure.toBoxAdditive_apply, Box.volume_apply, ‚Üê I.volume_face_mul i]
      ac_rfl
theorem hasIntegral_GP_pderiv (f : (Fin (n + 1) ‚Üí ‚Ñù) ‚Üí E)
    (f' : (Fin (n + 1) ‚Üí ‚Ñù) ‚Üí (Fin (n + 1) ‚Üí ‚Ñù) ‚ÜíL[‚Ñù] E) (s : Set (Fin (n + 1) ‚Üí ‚Ñù))
    (hs : s.Countable) (Hs : ‚àÄ x ‚àà s, ContinuousWithinAt f (Box.Icc I) x)
    (Hd : ‚àÄ x ‚àà (Box.Icc I) \ s, HasFDerivWithinAt f (f' x) (Box.Icc I) x) (i : Fin (n + 1)) :
    HasIntegral.{0, u, u} I GP (fun x => f' x (Pi.single i 1)) BoxAdditiveMap.volume
      (integral.{0, u, u} (I.face i) GP (fun x => f (i.insertNth (I.upper i) x))
          BoxAdditiveMap.volume -
        integral.{0, u, u} (I.face i) GP (fun x => f (i.insertNth (I.lower i) x))
          BoxAdditiveMap.volume) := by
  have Hc : ContinuousOn f (Box.Icc I) := fun x hx ‚Ü¶ by
    by_cases hxs : x ‚àà s
    exacts [Hs x hxs, (Hd x ‚ü®hx, hxs‚ü©).continuousWithinAt]
  set fI : ‚Ñù ‚Üí Box (Fin n) ‚Üí E := fun y J =>
    integral.{0, u, u} J GP (fun x => f (i.insertNth y x)) BoxAdditiveMap.volume
  set fb : Icc (I.lower i) (I.upper i) ‚Üí Fin n ‚Üí·µá·µÉ[‚Üë(I.face i)] E := fun x =>
    (integrable_of_continuousOn GP (Box.continuousOn_face_Icc Hc x.2) volume).toBoxAdditive
  set F : Fin (n + 1) ‚Üí·µá·µÉ[I] E := BoxAdditiveMap.upperSubLower I i fI fb fun x _ J => rfl
  change HasIntegral I GP (fun x => f' x (Pi.single i 1)) _ (F I)
  refine HasIntegral.of_le_Henstock_of_forall_isLittleO gp_le ?_ ?_ _ s hs ?_ ?_
  ¬∑
    exact (volume : Measure (Fin (n + 1) ‚Üí ‚Ñù)).toBoxAdditive.restrict _ le_top
  ¬∑ exact fun J => ENNReal.toReal_nonneg
  ¬∑ intro c x hx Œµ Œµ0
    have : ‚àÄ·∂† Œ¥ in ùìù[>] (0 : ‚Ñù), Œ¥ ‚àà Ioc (0 : ‚Ñù) (1 / 2) ‚àß
        (‚àÄ·µâ (y‚ÇÅ ‚àà closedBall x Œ¥ ‚à© (Box.Icc I)) (y‚ÇÇ ‚àà closedBall x Œ¥ ‚à© (Box.Icc I)),
              ‚Äñf y‚ÇÅ - f y‚ÇÇ‚Äñ ‚â§ Œµ / 2) ‚àß (2 * Œ¥) ^ (n + 1) * ‚Äñf' x (Pi.single i 1)‚Äñ ‚â§ Œµ / 2 := by
      refine .and ?_ (.and ?_ ?_)
      ¬∑ exact Ioc_mem_nhdsWithin_Ioi ‚ü®le_rfl, one_half_pos‚ü©
      ¬∑ rcases ((nhdsWithin_hasBasis nhds_basis_closedBall _).tendsto_iff nhds_basis_closedBall).1
            (Hs x hx.2) _ (half_pos <| half_pos Œµ0) with ‚ü®Œ¥‚ÇÅ, Œ¥‚ÇÅ0, hŒ¥‚ÇÅ‚ü©
        filter_upwards [Ioc_mem_nhdsWithin_Ioi ‚ü®le_rfl, Œ¥‚ÇÅ0‚ü©] with Œ¥ hŒ¥ y‚ÇÅ hy‚ÇÅ y‚ÇÇ hy‚ÇÇ
        have : closedBall x Œ¥ ‚à© (Box.Icc I) ‚äÜ closedBall x Œ¥‚ÇÅ ‚à© (Box.Icc I) := by gcongr; exact hŒ¥.2
        rw [‚Üê dist_eq_norm]
        calc
          dist (f y‚ÇÅ) (f y‚ÇÇ) ‚â§ dist (f y‚ÇÅ) (f x) + dist (f y‚ÇÇ) (f x) := dist_triangle_right _ _ _
          _ ‚â§ Œµ / 2 / 2 + Œµ / 2 / 2 := add_le_add (hŒ¥‚ÇÅ _ <| this hy‚ÇÅ) (hŒ¥‚ÇÅ _ <| this hy‚ÇÇ)
          _ = Œµ / 2 := add_halves _
      ¬∑ have : ContinuousWithinAt (fun Œ¥ : ‚Ñù => (2 * Œ¥) ^ (n + 1) * ‚Äñf' x (Pi.single i 1)‚Äñ)
            (Ioi 0) 0 := ((continuousWithinAt_id.const_mul _).pow _).mul_const _
        refine this.eventually (ge_mem_nhds ?_)
        simpa using half_pos Œµ0
    rcases this.exists with ‚ü®Œ¥, ‚ü®hŒ¥0, hŒ¥12‚ü©, hdfŒ¥, hŒ¥‚ü©
    refine ‚ü®Œ¥, hŒ¥0, fun J hJI hJŒ¥ _ _ => add_halves Œµ ‚ñ∏ ?_‚ü©
    have Hl : J.lower i ‚àà Icc (J.lower i) (J.upper i) := Set.left_mem_Icc.2 (J.lower_le_upper i)
    have Hu : J.upper i ‚àà Icc (J.lower i) (J.upper i) := Set.right_mem_Icc.2 (J.lower_le_upper i)
    have Hi : ‚àÄ x ‚àà Icc (J.lower i) (J.upper i),
        Integrable.{0, u, u} (J.face i) GP (fun y => f (i.insertNth x y))
          BoxAdditiveMap.volume := fun x hx =>
      integrable_of_continuousOn _ (Box.continuousOn_face_Icc (Hc.mono <| Box.le_iff_Icc.1 hJI) hx)
        volume
    have hJŒ¥' : Box.Icc J ‚äÜ closedBall x Œ¥ ‚à© (Box.Icc I) := subset_inter hJŒ¥ (Box.le_iff_Icc.1 hJI)
    have Hmaps : ‚àÄ z ‚àà Icc (J.lower i) (J.upper i),
        MapsTo (i.insertNth z) (Box.Icc (J.face i)) (closedBall x Œ¥ ‚à© (Box.Icc I)) := fun z hz =>
      (J.mapsTo_insertNth_face_Icc hz).mono Subset.rfl hJŒ¥'
    simp only [dist_eq_norm]; dsimp [F]
    rw [‚Üê integral_sub (Hi _ Hu) (Hi _ Hl)]
    refine (norm_sub_le _ _).trans (add_le_add ?_ ?_)
    ¬∑ simp_rw [BoxAdditiveMap.volume_apply, norm_smul, Real.norm_eq_abs, abs_prod]
      refine (mul_le_mul_of_nonneg_right ?_ <| norm_nonneg _).trans hŒ¥
      have : ‚àÄ j, |J.upper j - J.lower j| ‚â§ 2 * Œ¥ := fun j ‚Ü¶
        calc
          dist (J.upper j) (J.lower j) ‚â§ dist J.upper J.lower := dist_le_pi_dist _ _ _
          _ ‚â§ dist J.upper x + dist J.lower x := dist_triangle_right _ _ _
          _ ‚â§ Œ¥ + Œ¥ := add_le_add (hJŒ¥ J.upper_mem_Icc) (hJŒ¥ J.lower_mem_Icc)
          _ = 2 * Œ¥ := (two_mul Œ¥).symm
      calc
        ‚àè j, |J.upper j - J.lower j| ‚â§ ‚àè j : Fin (n + 1), 2 * Œ¥ :=
          prod_le_prod (fun _ _ => abs_nonneg _) fun j _ => this j
        _ = (2 * Œ¥) ^ (n + 1) := by simp
    ¬∑ refine (norm_integral_le_of_le_const (fun y hy => hdfŒ¥ _ (Hmaps _ Hu hy) _
        (Hmaps _ Hl hy)) volume).trans ?_
      refine (mul_le_mul_of_nonneg_right ?_ (half_pos Œµ0).le).trans_eq (one_mul _)
      rw [Box.coe_eq_pi, Real.volume_pi_Ioc_toReal (Box.lower_le_upper _)]
      refine prod_le_one (fun _ _ => sub_nonneg.2 <| Box.lower_le_upper _ _) fun j _ => ?_
      calc
        J.upper (i.succAbove j) - J.lower (i.succAbove j) ‚â§
            dist (J.upper (i.succAbove j)) (J.lower (i.succAbove j)) :=
          le_abs_self _
        _ ‚â§ dist J.upper J.lower := dist_le_pi_dist J.upper J.lower (i.succAbove j)
        _ ‚â§ dist J.upper x + dist J.lower x := dist_triangle_right _ _ _
        _ ‚â§ Œ¥ + Œ¥ := add_le_add (hJŒ¥ J.upper_mem_Icc) (hJŒ¥ J.lower_mem_Icc)
        _ ‚â§ 1 / 2 + 1 / 2 := by gcongr
        _ = 1 := add_halves 1
  ¬∑ intro c x hx Œµ Œµ0
    rcases exists_pos_mul_lt Œµ0 (2 * c) with ‚ü®Œµ', Œµ'0, hlt‚ü©
    rcases (nhdsWithin_hasBasis nhds_basis_closedBall _).mem_iff.1
      ((Hd x hx).isLittleO.def Œµ'0) with ‚ü®Œ¥, Œ¥0, HŒ¥‚ü©
    refine ‚ü®Œ¥, Œ¥0, fun J hle hJŒ¥ hxJ hJc => ?_‚ü©
    simp only [BoxAdditiveMap.volume_apply, Box.volume_apply, dist_eq_norm]
    refine (norm_volume_sub_integral_face_upper_sub_lower_smul_le _
      (Hc.mono <| Box.le_iff_Icc.1 hle) hxJ Œµ'0 (fun y hy => HŒ¥ ?_) (hJc rfl)).trans ?_
    ¬∑ exact ‚ü®hJŒ¥ hy, Box.le_iff_Icc.1 hle hy‚ü©
    ¬∑ rw [mul_right_comm (2 : ‚Ñù), ‚Üê Box.volume_apply]
      exact mul_le_mul_of_nonneg_right hlt.le ENNReal.toReal_nonneg
theorem hasIntegral_GP_divergence_of_forall_hasDerivWithinAt
    (f : (Fin (n + 1) ‚Üí ‚Ñù) ‚Üí Fin (n + 1) ‚Üí E)
    (f' : (Fin (n + 1) ‚Üí ‚Ñù) ‚Üí (Fin (n + 1) ‚Üí ‚Ñù) ‚ÜíL[‚Ñù] (Fin (n + 1) ‚Üí E))
    (s : Set (Fin (n + 1) ‚Üí ‚Ñù)) (hs : s.Countable)
    (Hs : ‚àÄ x ‚àà s, ContinuousWithinAt f (Box.Icc I) x)
    (Hd : ‚àÄ x ‚àà (Box.Icc I) \ s, HasFDerivWithinAt f (f' x) (Box.Icc I) x) :
    HasIntegral.{0, u, u} I GP (fun x => ‚àë i, f' x (Pi.single i 1) i) BoxAdditiveMap.volume
      (‚àë i,
        (integral.{0, u, u} (I.face i) GP (fun x => f (i.insertNth (I.upper i) x) i)
            BoxAdditiveMap.volume -
          integral.{0, u, u} (I.face i) GP (fun x => f (i.insertNth (I.lower i) x) i)
            BoxAdditiveMap.volume)) := by
  refine HasIntegral.sum fun i _ => ?_
  simp only [hasFDerivWithinAt_pi', continuousWithinAt_pi] at Hd Hs
  exact hasIntegral_GP_pderiv I _ _ s hs (fun x hx => Hs x hx i) (fun x hx => Hd x hx i) i
end BoxIntegral