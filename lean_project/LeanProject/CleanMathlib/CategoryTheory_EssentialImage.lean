import Mathlib.CategoryTheory.NatIso
import Mathlib.CategoryTheory.FullSubcategory
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
noncomputable section
namespace CategoryTheory
variable {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} {E : Type u‚ÇÉ}
  [Category.{v‚ÇÅ} C] [Category.{v‚ÇÇ} D] [Category.{v‚ÇÉ} E] {F : C ‚•§ D}
namespace Functor
def essImage (F : C ‚•§ D) : Set D := fun Y => ‚àÉ X : C, Nonempty (F.obj X ‚âÖ Y)
def essImage.witness {Y : D} (h : Y ‚àà F.essImage) : C :=
  h.choose
def essImage.getIso {Y : D} (h : Y ‚àà F.essImage) : F.obj (essImage.witness h) ‚âÖ Y :=
  Classical.choice h.choose_spec
theorem essImage.ofIso {Y Y' : D} (h : Y ‚âÖ Y') (hY : Y ‚àà essImage F) : Y' ‚àà essImage F :=
  hY.imp fun _ => Nonempty.map (¬∑ ‚â™‚â´ h)
theorem essImage.ofNatIso {F' : C ‚•§ D} (h : F ‚âÖ F') {Y : D} (hY : Y ‚àà essImage F) :
    Y ‚àà essImage F' :=
  hY.imp fun X => Nonempty.map fun t => h.symm.app X ‚â™‚â´ t
theorem essImage_eq_of_natIso {F' : C ‚•§ D} (h : F ‚âÖ F') : essImage F = essImage F' :=
  funext fun _ => propext ‚ü®essImage.ofNatIso h, essImage.ofNatIso h.symm‚ü©
theorem obj_mem_essImage (F : D ‚•§ C) (Y : D) : F.obj Y ‚àà essImage F :=
  ‚ü®Y, ‚ü®Iso.refl _‚ü©‚ü©
def EssImageSubcategory (F : C ‚•§ D) :=
  FullSubcategory F.essImage
instance : Category (EssImageSubcategory F) :=
  (inferInstance : Category.{v‚ÇÇ} (FullSubcategory _))
@[simps!]
def essImageInclusion (F : C ‚•§ D) : F.EssImageSubcategory ‚•§ D :=
  fullSubcategoryInclusion _
instance : Full (essImageInclusion F) :=
  (inferInstance : Full (fullSubcategoryInclusion _))
instance : Faithful (essImageInclusion F) :=
  (inferInstance : Faithful (fullSubcategoryInclusion _))
lemma essImage_ext (F : C ‚•§ D) {X Y : F.EssImageSubcategory} (f g : X ‚ü∂ Y)
    (h : F.essImageInclusion.map f = F.essImageInclusion.map g) : f = g := by
  simpa using h
@[simps!]
def toEssImage (F : C ‚•§ D) : C ‚•§ F.EssImageSubcategory :=
  FullSubcategory.lift _ F (obj_mem_essImage _)
@[simps!]
def toEssImageCompEssentialImageInclusion (F : C ‚•§ D) : F.toEssImage ‚ãô F.essImageInclusion ‚âÖ F :=
  FullSubcategory.lift_comp_inclusion _ _ _
class EssSurj (F : C ‚•§ D) : Prop where
  mem_essImage (Y : D) : Y ‚àà F.essImage
instance EssSurj.toEssImage : EssSurj F.toEssImage where
  mem_essImage := fun ‚ü®_, hY‚ü© =>
    ‚ü®_, ‚ü®‚ü®_, _, hY.getIso.hom_inv_id, hY.getIso.inv_hom_id‚ü©‚ü©‚ü©
theorem essSurj_of_surj (h : Function.Surjective F.obj) : EssSurj F where
  mem_essImage Y := by
    obtain ‚ü®X, rfl‚ü© := h Y
    apply obj_mem_essImage
variable (F)
variable [F.EssSurj]
def objPreimage (Y : D) : C :=
  essImage.witness (@EssSurj.mem_essImage _ _ _ _ F _ Y)
def objObjPreimageIso (Y : D) : F.obj (F.objPreimage Y) ‚âÖ Y :=
  Functor.essImage.getIso _
instance Faithful.toEssImage (F : C ‚•§ D) [Faithful F] : Faithful F.toEssImage :=
  Faithful.of_comp_iso F.toEssImageCompEssentialImageInclusion
instance Full.toEssImage (F : C ‚•§ D) [Full F] : Full F.toEssImage :=
  Full.of_comp_faithful_iso F.toEssImageCompEssentialImageInclusion
instance instEssSurjId : EssSurj (ùü≠ C) where
  mem_essImage Y := ‚ü®Y, ‚ü®Iso.refl _‚ü©‚ü©
lemma essSurj_of_iso {F G : C ‚•§ D} [EssSurj F] (Œ± : F ‚âÖ G) : EssSurj G where
  mem_essImage Y := Functor.essImage.ofNatIso Œ± (EssSurj.mem_essImage Y)
instance essSurj_comp (F : C ‚•§ D) (G : D ‚•§ E) [F.EssSurj] [G.EssSurj] :
    (F ‚ãô G).EssSurj where
  mem_essImage Z := ‚ü®_, ‚ü®G.mapIso (F.objObjPreimageIso _) ‚â™‚â´ G.objObjPreimageIso Z‚ü©‚ü©
lemma essSurj_of_comp_fully_faithful (F : C ‚•§ D) (G : D ‚•§ E) [(F ‚ãô G).EssSurj]
    [G.Faithful] [G.Full] : F.EssSurj where
  mem_essImage X := ‚ü®_, ‚ü®G.preimageIso ((F ‚ãô G).objObjPreimageIso (G.obj X))‚ü©‚ü©
end Functor
@[deprecated (since := "2024-04-06")] alias EssSurj := Functor.EssSurj
@[deprecated (since := "2024-04-06")] alias Iso.map_essSurj := Functor.essSurj_of_iso
end CategoryTheory