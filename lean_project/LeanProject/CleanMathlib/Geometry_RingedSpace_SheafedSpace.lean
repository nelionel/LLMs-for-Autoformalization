import Mathlib.Geometry.RingedSpace.PresheafedSpace.HasColimits
import Mathlib.Geometry.RingedSpace.Stalks
import Mathlib.Topology.Sheaves.Functors
open CategoryTheory TopCat TopologicalSpace Opposite CategoryTheory.Limits CategoryTheory.Category
  CategoryTheory.Functor Topology
universe u v
variable (C : Type u) [Category.{v} C]
namespace AlgebraicGeometry
structure SheafedSpace extends PresheafedSpace C where
  IsSheaf : presheaf.IsSheaf
variable {C}
namespace SheafedSpace
instance coeCarrier : CoeOut (SheafedSpace C) TopCat where coe X := X.carrier
instance coeSort : CoeSort (SheafedSpace C) Type* where
  coe X := X.1
def sheaf (X : SheafedSpace C) : Sheaf C (X : TopCat) :=
  ‚ü®X.presheaf, X.IsSheaf‚ü©
theorem mk_coe (carrier) (presheaf) (h) :
    (({ carrier
        presheaf
        IsSheaf := h } : SheafedSpace C) : TopCat) = carrier :=
  rfl
instance (X : SheafedSpace C) : TopologicalSpace X :=
  X.carrier.str
def unit (X : TopCat) : SheafedSpace (Discrete Unit) :=
  { @PresheafedSpace.const (Discrete Unit) _ X ‚ü®‚ü®‚ü©‚ü© with IsSheaf := Presheaf.isSheaf_unit _ }
instance : Inhabited (SheafedSpace (Discrete Unit)) :=
  ‚ü®unit (TopCat.of PEmpty)‚ü©
instance : Category (SheafedSpace C) :=
  show Category (InducedCategory (PresheafedSpace C) SheafedSpace.toPresheafedSpace) by
    infer_instance
@[ext (iff := false)]
theorem ext {X Y : SheafedSpace C} (Œ± Œ≤ : X ‚ü∂ Y) (w : Œ±.base = Œ≤.base)
    (h : Œ±.c ‚â´ whiskerRight (eqToHom (by rw [w])) _ = Œ≤.c) : Œ± = Œ≤ :=
  PresheafedSpace.ext Œ± Œ≤ w h
@[simps]
def isoMk {X Y : SheafedSpace C} (e : X.toPresheafedSpace ‚âÖ Y.toPresheafedSpace) : X ‚âÖ Y where
  hom := e.hom
  inv := e.inv
  hom_inv_id := e.hom_inv_id
  inv_hom_id := e.inv_hom_id
@[simps! obj map]
def forgetToPresheafedSpace : SheafedSpace C ‚•§ PresheafedSpace C :=
  inducedFunctor _
instance forgetToPresheafedSpace_full : (forgetToPresheafedSpace (C := C)).Full where
  map_surjective f := ‚ü®f, rfl‚ü©
instance forgetToPresheafedSpace_faithful : (forgetToPresheafedSpace (C := C)).Faithful where
instance is_presheafedSpace_iso {X Y : SheafedSpace C} (f : X ‚ü∂ Y) [IsIso f] :
    @IsIso (PresheafedSpace C) _ _ _ f :=
  SheafedSpace.forgetToPresheafedSpace.map_isIso f
section
attribute [local simp] id comp
@[simp]
theorem id_base (X : SheafedSpace C) : (ùüô X : X ‚ü∂ X).base = ùüô (X : TopCat) :=
  rfl
theorem id_c (X : SheafedSpace C) :
    (ùüô X : X ‚ü∂ X).c = eqToHom (Presheaf.Pushforward.id_eq X.presheaf).symm :=
  rfl
@[simp]
theorem id_c_app (X : SheafedSpace C) (U) :
    (ùüô X : X ‚ü∂ X).c.app U = ùüô _ := rfl
@[simp]
theorem comp_base {X Y Z : SheafedSpace C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).base = f.base ‚â´ g.base :=
  rfl
@[simp]
theorem comp_c_app {X Y Z : SheafedSpace C} (Œ± : X ‚ü∂ Y) (Œ≤ : Y ‚ü∂ Z) (U) :
    (Œ± ‚â´ Œ≤).c.app U = Œ≤.c.app U ‚â´ Œ±.c.app (op ((Opens.map Œ≤.base).obj (unop U))) :=
  rfl
theorem comp_c_app' {X Y Z : SheafedSpace C} (Œ± : X ‚ü∂ Y) (Œ≤ : Y ‚ü∂ Z) (U) :
    (Œ± ‚â´ Œ≤).c.app (op U) = Œ≤.c.app (op U) ‚â´ Œ±.c.app (op ((Opens.map Œ≤.base).obj U)) :=
  rfl
theorem congr_app {X Y : SheafedSpace C} {Œ± Œ≤ : X ‚ü∂ Y} (h : Œ± = Œ≤) (U) :
    Œ±.c.app U = Œ≤.c.app U ‚â´ X.presheaf.map (eqToHom (by subst h; rfl)) :=
  PresheafedSpace.congr_app h U
variable (C)
def forget : SheafedSpace C ‚•§ TopCat where
  obj X := (X : TopCat)
  map {_ _} f := f.base
end
open TopCat.Presheaf
def restrict {U : TopCat} (X : SheafedSpace C) {f : U ‚ü∂ (X : TopCat)} (h : IsOpenEmbedding f) :
    SheafedSpace C :=
  { X.toPresheafedSpace.restrict h with IsSheaf := isSheaf_of_isOpenEmbedding h X.IsSheaf }
@[simps!]
def ofRestrict {U : TopCat} (X : SheafedSpace C) {f : U ‚ü∂ (X : TopCat)}
    (h : IsOpenEmbedding f) : X.restrict h ‚ü∂ X := X.toPresheafedSpace.ofRestrict h
@[simps! hom inv]
def restrictTopIso (X : SheafedSpace C) : X.restrict (Opens.isOpenEmbedding ‚ä§) ‚âÖ X :=
  isoMk (X.toPresheafedSpace.restrictTopIso)
def Œì : (SheafedSpace C)·µí·µñ ‚•§ C :=
  forgetToPresheafedSpace.op ‚ãô PresheafedSpace.Œì
theorem Œì_def : (Œì : _ ‚•§ C) = forgetToPresheafedSpace.op ‚ãô PresheafedSpace.Œì :=
  rfl
@[simp]
theorem Œì_obj (X : (SheafedSpace C)·µí·µñ) : Œì.obj X = (unop X).presheaf.obj (op ‚ä§) :=
  rfl
theorem Œì_obj_op (X : SheafedSpace C) : Œì.obj (op X) = X.presheaf.obj (op ‚ä§) :=
  rfl
@[simp]
theorem Œì_map {X Y : (SheafedSpace C)·µí·µñ} (f : X ‚ü∂ Y) : Œì.map f = f.unop.c.app (op ‚ä§) :=
  rfl
theorem Œì_map_op {X Y : SheafedSpace C} (f : X ‚ü∂ Y) : Œì.map f.op = f.c.app (op ‚ä§) :=
  rfl
noncomputable instance [HasLimits C] :
    CreatesColimits (forgetToPresheafedSpace : SheafedSpace C ‚•§ _) :=
  ‚ü®fun {_ _} =>
    ‚ü®fun {K} =>
      createsColimitOfFullyFaithfulOfIso
        ‚ü®(PresheafedSpace.colimitCocone (K ‚ãô forgetToPresheafedSpace)).pt,
          limit_isSheaf _ fun j => Sheaf.pushforward_sheaf_of_sheaf _ (K.obj (unop j)).2‚ü©
        (colimit.isoColimitCocone ‚ü®_, PresheafedSpace.colimitCoconeIsColimit _‚ü©).symm‚ü©‚ü©
instance [HasLimits C] : HasColimits.{v} (SheafedSpace C) :=
  hasColimits_of_hasColimits_createsColimits forgetToPresheafedSpace
noncomputable instance [HasLimits C] : PreservesColimits (forget.{_, _, v} C) :=
  Limits.comp_preservesColimits forgetToPresheafedSpace (PresheafedSpace.forget C)
section ConcreteCategory
variable [ConcreteCategory.{v} C] [HasColimits C] [HasLimits C]
variable  [PreservesLimits (CategoryTheory.forget C)]
variable [PreservesFilteredColimits (CategoryTheory.forget C)]
variable [(CategoryTheory.forget C).ReflectsIsomorphisms]
attribute [local instance] ConcreteCategory.instFunLike in
lemma hom_stalk_ext {X Y : SheafedSpace C} (f g : X ‚ü∂ Y) (h : f.base = g.base)
    (h' : ‚àÄ x, f.stalkMap x = (Y.presheaf.stalkCongr (h ‚ñ∏ rfl)).hom ‚â´ g.stalkMap x) :
    f = g := by
  obtain ‚ü®f, fc‚ü© := f
  obtain ‚ü®g, gc‚ü© := g
  obtain rfl : f = g := h
  congr
  ext U s
  refine section_ext X.sheaf _ _ _ fun x hx ‚Ü¶
    show X.presheaf.germ _ x _ _ = X.presheaf.germ _ x _ _ from ?_
  erw [‚Üê PresheafedSpace.stalkMap_germ_apply ‚ü®f, fc‚ü©, ‚Üê PresheafedSpace.stalkMap_germ_apply ‚ü®f, gc‚ü©]
  simp [h']
lemma mono_of_base_injective_of_stalk_epi {X Y : SheafedSpace C} (f : X ‚ü∂ Y)
    (h‚ÇÅ : Function.Injective f.base)
    (h‚ÇÇ : ‚àÄ x, Epi (f.stalkMap x)) : Mono f := by
  constructor
  intro Z ‚ü®g, gc‚ü© ‚ü®h, hc‚ü© e
  obtain rfl : g = h := ConcreteCategory.hom_ext _ _ fun x ‚Ü¶ h‚ÇÅ congr(($e).base x)
  refine SheafedSpace.hom_stalk_ext ‚ü®g, gc‚ü© ‚ü®g, hc‚ü© rfl fun x ‚Ü¶ ?_
  rw [‚Üê cancel_epi (f.stalkMap (g x)), stalkCongr_hom, stalkSpecializes_refl, Category.id_comp,
    ‚Üê PresheafedSpace.stalkMap.comp ‚ü®g, gc‚ü© f, ‚Üê PresheafedSpace.stalkMap.comp ‚ü®g, hc‚ü© f]
  congr 1
end ConcreteCategory
end SheafedSpace
end AlgebraicGeometry