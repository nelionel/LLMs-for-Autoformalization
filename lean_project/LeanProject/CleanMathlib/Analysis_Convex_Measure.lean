import Mathlib.Analysis.Convex.Topology
import Mathlib.Analysis.Normed.Affine.AddTorsorBases
import Mathlib.MeasureTheory.Measure.Lebesgue.EqHaar
open MeasureTheory MeasureTheory.Measure Set Metric Filter Bornology
open Module (finrank)
open scoped Topology NNReal ENNReal
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [MeasurableSpace E] [BorelSpace E]
  [FiniteDimensional ‚Ñù E] (Œº : Measure E) [IsAddHaarMeasure Œº] {s : Set E}
namespace Convex
theorem addHaar_frontier (hs : Convex ‚Ñù s) : Œº (frontier s) = 0 := by
  cases' ne_or_eq (affineSpan ‚Ñù s) ‚ä§ with hspan hspan
  ¬∑ refine measure_mono_null ?_ (addHaar_affineSubspace _ _ hspan)
    exact frontier_subset_closure.trans
      (closure_minimal (subset_affineSpan _ _) (affineSpan ‚Ñù s).closed_of_finiteDimensional)
  rw [‚Üê hs.interior_nonempty_iff_affineSpan_eq_top] at hspan
  rcases hspan with ‚ü®x, hx‚ü©
  suffices H : ‚àÄ t : Set E, Convex ‚Ñù t ‚Üí x ‚àà interior t ‚Üí IsBounded t ‚Üí Œº (frontier t) = 0 by
    let B : ‚Ñï ‚Üí Set E := fun n => ball x (n + 1)
    have : Œº (‚ãÉ n : ‚Ñï, frontier (s ‚à© B n)) = 0 := by
      refine measure_iUnion_null fun n =>
        H _ (hs.inter (convex_ball _ _)) ?_ (isBounded_ball.subset inter_subset_right)
      rw [interior_inter, isOpen_ball.interior_eq]
      exact ‚ü®hx, mem_ball_self (add_pos_of_nonneg_of_pos n.cast_nonneg zero_lt_one)‚ü©
    refine measure_mono_null (fun y hy => ?_) this; clear this
    set N : ‚Ñï := ‚åädist y x‚åã‚Çä
    refine mem_iUnion.2 ‚ü®N, ?_‚ü©
    have hN : y ‚àà B N := by simp [B, N, Nat.lt_floor_add_one]
    suffices y ‚àà frontier (s ‚à© B N) ‚à© B N from this.1
    rw [frontier_inter_open_inter isOpen_ball]
    exact ‚ü®hy, hN‚ü©
  intro s hs hx hb
  replace hb : Œº (interior s) ‚â† ‚àû := (hb.subset interior_subset).measure_lt_top.ne
  suffices Œº (closure s) ‚â§ Œº (interior s) by
    rwa [frontier, measure_diff interior_subset_closure isOpen_interior.nullMeasurableSet hb,
      tsub_eq_zero_iff_le]
  set d : ‚Ñï := Module.finrank ‚Ñù E
  have : ‚àÄ r : ‚Ñù‚â•0, 1 < r ‚Üí Œº (closure s) ‚â§ ‚Üë(r ^ d) * Œº (interior s) := fun r hr ‚Ü¶ by
    refine (measure_mono <|
      hs.closure_subset_image_homothety_interior_of_one_lt hx r hr).trans_eq ?_
    rw [addHaar_image_homothety, ‚Üê NNReal.coe_pow, NNReal.abs_eq, ENNReal.ofReal_coe_nnreal]
  have : ‚àÄ·∂† (r : ‚Ñù‚â•0) in ùìù[>] 1, Œº (closure s) ‚â§ ‚Üë(r ^ d) * Œº (interior s) :=
    mem_of_superset self_mem_nhdsWithin this
  refine ge_of_tendsto ?_ this
  refine (((ENNReal.continuous_mul_const hb).comp
    (ENNReal.continuous_coe.comp (continuous_pow d))).tendsto' _ _ ?_).mono_left nhdsWithin_le_nhds
  simp
protected theorem nullMeasurableSet (hs : Convex ‚Ñù s) : NullMeasurableSet s Œº :=
  nullMeasurableSet_of_null_frontier (hs.addHaar_frontier Œº)
end Convex