import Mathlib.Combinatorics.SimpleGraph.Triangle.Basic
open Finset Function Sum3
variable {Œ± Œ≤ Œ≥ ùïú : Type*} [LinearOrderedField ùïú] {t : Finset (Œ± √ó Œ≤ √ó Œ≥)} {a a' : Œ±} {b b' : Œ≤}
  {c c' : Œ≥} {x : Œ± √ó Œ≤ √ó Œ≥}
namespace SimpleGraph
namespace TripartiteFromTriangles
@[mk_iff] inductive Rel (t : Finset (Œ± √ó Œ≤ √ó Œ≥)) : Œ± ‚äï Œ≤ ‚äï Œ≥ ‚Üí Œ± ‚äï Œ≤ ‚äï Œ≥ ‚Üí Prop
| in‚ÇÄ‚ÇÅ ‚¶Éa b c‚¶Ñ : (a, b, c) ‚àà t ‚Üí Rel t (in‚ÇÄ a) (in‚ÇÅ b)
| in‚ÇÅ‚ÇÄ ‚¶Éa b c‚¶Ñ : (a, b, c) ‚àà t ‚Üí Rel t (in‚ÇÅ b) (in‚ÇÄ a)
| in‚ÇÄ‚ÇÇ ‚¶Éa b c‚¶Ñ : (a, b, c) ‚àà t ‚Üí Rel t (in‚ÇÄ a) (in‚ÇÇ c)
| in‚ÇÇ‚ÇÄ ‚¶Éa b c‚¶Ñ : (a, b, c) ‚àà t ‚Üí Rel t (in‚ÇÇ c) (in‚ÇÄ a)
| in‚ÇÅ‚ÇÇ ‚¶Éa b c‚¶Ñ : (a, b, c) ‚àà t ‚Üí Rel t (in‚ÇÅ b) (in‚ÇÇ c)
| in‚ÇÇ‚ÇÅ ‚¶Éa b c‚¶Ñ : (a, b, c) ‚àà t ‚Üí Rel t (in‚ÇÇ c) (in‚ÇÅ b)
open Rel
lemma rel_irrefl : ‚àÄ x, ¬¨ Rel t x x := fun _x hx ‚Ü¶ nomatch hx
lemma rel_symm : Symmetric (Rel t) := fun x y h ‚Ü¶  by cases h <;> constructor <;> assumption
def graph (t : Finset (Œ± √ó Œ≤ √ó Œ≥)) : SimpleGraph (Œ± ‚äï Œ≤ ‚äï Œ≥) := ‚ü®Rel t, rel_symm, rel_irrefl‚ü©
namespace Graph
@[simp] lemma not_in‚ÇÄ‚ÇÄ : ¬¨ (graph t).Adj (in‚ÇÄ a) (in‚ÇÄ a') := fun h ‚Ü¶ nomatch h
@[simp] lemma not_in‚ÇÅ‚ÇÅ : ¬¨ (graph t).Adj (in‚ÇÅ b) (in‚ÇÅ b') := fun h ‚Ü¶ nomatch h
@[simp] lemma not_in‚ÇÇ‚ÇÇ : ¬¨ (graph t).Adj (in‚ÇÇ c) (in‚ÇÇ c') := fun h ‚Ü¶ nomatch h
@[simp] lemma in‚ÇÄ‚ÇÅ_iff : (graph t).Adj (in‚ÇÄ a) (in‚ÇÅ b) ‚Üî ‚àÉ c, (a, b, c) ‚àà t :=
  ‚ü®by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫‚ü©, fun ‚ü®_, h‚ü© ‚Ü¶ in‚ÇÄ‚ÇÅ h‚ü©
@[simp] lemma in‚ÇÅ‚ÇÄ_iff : (graph t).Adj (in‚ÇÅ b) (in‚ÇÄ a) ‚Üî ‚àÉ c, (a, b, c) ‚àà t :=
  ‚ü®by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫‚ü©, fun ‚ü®_, h‚ü© ‚Ü¶ in‚ÇÅ‚ÇÄ h‚ü©
@[simp] lemma in‚ÇÄ‚ÇÇ_iff : (graph t).Adj (in‚ÇÄ a) (in‚ÇÇ c) ‚Üî ‚àÉ b, (a, b, c) ‚àà t :=
  ‚ü®by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫‚ü©, fun ‚ü®_, h‚ü© ‚Ü¶ in‚ÇÄ‚ÇÇ h‚ü©
@[simp] lemma in‚ÇÇ‚ÇÄ_iff : (graph t).Adj (in‚ÇÇ c) (in‚ÇÄ a) ‚Üî ‚àÉ b, (a, b, c) ‚àà t :=
  ‚ü®by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫‚ü©, fun ‚ü®_, h‚ü© ‚Ü¶ in‚ÇÇ‚ÇÄ h‚ü©
@[simp] lemma in‚ÇÅ‚ÇÇ_iff : (graph t).Adj (in‚ÇÅ b) (in‚ÇÇ c) ‚Üî ‚àÉ a, (a, b, c) ‚àà t :=
  ‚ü®by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫‚ü©, fun ‚ü®_, h‚ü© ‚Ü¶ in‚ÇÅ‚ÇÇ h‚ü©
@[simp] lemma in‚ÇÇ‚ÇÅ_iff : (graph t).Adj (in‚ÇÇ c) (in‚ÇÅ b) ‚Üî ‚àÉ a, (a, b, c) ‚àà t :=
  ‚ü®by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫‚ü©, fun ‚ü®_, h‚ü© ‚Ü¶ in‚ÇÇ‚ÇÅ h‚ü©
lemma in‚ÇÄ‚ÇÅ_iff' :
    (graph t).Adj (in‚ÇÄ a) (in‚ÇÅ b) ‚Üî ‚àÉ x : Œ± √ó Œ≤ √ó Œ≥, x ‚àà t ‚àß x.1 = a ‚àß x.2.1 = b where
  mp := by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫, by simp‚ü©
  mpr := by rintro ‚ü®‚ü®a, b, c‚ü©, h, rfl, rfl‚ü©; constructor; assumption
lemma in‚ÇÅ‚ÇÄ_iff' :
    (graph t).Adj (in‚ÇÅ b) (in‚ÇÄ a) ‚Üî ‚àÉ x : Œ± √ó Œ≤ √ó Œ≥, x ‚àà t ‚àß x.2.1 = b ‚àß x.1 = a where
  mp := by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫, by simp‚ü©
  mpr := by rintro ‚ü®‚ü®a, b, c‚ü©, h, rfl, rfl‚ü©; constructor; assumption
lemma in‚ÇÄ‚ÇÇ_iff' :
    (graph t).Adj (in‚ÇÄ a) (in‚ÇÇ c) ‚Üî ‚àÉ x : Œ± √ó Œ≤ √ó Œ≥, x ‚àà t ‚àß x.1 = a ‚àß x.2.2 = c where
  mp := by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫, by simp‚ü©
  mpr := by rintro ‚ü®‚ü®a, b, c‚ü©, h, rfl, rfl‚ü©; constructor; assumption
lemma in‚ÇÇ‚ÇÄ_iff' :
    (graph t).Adj (in‚ÇÇ c) (in‚ÇÄ a) ‚Üî ‚àÉ x : Œ± √ó Œ≤ √ó Œ≥, x ‚àà t ‚àß x.2.2 = c ‚àß x.1 = a where
  mp := by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫, by simp‚ü©
  mpr := by rintro ‚ü®‚ü®a, b, c‚ü©, h, rfl, rfl‚ü©; constructor; assumption
lemma in‚ÇÅ‚ÇÇ_iff' :
    (graph t).Adj (in‚ÇÅ b) (in‚ÇÇ c) ‚Üî ‚àÉ x : Œ± √ó Œ≤ √ó Œ≥, x ‚àà t ‚àß x.2.1 = b ‚àß x.2.2 = c where
  mp := by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫, by simp‚ü©
  mpr := by rintro ‚ü®‚ü®a, b, c‚ü©, h, rfl, rfl‚ü©; constructor; assumption
lemma in‚ÇÇ‚ÇÅ_iff' :
    (graph t).Adj (in‚ÇÇ c) (in‚ÇÅ b) ‚Üî ‚àÉ x : Œ± √ó Œ≤ √ó Œ≥, x ‚àà t ‚àß x.2.2 = c ‚àß x.2.1 = b where
  mp := by rintro ‚ü®‚ü©; exact ‚ü®_, ‚Äπ_‚Ä∫, by simp‚ü©
  mpr := by rintro ‚ü®‚ü®a, b, c‚ü©, h, rfl, rfl‚ü©; constructor; assumption
end Graph
open Graph
class ExplicitDisjoint (t : Finset (Œ± √ó Œ≤ √ó Œ≥)) : Prop where
  inj‚ÇÄ : ‚àÄ ‚¶Éa b c a'‚¶Ñ, (a, b, c) ‚àà t ‚Üí (a', b, c) ‚àà t ‚Üí a = a'
  inj‚ÇÅ : ‚àÄ ‚¶Éa b c b'‚¶Ñ, (a, b, c) ‚àà t ‚Üí (a, b', c) ‚àà t ‚Üí b = b'
  inj‚ÇÇ : ‚àÄ ‚¶Éa b c c'‚¶Ñ, (a, b, c) ‚àà t ‚Üí (a, b, c') ‚àà t ‚Üí c = c'
class NoAccidental (t : Finset (Œ± √ó Œ≤ √ó Œ≥)) : Prop where
  eq_or_eq_or_eq : ‚àÄ ‚¶Éa a' b b' c c'‚¶Ñ, (a', b, c) ‚àà t ‚Üí (a, b', c) ‚àà t ‚Üí (a, b, c') ‚àà t ‚Üí
    a = a' ‚à® b = b' ‚à® c = c'
section DecidableEq
variable [DecidableEq Œ±] [DecidableEq Œ≤] [DecidableEq Œ≥]
instance graph.instDecidableRelAdj : DecidableRel (graph t).Adj
  | in‚ÇÄ _a, in‚ÇÄ _a' => Decidable.isFalse not_in‚ÇÄ‚ÇÄ
  | in‚ÇÄ _a, in‚ÇÅ _b' => decidable_of_iff' _ in‚ÇÄ‚ÇÅ_iff'
  | in‚ÇÄ _a, in‚ÇÇ _c' => decidable_of_iff' _ in‚ÇÄ‚ÇÇ_iff'
  | in‚ÇÅ _b, in‚ÇÄ _a' => decidable_of_iff' _ in‚ÇÅ‚ÇÄ_iff'
  | in‚ÇÅ _b, in‚ÇÅ _b' => Decidable.isFalse not_in‚ÇÅ‚ÇÅ
  | in‚ÇÅ _b, in‚ÇÇ _b' => decidable_of_iff' _ in‚ÇÅ‚ÇÇ_iff'
  | in‚ÇÇ _c, in‚ÇÄ _a' => decidable_of_iff' _ in‚ÇÇ‚ÇÄ_iff'
  | in‚ÇÇ _c, in‚ÇÅ _b' => decidable_of_iff' _ in‚ÇÇ‚ÇÅ_iff'
  | in‚ÇÇ _c, in‚ÇÇ _b' => Decidable.isFalse not_in‚ÇÇ‚ÇÇ
 lemma graph_triple ‚¶Éx y z‚¶Ñ :
  (graph t).Adj x y ‚Üí (graph t).Adj x z ‚Üí (graph t).Adj y z ‚Üí ‚àÉ a b c,
    ({in‚ÇÄ a, in‚ÇÅ b, in‚ÇÇ c} : Finset (Œ± ‚äï Œ≤ ‚äï Œ≥)) = {x, y, z} ‚àß (graph t).Adj (in‚ÇÄ a) (in‚ÇÅ b) ‚àß
      (graph t).Adj (in‚ÇÄ a) (in‚ÇÇ c) ‚àß (graph t).Adj (in‚ÇÅ b) (in‚ÇÇ c) := by
  rintro (_ | _ | _) (_ | _ | _) (_ | _ | _) <;>
    refine ‚ü®_, _, _, by ext; simp only [Finset.mem_insert, Finset.mem_singleton]; try tauto,
      ?_, ?_, ?_‚ü© <;> constructor <;> assumption
@[simps] def toTriangle : Œ± √ó Œ≤ √ó Œ≥ ‚Ü™ Finset (Œ± ‚äï Œ≤ ‚äï Œ≥) where
  toFun x := {in‚ÇÄ x.1, in‚ÇÅ x.2.1, in‚ÇÇ x.2.2}
  inj' := fun ‚ü®a, b, c‚ü© ‚ü®a', b', c'‚ü© ‚Ü¶ by simpa only [Finset.Subset.antisymm_iff, Finset.subset_iff,
    mem_insert, mem_singleton, forall_eq_or_imp, forall_eq, Prod.mk.inj_iff, or_false, false_or,
    in‚ÇÄ, in‚ÇÅ, in‚ÇÇ, Sum.inl.inj_iff, Sum.inr.inj_iff, reduceCtorEq] using And.left
lemma toTriangle_is3Clique (hx : x ‚àà t) : (graph t).IsNClique 3 (toTriangle x) := by
  simp only [toTriangle_apply, is3Clique_triple_iff, in‚ÇÄ‚ÇÅ_iff, in‚ÇÄ‚ÇÇ_iff, in‚ÇÅ‚ÇÇ_iff]
  exact ‚ü®‚ü®_, hx‚ü©, ‚ü®_, hx‚ü©, _, hx‚ü©
lemma exists_mem_toTriangle {x y : Œ± ‚äï Œ≤ ‚äï Œ≥} (hxy : (graph t).Adj x y) :
    ‚àÉ z ‚àà t, x ‚àà toTriangle z ‚àß y ‚àà toTriangle z := by cases hxy <;> exact ‚ü®_, ‚Äπ_‚Ä∫, by simp‚ü©
nonrec lemma is3Clique_iff [NoAccidental t] {s : Finset (Œ± ‚äï Œ≤ ‚äï Œ≥)} :
    (graph t).IsNClique 3 s ‚Üî ‚àÉ x, x ‚àà t ‚àß toTriangle x = s := by
  refine ‚ü®fun h ‚Ü¶ ?_, ?_‚ü©
  ¬∑ rw [is3Clique_iff] at h
    obtain ‚ü®x, y, z, hxy, hxz, hyz, rfl‚ü© := h
    obtain ‚ü®a, b, c, habc, hab, hac, hbc‚ü© := graph_triple hxy hxz hyz
    refine ‚ü®(a, b, c), ?_, habc‚ü©
    obtain ‚ü®c', hc'‚ü© := in‚ÇÄ‚ÇÅ_iff.1 hab
    obtain ‚ü®b', hb'‚ü© := in‚ÇÄ‚ÇÇ_iff.1 hac
    obtain ‚ü®a', ha'‚ü© := in‚ÇÅ‚ÇÇ_iff.1 hbc
    obtain rfl | rfl | rfl := NoAccidental.eq_or_eq_or_eq ha' hb' hc' <;> assumption
  ¬∑ rintro ‚ü®x, hx, rfl‚ü©
    exact toTriangle_is3Clique hx
lemma toTriangle_surjOn [NoAccidental t] :
    (t : Set (Œ± √ó Œ≤ √ó Œ≥)).SurjOn toTriangle ((graph t).cliqueSet 3) := fun _ ‚Ü¶ is3Clique_iff.1
variable (t)
lemma map_toTriangle_disjoint [ExplicitDisjoint t] :
    (t.map toTriangle : Set (Finset (Œ± ‚äï Œ≤ ‚äï Œ≥))).Pairwise
      fun x y ‚Ü¶ (x ‚à© y : Set (Œ± ‚äï Œ≤ ‚äï Œ≥)).Subsingleton := by
  intro
  simp only [Finset.coe_map, Set.mem_image, Finset.mem_coe, Prod.exists, Ne,
    forall_exists_index, and_imp]
  rintro a b c habc rfl e x y z hxyz rfl h'
  have := ne_of_apply_ne _ h'
  simp only [Ne, Prod.mk.inj_iff, not_and] at this
  simp only [toTriangle_apply, in‚ÇÄ, in‚ÇÅ, in‚ÇÇ, Set.mem_inter_iff, mem_insert, mem_singleton,
    mem_coe, and_imp, Sum.forall, or_false, forall_eq, false_or, eq_self_iff_true, imp_true_iff,
    true_and, and_true, Set.Subsingleton]
  suffices ¬¨ (a = x ‚àß b = y) ‚àß ¬¨ (a = x ‚àß c = z) ‚àß ¬¨ (b = y ‚àß c = z) by aesop
  refine ‚ü®?_, ?_, ?_‚ü©
  ¬∑ rintro ‚ü®rfl, rfl‚ü©
    exact this rfl rfl (ExplicitDisjoint.inj‚ÇÇ habc hxyz)
  ¬∑ rintro ‚ü®rfl, rfl‚ü©
    exact this rfl (ExplicitDisjoint.inj‚ÇÅ habc hxyz) rfl
  ¬∑ rintro ‚ü®rfl, rfl‚ü©
    exact this (ExplicitDisjoint.inj‚ÇÄ habc hxyz) rfl rfl
lemma cliqueSet_eq_image [NoAccidental t] : (graph t).cliqueSet 3 = toTriangle '' t := by
  ext; exact is3Clique_iff
section Fintype
variable [Fintype Œ±] [Fintype Œ≤] [Fintype Œ≥]
lemma cliqueFinset_eq_image [NoAccidental t] : (graph t).cliqueFinset 3 = t.image toTriangle :=
  coe_injective <| by push_cast; exact cliqueSet_eq_image _
lemma cliqueFinset_eq_map [NoAccidental t] : (graph t).cliqueFinset 3 = t.map toTriangle := by
  simp [cliqueFinset_eq_image, map_eq_image]
@[simp] lemma card_triangles [NoAccidental t] : #((graph t).cliqueFinset 3) = #t := by
  rw [cliqueFinset_eq_map, card_map]
lemma farFromTriangleFree [ExplicitDisjoint t] {Œµ : ùïú}
    (ht : Œµ * ((Fintype.card Œ± + Fintype.card Œ≤ + Fintype.card Œ≥) ^ 2 : ‚Ñï) ‚â§ #t) :
    (graph t).FarFromTriangleFree Œµ :=
  farFromTriangleFree_of_disjoint_triangles (t.map toTriangle)
    (map_subset_iff_subset_preimage.2 fun x hx ‚Ü¶ by simpa using toTriangle_is3Clique hx)
    (map_toTriangle_disjoint t) <| by simpa [add_assoc] using ht
end Fintype
end DecidableEq
variable (t)
lemma locallyLinear [ExplicitDisjoint t] [NoAccidental t] : (graph t).LocallyLinear := by
  classical
  refine ‚ü®?_, fun x y hxy ‚Ü¶ ?_‚ü©
  ¬∑ unfold EdgeDisjointTriangles
    convert map_toTriangle_disjoint t
    rw [cliqueSet_eq_image, coe_map]
  ¬∑ obtain ‚ü®z, hz, hxy‚ü© := exists_mem_toTriangle hxy
    exact ‚ü®_, toTriangle_is3Clique hz, hxy‚ü©
end TripartiteFromTriangles
end SimpleGraph