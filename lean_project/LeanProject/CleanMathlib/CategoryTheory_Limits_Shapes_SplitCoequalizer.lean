import Mathlib.CategoryTheory.Limits.Shapes.Equalizers
namespace CategoryTheory
universe v v‚ÇÇ u u‚ÇÇ
variable {C : Type u} [Category.{v} C]
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
variable (G : C ‚•§ D)
variable {X Y : C} (f g : X ‚ü∂ Y)
structure IsSplitCoequalizer {Z : C} (œÄ : Y ‚ü∂ Z) where
  rightSection : Z ‚ü∂ Y
  leftSection : Y ‚ü∂ X
  condition : f ‚â´ œÄ = g ‚â´ œÄ := by aesop_cat
  rightSection_œÄ : rightSection ‚â´ œÄ = ùüô Z := by aesop_cat
  leftSection_bottom : leftSection ‚â´ g = ùüô Y := by aesop_cat
  leftSection_top : leftSection ‚â´ f = œÄ ‚â´ rightSection := by aesop_cat
instance {X : C} : Inhabited (IsSplitCoequalizer (ùüô X) (ùüô X) (ùüô X)) where
  default := { rightSection := ùüô X, leftSection := ùüô X }
open IsSplitCoequalizer
attribute [reassoc] condition
attribute [reassoc (attr := simp)] rightSection_œÄ leftSection_bottom leftSection_top
variable {f g}
@[simps]
def IsSplitCoequalizer.map {Z : C} {œÄ : Y ‚ü∂ Z} (q : IsSplitCoequalizer f g œÄ) (F : C ‚•§ D) :
    IsSplitCoequalizer (F.map f) (F.map g) (F.map œÄ) where
  rightSection := F.map q.rightSection
  leftSection := F.map q.leftSection
  condition := by rw [‚Üê F.map_comp, q.condition, F.map_comp]
  rightSection_œÄ := by rw [‚Üê F.map_comp, q.rightSection_œÄ, F.map_id]
  leftSection_bottom := by rw [‚Üê F.map_comp, q.leftSection_bottom, F.map_id]
  leftSection_top := by rw [‚Üê F.map_comp, q.leftSection_top, F.map_comp]
section
open Limits
@[simps! pt]
def IsSplitCoequalizer.asCofork {Z : C} {h : Y ‚ü∂ Z} (t : IsSplitCoequalizer f g h) :
    Cofork f g := Cofork.ofœÄ h t.condition
@[simp]
theorem IsSplitCoequalizer.asCofork_œÄ {Z : C} {h : Y ‚ü∂ Z} (t : IsSplitCoequalizer f g h) :
    t.asCofork.œÄ = h := rfl
def IsSplitCoequalizer.isCoequalizer {Z : C} {h : Y ‚ü∂ Z} (t : IsSplitCoequalizer f g h) :
    IsColimit t.asCofork :=
  Cofork.IsColimit.mk' _ fun s =>
    ‚ü®t.rightSection ‚â´ s.œÄ, by
      dsimp
      rw [‚Üê t.leftSection_top_assoc, s.condition, t.leftSection_bottom_assoc], fun hm => by
      simp [‚Üê hm]‚ü©
end
variable (f g)
class HasSplitCoequalizer : Prop where
  splittable : ‚àÉ (Z : C) (h : Y ‚ü∂ Z), Nonempty (IsSplitCoequalizer f g h)
abbrev Functor.IsSplitPair : Prop :=
  HasSplitCoequalizer (G.map f) (G.map g)
noncomputable def HasSplitCoequalizer.coequalizerOfSplit [HasSplitCoequalizer f g] : C :=
  (splittable (f := f) (g := g)).choose
noncomputable def HasSplitCoequalizer.coequalizerœÄ [HasSplitCoequalizer f g] :
    Y ‚ü∂ HasSplitCoequalizer.coequalizerOfSplit f g :=
  (splittable (f := f) (g := g)).choose_spec.choose
noncomputable def HasSplitCoequalizer.isSplitCoequalizer [HasSplitCoequalizer f g] :
    IsSplitCoequalizer f g (HasSplitCoequalizer.coequalizerœÄ f g) :=
  Classical.choice (splittable (f := f) (g := g)).choose_spec.choose_spec
instance map_is_split_pair [HasSplitCoequalizer f g] : HasSplitCoequalizer (G.map f) (G.map g) where
  splittable :=
    ‚ü®_, _, ‚ü®IsSplitCoequalizer.map (HasSplitCoequalizer.isSplitCoequalizer f g) _‚ü©‚ü©
namespace Limits
instance (priority := 1) hasCoequalizer_of_hasSplitCoequalizer [HasSplitCoequalizer f g] :
    HasCoequalizer f g :=
  HasColimit.mk ‚ü®_, (HasSplitCoequalizer.isSplitCoequalizer f g).isCoequalizer‚ü©
end Limits
end CategoryTheory