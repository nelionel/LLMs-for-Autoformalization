import Mathlib.Topology.ContinuousMap.Bounded.Basic
import Mathlib.Analysis.CStarAlgebra.Basic
noncomputable section
open Topology Bornology NNReal uniformity UniformConvergence
open Set Filter Metric Function
universe u v w
variable {F : Type*} {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}
namespace BoundedContinuousFunction
section NormedAddCommGroup
variable {ùïú : Type*} [NormedField ùïú] [StarRing ùïú] [TopologicalSpace Œ±] [SeminormedAddCommGroup Œ≤]
  [StarAddMonoid Œ≤] [NormedStarGroup Œ≤]
variable [NormedSpace ùïú Œ≤] [StarModule ùïú Œ≤]
instance instStarAddMonoid : StarAddMonoid (Œ± ‚Üí·µá Œ≤) where
  star f := f.comp star starNormedAddGroupHom.lipschitz
  star_involutive f := ext fun x => star_star (f x)
  star_add f g := ext fun x => star_add (f x) (g x)
@[simp]
theorem coe_star (f : Œ± ‚Üí·µá Œ≤) : ‚áë(star f) = star (‚áëf) := rfl
@[simp]
theorem star_apply (f : Œ± ‚Üí·µá Œ≤) (x : Œ±) : star f x = star (f x) := rfl
instance instNormedStarGroup : NormedStarGroup (Œ± ‚Üí·µá Œ≤) where
  norm_star f := by simp only [norm_eq, star_apply, norm_star]
instance instStarModule : StarModule ùïú (Œ± ‚Üí·µá Œ≤) where
  star_smul k f := ext fun x => star_smul k (f x)
end NormedAddCommGroup
section CStarRing
variable [TopologicalSpace Œ±]
variable [NonUnitalNormedRing Œ≤] [StarRing Œ≤]
instance instStarRing [NormedStarGroup Œ≤] : StarRing (Œ± ‚Üí·µá Œ≤) where
  __ := instStarAddMonoid
  star_mul f g := ext fun x ‚Ü¶ star_mul (f x) (g x)
variable [CStarRing Œ≤]
instance instCStarRing : CStarRing (Œ± ‚Üí·µá Œ≤) where
  norm_mul_self_le f := by
    rw [‚Üê sq, ‚Üê Real.le_sqrt (norm_nonneg _) (norm_nonneg _), norm_le (Real.sqrt_nonneg _)]
    intro x
    rw [Real.le_sqrt (norm_nonneg _) (norm_nonneg _), sq, ‚Üê CStarRing.norm_star_mul_self]
    exact norm_coe_le_norm (star f * f) x
end CStarRing
end BoundedContinuousFunction