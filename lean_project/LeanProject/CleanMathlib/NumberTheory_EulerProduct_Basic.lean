import Mathlib.Analysis.Normed.Field.InfiniteSum
import Mathlib.Analysis.SpecificLimits.Normed
import Mathlib.NumberTheory.ArithmeticFunction
import Mathlib.NumberTheory.SmoothNumbers
lemma Summable.norm_lt_one {F : Type*} [NormedField F] [CompleteSpace F] {f : ‚Ñï ‚Üí* F}
    (hsum : Summable f) {p : ‚Ñï} (hp : 1 < p) :
    ‚Äñf p‚Äñ < 1 := by
  refine summable_geometric_iff_norm_lt_one.mp ?_
  simp_rw [‚Üê map_pow]
  exact hsum.comp_injective <| Nat.pow_right_injective hp
open scoped Topology
open Nat Finset
section General
variable {R : Type*} [NormedCommRing R] {f : ‚Ñï ‚Üí R}
@[local instance] private lemma instT0Space : T0Space R := MetricSpace.instT0Space
variable [CompleteSpace R]
namespace EulerProduct
variable (hf‚ÇÅ : f 1 = 1) (hmul : ‚àÄ {m n}, Nat.Coprime m n ‚Üí f (m * n) = f m * f n)
include hf‚ÇÅ hmul in
lemma summable_and_hasSum_factoredNumbers_prod_filter_prime_tsum
    (hsum : ‚àÄ {p : ‚Ñï}, p.Prime ‚Üí Summable (fun n : ‚Ñï ‚Ü¶ ‚Äñf (p ^ n)‚Äñ)) (s : Finset ‚Ñï) :
    Summable (fun m : factoredNumbers s ‚Ü¶ ‚Äñf m‚Äñ) ‚àß
      HasSum (fun m : factoredNumbers s ‚Ü¶ f m)
        (‚àè p ‚àà s with p.Prime, ‚àë' n : ‚Ñï, f (p ^ n)) := by
  induction' s using Finset.induction with p s hp ih
  ¬∑ rw [factoredNumbers_empty]
    simp only [not_mem_empty, IsEmpty.forall_iff, forall_const, filter_true_of_mem, prod_empty]
    exact ‚ü®(Set.finite_singleton 1).summable (‚Äñf ¬∑‚Äñ), hf‚ÇÅ ‚ñ∏ hasSum_singleton 1 f‚ü©
  ¬∑ rw [filter_insert]
    split_ifs with hpp
    ¬∑ constructor
      ¬∑ simp only [‚Üê (equivProdNatFactoredNumbers hpp hp).summable_iff, Function.comp_def,
          equivProdNatFactoredNumbers_apply', factoredNumbers.map_prime_pow_mul hmul hpp hp]
        refine Summable.of_nonneg_of_le (fun _ ‚Ü¶ norm_nonneg _) (fun _ ‚Ü¶ norm_mul_le ..) ?_
        apply Summable.mul_of_nonneg (hsum hpp) ih.1 <;> exact fun n ‚Ü¶ norm_nonneg _
      ¬∑ have hp' : p ‚àâ {p ‚àà s | p.Prime} := mt (mem_of_mem_filter p) hp
        rw [prod_insert hp', ‚Üê (equivProdNatFactoredNumbers hpp hp).hasSum_iff, Function.comp_def]
        conv =>
          enter [1, x]
          rw [equivProdNatFactoredNumbers_apply', factoredNumbers.map_prime_pow_mul hmul hpp hp]
        have : T3Space R := instT3Space 
        apply (hsum hpp).of_norm.hasSum.mul ih.2
        apply summable_mul_of_summable_norm (hsum hpp) ih.1
    ¬∑ rwa [factoredNumbers_insert s hpp]
include hf‚ÇÅ hmul in
lemma prod_filter_prime_tsum_eq_tsum_factoredNumbers (hsum : Summable (‚Äñf ¬∑‚Äñ)) (s : Finset ‚Ñï) :
    ‚àè p ‚àà s with p.Prime, ‚àë' n : ‚Ñï, f (p ^ n) = ‚àë' m : factoredNumbers s, f m :=
  (summable_and_hasSum_factoredNumbers_prod_filter_prime_tsum hf‚ÇÅ hmul
    (fun hp ‚Ü¶ hsum.comp_injective <| Nat.pow_right_injective hp.one_lt) _).2.tsum_eq.symm
lemma norm_tsum_factoredNumbers_sub_tsum_lt (hsum : Summable f) (hf‚ÇÄ : f 0 = 0) {Œµ : ‚Ñù}
    (Œµpos : 0 < Œµ) :
    ‚àÉ N : ‚Ñï, ‚àÄ s : Finset ‚Ñï, primesBelow N ‚â§ s ‚Üí
      ‚Äñ(‚àë' m : ‚Ñï, f m) - ‚àë' m : factoredNumbers s, f m‚Äñ < Œµ := by
  obtain ‚ü®N, hN‚ü© :=
    summable_iff_nat_tsum_vanishing.mp hsum (Metric.ball 0 Œµ) <| Metric.ball_mem_nhds 0 Œµpos
  simp_rw [mem_ball_zero_iff] at hN
  refine ‚ü®N, fun s hs ‚Ü¶ ?_‚ü©
  have := hN _ <| factoredNumbers_compl hs
  rwa [‚Üê tsum_subtype_add_tsum_subtype_compl hsum (factoredNumbers s),
    add_sub_cancel_left, tsum_eq_tsum_diff_singleton (factoredNumbers s)·∂ú hf‚ÇÄ]
include hf‚ÇÅ hmul in
lemma summable_and_hasSum_smoothNumbers_prod_primesBelow_tsum
    (hsum : ‚àÄ {p : ‚Ñï}, p.Prime ‚Üí Summable (fun n : ‚Ñï ‚Ü¶ ‚Äñf (p ^ n)‚Äñ)) (N : ‚Ñï) :
    Summable (fun m : N.smoothNumbers ‚Ü¶ ‚Äñf m‚Äñ) ‚àß
      HasSum (fun m : N.smoothNumbers ‚Ü¶ f m) (‚àè p ‚àà N.primesBelow, ‚àë' n : ‚Ñï, f (p ^ n)) := by
  rw [smoothNumbers_eq_factoredNumbers, primesBelow]
  exact summable_and_hasSum_factoredNumbers_prod_filter_prime_tsum hf‚ÇÅ hmul hsum _
include hf‚ÇÅ hmul in
lemma prod_primesBelow_tsum_eq_tsum_smoothNumbers (hsum : Summable (‚Äñf ¬∑‚Äñ)) (N : ‚Ñï) :
    ‚àè p ‚àà N.primesBelow, ‚àë' n : ‚Ñï, f (p ^ n) = ‚àë' m : N.smoothNumbers, f m :=
  (summable_and_hasSum_smoothNumbers_prod_primesBelow_tsum hf‚ÇÅ hmul
    (fun hp ‚Ü¶ hsum.comp_injective <| Nat.pow_right_injective hp.one_lt) _).2.tsum_eq.symm
lemma norm_tsum_smoothNumbers_sub_tsum_lt (hsum : Summable f) (hf‚ÇÄ : f 0 = 0)
    {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) :
    ‚àÉ N‚ÇÄ : ‚Ñï, ‚àÄ N ‚â• N‚ÇÄ, ‚Äñ(‚àë' m : ‚Ñï, f m) - ‚àë' m : N.smoothNumbers, f m‚Äñ < Œµ := by
  conv => enter [1, N‚ÇÄ, N]; rw [smoothNumbers_eq_factoredNumbers]
  obtain ‚ü®N‚ÇÄ, hN‚ÇÄ‚ü© := norm_tsum_factoredNumbers_sub_tsum_lt hsum hf‚ÇÄ Œµpos
  refine ‚ü®N‚ÇÄ, fun N hN ‚Ü¶ hN‚ÇÄ (range N) fun p hp ‚Ü¶ ?_‚ü©
  exact mem_range.mpr <| (lt_of_mem_primesBelow hp).trans_le hN
include hf‚ÇÅ hmul in
theorem eulerProduct_hasProd (hsum : Summable (‚Äñf ¬∑‚Äñ)) (hf‚ÇÄ : f 0 = 0) :
    HasProd (fun p : Primes ‚Ü¶ ‚àë' e, f (p ^ e)) (‚àë' n, f n) := by
  let F : ‚Ñï ‚Üí R := fun n ‚Ü¶ ‚àë' e, f (n ^ e)
  change HasProd (F ‚àò Subtype.val) _
  rw [hasProd_subtype_iff_mulIndicator,
    show Set.mulIndicator (fun p : ‚Ñï ‚Ü¶ Irreducible p) =  {p | Nat.Prime p}.mulIndicator from rfl,
    HasProd, Metric.tendsto_atTop]
  intro Œµ hŒµ
  obtain ‚ü®N‚ÇÄ, hN‚ÇÄ‚ü© := norm_tsum_factoredNumbers_sub_tsum_lt hsum.of_norm hf‚ÇÄ hŒµ
  refine ‚ü®range N‚ÇÄ, fun s hs ‚Ü¶ ?_‚ü©
  have : ‚àè p ‚àà s, {p | Nat.Prime p}.mulIndicator F p = ‚àè p ‚àà s with p.Prime, F p :=
    prod_mulIndicator_eq_prod_filter s (fun _ ‚Ü¶ F) _ id
  rw [this, dist_eq_norm, prod_filter_prime_tsum_eq_tsum_factoredNumbers hf‚ÇÅ hmul hsum,
    norm_sub_rev]
  exact hN‚ÇÄ s fun p hp ‚Ü¶ hs <| mem_range.mpr <| lt_of_mem_primesBelow hp
include hf‚ÇÅ hmul in
theorem eulerProduct_hasProd_mulIndicator (hsum : Summable (‚Äñf ¬∑‚Äñ)) (hf‚ÇÄ : f 0 = 0) :
    HasProd (Set.mulIndicator {p | Nat.Prime p} fun p ‚Ü¶  ‚àë' e, f (p ^ e)) (‚àë' n, f n) := by
  rw [‚Üê hasProd_subtype_iff_mulIndicator]
  exact eulerProduct_hasProd hf‚ÇÅ hmul hsum hf‚ÇÄ
open Filter in
include hf‚ÇÅ hmul in
theorem eulerProduct (hsum : Summable (‚Äñf ¬∑‚Äñ)) (hf‚ÇÄ : f 0 = 0) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè p ‚àà primesBelow n, ‚àë' e, f (p ^ e)) atTop (ùìù (‚àë' n, f n)) := by
  have := (eulerProduct_hasProd_mulIndicator hf‚ÇÅ hmul hsum hf‚ÇÄ).tendsto_prod_nat
  let F : ‚Ñï ‚Üí R := fun p ‚Ü¶ ‚àë' (e : ‚Ñï), f (p ^ e)
  have H (n : ‚Ñï) : ‚àè i ‚àà range n, Set.mulIndicator {p | Nat.Prime p} F i =
                     ‚àè p ‚àà primesBelow n, ‚àë' (e : ‚Ñï), f (p ^ e) :=
    prod_mulIndicator_eq_prod_filter (range n) (fun _ ‚Ü¶ F) (fun _ ‚Ü¶ {p | Nat.Prime p}) id
  simpa only [H]
include hf‚ÇÅ hmul in
theorem eulerProduct_tprod (hsum : Summable (‚Äñf ¬∑‚Äñ)) (hf‚ÇÄ : f 0 = 0) :
    ‚àè' p : Primes, ‚àë' e, f (p ^ e) = ‚àë' n, f n :=
  (eulerProduct_hasProd hf‚ÇÅ hmul hsum hf‚ÇÄ).tprod_eq
end EulerProduct
namespace ArithmeticFunction
open EulerProduct
nonrec theorem IsMultiplicative.eulerProduct_hasProd {f : ArithmeticFunction R}
    (hf : f.IsMultiplicative) (hsum : Summable (‚Äñf ¬∑‚Äñ)) :
    HasProd (fun p : Primes ‚Ü¶ ‚àë' e, f (p ^ e)) (‚àë' n, f n) :=
  eulerProduct_hasProd hf.1 hf.2 hsum f.map_zero
open Filter in
nonrec theorem IsMultiplicative.eulerProduct {f : ArithmeticFunction R} (hf : f.IsMultiplicative)
    (hsum : Summable (‚Äñf ¬∑‚Äñ)) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè p ‚àà primesBelow n, ‚àë' e, f (p ^ e)) atTop (ùìù (‚àë' n, f n)) :=
  eulerProduct hf.1 hf.2 hsum f.map_zero
nonrec theorem IsMultiplicative.eulerProduct_tprod {f : ArithmeticFunction R}
    (hf : f.IsMultiplicative) (hsum : Summable (‚Äñf ¬∑‚Äñ)) :
    ‚àè' p : Primes, ‚àë' e, f (p ^ e) = ‚àë' n, f n :=
  eulerProduct_tprod hf.1 hf.2 hsum f.map_zero
end ArithmeticFunction
end General
section CompletelyMultiplicative
variable {F : Type*} [NormedField F] [CompleteSpace F]
namespace EulerProduct
lemma one_sub_inv_eq_geometric_of_summable_norm {f : ‚Ñï ‚Üí*‚ÇÄ F} {p : ‚Ñï} (hp : p.Prime)
    (hsum : Summable fun x ‚Ü¶ ‚Äñf x‚Äñ) :
    (1 - f p)‚Åª¬π = ‚àë' (e : ‚Ñï), f (p ^ e) := by
  simp only [map_pow]
  refine (tsum_geometric_of_norm_lt_one <| summable_geometric_iff_norm_lt_one.mp ?_).symm
  refine Summable.of_norm ?_
  simpa only [Function.comp_def, map_pow]
    using hsum.comp_injective <| Nat.pow_right_injective hp.one_lt
lemma summable_and_hasSum_factoredNumbers_prod_filter_prime_geometric {f : ‚Ñï ‚Üí* F}
    (h : ‚àÄ {p : ‚Ñï}, p.Prime ‚Üí ‚Äñf p‚Äñ < 1) (s : Finset ‚Ñï) :
    Summable (fun m : factoredNumbers s ‚Ü¶ ‚Äñf m‚Äñ) ‚àß
      HasSum (fun m : factoredNumbers s ‚Ü¶ f m) (‚àè p ‚àà s with p.Prime, (1 - f p)‚Åª¬π) := by
  have hmul {m n} (_ : Nat.Coprime m n) := f.map_mul m n
  have H‚ÇÅ :
      ‚àè p ‚àà s with p.Prime, ‚àë' n : ‚Ñï, f (p ^ n) = ‚àè p ‚àà s with p.Prime, (1 - f p)‚Åª¬π := by
    refine prod_congr rfl fun p hp ‚Ü¶ ?_
    simp only [map_pow]
    exact tsum_geometric_of_norm_lt_one <| h (mem_filter.mp hp).2
  have H‚ÇÇ : ‚àÄ {p : ‚Ñï}, p.Prime ‚Üí Summable fun n ‚Ü¶ ‚Äñf (p ^ n)‚Äñ := by
    intro p hp
    simp only [map_pow]
    refine Summable.of_nonneg_of_le (fun _ ‚Ü¶ norm_nonneg _) (fun _ ‚Ü¶ norm_pow_le ..) ?_
    exact summable_geometric_iff_norm_lt_one.mpr <| (norm_norm (f p)).symm ‚ñ∏ h hp
  exact H‚ÇÅ ‚ñ∏ summable_and_hasSum_factoredNumbers_prod_filter_prime_tsum f.map_one hmul H‚ÇÇ s
lemma prod_filter_prime_geometric_eq_tsum_factoredNumbers {f : ‚Ñï ‚Üí* F} (hsum : Summable f)
    (s : Finset ‚Ñï) :
    ‚àè p ‚àà s with p.Prime, (1 - f p)‚Åª¬π = ‚àë' m : factoredNumbers s, f m := by
  refine (summable_and_hasSum_factoredNumbers_prod_filter_prime_geometric ?_ s).2.tsum_eq.symm
  exact fun {_} hp ‚Ü¶ hsum.norm_lt_one hp.one_lt
lemma summable_and_hasSum_smoothNumbers_prod_primesBelow_geometric {f : ‚Ñï ‚Üí* F}
    (h : ‚àÄ {p : ‚Ñï}, p.Prime ‚Üí ‚Äñf p‚Äñ < 1) (N : ‚Ñï) :
    Summable (fun m : N.smoothNumbers ‚Ü¶ ‚Äñf m‚Äñ) ‚àß
      HasSum (fun m : N.smoothNumbers ‚Ü¶ f m) (‚àè p ‚àà N.primesBelow, (1 - f p)‚Åª¬π) := by
  rw [smoothNumbers_eq_factoredNumbers, primesBelow]
  exact summable_and_hasSum_factoredNumbers_prod_filter_prime_geometric h _
lemma prod_primesBelow_geometric_eq_tsum_smoothNumbers {f : ‚Ñï ‚Üí* F} (hsum : Summable f) (N : ‚Ñï) :
    ‚àè p ‚àà N.primesBelow, (1 - f p)‚Åª¬π = ‚àë' m : N.smoothNumbers, f m := by
  rw [smoothNumbers_eq_factoredNumbers, primesBelow]
  exact prod_filter_prime_geometric_eq_tsum_factoredNumbers hsum _
theorem eulerProduct_completely_multiplicative_hasProd {f : ‚Ñï ‚Üí*‚ÇÄ F} (hsum : Summable (‚Äñf ¬∑‚Äñ)) :
    HasProd (fun p : Primes ‚Ü¶ (1 - f p)‚Åª¬π) (‚àë' n, f n) := by
  have H : (fun p : Primes ‚Ü¶ (1 - f p)‚Åª¬π) = fun p : Primes ‚Ü¶ ‚àë' (e : ‚Ñï), f (p ^ e) :=
    funext <| fun p ‚Ü¶ one_sub_inv_eq_geometric_of_summable_norm p.prop hsum
  simpa only [map_pow, H]
    using eulerProduct_hasProd f.map_one (fun {m n} _ ‚Ü¶ f.map_mul m n) hsum f.map_zero
theorem eulerProduct_completely_multiplicative_tprod {f : ‚Ñï ‚Üí*‚ÇÄ F} (hsum : Summable (‚Äñf ¬∑‚Äñ)) :
    ‚àè' p : Primes, (1 - f p)‚Åª¬π = ‚àë' n, f n :=
  (eulerProduct_completely_multiplicative_hasProd hsum).tprod_eq
open Filter in
theorem eulerProduct_completely_multiplicative {f : ‚Ñï ‚Üí*‚ÇÄ F} (hsum : Summable (‚Äñf ¬∑‚Äñ)) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè p ‚àà primesBelow n, (1 - f p)‚Åª¬π) atTop (ùìù (‚àë' n, f n)) := by
  have hmul {m n} (_ : Nat.Coprime m n) := f.map_mul m n
  have := (eulerProduct_hasProd_mulIndicator f.map_one hmul hsum f.map_zero).tendsto_prod_nat
  have H (n : ‚Ñï) : ‚àè p ‚àà range n, {p | Nat.Prime p}.mulIndicator (fun p ‚Ü¶ (1 - f p)‚Åª¬π) p =
                     ‚àè p ‚àà primesBelow n, (1 - f p)‚Åª¬π :=
    prod_mulIndicator_eq_prod_filter
      (range n) (fun _ ‚Ü¶ fun p ‚Ü¶ (1 - f p)‚Åª¬π) (fun _ ‚Ü¶ {p | Nat.Prime p}) id
  have H' : {p | Nat.Prime p}.mulIndicator (fun p ‚Ü¶ (1 - f p)‚Åª¬π) =
              {p | Nat.Prime p}.mulIndicator (fun p ‚Ü¶ ‚àë' e : ‚Ñï, f (p ^ e)) :=
    Set.mulIndicator_congr fun p hp ‚Ü¶ one_sub_inv_eq_geometric_of_summable_norm hp hsum
  simpa only [‚Üê H, H'] using this
end EulerProduct
end CompletelyMultiplicative