import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Comma.Arrow
import Mathlib.CategoryTheory.Limits.Shapes.Terminal
namespace CategoryTheory
universe v u
variable {C : Type u} [Category.{v} C]
structure Factorisation {X Y : C} (f : X ‚ü∂ Y) where
  mid : C
  Œπ   : X ‚ü∂ mid
  œÄ   : mid ‚ü∂ Y
  Œπ_œÄ : Œπ ‚â´ œÄ = f := by aesop_cat
attribute [simp] Factorisation.Œπ_œÄ
namespace Factorisation
variable {X Y : C} {f : X ‚ü∂ Y}
@[ext]
protected structure Hom (d e : Factorisation f) : Type (max u v) where
  h : d.mid ‚ü∂ e.mid
  Œπ_h : d.Œπ ‚â´ h = e.Œπ := by aesop_cat
  h_œÄ : h ‚â´ e.œÄ = d.œÄ := by aesop_cat
attribute [simp] Factorisation.Hom.Œπ_h Factorisation.Hom.h_œÄ
@[simps]
protected def Hom.id (d : Factorisation f) : Factorisation.Hom d d where
  h := ùüô _
@[simps]
protected def Hom.comp {d‚ÇÅ d‚ÇÇ d‚ÇÉ : Factorisation f}
    (f : Factorisation.Hom d‚ÇÅ d‚ÇÇ) (g : Factorisation.Hom d‚ÇÇ d‚ÇÉ) : Factorisation.Hom d‚ÇÅ d‚ÇÉ where
  h := f.h ‚â´ g.h
  Œπ_h := by rw [‚Üê Category.assoc, f.Œπ_h, g.Œπ_h]
  h_œÄ := by rw [Category.assoc, g.h_œÄ, f.h_œÄ]
instance : Category.{max u v} (Factorisation f) where
  Hom d e := Factorisation.Hom d e
  id d := Factorisation.Hom.id d
  comp f g := Factorisation.Hom.comp f g
variable (d : Factorisation f)
@[simps]
protected def initial : Factorisation f where
  mid := X
  Œπ := ùüô _
  œÄ := f
@[simps]
protected def initialHom (d : Factorisation f) :
    Factorisation.Hom (Factorisation.initial : Factorisation f) d where
  h := d.Œπ
instance : Unique ((Factorisation.initial : Factorisation f) ‚ü∂ d) where
  default := Factorisation.initialHom d
  uniq f := by apply Factorisation.Hom.ext; simp [‚Üê f.Œπ_h]
@[simps]
protected def terminal : Factorisation f where
  mid := Y
  Œπ := f
  œÄ := ùüô _
@[simps]
protected def terminalHom (d : Factorisation f) :
    Factorisation.Hom d (Factorisation.terminal : Factorisation f) where
  h := d.œÄ
instance : Unique (d ‚ü∂ (Factorisation.terminal : Factorisation f)) where
  default := Factorisation.terminalHom d
  uniq f := by apply Factorisation.Hom.ext; simp [‚Üê f.h_œÄ]
open Limits
def IsInitial_initial : IsInitial (Factorisation.initial : Factorisation f) := IsInitial.ofUnique _
instance : HasInitial (Factorisation f) := Limits.hasInitial_of_unique Factorisation.initial
def IsTerminal_terminal : IsTerminal (Factorisation.terminal : Factorisation f) :=
IsTerminal.ofUnique _
instance : HasTerminal (Factorisation f) := Limits.hasTerminal_of_unique Factorisation.terminal
@[simps]
def forget : Factorisation f ‚•§ C where
  obj := Factorisation.mid
  map f := f.h
end Factorisation
end CategoryTheory