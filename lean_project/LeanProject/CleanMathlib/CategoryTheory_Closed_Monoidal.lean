import Mathlib.CategoryTheory.Monoidal.Functor
import Mathlib.CategoryTheory.Adjunction.Limits
import Mathlib.CategoryTheory.Adjunction.Mates
universe v u uโ vโ
namespace CategoryTheory
open Category MonoidalCategory
class Closed {C : Type u} [Category.{v} C] [MonoidalCategory.{v} C] (X : C) where
  rightAdj : C โฅค C
  adj : tensorLeft X โฃ rightAdj
class MonoidalClosed (C : Type u) [Category.{v} C] [MonoidalCategory.{v} C] where
  closed (X : C) : Closed X := by infer_instance
attribute [instance 100] MonoidalClosed.closed
variable {C : Type u} [Category.{v} C] [MonoidalCategory.{v} C]
def tensorClosed {X Y : C} (hX : Closed X) (hY : Closed Y) : Closed (X โ Y) where
  adj := (hY.adj.comp hX.adj).ofNatIsoLeft (MonoidalCategory.tensorLeftTensor X Y).symm
def unitClosed : Closed (๐_ C) where
  rightAdj := ๐ญ C
  adj := Adjunction.id.ofNatIsoLeft (MonoidalCategory.leftUnitorNatIso C).symm
variable (A B : C) {X X' Y Y' Z : C}
variable [Closed A]
def ihom : C โฅค C :=
  Closed.rightAdj (X := A)
namespace ihom
def adjunction : tensorLeft A โฃ ihom A :=
  Closed.adj
def ev : ihom A โ tensorLeft A โถ ๐ญ C :=
  (ihom.adjunction A).counit
def coev : ๐ญ C โถ tensorLeft A โ ihom A :=
  (ihom.adjunction A).unit
@[simp]
theorem ihom_adjunction_counit : (ihom.adjunction A).counit = ev A :=
  rfl
@[simp]
theorem ihom_adjunction_unit : (ihom.adjunction A).unit = coev A :=
  rfl
@[reassoc (attr := simp)]
theorem ev_naturality {X Y : C} (f : X โถ Y) :
    A โ (ihom A).map f โซ (ev A).app Y = (ev A).app X โซ f :=
  (ev A).naturality f
@[reassoc (attr := simp)]
theorem coev_naturality {X Y : C} (f : X โถ Y) :
    f โซ (coev A).app Y = (coev A).app X โซ (ihom A).map (A โ f) :=
  (coev A).naturality f
set_option quotPrecheck false in
notation A " โถ[" C "] " B:10 => (@ihom C _ _ A _).obj B
@[reassoc (attr := simp)]
theorem ev_coev : (A โ (coev A).app B) โซ (ev A).app (A โ B) = ๐ (A โ B) :=
  (ihom.adjunction A).left_triangle_components _
@[reassoc (attr := simp)]
theorem coev_ev : (coev A).app (A โถ[C] B) โซ (ihom A).map ((ev A).app B) = ๐ (A โถ[C] B) :=
  Adjunction.right_triangle_components (ihom.adjunction A) _
end ihom
open CategoryTheory.Limits
instance : PreservesColimits (tensorLeft A) :=
  (ihom.adjunction A).leftAdjoint_preservesColimits
variable {A}
namespace MonoidalClosed
def curry : (A โ Y โถ X) โ (Y โถ A โถ[C] X) :=
  (ihom.adjunction A).homEquiv _ _
def uncurry : (Y โถ A โถ[C] X) โ (A โ Y โถ X) :=
  ((ihom.adjunction A).homEquiv _ _).symm
@[simp, nolint simpNF]
theorem homEquiv_apply_eq (f : A โ Y โถ X) : (ihom.adjunction A).homEquiv _ _ f = curry f :=
  rfl
@[simp, nolint simpNF]
theorem homEquiv_symm_apply_eq (f : Y โถ A โถ[C] X) :
    ((ihom.adjunction A).homEquiv _ _).symm f = uncurry f :=
  rfl
@[reassoc]
theorem curry_natural_left (f : X โถ X') (g : A โ X' โถ Y) : curry (_ โ f โซ g) = f โซ curry g :=
  Adjunction.homEquiv_naturality_left _ _ _
@[reassoc]
theorem curry_natural_right (f : A โ X โถ Y) (g : Y โถ Y') :
    curry (f โซ g) = curry f โซ (ihom _).map g :=
  Adjunction.homEquiv_naturality_right _ _ _
@[reassoc]
theorem uncurry_natural_right (f : X โถ A โถ[C] Y) (g : Y โถ Y') :
    uncurry (f โซ (ihom _).map g) = uncurry f โซ g :=
  Adjunction.homEquiv_naturality_right_symm _ _ _
@[reassoc]
theorem uncurry_natural_left (f : X โถ X') (g : X' โถ A โถ[C] Y) :
    uncurry (f โซ g) = _ โ f โซ uncurry g :=
  Adjunction.homEquiv_naturality_left_symm _ _ _
@[simp]
theorem uncurry_curry (f : A โ X โถ Y) : uncurry (curry f) = f :=
  (Closed.adj.homEquiv _ _).left_inv f
@[simp]
theorem curry_uncurry (f : X โถ A โถ[C] Y) : curry (uncurry f) = f :=
  (Closed.adj.homEquiv _ _).right_inv f
theorem curry_eq_iff (f : A โ Y โถ X) (g : Y โถ A โถ[C] X) : curry f = g โ f = uncurry g :=
  Adjunction.homEquiv_apply_eq (ihom.adjunction A) f g
theorem eq_curry_iff (f : A โ Y โถ X) (g : Y โถ A โถ[C] X) : g = curry f โ uncurry g = f :=
  Adjunction.eq_homEquiv_apply (ihom.adjunction A) f g
theorem uncurry_eq (g : Y โถ A โถ[C] X) : uncurry g = (A โ g) โซ (ihom.ev A).app X := by
  rfl
theorem curry_eq (g : A โ Y โถ X) : curry g = (ihom.coev A).app Y โซ (ihom A).map g :=
  rfl
theorem curry_injective : Function.Injective (curry : (A โ Y โถ X) โ (Y โถ A โถ[C] X)) :=
  (Closed.adj.homEquiv _ _).injective
theorem uncurry_injective : Function.Injective (uncurry : (Y โถ A โถ[C] X) โ (A โ Y โถ X)) :=
  (Closed.adj.homEquiv _ _).symm.injective
variable (A X)
theorem uncurry_id_eq_ev : uncurry (๐ (A โถ[C] X)) = (ihom.ev A).app X := by
  simp [uncurry_eq]
theorem curry_id_eq_coev : curry (๐ _) = (ihom.coev A).app X := by
  rw [curry_eq, (ihom A).map_id (A โ _)]
  apply comp_id
def unitNatIso [Closed (๐_ C)] : ๐ญ C โ ihom (๐_ C) :=
  conjugateIsoEquiv (Adjunction.id (C := C)) (ihom.adjunction (๐_ C))
    (leftUnitorNatIso C)
section Pre
variable {A B}
variable [Closed B]
def pre (f : B โถ A) : ihom A โถ ihom B :=
  conjugateEquiv (ihom.adjunction _) (ihom.adjunction _) ((tensoringLeft C).map f)
@[reassoc (attr := simp)]
theorem id_tensor_pre_app_comp_ev (f : B โถ A) (X : C) :
    B โ (pre f).app X โซ (ihom.ev B).app X = f โท (A โถ[C] X) โซ (ihom.ev A).app X :=
  conjugateEquiv_counit _ _ ((tensoringLeft C).map f) X
@[simp]
theorem uncurry_pre (f : B โถ A) (X : C) :
    MonoidalClosed.uncurry ((pre f).app X) = f โท _ โซ (ihom.ev A).app X := by
  simp [uncurry_eq]
@[reassoc (attr := simp)]
theorem coev_app_comp_pre_app (f : B โถ A) :
    (ihom.coev A).app X โซ (pre f).app (A โ X) = (ihom.coev B).app X โซ (ihom B).map (f โท _) :=
  unit_conjugateEquiv _ _ ((tensoringLeft C).map f) X
@[simp]
theorem pre_id (A : C) [Closed A] : pre (๐ A) = ๐ _ := by
  rw [pre, Functor.map_id]
  apply conjugateEquiv_id
@[simp]
theorem pre_map {Aโ Aโ Aโ : C} [Closed Aโ] [Closed Aโ] [Closed Aโ] (f : Aโ โถ Aโ) (g : Aโ โถ Aโ) :
    pre (f โซ g) = pre g โซ pre f := by
  rw [pre, pre, pre, conjugateEquiv_comp, (tensoringLeft C).map_comp]
theorem pre_comm_ihom_map {W X Y Z : C} [Closed W] [Closed X] (f : W โถ X) (g : Y โถ Z) :
    (pre f).app Y โซ (ihom W).map g = (ihom X).map g โซ (pre f).app Z := by simp
end Pre
@[simps]
def internalHom [MonoidalClosed C] : Cแตแต โฅค C โฅค C where
  obj X := ihom X.unop
  map f := pre f.unop
section OfEquiv
variable {D : Type uโ} [Category.{vโ} D] [MonoidalCategory.{vโ} D]
variable (F : C โฅค D) {G : D โฅค C} (adj : F โฃ G)
  [F.Monoidal] [F.IsEquivalence] [MonoidalClosed D]
noncomputable def ofEquiv : MonoidalClosed C where
  closed X :=
    { rightAdj := F โ ihom (F.obj X) โ G
      adj := (adj.comp ((ihom.adjunction (F.obj X)).comp
          adj.toEquivalence.symm.toAdjunction)).ofNatIsoLeft
            (Iso.compInverseIso (H := adj.toEquivalence) (Functor.Monoidal.commTensorLeft F X)) }
theorem ofEquiv_curry_def {X Y Z : C} (f : X โ Y โถ Z) :
    letI := ofEquiv F adj
    MonoidalClosed.curry f =
      adj.homEquiv Y ((ihom (F.obj X)).obj (F.obj Z))
        (MonoidalClosed.curry (adj.toEquivalence.symm.toAdjunction.homEquiv (F.obj X โ F.obj Y) Z
        ((Iso.compInverseIso (H := adj.toEquivalence)
          (Functor.Monoidal.commTensorLeft F X)).hom.app Y โซ f))) := by
  change ((adj.comp ((ihom.adjunction (F.obj X)).comp
      adj.toEquivalence.symm.toAdjunction)).ofNatIsoLeft _).homEquiv _ _ _ = _
  dsimp only [Adjunction.ofNatIsoLeft]
  rw [Adjunction.mkOfHomEquiv_homEquiv]
  dsimp
  rw [Adjunction.comp_homEquiv, Adjunction.comp_homEquiv]
  rfl
theorem ofEquiv_uncurry_def {X Y Z : C} :
    letI := ofEquiv F adj
    โ (f : Y โถ (ihom X).obj Z), MonoidalClosed.uncurry f =
      ((Iso.compInverseIso (H := adj.toEquivalence)
          (Functor.Monoidal.commTensorLeft F X)).inv.app Y) โซ
            (adj.toEquivalence.symm.toAdjunction.homEquiv _ _).symm
              (MonoidalClosed.uncurry ((adj.homEquiv _ _).symm f)) := by
  intro f
  change (((adj.comp ((ihom.adjunction (F.obj X)).comp
      adj.toEquivalence.symm.toAdjunction)).ofNatIsoLeft _).homEquiv _ _).symm _ = _
  dsimp only [Adjunction.ofNatIsoLeft]
  rw [Adjunction.mkOfHomEquiv_homEquiv]
  dsimp
  rw [Adjunction.comp_homEquiv, Adjunction.comp_homEquiv]
  rfl
end OfEquiv
section Enriched
def id (x : C) [Closed x] : ๐_ C โถ (ihom x).obj x := curry (ฯ_ x).hom
def compTranspose (x y z : C) [Closed x] [Closed y] : x โ (ihom x).obj y โ (ihom y).obj z โถ z :=
  (ฮฑ_ x ((ihom x).obj y) ((ihom y).obj z)).inv โซ
    (ihom.ev x).app y โท ((ihom y).obj z) โซ (ihom.ev y).app z
def comp (x y z : C) [Closed x] [Closed y] : (ihom x).obj y โ (ihom y).obj z โถ (ihom x).obj z :=
  curry (compTranspose x y z)
lemma id_eq (x : C) [Closed x] : id x = curry (ฯ_ x).hom := rfl
lemma compTranspose_eq (x y z : C) [Closed x] [Closed y] :
    compTranspose x y z = (ฮฑ_ _ _ _).inv โซ (ihom.ev x).app y โท _ โซ (ihom.ev y).app z :=
  rfl
lemma comp_eq (x y z : C) [Closed x] [Closed y] : comp x y z = curry (compTranspose x y z) := rfl
@[reassoc (attr := simp)]
lemma id_comp (x y : C) [Closed x] :
    (ฮป_ ((ihom x).obj y)).inv โซ id x โท _ โซ comp x x y = ๐ _:= by
  apply uncurry_injective
  rw [uncurry_natural_left, uncurry_natural_left, comp_eq, uncurry_curry, id_eq, compTranspose_eq,
      associator_inv_naturality_middle_assoc, โ comp_whiskerRight_assoc, โ uncurry_eq,
      uncurry_curry, triangle_assoc_comp_right_assoc, whiskerLeft_inv_hom_assoc,
      uncurry_id_eq_ev _ _]
@[reassoc (attr := simp)]
lemma comp_id (x y : C) [Closed x] [Closed y] :
    (ฯ_ ((ihom x).obj y)).inv โซ _ โ id y โซ comp x y y = ๐ _ := by
  apply uncurry_injective
  rw [uncurry_natural_left, uncurry_natural_left, comp_eq, uncurry_curry, compTranspose_eq,
    associator_inv_naturality_right_assoc, โ rightUnitor_tensor_inv_assoc,
    whisker_exchange_assoc, โ rightUnitor_inv_naturality_assoc, โ uncurry_id_eq_ev y y]
  simp only [Functor.id_obj]
  rw [โ uncurry_natural_left]
  simp [id_eq, uncurry_id_eq_ev]
@[reassoc]
lemma assoc (w x y z : C) [Closed w] [Closed x] [Closed y] :
    (ฮฑ_ _ _ _).inv โซ comp w x y โท _ โซ comp w y z = _ โ comp x y z โซ comp w x z := by
  apply uncurry_injective
  simp only [uncurry_natural_left, comp_eq]
  rw [uncurry_curry, uncurry_curry]; simp only [compTranspose_eq, Category.assoc]
  rw [associator_inv_naturality_middle_assoc, โ comp_whiskerRight_assoc]; dsimp
  rw [โ uncurry_eq, uncurry_curry, associator_inv_naturality_right_assoc, whisker_exchange_assoc,
    โ uncurry_eq, uncurry_curry]
  simp only [comp_whiskerRight, tensorLeft_obj, Category.assoc, pentagon_inv_assoc,
    whiskerRight_tensor, Iso.hom_inv_id_assoc]
end Enriched
end MonoidalClosed
attribute [nolint simpNF] CategoryTheory.MonoidalClosed.homEquiv_apply_eq
  CategoryTheory.MonoidalClosed.homEquiv_symm_apply_eq
end CategoryTheory