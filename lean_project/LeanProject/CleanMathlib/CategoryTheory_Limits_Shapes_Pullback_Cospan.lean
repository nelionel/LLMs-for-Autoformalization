import Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks
import Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts
noncomputable section
open CategoryTheory
universe w v‚ÇÅ v‚ÇÇ v u u‚ÇÇ
namespace CategoryTheory.Limits
abbrev WalkingCospan : Type :=
  WidePullbackShape WalkingPair
@[match_pattern]
abbrev WalkingCospan.left : WalkingCospan :=
  some WalkingPair.left
@[match_pattern]
abbrev WalkingCospan.right : WalkingCospan :=
  some WalkingPair.right
@[match_pattern]
abbrev WalkingCospan.one : WalkingCospan :=
  none
abbrev WalkingSpan : Type :=
  WidePushoutShape WalkingPair
@[match_pattern]
abbrev WalkingSpan.left : WalkingSpan :=
  some WalkingPair.left
@[match_pattern]
abbrev WalkingSpan.right : WalkingSpan :=
  some WalkingPair.right
@[match_pattern]
abbrev WalkingSpan.zero : WalkingSpan :=
  none
namespace WalkingCospan
abbrev Hom : WalkingCospan ‚Üí WalkingCospan ‚Üí Type :=
  WidePullbackShape.Hom
@[match_pattern]
abbrev Hom.inl : left ‚ü∂ one :=
  WidePullbackShape.Hom.term _
@[match_pattern]
abbrev Hom.inr : right ‚ü∂ one :=
  WidePullbackShape.Hom.term _
@[match_pattern]
abbrev Hom.id (X : WalkingCospan) : X ‚ü∂ X :=
  WidePullbackShape.Hom.id X
instance (X Y : WalkingCospan) : Subsingleton (X ‚ü∂ Y) := by
  constructor; intros; simp [eq_iff_true_of_subsingleton]
end WalkingCospan
namespace WalkingSpan
abbrev Hom : WalkingSpan ‚Üí WalkingSpan ‚Üí Type :=
  WidePushoutShape.Hom
@[match_pattern]
abbrev Hom.fst : zero ‚ü∂ left :=
  WidePushoutShape.Hom.init _
@[match_pattern]
abbrev Hom.snd : zero ‚ü∂ right :=
  WidePushoutShape.Hom.init _
@[match_pattern]
abbrev Hom.id (X : WalkingSpan) : X ‚ü∂ X :=
  WidePushoutShape.Hom.id X
instance (X Y : WalkingSpan) : Subsingleton (X ‚ü∂ Y) := by
  constructor; intros a b; simp [eq_iff_true_of_subsingleton]
end WalkingSpan
open WalkingSpan.Hom WalkingCospan.Hom WidePullbackShape.Hom WidePushoutShape.Hom
variable {C : Type u} [Category.{v} C]
def WalkingCospan.ext {F : WalkingCospan ‚•§ C} {s t : Cone F} (i : s.pt ‚âÖ t.pt)
    (w‚ÇÅ : s.œÄ.app WalkingCospan.left = i.hom ‚â´ t.œÄ.app WalkingCospan.left)
    (w‚ÇÇ : s.œÄ.app WalkingCospan.right = i.hom ‚â´ t.œÄ.app WalkingCospan.right) : s ‚âÖ t := by
  apply Cones.ext i _
  rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©)
  ¬∑ have h‚ÇÅ := s.œÄ.naturality WalkingCospan.Hom.inl
    dsimp at h‚ÇÅ
    simp only [Category.id_comp] at h‚ÇÅ
    have h‚ÇÇ := t.œÄ.naturality WalkingCospan.Hom.inl
    dsimp at h‚ÇÇ
    simp only [Category.id_comp] at h‚ÇÇ
    simp_rw [h‚ÇÇ, ‚Üê Category.assoc, ‚Üê w‚ÇÅ, ‚Üê h‚ÇÅ]
  ¬∑ exact w‚ÇÅ
  ¬∑ exact w‚ÇÇ
def WalkingSpan.ext {F : WalkingSpan ‚•§ C} {s t : Cocone F} (i : s.pt ‚âÖ t.pt)
    (w‚ÇÅ : s.Œπ.app WalkingCospan.left ‚â´ i.hom = t.Œπ.app WalkingCospan.left)
    (w‚ÇÇ : s.Œπ.app WalkingCospan.right ‚â´ i.hom = t.Œπ.app WalkingCospan.right) : s ‚âÖ t := by
  apply Cocones.ext i _
  rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©)
  ¬∑ have h‚ÇÅ := s.Œπ.naturality WalkingSpan.Hom.fst
    dsimp at h‚ÇÅ
    simp only [Category.comp_id] at h‚ÇÅ
    have h‚ÇÇ := t.Œπ.naturality WalkingSpan.Hom.fst
    dsimp at h‚ÇÇ
    simp only [Category.comp_id] at h‚ÇÇ
    simp_rw [‚Üê h‚ÇÅ, Category.assoc, w‚ÇÅ, h‚ÇÇ]
  ¬∑ exact w‚ÇÅ
  ¬∑ exact w‚ÇÇ
def cospan {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : WalkingCospan ‚•§ C :=
  WidePullbackShape.wideCospan Z (fun j => WalkingPair.casesOn j X Y) fun j =>
    WalkingPair.casesOn j f g
def span {X Y Z : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z) : WalkingSpan ‚•§ C :=
  WidePushoutShape.wideSpan X (fun j => WalkingPair.casesOn j Y Z) fun j =>
    WalkingPair.casesOn j f g
@[simp]
theorem cospan_left {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : (cospan f g).obj WalkingCospan.left = X :=
  rfl
@[simp]
theorem span_left {X Y Z : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z) : (span f g).obj WalkingSpan.left = Y :=
  rfl
@[simp]
theorem cospan_right {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
    (cospan f g).obj WalkingCospan.right = Y := rfl
@[simp]
theorem span_right {X Y Z : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z) : (span f g).obj WalkingSpan.right = Z :=
  rfl
@[simp]
theorem cospan_one {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : (cospan f g).obj WalkingCospan.one = Z :=
  rfl
@[simp]
theorem span_zero {X Y Z : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z) : (span f g).obj WalkingSpan.zero = X :=
  rfl
@[simp]
theorem cospan_map_inl {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
    (cospan f g).map WalkingCospan.Hom.inl = f := rfl
@[simp]
theorem span_map_fst {X Y Z : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z) : (span f g).map WalkingSpan.Hom.fst = f :=
  rfl
@[simp]
theorem cospan_map_inr {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
    (cospan f g).map WalkingCospan.Hom.inr = g := rfl
@[simp]
theorem span_map_snd {X Y Z : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z) : (span f g).map WalkingSpan.Hom.snd = g :=
  rfl
theorem cospan_map_id {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) (w : WalkingCospan) :
    (cospan f g).map (WalkingCospan.Hom.id w) = ùüô _ := rfl
theorem span_map_id {X Y Z : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z) (w : WalkingSpan) :
    (span f g).map (WalkingSpan.Hom.id w) = ùüô _ := rfl
@[simps!]
def diagramIsoCospan (F : WalkingCospan ‚•§ C) : F ‚âÖ cospan (F.map inl) (F.map inr) :=
  NatIso.ofComponents
  (fun j => eqToIso (by rcases j with (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) <;> rfl))
  (by rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) f <;> cases f <;> dsimp <;> simp)
@[simps!]
def diagramIsoSpan (F : WalkingSpan ‚•§ C) : F ‚âÖ span (F.map fst) (F.map snd) :=
  NatIso.ofComponents
  (fun j => eqToIso (by rcases j with (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) <;> rfl))
  (by rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) f <;> cases f <;> dsimp <;> simp)
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
def cospanCompIso (F : C ‚•§ D) {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
    cospan f g ‚ãô F ‚âÖ cospan (F.map f) (F.map g) :=
  NatIso.ofComponents (by rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) <;> exact Iso.refl _)
    (by rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) f <;> cases f <;> dsimp <;> simp)
section
variable (F : C ‚•§ D) {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z)
@[simp]
theorem cospanCompIso_app_left : (cospanCompIso F f g).app WalkingCospan.left = Iso.refl _ := rfl
@[simp]
theorem cospanCompIso_app_right : (cospanCompIso F f g).app WalkingCospan.right = Iso.refl _ :=
  rfl
@[simp]
theorem cospanCompIso_app_one : (cospanCompIso F f g).app WalkingCospan.one = Iso.refl _ := rfl
@[simp]
theorem cospanCompIso_hom_app_left : (cospanCompIso F f g).hom.app WalkingCospan.left = ùüô _ :=
  rfl
@[simp]
theorem cospanCompIso_hom_app_right : (cospanCompIso F f g).hom.app WalkingCospan.right = ùüô _ :=
  rfl
@[simp]
theorem cospanCompIso_hom_app_one : (cospanCompIso F f g).hom.app WalkingCospan.one = ùüô _ := rfl
@[simp]
theorem cospanCompIso_inv_app_left : (cospanCompIso F f g).inv.app WalkingCospan.left = ùüô _ :=
  rfl
@[simp]
theorem cospanCompIso_inv_app_right : (cospanCompIso F f g).inv.app WalkingCospan.right = ùüô _ :=
  rfl
@[simp]
theorem cospanCompIso_inv_app_one : (cospanCompIso F f g).inv.app WalkingCospan.one = ùüô _ := rfl
end
def spanCompIso (F : C ‚•§ D) {X Y Z : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z) :
    span f g ‚ãô F ‚âÖ span (F.map f) (F.map g) :=
  NatIso.ofComponents (by rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) <;> exact Iso.refl _)
    (by rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) f <;> cases f <;> dsimp <;> simp)
section
variable (F : C ‚•§ D) {X Y Z : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z)
@[simp]
theorem spanCompIso_app_left : (spanCompIso F f g).app WalkingSpan.left = Iso.refl _ := rfl
@[simp]
theorem spanCompIso_app_right : (spanCompIso F f g).app WalkingSpan.right = Iso.refl _ := rfl
@[simp]
theorem spanCompIso_app_zero : (spanCompIso F f g).app WalkingSpan.zero = Iso.refl _ := rfl
@[simp]
theorem spanCompIso_hom_app_left : (spanCompIso F f g).hom.app WalkingSpan.left = ùüô _ := rfl
@[simp]
theorem spanCompIso_hom_app_right : (spanCompIso F f g).hom.app WalkingSpan.right = ùüô _ := rfl
@[simp]
theorem spanCompIso_hom_app_zero : (spanCompIso F f g).hom.app WalkingSpan.zero = ùüô _ := rfl
@[simp]
theorem spanCompIso_inv_app_left : (spanCompIso F f g).inv.app WalkingSpan.left = ùüô _ := rfl
@[simp]
theorem spanCompIso_inv_app_right : (spanCompIso F f g).inv.app WalkingSpan.right = ùüô _ := rfl
@[simp]
theorem spanCompIso_inv_app_zero : (spanCompIso F f g).inv.app WalkingSpan.zero = ùüô _ := rfl
end
section
variable {X Y Z X' Y' Z' : C} (iX : X ‚âÖ X') (iY : Y ‚âÖ Y') (iZ : Z ‚âÖ Z')
section
variable {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} {f' : X' ‚ü∂ Z'} {g' : Y' ‚ü∂ Z'}
def cospanExt (wf : iX.hom ‚â´ f' = f ‚â´ iZ.hom) (wg : iY.hom ‚â´ g' = g ‚â´ iZ.hom) :
    cospan f g ‚âÖ cospan f' g' :=
  NatIso.ofComponents
    (by rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©); exacts [iZ, iX, iY])
    (by rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) f <;> cases f <;> dsimp <;> simp [wf, wg])
variable (wf : iX.hom ‚â´ f' = f ‚â´ iZ.hom) (wg : iY.hom ‚â´ g' = g ‚â´ iZ.hom)
@[simp]
theorem cospanExt_app_left : (cospanExt iX iY iZ wf wg).app WalkingCospan.left = iX := by
  dsimp [cospanExt]
@[simp]
theorem cospanExt_app_right : (cospanExt iX iY iZ wf wg).app WalkingCospan.right = iY := by
  dsimp [cospanExt]
@[simp]
theorem cospanExt_app_one : (cospanExt iX iY iZ wf wg).app WalkingCospan.one = iZ := by
  dsimp [cospanExt]
@[simp]
theorem cospanExt_hom_app_left :
    (cospanExt iX iY iZ wf wg).hom.app WalkingCospan.left = iX.hom := by dsimp [cospanExt]
@[simp]
theorem cospanExt_hom_app_right :
    (cospanExt iX iY iZ wf wg).hom.app WalkingCospan.right = iY.hom := by dsimp [cospanExt]
@[simp]
theorem cospanExt_hom_app_one : (cospanExt iX iY iZ wf wg).hom.app WalkingCospan.one = iZ.hom := by
  dsimp [cospanExt]
@[simp]
theorem cospanExt_inv_app_left :
    (cospanExt iX iY iZ wf wg).inv.app WalkingCospan.left = iX.inv := by dsimp [cospanExt]
@[simp]
theorem cospanExt_inv_app_right :
    (cospanExt iX iY iZ wf wg).inv.app WalkingCospan.right = iY.inv := by dsimp [cospanExt]
@[simp]
theorem cospanExt_inv_app_one : (cospanExt iX iY iZ wf wg).inv.app WalkingCospan.one = iZ.inv := by
  dsimp [cospanExt]
end
section
variable {f : X ‚ü∂ Y} {g : X ‚ü∂ Z} {f' : X' ‚ü∂ Y'} {g' : X' ‚ü∂ Z'}
def spanExt (wf : iX.hom ‚â´ f' = f ‚â´ iY.hom) (wg : iX.hom ‚â´ g' = g ‚â´ iZ.hom) :
    span f g ‚âÖ span f' g' :=
  NatIso.ofComponents (by rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©); exacts [iX, iY, iZ])
    (by rintro (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) (‚ü®‚ü© | ‚ü®‚ü®‚ü©‚ü©) f <;> cases f <;> dsimp <;> simp [wf, wg])
variable (wf : iX.hom ‚â´ f' = f ‚â´ iY.hom) (wg : iX.hom ‚â´ g' = g ‚â´ iZ.hom)
@[simp]
theorem spanExt_app_left : (spanExt iX iY iZ wf wg).app WalkingSpan.left = iY := by
  dsimp [spanExt]
@[simp]
theorem spanExt_app_right : (spanExt iX iY iZ wf wg).app WalkingSpan.right = iZ := by
  dsimp [spanExt]
@[simp]
theorem spanExt_app_one : (spanExt iX iY iZ wf wg).app WalkingSpan.zero = iX := by
  dsimp [spanExt]
@[simp]
theorem spanExt_hom_app_left : (spanExt iX iY iZ wf wg).hom.app WalkingSpan.left = iY.hom := by
  dsimp [spanExt]
@[simp]
theorem spanExt_hom_app_right : (spanExt iX iY iZ wf wg).hom.app WalkingSpan.right = iZ.hom := by
  dsimp [spanExt]
@[simp]
theorem spanExt_hom_app_zero : (spanExt iX iY iZ wf wg).hom.app WalkingSpan.zero = iX.hom := by
  dsimp [spanExt]
@[simp]
theorem spanExt_inv_app_left : (spanExt iX iY iZ wf wg).inv.app WalkingSpan.left = iY.inv := by
  dsimp [spanExt]
@[simp]
theorem spanExt_inv_app_right : (spanExt iX iY iZ wf wg).inv.app WalkingSpan.right = iZ.inv := by
  dsimp [spanExt]
@[simp]
theorem spanExt_inv_app_zero : (spanExt iX iY iZ wf wg).inv.app WalkingSpan.zero = iX.inv := by
  dsimp [spanExt]
end
end
end CategoryTheory.Limits