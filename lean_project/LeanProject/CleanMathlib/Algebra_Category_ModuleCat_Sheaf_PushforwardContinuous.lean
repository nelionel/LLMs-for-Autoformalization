import Mathlib.Algebra.Category.ModuleCat.Presheaf.Pushforward
import Mathlib.Algebra.Category.ModuleCat.Sheaf
import Mathlib.CategoryTheory.Sites.Over
universe v v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ u
open CategoryTheory
namespace SheafOfModules
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
  {J : GrothendieckTopology C} {K : GrothendieckTopology D} {F : C ‚•§ D}
  {S : Sheaf J RingCat.{u}} {R : Sheaf K RingCat.{u}}
  [Functor.IsContinuous.{u} F J K] [Functor.IsContinuous.{v} F J K]
  (œÜ : S ‚ü∂ (F.sheafPushforwardContinuous RingCat.{u} J K).obj R)
@[simps]
noncomputable def pushforward : SheafOfModules.{v} R ‚•§ SheafOfModules.{v} S where
  obj M :=
    { val := (PresheafOfModules.pushforward œÜ.val).obj M.val
      isSheaf := ((F.sheafPushforwardContinuous _ J K).obj ‚ü®_, M.isSheaf‚ü©).cond }
  map f :=
    { val := (PresheafOfModules.pushforward œÜ.val).map f.val }
noncomputable abbrev over (M : SheafOfModules.{v} R) (X : D) : SheafOfModules.{v} (R.over X) :=
  (pushforward.{v} (ùüô _)).obj M
end SheafOfModules