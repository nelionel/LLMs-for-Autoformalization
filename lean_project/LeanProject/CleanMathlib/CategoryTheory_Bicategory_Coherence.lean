import Mathlib.CategoryTheory.PathCategory.Basic
import Mathlib.CategoryTheory.Functor.FullyFaithful
import Mathlib.CategoryTheory.Bicategory.Free
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete
open Quiver (Path)
open Quiver.Path
namespace CategoryTheory
open Bicategory Category
universe v u
namespace FreeBicategory
variable {B : Type u} [Quiver.{v + 1} B]
@[simp]
def inclusionPathAux {a : B} : ‚àÄ {b : B}, Path a b ‚Üí Hom a b
  | _, nil => Hom.id a
  | _, cons p f => (inclusionPathAux p).comp (Hom.of f)
local instance homCategory' (a b : B) : Category (Hom a b) :=
  homCategory a b
def inclusionPath (a b : B) : Discrete (Path.{v + 1} a b) ‚•§ Hom a b :=
  Discrete.functor inclusionPathAux
def preinclusion (B : Type u) [Quiver.{v + 1} B] :
    PrelaxFunctor (LocallyDiscrete (Paths B)) (FreeBicategory B) where
  obj a := a.as
  map {a b} f := (@inclusionPath B _ a.as b.as).obj f
  map‚ÇÇ Œ∑ := (inclusionPath _ _).map Œ∑
@[simp]
theorem preinclusion_obj (a : B) : (preinclusion B).obj ‚ü®a‚ü© = a :=
  rfl
@[simp]
theorem preinclusion_map‚ÇÇ {a b : B} (f g : Discrete (Path.{v + 1} a b)) (Œ∑ : f ‚ü∂ g) :
    (preinclusion B).map‚ÇÇ Œ∑ = eqToHom (congr_arg _ (Discrete.ext (Discrete.eq_of_hom Œ∑))) := by
  rcases Œ∑ with ‚ü®‚ü®‚ü©‚ü©
  cases Discrete.ext (by assumption)
  convert (inclusionPath a b).map_id _
@[simp]
def normalizeAux {a : B} : ‚àÄ {b c : B}, Path a b ‚Üí Hom b c ‚Üí Path a c
  | _, _, p, Hom.of f => p.cons f
  | _, _, p, Hom.id _ => p
  | _, _, p, Hom.comp f g => normalizeAux (normalizeAux p f) g
@[simp]
def normalizeIso {a : B} :
    ‚àÄ {b c : B} (p : Path a b) (f : Hom b c),
      (preinclusion B).map ‚ü®p‚ü© ‚â´ f ‚âÖ (preinclusion B).map ‚ü®normalizeAux p f‚ü©
  | _, _, _, Hom.of _ => Iso.refl _
  | _, _, _, Hom.id b => œÅ_ _
  | _, _, p, Hom.comp f g =>
    (Œ±_ _ _ _).symm ‚â™‚â´ whiskerRightIso (normalizeIso p f) g ‚â™‚â´ normalizeIso (normalizeAux p f) g
theorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (Œ∑ : f ‚ü∂ g) :
    normalizeAux p f = normalizeAux p g := by
  rcases Œ∑ with ‚ü®Œ∑'‚ü©
  apply @congr_fun _ _ fun p => normalizeAux p f
  clear p Œ∑
  induction Œ∑' with
  | vcomp _ _ _ _ => apply Eq.trans <;> assumption
  | whisker_left _ _ ih => funext; apply congr_fun ih
  | whisker_right _ _ ih => funext; apply congr_arg‚ÇÇ _ (congr_fun ih _) rfl
  | _ => funext; rfl
theorem normalize_naturality {a b c : B} (p : Path a b) {f g : Hom b c} (Œ∑ : f ‚ü∂ g) :
    (preinclusion B).map ‚ü®p‚ü© ‚óÅ Œ∑ ‚â´ (normalizeIso p g).hom =
      (normalizeIso p f).hom ‚â´
        (preinclusion B).map‚ÇÇ (eqToHom (Discrete.ext (normalizeAux_congr p Œ∑))) := by
  rcases Œ∑ with ‚ü®Œ∑'‚ü©; clear Œ∑
  induction Œ∑' with
  | id => simp
  | vcomp Œ∑ Œ∏ ihf ihg =>
    simp only [mk_vcomp, Bicategory.whiskerLeft_comp]
    slice_lhs 2 3 => rw [ihg]
    slice_lhs 1 2 => rw [ihf]
    simp
  | whisker_left _ _ ih =>
    dsimp
    rw [associator_inv_naturality_right_assoc, whisker_exchange_assoc, ih]
    simp
  | whisker_right h Œ∑' ih =>
    dsimp
    rw [associator_inv_naturality_middle_assoc, ‚Üê comp_whiskerRight_assoc, ih, comp_whiskerRight]
    have := dcongr_arg (fun x => (normalizeIso x h).hom) (normalizeAux_congr p (Quot.mk _ Œ∑'))
    dsimp at this; simp [this]
  | _ => simp
theorem normalizeAux_nil_comp {a b c : B} (f : Hom a b) (g : Hom b c) :
    normalizeAux nil (f.comp g) = (normalizeAux nil f).comp (normalizeAux nil g) := by
  induction g generalizing a with
  | id => rfl
  | of => rfl
  | comp g _ ihf ihg => erw [ihg (f.comp g), ihf f, ihg g, comp_assoc]
def normalize (B : Type u) [Quiver.{v + 1} B] :
    Pseudofunctor (FreeBicategory B) (LocallyDiscrete (Paths B)) where
  obj a := ‚ü®a‚ü©
  map f := ‚ü®normalizeAux nil f‚ü©
  map‚ÇÇ Œ∑ := eqToHom <| Discrete.ext <| normalizeAux_congr nil Œ∑
  mapId _ := eqToIso <| Discrete.ext rfl
  mapComp f g := eqToIso <| Discrete.ext <| normalizeAux_nil_comp f g
def normalizeUnitIso (a b : FreeBicategory B) :
    ùü≠ (a ‚ü∂ b) ‚âÖ (normalize B).mapFunctor a b ‚ãô @inclusionPath B _ a b :=
  NatIso.ofComponents (fun f => (Œª_ f).symm ‚â™‚â´ normalizeIso nil f)
    (by
      intro f g Œ∑
      erw [leftUnitor_inv_naturality_assoc, assoc]
      congr 1
      exact normalize_naturality nil Œ∑)
def normalizeEquiv (a b : B) : Hom a b ‚âå Discrete (Path.{v + 1} a b) :=
  Equivalence.mk ((normalize _).mapFunctor a b) (inclusionPath a b) (normalizeUnitIso a b)
    (Discrete.natIso fun f => eqToIso (by
      obtain ‚ü®f‚ü© := f
      induction f with
      | nil => rfl
      | cons _ _ ih =>
        ext1 
        injection ih with ih
        conv_rhs => rw [‚Üê ih]
        rfl))
instance locally_thin {a b : FreeBicategory B} : Quiver.IsThin (a ‚ü∂ b) := fun _ _ =>
  ‚ü®fun _ _ =>
    (@normalizeEquiv B _ a b).functor.map_injective (Subsingleton.elim _ _)‚ü©
def inclusionMapCompAux {a b : B} :
    ‚àÄ {c : B} (f : Path a b) (g : Path b c),
      (preinclusion _).map (‚ü®f‚ü© ‚â´ ‚ü®g‚ü©) ‚âÖ (preinclusion _).map ‚ü®f‚ü© ‚â´ (preinclusion _).map ‚ü®g‚ü©
  | _, f, nil => (œÅ_ ((preinclusion _).map ‚ü®f‚ü©)).symm
  | _, f, cons g‚ÇÅ g‚ÇÇ => whiskerRightIso (inclusionMapCompAux f g‚ÇÅ) (Hom.of g‚ÇÇ) ‚â™‚â´ Œ±_ _ _ _
def inclusion (B : Type u) [Quiver.{v + 1} B] :
    Pseudofunctor (LocallyDiscrete (Paths B)) (FreeBicategory B) :=
  { 
    preinclusion B with
    mapId := fun _ => Iso.refl _
    mapComp := fun f g => inclusionMapCompAux f.as g.as }
end FreeBicategory
end CategoryTheory