import Mathlib.CategoryTheory.Functor.FullyFaithful
import Mathlib.CategoryTheory.MorphismProperty.Composition
namespace CategoryTheory
universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ
open MorphismProperty
section Induced
variable {C : Type u‚ÇÅ} (D : Type u‚ÇÇ) [Category.{v‚ÇÅ} D]
variable (F : C ‚Üí D) (P : MorphismProperty D) [P.IsMultiplicative]
@[nolint unusedArguments]
def InducedWideCategory (_F : C ‚Üí D) (_P : MorphismProperty D) [IsMultiplicative _P] :=
  C
variable {D}
instance InducedWideCategory.hasCoeToSort {Œ± : Sort*} [CoeSort D Œ±] :
    CoeSort (InducedWideCategory D F P) Œ± :=
  ‚ü®fun c => F c‚ü©
@[simps!]
instance InducedWideCategory.category :
    Category (InducedWideCategory D F P) where
  Hom X Y := {f : F X ‚ü∂ F Y | P f}
  id X := ‚ü®ùüô (F X), P.id_mem (F X)‚ü©
  comp {_ _ _} f g := ‚ü®f.1 ‚â´ g.1, P.comp_mem _ _ f.2 g.2‚ü©
@[simps]
def wideInducedFunctor : InducedWideCategory D F P ‚•§ D where
  obj := F
  map {_ _} f := f.1
instance InducedWideCategory.faithful : (wideInducedFunctor F P).Faithful where
  map_injective {X Y} f g eq := by
    cases f
    cases g
    aesop
end Induced
section WideSubcategory
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
variable (P : MorphismProperty C) [IsMultiplicative P]
@[ext, nolint unusedArguments]
structure WideSubcategory (_P : MorphismProperty C) [IsMultiplicative _P] where
  obj : C
instance WideSubcategory.category : Category.{v‚ÇÅ} (WideSubcategory P) :=
  InducedWideCategory.category WideSubcategory.obj P
@[simp]
lemma WideSubcategory.id_def (X : WideSubcategory P) : (CategoryStruct.id X).1 = ùüô X.obj := rfl
@[simp]
lemma WideSubcategory.comp_def {X Y Z : WideSubcategory P} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).1 = (f.1 ‚â´ g.1 : X.obj ‚ü∂ Z.obj) := rfl
def wideSubcategoryInclusion : WideSubcategory P ‚•§ C :=
  wideInducedFunctor WideSubcategory.obj P
@[simp]
theorem wideSubcategoryInclusion.obj (X) : (wideSubcategoryInclusion P).obj X = X.obj :=
  rfl
@[simp]
theorem wideSubcategoryInclusion.map {X Y} {f : X ‚ü∂ Y} :
    (wideSubcategoryInclusion P).map f = f.1 :=
  rfl
instance wideSubcategory.faithful : (wideSubcategoryInclusion P).Faithful :=
  inferInstanceAs (wideInducedFunctor WideSubcategory.obj P).Faithful
end WideSubcategory
end CategoryTheory