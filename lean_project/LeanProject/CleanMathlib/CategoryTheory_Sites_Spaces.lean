import Mathlib.CategoryTheory.Sites.Grothendieck
import Mathlib.CategoryTheory.Sites.Pretopology
import Mathlib.CategoryTheory.Limits.Lattice
import Mathlib.Topology.Sets.Opens
universe u
namespace Opens
variable (T : Type u) [TopologicalSpace T]
open CategoryTheory TopologicalSpace CategoryTheory.Limits
def grothendieckTopology : GrothendieckTopology (Opens T) where
  sieves X S := ‚àÄ x ‚àà X, ‚àÉ (U : _) (f : U ‚ü∂ X), S f ‚àß x ‚àà U
  top_mem' _ _ hx := ‚ü®_, ùüô _, trivial, hx‚ü©
  pullback_stable' X Y S f hf y hy := by
    rcases hf y (f.le hy) with ‚ü®U, g, hg, hU‚ü©
    refine ‚ü®U ‚äì Y, homOfLE inf_le_right, ?_, hU, hy‚ü©
    apply S.downward_closed hg (homOfLE inf_le_left)
  transitive' X S hS R hR x hx := by
    rcases hS x hx with ‚ü®U, f, hf, hU‚ü©
    rcases hR hf _ hU with ‚ü®V, g, hg, hV‚ü©
    exact ‚ü®_, g ‚â´ f, hg, hV‚ü©
def pretopology : Pretopology (Opens T) where
  coverings X R := ‚àÄ x ‚àà X, ‚àÉ (U : _) (f : U ‚ü∂ X), R f ‚àß x ‚àà U
  has_isos _ _ f _ _ hx := ‚ü®_, _, Presieve.singleton_self _, (inv f).le hx‚ü©
  pullbacks X Y f S hS x hx := by
    rcases hS _ (f.le hx) with ‚ü®U, g, hg, hU‚ü©
    refine ‚ü®_, _, Presieve.pullbackArrows.mk _ _ hg, ?_‚ü©
    have : U ‚äì Y ‚â§ pullback g f :=
      leOfHom (pullback.lift (homOfLE inf_le_left) (homOfLE inf_le_right) rfl)
    apply this ‚ü®hU, hx‚ü©
  transitive X S Ti hS hTi x hx := by
    rcases hS x hx with ‚ü®U, f, hf, hU‚ü©
    rcases hTi f hf x hU with ‚ü®V, g, hg, hV‚ü©
    exact ‚ü®_, _, ‚ü®_, g, f, hf, hg, rfl‚ü©, hV‚ü©
@[simp]
theorem pretopology_ofGrothendieck :
    Pretopology.ofGrothendieck _ (Opens.grothendieckTopology T) = Opens.pretopology T := by
  apply le_antisymm
  ¬∑ intro X R hR x hx
    rcases hR x hx with ‚ü®U, f, ‚ü®V, g‚ÇÅ, g‚ÇÇ, hg‚ÇÇ, _‚ü©, hU‚ü©
    exact ‚ü®V, g‚ÇÇ, hg‚ÇÇ, g‚ÇÅ.le hU‚ü©
  ¬∑ intro X R hR x hx
    rcases hR x hx with ‚ü®U, f, hf, hU‚ü©
    exact ‚ü®U, f, Sieve.le_generate R U hf, hU‚ü©
@[simp]
theorem pretopology_toGrothendieck :
    Pretopology.toGrothendieck _ (Opens.pretopology T) = Opens.grothendieckTopology T := by
  rw [‚Üê pretopology_ofGrothendieck]
  apply (Pretopology.gi (Opens T)).l_u_eq
end Opens