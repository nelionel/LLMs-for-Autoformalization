import Mathlib.CategoryTheory.Functor.Flat
import Mathlib.CategoryTheory.Sites.Continuous
import Mathlib.Tactic.ApplyFun
universe w v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
noncomputable section
open CategoryTheory Opposite CategoryTheory.Presieve.FamilyOfElements CategoryTheory.Presieve
  CategoryTheory.Limits
namespace CategoryTheory
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (F : C ‚•§ D)
variable {A : Type u‚ÇÉ} [Category.{v‚ÇÉ} A]
variable (J : GrothendieckTopology C) (K : GrothendieckTopology D)
variable {L : GrothendieckTopology A}
structure CoverPreserving (G : C ‚•§ D) : Prop where
  cover_preserve : ‚àÄ {U : C} {S : Sieve U} (_ : S ‚àà J U), S.functorPushforward G ‚àà K (G.obj U)
theorem idCoverPreserving : CoverPreserving J J (ùü≠ _) :=
  ‚ü®fun hS => by simpa using hS‚ü©
theorem CoverPreserving.comp {F} (hF : CoverPreserving J K F) {G} (hG : CoverPreserving K L G) :
    CoverPreserving J L (F ‚ãô G) :=
  ‚ü®fun hS => by
    rw [Sieve.functorPushforward_comp]
    exact hG.cover_preserve (hF.cover_preserve hS)‚ü©
structure CompatiblePreserving (K : GrothendieckTopology D) (G : C ‚•§ D) : Prop where
  compatible :
    ‚àÄ (‚Ñ± : Sheaf K (Type w)) {Z} {T : Presieve Z} {x : FamilyOfElements (G.op ‚ãô ‚Ñ±.val) T}
      (_ : x.Compatible) {Y‚ÇÅ Y‚ÇÇ} {X} (f‚ÇÅ : X ‚ü∂ G.obj Y‚ÇÅ) (f‚ÇÇ : X ‚ü∂ G.obj Y‚ÇÇ) {g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z}
      {g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z} (hg‚ÇÅ : T g‚ÇÅ) (hg‚ÇÇ : T g‚ÇÇ) (_ : f‚ÇÅ ‚â´ G.map g‚ÇÅ = f‚ÇÇ ‚â´ G.map g‚ÇÇ),
      ‚Ñ±.val.map f‚ÇÅ.op (x g‚ÇÅ hg‚ÇÅ) = ‚Ñ±.val.map f‚ÇÇ.op (x g‚ÇÇ hg‚ÇÇ)
section
variable {J K} {G : C ‚•§ D} (hG : CompatiblePreserving.{w} K G) (‚Ñ± : Sheaf K (Type w)) {Z : C}
variable {T : Presieve Z} {x : FamilyOfElements (G.op ‚ãô ‚Ñ±.val) T} (h : x.Compatible)
include hG h
theorem Presieve.FamilyOfElements.Compatible.functorPushforward :
    (x.functorPushforward G).Compatible := by
  rintro Z‚ÇÅ Z‚ÇÇ W g‚ÇÅ g‚ÇÇ f‚ÇÅ' f‚ÇÇ' H‚ÇÅ H‚ÇÇ eq
  unfold FamilyOfElements.functorPushforward
  rcases getFunctorPushforwardStructure H‚ÇÅ with ‚ü®X‚ÇÅ, f‚ÇÅ, h‚ÇÅ, hf‚ÇÅ, rfl‚ü©
  rcases getFunctorPushforwardStructure H‚ÇÇ with ‚ü®X‚ÇÇ, f‚ÇÇ, h‚ÇÇ, hf‚ÇÇ, rfl‚ü©
  suffices ‚Ñ±.val.map (g‚ÇÅ ‚â´ h‚ÇÅ).op (x f‚ÇÅ hf‚ÇÅ) = ‚Ñ±.val.map (g‚ÇÇ ‚â´ h‚ÇÇ).op (x f‚ÇÇ hf‚ÇÇ) by
    simpa using this
  apply hG.compatible ‚Ñ± h _ _ hf‚ÇÅ hf‚ÇÇ
  simpa using eq
@[simp]
theorem CompatiblePreserving.apply_map {Y : C} {f : Y ‚ü∂ Z} (hf : T f) :
    x.functorPushforward G (G.map f) (image_mem_functorPushforward G T hf) = x f hf := by
  unfold FamilyOfElements.functorPushforward
  rcases getFunctorPushforwardStructure (image_mem_functorPushforward G T hf) with
    ‚ü®X, g, f', hg, eq‚ü©
  simpa using hG.compatible ‚Ñ± h f' (ùüô _) hg hf (by simp [eq])
end
open Limits.WalkingCospan
theorem compatiblePreservingOfFlat {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÅ} [Category.{v‚ÇÅ} D]
    (K : GrothendieckTopology D) (G : C ‚•§ D) [RepresentablyFlat G] : CompatiblePreserving K G := by
  constructor
  intro ‚Ñ± Z T x hx Y‚ÇÅ Y‚ÇÇ X f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ hg‚ÇÅ hg‚ÇÇ e
  let c : Cone (cospan g‚ÇÅ g‚ÇÇ ‚ãô G) :=
    (Cones.postcompose (diagramIsoCospan (cospan g‚ÇÅ g‚ÇÇ ‚ãô G)).inv).obj (PullbackCone.mk f‚ÇÅ f‚ÇÇ e)
  let c' := IsCofiltered.cone (c.toStructuredArrow ‚ãô StructuredArrow.pre _ _ _)
  have eq‚ÇÅ : f‚ÇÅ = (c'.pt.hom ‚â´ G.map (c'.œÄ.app left).right) ‚â´ eqToHom (by simp) := by
    erw [‚Üê (c'.œÄ.app left).w]
    dsimp [c]
    simp
  have eq‚ÇÇ : f‚ÇÇ = (c'.pt.hom ‚â´ G.map (c'.œÄ.app right).right) ‚â´ eqToHom (by simp) := by
    erw [‚Üê (c'.œÄ.app right).w]
    dsimp [c]
    simp
  conv_lhs => rw [eq‚ÇÅ]
  conv_rhs => rw [eq‚ÇÇ]
  simp only [op_comp, Functor.map_comp, types_comp_apply, eqToHom_op, eqToHom_map]
  apply congr_arg 
  injection c'.œÄ.naturality WalkingCospan.Hom.inl with _ e‚ÇÅ
  injection c'.œÄ.naturality WalkingCospan.Hom.inr with _ e‚ÇÇ
  exact hx (c'.œÄ.app left).right (c'.œÄ.app right).right hg‚ÇÅ hg‚ÇÇ (e‚ÇÅ.symm.trans e‚ÇÇ)
theorem compatiblePreservingOfDownwardsClosed (F : C ‚•§ D) [F.Full] [F.Faithful]
    (hF : ‚àÄ {c : C} {d : D} (_ : d ‚ü∂ F.obj c), Œ£c', F.obj c' ‚âÖ d) : CompatiblePreserving K F := by
  constructor
  introv hx he
  obtain ‚ü®X', e‚ü© := hF f‚ÇÅ
  apply (‚Ñ±.1.mapIso e.op).toEquiv.injective
  simp only [Iso.op_hom, Iso.toEquiv_fun, ‚Ñ±.1.mapIso_hom, ‚Üê FunctorToTypes.map_comp_apply]
  simpa using
    hx (F.preimage <| e.hom ‚â´ f‚ÇÅ) (F.preimage <| e.hom ‚â´ f‚ÇÇ) hg‚ÇÅ hg‚ÇÇ
      (F.map_injective <| by simpa using he)
variable {F J K}
lemma Functor.isContinuous_of_coverPreserving (hF‚ÇÅ : CompatiblePreserving.{w} K F)
    (hF‚ÇÇ : CoverPreserving J K F) : Functor.IsContinuous.{w} F J K where
  op_comp_isSheaf_of_types G X S hS x hx := by
    apply exists_unique_of_exists_of_unique
    ¬∑ have H := (isSheaf_iff_isSheaf_of_type _ _).1 G.2 _ (hF‚ÇÇ.cover_preserve hS)
      exact ‚ü®H.amalgamate (x.functorPushforward F) (hx.functorPushforward hF‚ÇÅ),
        fun V f hf => (H.isAmalgamation (hx.functorPushforward hF‚ÇÅ) (F.map f) _).trans
          (hF‚ÇÅ.apply_map _ hx hf)‚ü©
    ¬∑ intro y‚ÇÅ y‚ÇÇ hy‚ÇÅ hy‚ÇÇ
      apply (Presieve.isSeparated_of_isSheaf _ _ ((isSheaf_iff_isSheaf_of_type _ _).1 G.2) _
        (hF‚ÇÇ.cover_preserve hS)).ext
      rintro Y _ ‚ü®Z, g, h, hg, rfl‚ü©
      dsimp
      simp only [Functor.map_comp, types_comp_apply]
      have H := (hy‚ÇÅ g hg).trans (hy‚ÇÇ g hg).symm
      dsimp at H
      rw [H]
end CategoryTheory