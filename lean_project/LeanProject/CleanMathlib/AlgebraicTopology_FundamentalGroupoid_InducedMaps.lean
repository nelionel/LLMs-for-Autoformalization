import Mathlib.Topology.Homotopy.Equiv
import Mathlib.CategoryTheory.Equivalence
import Mathlib.AlgebraicTopology.FundamentalGroupoid.Product
noncomputable section
universe u
open FundamentalGroupoid
open CategoryTheory
open FundamentalGroupoidFunctor
open scoped FundamentalGroupoid
open scoped unitInterval
namespace unitInterval
def path01 : Path (0 : I) 1 where
  toFun := id
  source' := rfl
  target' := rfl
def upath01 : Path (ULift.up 0 : ULift.{u} I) (ULift.up 1) where
  toFun := ULift.up
  source' := rfl
  target' := rfl
attribute [local instance] Path.Homotopic.setoid
def uhpath01 : @fromTop (TopCat.of <| ULift.{u} I) (ULift.up (0 : I)) ‚ü∂ fromTop (ULift.up 1) :=
  ‚ü¶upath01‚üß
end unitInterval
namespace ContinuousMap.Homotopy
open unitInterval (uhpath01)
attribute [local instance] Path.Homotopic.setoid
section Casts
abbrev hcast {X : TopCat} {x‚ÇÄ x‚ÇÅ : X} (hx : x‚ÇÄ = x‚ÇÅ) : fromTop x‚ÇÄ ‚ü∂ fromTop x‚ÇÅ :=
  eqToHom <| FundamentalGroupoid.ext hx
@[simp]
theorem hcast_def {X : TopCat} {x‚ÇÄ x‚ÇÅ : X} (hx‚ÇÄ : x‚ÇÄ = x‚ÇÅ) :
    hcast hx‚ÇÄ = eqToHom (FundamentalGroupoid.ext hx‚ÇÄ) :=
  rfl
variable {X‚ÇÅ X‚ÇÇ Y : TopCat.{u}} {f : C(X‚ÇÅ, Y)} {g : C(X‚ÇÇ, Y)} {x‚ÇÄ x‚ÇÅ : X‚ÇÅ} {x‚ÇÇ x‚ÇÉ : X‚ÇÇ}
  {p : Path x‚ÇÄ x‚ÇÅ} {q : Path x‚ÇÇ x‚ÇÉ} (hfg : ‚àÄ t, f (p t) = g (q t))
include hfg
theorem heq_path_of_eq_image : HEq ((œÄ‚Çò f).map ‚ü¶p‚üß) ((œÄ‚Çò g).map ‚ü¶q‚üß) := by
  simp only [map_eq, ‚Üê Path.Homotopic.map_lift]; apply Path.Homotopic.hpath_hext; exact hfg
private theorem start_path : f x‚ÇÄ = g x‚ÇÇ := by convert hfg 0 <;> simp only [Path.source]
private theorem end_path : f x‚ÇÅ = g x‚ÇÉ := by convert hfg 1 <;> simp only [Path.target]
theorem eq_path_of_eq_image :
    (œÄ‚Çò f).map ‚ü¶p‚üß = hcast (start_path hfg) ‚â´ (œÄ‚Çò g).map ‚ü¶q‚üß ‚â´ hcast (end_path hfg).symm := by
  rw [conj_eqToHom_iff_heq
    ((œÄ‚Çò f).map ‚ü¶p‚üß) ((œÄ‚Çò g).map ‚ü¶q‚üß)
    (FundamentalGroupoid.ext <| start_path hfg)
    (FundamentalGroupoid.ext <| end_path hfg)]
  exact heq_path_of_eq_image hfg
end Casts
variable {X Y : TopCat.{u}} {f g : C(X, Y)} (H : ContinuousMap.Homotopy f g) {x‚ÇÄ x‚ÇÅ : X}
  (p : fromTop x‚ÇÄ ‚ü∂ fromTop x‚ÇÅ)
def uliftMap : C(TopCat.of (ULift.{u} I √ó X), Y) :=
  ‚ü®fun x => H (x.1.down, x.2),
    H.continuous.comp ((continuous_uLift_down.comp continuous_fst).prod_mk continuous_snd)‚ü©
@[simp, nolint simpNF]
theorem ulift_apply (i : ULift.{u} I) (x : X) : H.uliftMap (i, x) = H (i.down, x) :=
  rfl
abbrev prodToProdTopI {a‚ÇÅ a‚ÇÇ : TopCat.of (ULift I)} {b‚ÇÅ b‚ÇÇ : X} (p‚ÇÅ : fromTop a‚ÇÅ ‚ü∂ fromTop a‚ÇÇ)
    (p‚ÇÇ : fromTop b‚ÇÅ ‚ü∂ fromTop b‚ÇÇ) :=
  (prodToProdTop (TopCat.of <| ULift I) X).map (X := (‚ü®a‚ÇÅ‚ü©, ‚ü®b‚ÇÅ‚ü©)) (Y := (‚ü®a‚ÇÇ‚ü©, ‚ü®b‚ÇÇ‚ü©)) (p‚ÇÅ, p‚ÇÇ)
def diagonalPath : fromTop (H (0, x‚ÇÄ)) ‚ü∂ fromTop (H (1, x‚ÇÅ)) :=
  (œÄ‚Çò H.uliftMap).map (prodToProdTopI uhpath01 p)
def diagonalPath' : fromTop (f x‚ÇÄ) ‚ü∂ fromTop (g x‚ÇÅ) :=
  hcast (H.apply_zero x‚ÇÄ).symm ‚â´ H.diagonalPath p ‚â´ hcast (H.apply_one x‚ÇÅ)
theorem apply_zero_path : (œÄ‚Çò f).map p = hcast (H.apply_zero x‚ÇÄ).symm ‚â´
    (œÄ‚Çò H.uliftMap).map (prodToProdTopI (ùüô (@fromTop (TopCat.of _) (ULift.up 0))) p) ‚â´
    hcast (H.apply_zero x‚ÇÅ) :=
  Quotient.inductionOn p fun p' => by
    apply @eq_path_of_eq_image _ _ _ _ H.uliftMap _ _ _ _ _ ((Path.refl (ULift.up _)).prod p')
    erw [Path.prod_coe]; simp_rw [ulift_apply]; simp
theorem apply_one_path : (œÄ‚Çò g).map p = hcast (H.apply_one x‚ÇÄ).symm ‚â´
    (œÄ‚Çò H.uliftMap).map (prodToProdTopI (ùüô (@fromTop (TopCat.of _) (ULift.up 1))) p) ‚â´
    hcast (H.apply_one x‚ÇÅ) :=
  Quotient.inductionOn p fun p' => by
    apply @eq_path_of_eq_image _ _ _ _ H.uliftMap _ _ _ _ _ ((Path.refl (ULift.up _)).prod p')
    erw [Path.prod_coe]; simp_rw [ulift_apply]; simp
theorem evalAt_eq (x : X) : ‚ü¶H.evalAt x‚üß = hcast (H.apply_zero x).symm ‚â´
    (œÄ‚Çò H.uliftMap).map (prodToProdTopI uhpath01 (ùüô (fromTop x))) ‚â´
      hcast (H.apply_one x).symm.symm := by
  dsimp only [prodToProdTopI, uhpath01, hcast]
  refine (@conj_eqToHom_iff_heq (œÄ‚Çì Y) _ _ _ _ _ _ _ _
    (FundamentalGroupoid.ext <| H.apply_one x).symm).mpr ?_
  simp only [id_eq_path_refl, prodToProdTop_map, Path.Homotopic.prod_lift, map_eq, ‚Üê
    Path.Homotopic.map_lift]
  apply Path.Homotopic.hpath_hext; intro; rfl
theorem eq_diag_path : (œÄ‚Çò f).map p ‚â´ ‚ü¶H.evalAt x‚ÇÅ‚üß = H.diagonalPath' p ‚àß
    (‚ü¶H.evalAt x‚ÇÄ‚üß ‚â´ (œÄ‚Çò g).map p : fromTop (f x‚ÇÄ) ‚ü∂ fromTop (g x‚ÇÅ)) = H.diagonalPath' p := by
  rw [H.apply_zero_path, H.apply_one_path, H.evalAt_eq]
  erw [H.evalAt_eq] 
  dsimp only [prodToProdTopI]
  constructor
  ¬∑ slice_lhs 2 4 => rw [eqToHom_trans, eqToHom_refl] 
    slice_lhs 2 4 => simp [‚Üê CategoryTheory.Functor.map_comp]
    rfl
  ¬∑ slice_lhs 2 4 => rw [eqToHom_trans, eqToHom_refl] 
    slice_lhs 2 4 => simp [‚Üê CategoryTheory.Functor.map_comp]
    rfl
end ContinuousMap.Homotopy
namespace FundamentalGroupoidFunctor
open CategoryTheory
open scoped FundamentalGroupoid
attribute [local instance] Path.Homotopic.setoid
variable {X Y : TopCat.{u}} {f g : C(X, Y)} (H : ContinuousMap.Homotopy f g)
def homotopicMapsNatIso : @Quiver.Hom _ Functor.category.toQuiver (œÄ‚Çò f) (œÄ‚Çò g) where
  app x := ‚ü¶H.evalAt x.as‚üß
  naturality x y p := by erw [(H.eq_diag_path p).1, (H.eq_diag_path p).2]
instance : IsIso (homotopicMapsNatIso H) := by apply NatIso.isIso_of_isIso_app
open scoped ContinuousMap
def equivOfHomotopyEquiv (hequiv : X ‚âÉ‚Çï Y) : œÄ‚Çì X ‚âå œÄ‚Çì Y := by
  apply CategoryTheory.Equivalence.mk (œÄ‚Çò hequiv.toFun : œÄ‚Çì X ‚•§ œÄ‚Çì Y)
    (œÄ‚Çò hequiv.invFun : œÄ‚Çì Y ‚•§ œÄ‚Çì X) <;>
    simp only [Grpd.hom_to_functor, Grpd.id_to_functor]
  ¬∑ convert (asIso (homotopicMapsNatIso hequiv.left_inv.some)).symm
    exacts [((œÄ).map_id X).symm, ((œÄ).map_comp _ _).symm]
  ¬∑ convert asIso (homotopicMapsNatIso hequiv.right_inv.some)
    exacts [((œÄ).map_comp _ _).symm, ((œÄ).map_id Y).symm]
end FundamentalGroupoidFunctor