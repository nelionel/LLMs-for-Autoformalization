import Mathlib.Algebra.Category.ModuleCat.Presheaf.Abelian
import Mathlib.Algebra.Category.ModuleCat.Presheaf.EpiMono
import Mathlib.Algebra.Category.ModuleCat.Presheaf.Free
import Mathlib.Algebra.Homology.ShortComplex.Exact
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Generator
universe v v‚ÇÅ u u‚ÇÅ
open CategoryTheory Limits
namespace PresheafOfModules
variable {C : Type u} [Category.{v} C] {R : C·µí·µñ ‚•§ RingCat.{v}}
noncomputable def freeYonedaEquiv {M : PresheafOfModules.{v} R} {X : C} :
    ((free R).obj (yoneda.obj X) ‚ü∂ M) ‚âÉ M.obj (Opposite.op X) :=
  freeHomEquiv.trans yonedaEquiv
lemma freeYonedaEquiv_symm_app (M : PresheafOfModules.{v} R) (X : C)
    (x : M.obj (Opposite.op X)) :
    (freeYonedaEquiv.symm x).app (Opposite.op X) (ModuleCat.freeMk (ùüô _)) = x := by
  dsimp [freeYonedaEquiv, freeHomEquiv, yonedaEquiv]
  rw [ModuleCat.freeDesc_apply, op_id, M.presheaf.map_id]
  rfl
lemma freeYonedaEquiv_comp {M N : PresheafOfModules.{v} R} {X : C}
    (m : ((free R).obj (yoneda.obj X) ‚ü∂ M)) (œÜ : M ‚ü∂ N) :
    freeYonedaEquiv (m ‚â´ œÜ) = œÜ.app _ (freeYonedaEquiv m) := rfl
variable (R) in
def freeYoneda : Set (PresheafOfModules.{v} R) := Set.range (yoneda ‚ãô free R).obj
namespace freeYoneda
instance : Small.{u} (freeYoneda R) := by
  let œÄ : C ‚Üí freeYoneda R := fun X ‚Ü¶ ‚ü®_, ‚ü®X, rfl‚ü©‚ü©
  have hœÄ : Function.Surjective œÄ := by rintro ‚ü®_, ‚ü®X, rfl‚ü©‚ü©; exact ‚ü®X, rfl‚ü©
  exact small_of_surjective hœÄ
variable (R)
lemma isSeparating : IsSeparating (freeYoneda R) := by
  intro M N f‚ÇÅ f‚ÇÇ h
  ext ‚ü®X‚ü© m
  obtain ‚ü®g, rfl‚ü© := freeYonedaEquiv.surjective m
  exact congr_arg freeYonedaEquiv (h _ ‚ü®X, rfl‚ü© g)
lemma isDetecting : IsDetecting (freeYoneda R) :=
  (isSeparating R).isDetecting
end freeYoneda
instance wellPowered {C‚ÇÄ : Type u} [SmallCategory C‚ÇÄ] (R‚ÇÄ : C‚ÇÄ·µí·µñ ‚•§ RingCat.{u}) :
    WellPowered (PresheafOfModules.{u} R‚ÇÄ) :=
  wellPowered_of_isDetecting (freeYoneda.isDetecting R‚ÇÄ)
abbrev Elements {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {R : C·µí·µñ ‚•§ RingCat.{u}}
  (M : PresheafOfModules.{v} R) := ((toPresheaf R).obj M ‚ãô forget Ab).Elements
abbrev elementsMk {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {R : C·µí·µñ ‚•§ RingCat.{u}}
    (M : PresheafOfModules.{v} R) (X : C·µí·µñ) (x : M.obj X) : M.Elements :=
  Functor.elementsMk _ X x
namespace Elements
variable {C : Type u} [Category.{v} C] {R : C·µí·µñ ‚•§ RingCat.{v}} {M : PresheafOfModules.{v} R}
noncomputable abbrev freeYoneda (m : M.Elements) :
    PresheafOfModules.{v} R := (free R).obj (yoneda.obj m.1.unop)
noncomputable abbrev fromFreeYoneda (m : M.Elements) :
    m.freeYoneda ‚ü∂ M :=
  freeYonedaEquiv.symm m.2
lemma fromFreeYoneda_app_apply (m : M.Elements) :
    m.fromFreeYoneda.app m.1 (ModuleCat.freeMk (ùüô _)) = m.2 := by
  apply freeYonedaEquiv_symm_app
end Elements
section
variable {C : Type u} [SmallCategory.{u} C] {R : C·µí·µñ ‚•§ RingCat.{u}} (M : PresheafOfModules.{u} R)
noncomputable abbrev freeYonedaCoproduct : PresheafOfModules.{u} R :=
  ‚àê (Elements.freeYoneda (M := M))
noncomputable abbrev ŒπFreeYonedaCoproduct (m : M.Elements) :
    m.freeYoneda ‚ü∂ M.freeYonedaCoproduct :=
  Sigma.Œπ _ m
noncomputable def fromFreeYonedaCoproduct :
    M.freeYonedaCoproduct ‚ü∂ M :=
  Sigma.desc Elements.fromFreeYoneda
noncomputable def freeYonedaCoproductMk (m : M.Elements) :
    M.freeYonedaCoproduct.obj m.1 :=
  (M.ŒπFreeYonedaCoproduct m).app _ (ModuleCat.freeMk (ùüô _))
@[reassoc (attr := simp)]
lemma Œπ_fromFreeYonedaCoproduct (m : M.Elements) :
    M.ŒπFreeYonedaCoproduct m ‚â´ M.fromFreeYonedaCoproduct = m.fromFreeYoneda := by
  apply Sigma.Œπ_desc
lemma Œπ_fromFreeYonedaCoproduct_apply (m : M.Elements) (X : C·µí·µñ) (x : m.freeYoneda.obj X) :
    M.fromFreeYonedaCoproduct.app X ((M.ŒπFreeYonedaCoproduct m).app X x) =
      m.fromFreeYoneda.app X x :=
  congr_fun ((evaluation R X ‚ãô forget _).congr_map (M.Œπ_fromFreeYonedaCoproduct m)) x
@[simp]
lemma fromFreeYonedaCoproduct_app_mk (m : M.Elements) :
    M.fromFreeYonedaCoproduct.app _ (M.freeYonedaCoproductMk m) = m.2 := by
  dsimp [freeYonedaCoproductMk]
  erw [M.Œπ_fromFreeYonedaCoproduct_apply m]
  rw [m.fromFreeYoneda_app_apply]
instance : Epi M.fromFreeYonedaCoproduct :=
  epi_of_surjective (fun X m ‚Ü¶ ‚ü®M.freeYonedaCoproductMk (M.elementsMk X m),
    M.fromFreeYonedaCoproduct_app_mk (M.elementsMk X m)‚ü©)
noncomputable def toFreeYonedaCoproduct :
    (kernel M.fromFreeYonedaCoproduct).freeYonedaCoproduct ‚ü∂ M.freeYonedaCoproduct :=
  (kernel M.fromFreeYonedaCoproduct).fromFreeYonedaCoproduct ‚â´ kernel.Œπ _
@[reassoc (attr := simp)]
lemma toFreeYonedaCoproduct_fromFreeYonedaCoproduct :
    M.toFreeYonedaCoproduct ‚â´ M.fromFreeYonedaCoproduct = 0 := by
  simp [toFreeYonedaCoproduct]
noncomputable abbrev freeYonedaCoproductsCokernelCofork :
    CokernelCofork M.toFreeYonedaCoproduct :=
  CokernelCofork.ofœÄ _ M.toFreeYonedaCoproduct_fromFreeYonedaCoproduct
noncomputable def isColimitFreeYonedaCoproductsCokernelCofork :
    IsColimit M.freeYonedaCoproductsCokernelCofork := by
  let S := ShortComplex.mk _ _ M.toFreeYonedaCoproduct_fromFreeYonedaCoproduct
  let T := ShortComplex.mk _ _ (kernel.condition M.fromFreeYonedaCoproduct)
  let œÜ : S ‚ü∂ T :=
    { œÑ‚ÇÅ := fromFreeYonedaCoproduct _
      œÑ‚ÇÇ := ùüô _
      œÑ‚ÇÉ := ùüô _ }
  exact ((ShortComplex.exact_iff_of_epi_of_isIso_of_mono œÜ).2
    (T.exact_of_f_is_kernel (kernelIsKernel _))).gIsCokernel
end
end PresheafOfModules