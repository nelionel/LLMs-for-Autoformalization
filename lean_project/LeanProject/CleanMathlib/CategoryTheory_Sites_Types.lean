import Mathlib.CategoryTheory.Sites.Canonical
universe u
namespace CategoryTheory
def typesGrothendieckTopology : GrothendieckTopology (Type u) where
  sieves Œ± S := ‚àÄ x : Œ±, S fun _ : PUnit => x
  top_mem' _ _ := trivial
  pullback_stable' _ _ _ f hs x := hs (f x)
  transitive' _ _ hs _ hr x := hr (hs x) PUnit.unit
@[simps]
def discreteSieve (Œ± : Type u) : Sieve Œ± where
  arrows _ f := ‚àÉ x, ‚àÄ y, f y = x
  downward_closed := fun ‚ü®x, hx‚ü© g => ‚ü®x, fun y => hx <| g y‚ü©
theorem discreteSieve_mem (Œ± : Type u) : discreteSieve Œ± ‚àà typesGrothendieckTopology Œ± :=
  fun x => ‚ü®x, fun _ => rfl‚ü©
def discretePresieve (Œ± : Type u) : Presieve Œ± :=
  fun Œ≤ _ => ‚àÉ x : Œ≤, ‚àÄ y : Œ≤, y = x
theorem generate_discretePresieve_mem (Œ± : Type u) :
    Sieve.generate (discretePresieve Œ±) ‚àà typesGrothendieckTopology Œ± :=
  fun x => ‚ü®PUnit, id, fun _ => x, ‚ü®PUnit.unit, fun _ => Subsingleton.elim _ _‚ü©, rfl‚ü©
theorem Presieve.isSheaf_yoneda' {Œ± : Type u} :
    Presieve.IsSheaf typesGrothendieckTopology (yoneda.obj Œ±) :=
  fun Œ≤ _ hs x hx =>
  ‚ü®fun y => x _ (hs y) PUnit.unit, fun Œ≥ f h =>
    funext fun z => by
      convert congr_fun (hx (ùüô _) (fun _ => z) (hs <| f z) h rfl) PUnit.unit using 1,
    fun f hf => funext fun y => by convert congr_fun (hf _ (hs y)) PUnit.unit‚ü©
theorem Presheaf.isSheaf_yoneda' {Œ± : Type u} :
    Presheaf.IsSheaf typesGrothendieckTopology (yoneda.obj Œ±) := by
  rw [isSheaf_iff_isSheaf_of_type]
  exact Presieve.isSheaf_yoneda'
@[deprecated (since := "2024-11-26")] alias isSheaf_yoneda' := Presieve.isSheaf_yoneda'
@[simps]
def yoneda' : Type u ‚•§ Sheaf typesGrothendieckTopology (Type u) where
  obj Œ± := ‚ü®yoneda.obj Œ±, Presheaf.isSheaf_yoneda'‚ü©
  map f := ‚ü®yoneda.map f‚ü©
@[simp]
theorem yoneda'_comp : yoneda'.{u} ‚ãô sheafToPresheaf _ _ = yoneda :=
  rfl
open Opposite
def eval (P : Type u·µí·µñ ‚•§ Type u) (Œ± : Type u) (s : P.obj (op Œ±)) (x : Œ±) : P.obj (op PUnit) :=
  P.map (‚Üæfun _ => x).op s
open Presieve
noncomputable def typesGlue (S : Type u·µí·µñ ‚•§ Type u) (hs : IsSheaf typesGrothendieckTopology S)
    (Œ± : Type u) (f : Œ± ‚Üí S.obj (op PUnit)) : S.obj (op Œ±) :=
  (hs.isSheafFor _ _ (generate_discretePresieve_mem Œ±)).amalgamate
    (fun _ g hg => S.map (‚Üæfun _ => PUnit.unit).op <| f <| g <| Classical.choose hg)
    fun Œ≤ Œ≥ Œ¥ g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ h =>
    (hs.isSheafFor _ _ (generate_discretePresieve_mem Œ¥)).isSeparatedFor.ext fun Œµ g ‚ü®x, _‚ü© => by
      have : f‚ÇÅ (Classical.choose hf‚ÇÅ) = f‚ÇÇ (Classical.choose hf‚ÇÇ) :=
        Classical.choose_spec hf‚ÇÅ (g‚ÇÅ <| g x) ‚ñ∏
          Classical.choose_spec hf‚ÇÇ (g‚ÇÇ <| g x) ‚ñ∏ congr_fun h _
      simp_rw [‚Üê FunctorToTypes.map_comp_apply, this, ‚Üê op_comp]
      rfl
theorem eval_typesGlue {S hs Œ±} (f) : eval.{u} S Œ± (typesGlue S hs Œ± f) = f := by
  funext x
  apply (IsSheafFor.valid_glue _ _ _ <| ‚ü®PUnit.unit, fun _ => Subsingleton.elim _ _‚ü©).trans
  convert FunctorToTypes.map_id_apply S _
theorem typesGlue_eval {S hs Œ±} (s) : typesGlue.{u} S hs Œ± (eval S Œ± s) = s := by
  apply (hs.isSheafFor _ _ (generate_discretePresieve_mem Œ±)).isSeparatedFor.ext
  intro Œ≤ f hf
  apply (IsSheafFor.valid_glue _ _ _ hf).trans
  apply (FunctorToTypes.map_comp_apply _ _ _ _).symm.trans
  rw [‚Üê op_comp]
  suffices ((‚Üæfun _ ‚Ü¶ PUnit.unit) ‚â´ ‚Üæfun _ ‚Ü¶ f (Classical.choose hf)) = f by rw [this]
  funext x
  exact congr_arg f (Classical.choose_spec hf x).symm
@[simps]
noncomputable def evalEquiv (S : Type u·µí·µñ ‚•§ Type u)
    (hs : Presheaf.IsSheaf typesGrothendieckTopology S)
    (Œ± : Type u) : S.obj (op Œ±) ‚âÉ (Œ± ‚Üí S.obj (op PUnit)) where
  toFun := eval S Œ±
  invFun := typesGlue S ((isSheaf_iff_isSheaf_of_type _ _ ).1 hs) Œ±
  left_inv := typesGlue_eval
  right_inv := eval_typesGlue
theorem eval_map (S : Type u·µí·µñ ‚•§ Type u) (Œ± Œ≤) (f : Œ≤ ‚ü∂ Œ±) (s x) :
    eval S Œ≤ (S.map f.op s) x = eval S Œ± s (f x) := by
  simp_rw [eval, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]; rfl
@[simps!]
noncomputable def equivYoneda (S : Type u·µí·µñ ‚•§ Type u)
    (hs : Presheaf.IsSheaf typesGrothendieckTopology S) :
    S ‚âÖ yoneda.obj (S.obj (op PUnit)) :=
  NatIso.ofComponents (fun Œ± => Equiv.toIso <| evalEquiv S hs <| unop Œ±) fun {Œ± Œ≤} f =>
    funext fun _ => funext fun _ => eval_map S (unop Œ±) (unop Œ≤) f.unop _ _
@[simps]
noncomputable def equivYoneda' (S : Sheaf typesGrothendieckTopology (Type u)) :
    S ‚âÖ yoneda'.obj (S.1.obj (op PUnit)) where
  hom := ‚ü®(equivYoneda S.1 S.2).hom‚ü©
  inv := ‚ü®(equivYoneda S.1 S.2).inv‚ü©
  hom_inv_id := by ext1; apply (equivYoneda S.1 S.2).hom_inv_id
  inv_hom_id := by ext1; apply (equivYoneda S.1 S.2).inv_hom_id
theorem eval_app (S‚ÇÅ S‚ÇÇ : Sheaf typesGrothendieckTopology (Type u)) (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) (Œ± : Type u)
    (s : S‚ÇÅ.1.obj (op Œ±)) (x : Œ±) :
    eval S‚ÇÇ.1 Œ± (f.val.app (op Œ±) s) x = f.val.app (op PUnit) (eval S‚ÇÅ.1 Œ± s x) :=
  (congr_fun (f.val.naturality (‚Üæfun _ : PUnit => x).op) s).symm
@[simps!]
noncomputable def typeEquiv : Type u ‚âå Sheaf typesGrothendieckTopology (Type u) where
  functor := yoneda'
  inverse := sheafToPresheaf _ _ ‚ãô (evaluation _ _).obj (op PUnit)
  unitIso := NatIso.ofComponents
      (fun _Œ± => 
        { hom := fun x _ => x
          inv := fun f => f PUnit.unit
          hom_inv_id := funext fun _ => rfl
          inv_hom_id := funext fun _ => funext fun y => PUnit.casesOn y rfl })
      fun _ => rfl
  counitIso := Iso.symm <|
      NatIso.ofComponents (fun S => equivYoneda' S) (fun {S‚ÇÅ S‚ÇÇ} f => by
        ext ‚ü®Œ±‚ü© s
        dsimp at s ‚ä¢
        ext x
        exact eval_app S‚ÇÅ S‚ÇÇ f Œ± s x)
  functor_unitIso_comp X := by
    ext1
    apply yonedaEquiv.injective
    dsimp [yoneda', yonedaEquiv, evalEquiv]
    erw [typesGlue_eval]
instance subcanonical_typesGrothendieckTopology : typesGrothendieckTopology.{u}.Subcanonical :=
  GrothendieckTopology.Subcanonical.of_isSheaf_yoneda_obj _ fun _ => Presieve.isSheaf_yoneda'
theorem typesGrothendieckTopology_eq_canonical :
    typesGrothendieckTopology.{u} = Sheaf.canonicalTopology (Type u) := by
  refine le_antisymm typesGrothendieckTopology.le_canonical (sInf_le ?_)
  refine ‚ü®yoneda.obj (ULift Bool), ‚ü®_, rfl‚ü©, GrothendieckTopology.ext ?_‚ü©
  funext Œ±
  ext S
  refine ‚ü®fun hs x => ?_, fun hs Œ≤ f => Presieve.isSheaf_yoneda' _ fun y => hs _‚ü©
  by_contra hsx
  have : (fun _ => ULift.up true) = fun _ => ULift.up false :=
    (hs PUnit fun _ => x).isSeparatedFor.ext
      fun Œ≤ f hf => funext fun y => hsx.elim <| S.2 hf fun _ => y
  simp [funext_iff] at this
end CategoryTheory