import Mathlib.Algebra.Homology.QuasiIso
import Mathlib.Algebra.Homology.SingleHomology
universe v u
namespace CategoryTheory
open Category Limits ChainComplex HomologicalComplex
variable {C : Type u} [Category.{v} C]
open Projective
variable [HasZeroObject C] [HasZeroMorphisms C]
structure ProjectiveResolution (Z : C) where
  complex : ChainComplex C ‚Ñï
  projective : ‚àÄ n, Projective (complex.X n) := by infer_instance
  [hasHomology : ‚àÄ i, complex.HasHomology i]
  œÄ : complex ‚ü∂ (ChainComplex.single‚ÇÄ C).obj Z
  quasiIso : QuasiIso œÄ := by infer_instance
open ProjectiveResolution in
attribute [instance] projective hasHomology ProjectiveResolution.quasiIso
class HasProjectiveResolution (Z : C) : Prop where
  out : Nonempty (ProjectiveResolution Z)
variable (C)
class HasProjectiveResolutions : Prop where
  out : ‚àÄ Z : C, HasProjectiveResolution Z
attribute [instance 100] HasProjectiveResolutions.out
namespace ProjectiveResolution
variable {C}
variable {Z : C} (P : ProjectiveResolution Z)
lemma complex_exactAt_succ (n : ‚Ñï) :
    P.complex.ExactAt (n + 1) := by
  rw [‚Üê quasiIsoAt_iff_exactAt' P.œÄ (n + 1) (exactAt_succ_single_obj _ _)]
  infer_instance
lemma exact_succ (n : ‚Ñï) :
    (ShortComplex.mk _ _ (P.complex.d_comp_d (n + 2) (n + 1) n)).Exact :=
  ((HomologicalComplex.exactAt_iff' _ (n + 2) (n + 1) n) (by simp only [prev]; rfl)
    (by simp)).1 (P.complex_exactAt_succ n)
@[simp]
theorem œÄ_f_succ (n : ‚Ñï) : P.œÄ.f (n + 1) = 0 :=
  (isZero_single_obj_X _ _ _ _ (by simp)).eq_of_tgt _ _
@[reassoc (attr := simp)]
theorem complex_d_comp_œÄ_f_zero :
    P.complex.d 1 0 ‚â´ P.œÄ.f 0 = 0 := by
  rw [‚Üê P.œÄ.comm 1 0, single_obj_d, comp_zero]
theorem complex_d_succ_comp (n : ‚Ñï) :
    P.complex.d n (n + 1) ‚â´ P.complex.d (n + 1) (n + 2) = 0 := by
  simp
@[simp]
noncomputable def cokernelCofork : CokernelCofork (P.complex.d 1 0) :=
  CokernelCofork.ofœÄ _ P.complex_d_comp_œÄ_f_zero
noncomputable def isColimitCokernelCofork : IsColimit (P.cokernelCofork) := by
  refine IsColimit.ofIsoColimit (P.complex.opcyclesIsCokernel 1 0 (by simp)) ?_
  refine Cofork.ext (P.complex.isoHomologyŒπ‚ÇÄ.symm ‚â™‚â´ isoOfQuasiIsoAt P.œÄ 0 ‚â™‚â´
    singleObjHomologySelfIso _ _ _) ?_
  rw [‚Üê cancel_mono (singleObjHomologySelfIso (ComplexShape.down ‚Ñï) 0 _).inv,
    ‚Üê cancel_mono (isoHomologyŒπ‚ÇÄ _).hom]
  dsimp
  simp only [isoHomologyŒπ‚ÇÄ_inv_naturality_assoc, p_opcyclesMap_assoc, single‚ÇÄ_obj_zero, assoc,
    Iso.hom_inv_id, comp_id, isoHomologyŒπ_inv_hom_id, singleObjHomologySelfIso_inv_homologyŒπ,
    singleObjOpcyclesSelfIso_hom, single‚ÇÄObjXSelf, Iso.refl_inv, id_comp]
instance (n : ‚Ñï) : Epi (P.œÄ.f n) := by
  cases n
  ¬∑ exact epi_of_isColimit_cofork P.isColimitCokernelCofork
  ¬∑ rw [œÄ_f_succ]; infer_instance
variable (Z)
@[simps]
noncomputable def self [Projective Z] : ProjectiveResolution Z where
  complex := (ChainComplex.single‚ÇÄ C).obj Z
  œÄ := ùüô ((ChainComplex.single‚ÇÄ C).obj Z)
  projective n := by
    cases n
    ¬∑ simpa
    ¬∑ apply IsZero.projective
      apply HomologicalComplex.isZero_single_obj_X
      simp
end ProjectiveResolution
end CategoryTheory