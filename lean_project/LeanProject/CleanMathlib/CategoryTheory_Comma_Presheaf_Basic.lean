import Mathlib.CategoryTheory.HomCongr
import Mathlib.CategoryTheory.Comma.Over
import Mathlib.Tactic.CategoryTheory.Elementwise
namespace CategoryTheory
open Category Opposite
universe w v u
variable {C : Type u} [Category.{v} C] {A : C·µí·µñ ‚•§ Type v}
namespace OverPresheafAux
attribute [local simp] FunctorToTypes.naturality
structure MakesOverArrow {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) {X : C} (s : yoneda.obj X ‚ü∂ A)
    (u : F.obj (op X)) : Prop where
  app : Œ∑.app (op X) u = yonedaEquiv s
namespace MakesOverArrow
lemma map‚ÇÅ {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} {Œµ : F ‚ü∂ G}
    (hŒµ : Œµ ‚â´ Œº = Œ∑) {X : C} {s : yoneda.obj X ‚ü∂ A} {u : F.obj (op X)}
    (h : MakesOverArrow Œ∑ s u) : MakesOverArrow Œº s (Œµ.app _ u) :=
  ‚ü®by rw [‚Üê elementwise_of% NatTrans.comp_app Œµ Œº, hŒµ, h.app]‚ü©
lemma map‚ÇÇ {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X Y : C} (f : X ‚ü∂ Y)
    {s : yoneda.obj X ‚ü∂ A} {t : yoneda.obj Y ‚ü∂ A} (hst : yoneda.map f ‚â´ t = s)
    {u : F.obj (op Y)} (h : MakesOverArrow Œ∑ t u) : MakesOverArrow Œ∑ s (F.map f.op u) :=
  ‚ü®by rw [elementwise_of% Œ∑.naturality, h.app, yonedaEquiv_naturality, hst]‚ü©
lemma of_arrow {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}
    {f : yoneda.obj X ‚ü∂ F} (hf : f ‚â´ Œ∑ = s) : MakesOverArrow Œ∑ s (yonedaEquiv f) :=
  ‚ü®hf ‚ñ∏ rfl‚ü©
lemma of_yoneda_arrow {Y : C} {Œ∑ : yoneda.obj Y ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A} {f : X ‚ü∂ Y}
    (hf : yoneda.map f ‚â´ Œ∑ = s) : MakesOverArrow Œ∑ s f := by
  simpa only [yonedaEquiv_yoneda_map f] using of_arrow hf
end MakesOverArrow
def OverArrows {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) {X : C} (s : yoneda.obj X ‚ü∂ A) : Type v :=
  Subtype (MakesOverArrow Œ∑ s)
namespace OverArrows
def val {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A} :
    OverArrows Œ∑ s ‚Üí F.obj (op X) :=
  Subtype.val
@[simp]
lemma val_mk {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) {X : C} (s : yoneda.obj X ‚ü∂ A) (u : F.obj (op X))
    (h : MakesOverArrow Œ∑ s u) : val ‚ü®u, h‚ü© = u :=
  rfl
@[ext]
lemma ext {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}
    {u v : OverArrows Œ∑ s} : u.val = v.val ‚Üí u = v :=
  Subtype.ext
lemma app_val {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}
    (p : OverArrows Œ∑ s) : Œ∑.app (op X) p.val = yonedaEquiv s :=
  p.prop.app
@[simp]
lemma map_val {Y : C} {Œ∑ : yoneda.obj Y ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}
    (p : OverArrows Œ∑ s) : yoneda.map p.val ‚â´ Œ∑ = s := by
  rw [‚Üê yonedaEquiv.injective.eq_iff, yonedaEquiv_comp, yonedaEquiv_yoneda_map]
  simp only [unop_op, p.app_val]
def map‚ÇÅ {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}
    (u : OverArrows Œ∑ s) (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) : OverArrows Œº s :=
  ‚ü®Œµ.app _ u.val, MakesOverArrow.map‚ÇÅ hŒµ u.2‚ü©
@[simp]
lemma map‚ÇÅ_val {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} {X : C}
    (s : yoneda.obj X ‚ü∂ A) (u : OverArrows Œ∑ s) (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) :
    (u.map‚ÇÅ Œµ hŒµ).val = Œµ.app _ u.val :=
  rfl
def map‚ÇÇ {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X Y : C} {s : yoneda.obj X ‚ü∂ A}
    {t : yoneda.obj Y ‚ü∂ A} (u : OverArrows Œ∑ t) (f : X ‚ü∂ Y) (hst : yoneda.map f ‚â´ t = s) :
    OverArrows Œ∑ s :=
  ‚ü®F.map f.op u.val, MakesOverArrow.map‚ÇÇ f hst u.2‚ü©
@[simp]
lemma map‚ÇÇ_val {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X Y : C} (f : X ‚ü∂ Y)
    {s : yoneda.obj X ‚ü∂ A} {t : yoneda.obj Y ‚ü∂ A} (hst : yoneda.map f ‚â´ t = s)
    (u : OverArrows Œ∑ t) : (u.map‚ÇÇ f hst).val = F.map f.op u.val :=
  rfl
@[simp]
lemma map‚ÇÅ_map‚ÇÇ {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} (Œµ : F ‚ü∂ G)
    (hŒµ : Œµ ‚â´ Œº = Œ∑) {X Y : C} {s : yoneda.obj X ‚ü∂ A} {t : yoneda.obj Y ‚ü∂ A} (f : X ‚ü∂ Y)
    (hf : yoneda.map f ‚â´ t = s) (u : OverArrows Œ∑ t) :
    (u.map‚ÇÅ Œµ hŒµ).map‚ÇÇ f hf = (u.map‚ÇÇ f hf).map‚ÇÅ Œµ hŒµ :=
  OverArrows.ext <| (elementwise_of% (Œµ.naturality f.op).symm) u.val
def yonedaArrow {Y : C} {Œ∑ : yoneda.obj Y ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A} (f : X ‚ü∂ Y)
    (hf : yoneda.map f ‚â´ Œ∑ = s) : OverArrows Œ∑ s :=
  ‚ü®f, .of_yoneda_arrow hf‚ü©
@[simp]
lemma yonedaArrow_val {Y : C} {Œ∑ : yoneda.obj Y ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A} {f : X ‚ü∂ Y}
    (hf : yoneda.map f ‚â´ Œ∑ = s) : (yonedaArrow f hf).val = f :=
  rfl
def costructuredArrowIso (s t : CostructuredArrow yoneda A) : OverArrows s.hom t.hom ‚âÖ t ‚ü∂ s where
  hom p := CostructuredArrow.homMk p.val (by aesop_cat)
  inv f := yonedaArrow f.left f.w
end OverArrows
@[simps]
def restrictedYonedaObj {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) :
    (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v where
  obj s := OverArrows Œ∑ s.unop.hom
  map f u := u.map‚ÇÇ f.unop.left f.unop.w
@[simps]
def restrictedYonedaObjMap‚ÇÅ {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} (Œµ : F ‚ü∂ G)
    (hŒµ : Œµ ‚â´ Œº = Œ∑) : restrictedYonedaObj Œ∑ ‚ü∂ restrictedYonedaObj Œº where
  app _ u := u.map‚ÇÅ Œµ hŒµ
@[simps]
def restrictedYoneda (A : C·µí·µñ ‚•§ Type v) : Over A ‚•§ (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v where
  obj Œ∑ := restrictedYonedaObj Œ∑.hom
  map Œµ := restrictedYonedaObjMap‚ÇÅ Œµ.left Œµ.w
def toOverYonedaCompRestrictedYoneda (A : C·µí·µñ ‚•§ Type v) :
    CostructuredArrow.toOver yoneda A ‚ãô restrictedYoneda A ‚âÖ yoneda :=
  NatIso.ofComponents
    (fun s => NatIso.ofComponents (fun _ => OverArrows.costructuredArrowIso _ _) (by aesop_cat))
    (by aesop_cat)
lemma map_mkPrecomp_eqToHom {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} {X Y : C} {f : X ‚ü∂ Y}
    {g g' : yoneda.obj Y ‚ü∂ A} (h : g = g') {x : F.obj (op (CostructuredArrow.mk g'))} :
    F.map (CostructuredArrow.mkPrecomp g f).op (F.map (eqToHom (by rw [h])) x) =
      F.map (eqToHom (by rw [h])) (F.map (CostructuredArrow.mkPrecomp g' f).op x) := by
  aesop_cat
attribute [local simp] map_mkPrecomp_eqToHom
def YonedaCollection (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (X : C) : Type v :=
  Œ£ s : A.obj (op X), F.obj (op (CostructuredArrow.mk (yonedaEquiv.symm s)))
namespace YonedaCollection
variable {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} {X : C}
def mk (s : yoneda.obj X ‚ü∂ A) (x : F.obj (op (CostructuredArrow.mk s))) : YonedaCollection F X :=
  ‚ü®yonedaEquiv s, F.map (eqToHom <| by rw [Equiv.symm_apply_apply]) x‚ü©
def fst (p : YonedaCollection F X) : yoneda.obj X ‚ü∂ A :=
  yonedaEquiv.symm p.1
def snd (p : YonedaCollection F X) : F.obj (op (CostructuredArrow.mk p.fst)) :=
  p.2
def yonedaEquivFst (p : YonedaCollection F X) : A.obj (op X) :=
  yonedaEquiv p.fst
lemma yonedaEquivFst_eq (p : YonedaCollection F X) : p.yonedaEquivFst = yonedaEquiv p.fst :=
  rfl
@[simp]
lemma mk_fst (s : yoneda.obj X ‚ü∂ A) (x : F.obj (op (CostructuredArrow.mk s))) : (mk s x).fst = s :=
  Equiv.apply_symm_apply _ _
@[simp]
lemma mk_snd (s : yoneda.obj X ‚ü∂ A) (x : F.obj (op (CostructuredArrow.mk s))) :
    (mk s x).snd = F.map (eqToHom <| by rw [YonedaCollection.mk_fst]) x :=
  rfl
@[ext (iff := false)]
lemma ext {p q : YonedaCollection F X} (h : p.fst = q.fst)
    (h' : F.map (eqToHom <| by rw [h]) q.snd = p.snd) : p = q := by
  rcases p with ‚ü®p, p'‚ü©
  rcases q with ‚ü®q, q'‚ü©
  obtain rfl : p = q := yonedaEquiv.symm.injective h
  exact Sigma.ext rfl (by simpa [snd] using h'.symm)
def map‚ÇÅ {G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ G) :
    YonedaCollection F X ‚Üí YonedaCollection G X :=
  fun p => YonedaCollection.mk p.fst (Œ∑.app _ p.snd)
@[simp]
lemma map‚ÇÅ_fst {G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ G)
    (p : YonedaCollection F X) : (YonedaCollection.map‚ÇÅ Œ∑ p).fst = p.fst := by
  simp [map‚ÇÅ]
@[simp]
lemma map‚ÇÅ_yonedaEquivFst {G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ G)
    (p : YonedaCollection F X) :
    (YonedaCollection.map‚ÇÅ Œ∑ p).yonedaEquivFst = p.yonedaEquivFst := by
  simp only [YonedaCollection.yonedaEquivFst_eq, map‚ÇÅ_fst]
@[simp]
lemma map‚ÇÅ_snd {G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ G)
    (p : YonedaCollection F X) : (YonedaCollection.map‚ÇÅ Œ∑ p).snd =
      G.map (eqToHom (by rw [YonedaCollection.map‚ÇÅ_fst])) (Œ∑.app _ p.snd) := by
  simp [map‚ÇÅ]
def map‚ÇÇ (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) {Y : C} (f : X ‚ü∂ Y)
    (p : YonedaCollection F Y) : YonedaCollection F X :=
  YonedaCollection.mk (yoneda.map f ‚â´ p.fst) <| F.map (CostructuredArrow.mkPrecomp p.fst f).op p.snd
@[simp]
lemma map‚ÇÇ_fst {Y : C} (f : X ‚ü∂ Y) (p : YonedaCollection F Y) :
    (YonedaCollection.map‚ÇÇ F f p).fst = yoneda.map f ‚â´ p.fst := by
  simp [map‚ÇÇ]
@[simp]
lemma map‚ÇÇ_yonedaEquivFst {Y : C} (f : X ‚ü∂ Y) (p : YonedaCollection F Y) :
    (YonedaCollection.map‚ÇÇ F f p).yonedaEquivFst = A.map f.op p.yonedaEquivFst := by
  simp only [YonedaCollection.yonedaEquivFst_eq, map‚ÇÇ_fst, yonedaEquiv_naturality]
@[simp]
lemma map‚ÇÇ_snd {Y : C} (f : X ‚ü∂ Y) (p : YonedaCollection F Y) :
    (YonedaCollection.map‚ÇÇ F f p).snd = F.map ((CostructuredArrow.mkPrecomp p.fst f).op ‚â´
      eqToHom (by rw [YonedaCollection.map‚ÇÇ_fst f])) p.snd := by
  simp [map‚ÇÇ]
attribute [local simp] CostructuredArrow.mkPrecomp_id CostructuredArrow.mkPrecomp_comp
@[simp]
lemma map‚ÇÅ_id : YonedaCollection.map‚ÇÅ (ùüô F) (X := X) = id := by
  aesop_cat
@[simp]
lemma map‚ÇÅ_comp {G H : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ G) (Œº : G ‚ü∂ H) :
    YonedaCollection.map‚ÇÅ (Œ∑ ‚â´ Œº) (X := X) =
      YonedaCollection.map‚ÇÅ Œº (X := X) ‚àò YonedaCollection.map‚ÇÅ Œ∑ (X := X) := by
  ext; all_goals simp
@[simp]
lemma map‚ÇÇ_id : YonedaCollection.map‚ÇÇ F (ùüô X) = id := by
  ext; all_goals simp
@[simp]
lemma map‚ÇÇ_comp {Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    YonedaCollection.map‚ÇÇ F (f ‚â´ g) = YonedaCollection.map‚ÇÇ F f ‚àò YonedaCollection.map‚ÇÇ F g := by
  ext; all_goals simp
@[simp]
lemma map‚ÇÅ_map‚ÇÇ {G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ G) {Y : C} (f : X ‚ü∂ Y)
    (p : YonedaCollection F Y) :
    YonedaCollection.map‚ÇÇ G f (YonedaCollection.map‚ÇÅ Œ∑ p) =
      YonedaCollection.map‚ÇÅ Œ∑ (YonedaCollection.map‚ÇÇ F f p) := by
  ext; all_goals simp
end YonedaCollection
@[simps]
def yonedaCollectionPresheaf (A : C·µí·µñ ‚•§ Type v) (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) :
    C·µí·µñ ‚•§ Type v where
  obj X := YonedaCollection F X.unop
  map f := YonedaCollection.map‚ÇÇ F f.unop
@[simps]
def yonedaCollectionPresheafMap‚ÇÅ {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ G) :
    yonedaCollectionPresheaf A F ‚ü∂ yonedaCollectionPresheaf A G where
  app _ := YonedaCollection.map‚ÇÅ Œ∑
  naturality := by
    intros
    ext
    simp
@[simps]
def yonedaCollectionFunctor (A : C·µí·µñ ‚•§ Type v) :
    ((CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) ‚•§ C·µí·µñ ‚•§ Type v where
  obj := yonedaCollectionPresheaf A
  map Œ∑ := yonedaCollectionPresheafMap‚ÇÅ Œ∑
@[simps]
def yonedaCollectionPresheafToA (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) :
    yonedaCollectionPresheaf A F ‚ü∂ A where
  app _ := YonedaCollection.yonedaEquivFst
@[simps! obj map]
def costructuredArrowPresheafToOver (A : C·µí·µñ ‚•§ Type v) :
    ((CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) ‚•§ Over A :=
  (yonedaCollectionFunctor A).toOver _ (yonedaCollectionPresheafToA) (by aesop_cat)
section unit
def unitForward {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C) :
    YonedaCollection (restrictedYonedaObj Œ∑) X ‚Üí F.obj (op X) :=
  fun p => p.snd.val
@[simp]
lemma unitForward_naturality‚ÇÅ {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} (Œµ : F ‚ü∂ G)
    (hŒµ : Œµ ‚â´ Œº = Œ∑) (X : C) (p : YonedaCollection (restrictedYonedaObj Œ∑) X) :
    unitForward Œº X (p.map‚ÇÅ (restrictedYonedaObjMap‚ÇÅ Œµ hŒµ)) = Œµ.app _ (unitForward Œ∑ X p) := by
  simp [unitForward]
@[simp]
lemma unitForward_naturality‚ÇÇ {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X Y : C) (f : X ‚ü∂ Y)
    (p : YonedaCollection (restrictedYonedaObj Œ∑) Y) :
    unitForward Œ∑ X (YonedaCollection.map‚ÇÇ (restrictedYonedaObj Œ∑) f p) =
      F.map f.op (unitForward Œ∑ Y p) := by
  simp [unitForward]
@[simp]
lemma app_unitForward {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C·µí·µñ)
    (p : YonedaCollection (restrictedYonedaObj Œ∑) X.unop) :
    Œ∑.app X (unitForward Œ∑ X.unop p) = p.yonedaEquivFst := by
  simpa [unitForward] using p.snd.app_val
def unitBackward {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C) :
    F.obj (op X) ‚Üí YonedaCollection (restrictedYonedaObj Œ∑) X :=
  fun x => YonedaCollection.mk (yonedaEquiv.symm (Œ∑.app _ x)) ‚ü®x, ‚ü®by aesop_cat‚ü©‚ü©
lemma unitForward_unitBackward {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C) :
    unitForward Œ∑ X ‚àò unitBackward Œ∑ X = id :=
  funext fun x => by simp [unitForward, unitBackward]
lemma unitBackward_unitForward {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C) :
    unitBackward Œ∑ X ‚àò unitForward Œ∑ X = id := by
  refine funext fun p => YonedaCollection.ext ?_ (OverArrows.ext ?_)
  ¬∑ simpa [unitForward, unitBackward] using congrArg yonedaEquiv.symm p.snd.app_val
  ¬∑ simp [unitForward, unitBackward]
@[simps]
def unitAuxAuxAux {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C) :
    YonedaCollection (restrictedYonedaObj Œ∑) X ‚âÖ F.obj (op X) where
  hom := unitForward Œ∑ X
  inv := unitBackward Œ∑ X
  hom_inv_id := unitBackward_unitForward Œ∑ X
  inv_hom_id := unitForward_unitBackward Œ∑ X
@[simps!]
def unitAuxAux {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) :
    yonedaCollectionPresheaf A (restrictedYonedaObj Œ∑) ‚âÖ F :=
  NatIso.ofComponents (fun X => unitAuxAuxAux Œ∑ X.unop) (by aesop_cat)
@[simps! hom]
def unitAux (Œ∑ : Over A) : (restrictedYoneda A ‚ãô costructuredArrowPresheafToOver A).obj Œ∑ ‚âÖ Œ∑ :=
  Over.isoMk (unitAuxAux Œ∑.hom) (by aesop_cat)
def unit (A : C·µí·µñ ‚•§ Type v) : ùü≠ (Over A) ‚âÖ restrictedYoneda A ‚ãô costructuredArrowPresheafToOver A :=
  Iso.symm <| NatIso.ofComponents unitAux (by aesop_cat)
end unit
section counit
variable {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} {X : C}
@[simp]
lemma OverArrows.yonedaCollectionPresheafToA_val_fst (s : yoneda.obj X ‚ü∂ A)
    (p : OverArrows (yonedaCollectionPresheafToA F) s) : p.val.fst = s := by
  simpa [YonedaCollection.yonedaEquivFst_eq] using p.app_val
def counitForward (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (s : CostructuredArrow yoneda A) :
    F.obj (op s) ‚Üí OverArrows (yonedaCollectionPresheafToA F) s.hom :=
  fun x => ‚ü®YonedaCollection.mk s.hom x, ‚ü®by simp [YonedaCollection.yonedaEquivFst_eq]‚ü©‚ü©
lemma counitForward_val_fst (s : CostructuredArrow yoneda A) (x : F.obj (op s)) :
    (counitForward F s x).val.fst = s.hom := by
  simp
@[simp]
lemma counitForward_val_snd (s : CostructuredArrow yoneda A) (x : F.obj (op s)) :
    (counitForward F s x).val.snd = F.map (eqToHom (by simp [‚Üê CostructuredArrow.eq_mk])) x :=
  YonedaCollection.mk_snd _ _
@[simp]
lemma counitForward_naturality‚ÇÅ {G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ G)
    (s : (CostructuredArrow yoneda A)·µí·µñ) (x : F.obj s) : counitForward G s.unop (Œ∑.app s x) =
      OverArrows.map‚ÇÅ (counitForward F s.unop x) (yonedaCollectionPresheafMap‚ÇÅ Œ∑) (by aesop_cat) :=
  OverArrows.ext <| YonedaCollection.ext (by simp) (by simp)
@[simp]
lemma counitForward_naturality‚ÇÇ (s t : (CostructuredArrow yoneda A)·µí·µñ) (f : t ‚ü∂ s) (x : F.obj t) :
    counitForward F s.unop (F.map f x) =
      OverArrows.map‚ÇÇ (counitForward F t.unop x) f.unop.left (by simp) := by
  refine OverArrows.ext <| YonedaCollection.ext (by simp) ?_
  have : (CostructuredArrow.mkPrecomp t.unop.hom f.unop.left).op =
      f ‚â´ eqToHom (by simp [‚Üê CostructuredArrow.eq_mk]) := by
    apply Quiver.Hom.unop_inj
    aesop_cat
  aesop_cat
def counitBackward (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (s : CostructuredArrow yoneda A) :
    OverArrows (yonedaCollectionPresheafToA F) s.hom ‚Üí F.obj (op s) :=
  fun p => F.map (eqToHom (by simp [‚Üê CostructuredArrow.eq_mk])) p.val.snd
lemma counitForward_counitBackward (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v)
    (s : CostructuredArrow yoneda A) : counitForward F s ‚àò counitBackward F s = id :=
  funext fun p => OverArrows.ext <| YonedaCollection.ext (by simp) (by simp [counitBackward])
lemma counitBackward_counitForward (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v)
    (s : CostructuredArrow yoneda A) : counitBackward F s ‚àò counitForward F s = id :=
  funext fun x => by simp [counitBackward]
@[simps]
def counitAuxAux (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (s : CostructuredArrow yoneda A) :
    F.obj (op s) ‚âÖ OverArrows (yonedaCollectionPresheafToA F) s.hom where
  hom := counitForward F s
  inv := counitBackward F s
  hom_inv_id := counitBackward_counitForward F s
  inv_hom_id := counitForward_counitBackward F s
@[simps! hom]
def counitAux (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) :
    F ‚âÖ restrictedYonedaObj (yonedaCollectionPresheafToA F) :=
  NatIso.ofComponents (fun s => counitAuxAux F s.unop) (by aesop_cat)
def counit (A : C·µí·µñ ‚•§ Type v) : (costructuredArrowPresheafToOver A ‚ãô restrictedYoneda A) ‚âÖ ùü≠ _ :=
  Iso.symm <| NatIso.ofComponents counitAux (by aesop_cat)
end counit
end OverPresheafAux
open OverPresheafAux
def overEquivPresheafCostructuredArrow (A : C·µí·µñ ‚•§ Type v) :
    Over A ‚âå ((CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) :=
  .mk (restrictedYoneda A) (costructuredArrowPresheafToOver A) (unit A) (counit A)
def CostructuredArrow.toOverCompOverEquivPresheafCostructuredArrow (A : C·µí·µñ ‚•§ Type v) :
    CostructuredArrow.toOver yoneda A ‚ãô (overEquivPresheafCostructuredArrow A).functor ‚âÖ yoneda :=
  toOverYonedaCompRestrictedYoneda A
def CostructuredArrow.toOverCompYoneda (A : C·µí·µñ ‚•§ Type v) (T : Over A) :
    (CostructuredArrow.toOver yoneda A).op ‚ãô yoneda.obj T ‚âÖ
      yoneda.op ‚ãô yoneda.obj ((overEquivPresheafCostructuredArrow A).functor.obj T) :=
  NatIso.ofComponents (fun X =>
    (overEquivPresheafCostructuredArrow A).fullyFaithfulFunctor.homEquiv.toIso ‚â™‚â´
      (Iso.homCongr
        ((CostructuredArrow.toOverCompOverEquivPresheafCostructuredArrow A).app X.unop)
        (Iso.refl _)).toIso)
    (by aesop_cat)
@[simp]
theorem CostructuredArrow.overEquivPresheafCostructuredArrow_inverse_map_toOverCompYoneda
    {A : C·µí·µñ ‚•§ Type v} {T : Over A} {X : CostructuredArrow yoneda A}
    (f : (CostructuredArrow.toOver yoneda A).obj X ‚ü∂ T) :
    (overEquivPresheafCostructuredArrow A).inverse.map
      (((CostructuredArrow.toOverCompYoneda A T).hom.app (op X) f)) =
      (CostructuredArrow.toOverCompOverEquivPresheafCostructuredArrow A).isoCompInverse.inv.app X ‚â´
        f ‚â´ (overEquivPresheafCostructuredArrow A).unit.app T := by
  simp [CostructuredArrow.toOverCompYoneda]
@[simp]
theorem CostructuredArrow.overEquivPresheafCostructuredArrow_functor_map_toOverCompYoneda
    {A : C·µí·µñ ‚•§ Type v} {T : Over A} {X : CostructuredArrow yoneda A}
    (f : yoneda.obj X ‚ü∂ (overEquivPresheafCostructuredArrow A).functor.obj T) :
    (overEquivPresheafCostructuredArrow A).functor.map
      (((CostructuredArrow.toOverCompYoneda A T).inv.app (op X) f)) =
      (CostructuredArrow.toOverCompOverEquivPresheafCostructuredArrow A).hom.app X ‚â´ f := by
  simp [CostructuredArrow.toOverCompYoneda]
def CostructuredArrow.toOverCompCoyoneda (A : C·µí·µñ ‚•§ Type v) :
    (CostructuredArrow.toOver yoneda A).op ‚ãô coyoneda ‚âÖ
    yoneda.op ‚ãô coyoneda ‚ãô
      (whiskeringLeft _ _ _).obj (overEquivPresheafCostructuredArrow A).functor :=
  NatIso.ofComponents (fun X => NatIso.ofComponents (fun Y =>
    (overEquivPresheafCostructuredArrow A).fullyFaithfulFunctor.homEquiv.toIso ‚â™‚â´
      (Iso.homCongr
        ((CostructuredArrow.toOverCompOverEquivPresheafCostructuredArrow A).app X.unop)
        (Iso.refl _)).toIso)) (by aesop_cat)
@[simp]
theorem CostructuredArrow.overEquivPresheafCostructuredArrow_inverse_map_toOverCompCoyoneda
    {A : C·µí·µñ ‚•§ Type v} {T : Over A} {X : CostructuredArrow yoneda A}
    (f : (CostructuredArrow.toOver yoneda A).obj X ‚ü∂ T) :
    (overEquivPresheafCostructuredArrow A).inverse.map
      (((CostructuredArrow.toOverCompCoyoneda A).hom.app (op X)).app T f) =
      (CostructuredArrow.toOverCompOverEquivPresheafCostructuredArrow A).isoCompInverse.inv.app X ‚â´
        f ‚â´ (overEquivPresheafCostructuredArrow A).unit.app T := by
  simp [CostructuredArrow.toOverCompCoyoneda]
@[simp]
theorem CostructuredArrow.overEquivPresheafCostructuredArrow_functor_map_toOverCompCoyoneda
    {A : C·µí·µñ ‚•§ Type v} {T : Over A} {X : CostructuredArrow yoneda A}
    (f : yoneda.obj X ‚ü∂ (overEquivPresheafCostructuredArrow A).functor.obj T) :
    (overEquivPresheafCostructuredArrow A).functor.map
      (((CostructuredArrow.toOverCompCoyoneda A).inv.app (op X)).app T f) =
      (CostructuredArrow.toOverCompOverEquivPresheafCostructuredArrow A).hom.app X ‚â´ f := by
  simp [CostructuredArrow.toOverCompCoyoneda]
end CategoryTheory