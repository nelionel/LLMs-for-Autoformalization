import Mathlib.Geometry.Manifold.Algebra.Monoid
noncomputable section
open scoped Manifold
class LieAddGroup {ùïú : Type*} [NontriviallyNormedField ùïú] {H : Type*} [TopologicalSpace H]
    {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E] (I : ModelWithCorners ùïú E H) (G : Type*)
    [AddGroup G] [TopologicalSpace G] [ChartedSpace H G] extends SmoothAdd I G : Prop where
  smooth_neg : ContMDiff I I ‚ä§ fun a : G => -a
@[to_additive]
class LieGroup {ùïú : Type*} [NontriviallyNormedField ùïú] {H : Type*} [TopologicalSpace H]
    {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E] (I : ModelWithCorners ùïú E H) (G : Type*)
    [Group G] [TopologicalSpace G] [ChartedSpace H G] extends SmoothMul I G : Prop where
  smooth_inv : ContMDiff I I ‚ä§ fun a : G => a‚Åª¬π
section PointwiseDivision
variable {ùïú : Type*} [NontriviallyNormedField ùïú] {H : Type*} [TopologicalSpace H] {E : Type*}
  [NormedAddCommGroup E] [NormedSpace ùïú E] {I : ModelWithCorners ùïú E H} {G : Type*}
  [TopologicalSpace G] [ChartedSpace H G] [Group G] [LieGroup I G] {E' : Type*}
  [NormedAddCommGroup E'] [NormedSpace ùïú E'] {H' : Type*} [TopologicalSpace H']
  {I' : ModelWithCorners ùïú E' H'} {M : Type*} [TopologicalSpace M] [ChartedSpace H' M]
  {n : ‚Ñï‚àû}
section
variable (I)
@[to_additive "In an additive Lie group, inversion is a smooth map."]
theorem contMDiff_inv : ContMDiff I I ‚ä§ fun x : G => x‚Åª¬π :=
  LieGroup.smooth_inv
@[deprecated (since := "2024-11-21")] alias smooth_inv := contMDiff_inv
@[deprecated (since := "2024-11-21")] alias smooth_neg := contMDiff_neg
include I in
@[to_additive "An additive Lie group is an additive topological group. This is not an instance for
technical reasons, see note [Design choices about smooth algebraic structures]."]
theorem topologicalGroup_of_lieGroup : TopologicalGroup G :=
  { continuousMul_of_smooth I with continuous_inv := (contMDiff_inv I).continuous }
end
@[to_additive]
theorem ContMDiffWithinAt.inv {f : M ‚Üí G} {s : Set M} {x‚ÇÄ : M}
    (hf : ContMDiffWithinAt I' I n f s x‚ÇÄ) : ContMDiffWithinAt I' I n (fun x => (f x)‚Åª¬π) s x‚ÇÄ :=
  ((contMDiff_inv I).of_le le_top).contMDiffAt.contMDiffWithinAt.comp x‚ÇÄ hf <| Set.mapsTo_univ _ _
@[to_additive]
theorem ContMDiffAt.inv {f : M ‚Üí G} {x‚ÇÄ : M} (hf : ContMDiffAt I' I n f x‚ÇÄ) :
    ContMDiffAt I' I n (fun x => (f x)‚Åª¬π) x‚ÇÄ :=
  ((contMDiff_inv I).of_le le_top).contMDiffAt.comp x‚ÇÄ hf
@[to_additive]
theorem ContMDiffOn.inv {f : M ‚Üí G} {s : Set M} (hf : ContMDiffOn I' I n f s) :
    ContMDiffOn I' I n (fun x => (f x)‚Åª¬π) s := fun x hx => (hf x hx).inv
@[to_additive]
theorem ContMDiff.inv {f : M ‚Üí G} (hf : ContMDiff I' I n f) : ContMDiff I' I n fun x => (f x)‚Åª¬π :=
  fun x => (hf x).inv
@[deprecated (since := "2024-11-21")] alias SmoothWithinAt.inv := ContMDiffWithinAt.inv
@[deprecated (since := "2024-11-21")] alias SmoothAt.inv := ContMDiffAt.inv
@[deprecated (since := "2024-11-21")] alias SmoothOn.inv := ContMDiffOn.inv
@[deprecated (since := "2024-11-21")] alias Smooth.inv := ContMDiff.inv
@[deprecated (since := "2024-11-21")] alias SmoothWithinAt.neg := ContMDiffWithinAt.neg
@[deprecated (since := "2024-11-21")] alias SmoothAt.neg := ContMDiffAt.neg
@[deprecated (since := "2024-11-21")] alias SmoothOn.neg := ContMDiffOn.neg
@[deprecated (since := "2024-11-21")] alias Smooth.neg := ContMDiff.neg
@[to_additive]
theorem ContMDiffWithinAt.div {f g : M ‚Üí G} {s : Set M} {x‚ÇÄ : M}
    (hf : ContMDiffWithinAt I' I n f s x‚ÇÄ) (hg : ContMDiffWithinAt I' I n g s x‚ÇÄ) :
    ContMDiffWithinAt I' I n (fun x => f x / g x) s x‚ÇÄ := by
  simp_rw [div_eq_mul_inv]; exact hf.mul hg.inv
@[to_additive]
theorem ContMDiffAt.div {f g : M ‚Üí G} {x‚ÇÄ : M} (hf : ContMDiffAt I' I n f x‚ÇÄ)
    (hg : ContMDiffAt I' I n g x‚ÇÄ) : ContMDiffAt I' I n (fun x => f x / g x) x‚ÇÄ := by
  simp_rw [div_eq_mul_inv]; exact hf.mul hg.inv
@[to_additive]
theorem ContMDiffOn.div {f g : M ‚Üí G} {s : Set M} (hf : ContMDiffOn I' I n f s)
    (hg : ContMDiffOn I' I n g s) : ContMDiffOn I' I n (fun x => f x / g x) s := by
  simp_rw [div_eq_mul_inv]; exact hf.mul hg.inv
@[to_additive]
theorem ContMDiff.div {f g : M ‚Üí G} (hf : ContMDiff I' I n f) (hg : ContMDiff I' I n g) :
    ContMDiff I' I n fun x => f x / g x := by simp_rw [div_eq_mul_inv]; exact hf.mul hg.inv
@[deprecated (since := "2024-11-21")] alias SmoothWithinAt.div := ContMDiffWithinAt.div
@[deprecated (since := "2024-11-21")] alias SmoothAt.div := ContMDiffAt.div
@[deprecated (since := "2024-11-21")] alias SmoothOn.div := ContMDiffOn.div
@[deprecated (since := "2024-11-21")] alias Smooth.div := ContMDiff.div
@[deprecated (since := "2024-11-21")] alias SmoothWithinAt.sub := ContMDiffWithinAt.sub
@[deprecated (since := "2024-11-21")] alias SmoothAt.sub := ContMDiffAt.sub
@[deprecated (since := "2024-11-21")] alias SmoothOn.sub := ContMDiffOn.sub
@[deprecated (since := "2024-11-21")] alias Smooth.sub := ContMDiff.sub
end PointwiseDivision
section Product
@[to_additive]
instance {ùïú : Type*} [NontriviallyNormedField ùïú] {H : Type*} [TopologicalSpace H] {E : Type*}
    [NormedAddCommGroup E] [NormedSpace ùïú E] {I : ModelWithCorners ùïú E H} {G : Type*}
    [TopologicalSpace G] [ChartedSpace H G] [Group G] [LieGroup I G] {E' : Type*}
    [NormedAddCommGroup E'] [NormedSpace ùïú E'] {H' : Type*} [TopologicalSpace H']
    {I' : ModelWithCorners ùïú E' H'} {G' : Type*} [TopologicalSpace G'] [ChartedSpace H' G']
    [Group G'] [LieGroup I' G'] : LieGroup (I.prod I') (G √ó G') :=
  { SmoothMul.prod _ _ _ _ with smooth_inv := contMDiff_fst.inv.prod_mk contMDiff_snd.inv }
end Product
instance normedSpaceLieAddGroup {ùïú : Type*} [NontriviallyNormedField ùïú] {E : Type*}
    [NormedAddCommGroup E] [NormedSpace ùïú E] : LieAddGroup ùìò(ùïú, E) E where
  smooth_neg := contDiff_neg.contMDiff
section SmoothInv‚ÇÄ
class SmoothInv‚ÇÄ {ùïú : Type*} [NontriviallyNormedField ùïú] {H : Type*} [TopologicalSpace H]
    {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E] (I : ModelWithCorners ùïú E H) (G : Type*)
    [Inv G] [Zero G] [TopologicalSpace G] [ChartedSpace H G] : Prop where
  smoothAt_inv‚ÇÄ : ‚àÄ ‚¶Éx : G‚¶Ñ, x ‚â† 0 ‚Üí ContMDiffAt I I ‚ä§ (fun y ‚Ü¶ y‚Åª¬π) x
instance {ùïú : Type*} [NontriviallyNormedField ùïú] : SmoothInv‚ÇÄ ùìò(ùïú) ùïú where
  smoothAt_inv‚ÇÄ x hx := by
    change ContMDiffAt ùìò(ùïú) ùìò(ùïú) ‚ä§ Inv.inv x
    rw [contMDiffAt_iff_contDiffAt]
    exact contDiffAt_inv ùïú hx
variable {ùïú : Type*} [NontriviallyNormedField ùïú] {H : Type*} [TopologicalSpace H] {E : Type*}
  [NormedAddCommGroup E] [NormedSpace ùïú E] (I : ModelWithCorners ùïú E H) {G : Type*}
  [TopologicalSpace G] [ChartedSpace H G] [Inv G] [Zero G] [SmoothInv‚ÇÄ I G] {E' : Type*}
  [NormedAddCommGroup E'] [NormedSpace ùïú E'] {H' : Type*} [TopologicalSpace H']
  {I' : ModelWithCorners ùïú E' H'} {M : Type*} [TopologicalSpace M] [ChartedSpace H' M]
  {n : ‚Ñï‚àû} {f : M ‚Üí G}
theorem contMDiffAt_inv‚ÇÄ {x : G} (hx : x ‚â† 0) : ContMDiffAt I I ‚ä§ (fun y ‚Ü¶ y‚Åª¬π) x :=
  SmoothInv‚ÇÄ.smoothAt_inv‚ÇÄ hx
@[deprecated (since := "2024-11-21")] alias smoothAt_inv‚ÇÄ := contMDiffAt_inv‚ÇÄ
include I in
theorem hasContinuousInv‚ÇÄ_of_hasSmoothInv‚ÇÄ : HasContinuousInv‚ÇÄ G :=
  { continuousAt_inv‚ÇÄ := fun _ hx ‚Ü¶ (contMDiffAt_inv‚ÇÄ I hx).continuousAt }
theorem contMDiffOn_inv‚ÇÄ : ContMDiffOn I I ‚ä§ (Inv.inv : G ‚Üí G) {0}·∂ú := fun _x hx =>
  (contMDiffAt_inv‚ÇÄ I hx).contMDiffWithinAt
@[deprecated (since := "2024-11-21")] alias smoothOn_inv‚ÇÄ := contMDiffOn_inv‚ÇÄ
@[deprecated (since := "2024-11-21")] alias SmoothOn_inv‚ÇÄ := contMDiffOn_inv‚ÇÄ
variable {I} {s : Set M} {a : M}
theorem ContMDiffWithinAt.inv‚ÇÄ (hf : ContMDiffWithinAt I' I n f s a) (ha : f a ‚â† 0) :
    ContMDiffWithinAt I' I n (fun x => (f x)‚Åª¬π) s a :=
  ((contMDiffAt_inv‚ÇÄ I ha).of_le le_top).comp_contMDiffWithinAt a hf
theorem ContMDiffAt.inv‚ÇÄ (hf : ContMDiffAt I' I n f a) (ha : f a ‚â† 0) :
    ContMDiffAt I' I n (fun x ‚Ü¶ (f x)‚Åª¬π) a :=
  ((contMDiffAt_inv‚ÇÄ I ha).of_le le_top).comp a hf
theorem ContMDiff.inv‚ÇÄ (hf : ContMDiff I' I n f) (h0 : ‚àÄ x, f x ‚â† 0) :
    ContMDiff I' I n (fun x ‚Ü¶ (f x)‚Åª¬π) :=
  fun x ‚Ü¶ ContMDiffAt.inv‚ÇÄ (hf x) (h0 x)
theorem ContMDiffOn.inv‚ÇÄ (hf : ContMDiffOn I' I n f s) (h0 : ‚àÄ x ‚àà s, f x ‚â† 0) :
    ContMDiffOn I' I n (fun x => (f x)‚Åª¬π) s :=
  fun x hx ‚Ü¶ ContMDiffWithinAt.inv‚ÇÄ (hf x hx) (h0 x hx)
@[deprecated (since := "2024-11-21")] alias SmoothWithinAt.inv‚ÇÄ := ContMDiffWithinAt.inv‚ÇÄ
@[deprecated (since := "2024-11-21")] alias SmoothAt.inv‚ÇÄ := ContMDiffAt.inv‚ÇÄ
@[deprecated (since := "2024-11-21")] alias SmoothOn.inv‚ÇÄ := ContMDiffOn.inv‚ÇÄ
@[deprecated (since := "2024-11-21")] alias Smooth.inv‚ÇÄ := ContMDiff.inv‚ÇÄ
end SmoothInv‚ÇÄ
section Div
variable {ùïú : Type*} [NontriviallyNormedField ùïú] {H : Type*} [TopologicalSpace H] {E : Type*}
  [NormedAddCommGroup E] [NormedSpace ùïú E] {I : ModelWithCorners ùïú E H} {G : Type*}
  [TopologicalSpace G] [ChartedSpace H G] [GroupWithZero G] [SmoothInv‚ÇÄ I G] [SmoothMul I G]
  {E' : Type*} [NormedAddCommGroup E'] [NormedSpace ùïú E'] {H' : Type*} [TopologicalSpace H']
  {I' : ModelWithCorners ùïú E' H'} {M : Type*} [TopologicalSpace M] [ChartedSpace H' M]
  {f g : M ‚Üí G} {s : Set M} {a : M} {n : ‚Ñï‚àû}
theorem ContMDiffWithinAt.div‚ÇÄ
    (hf : ContMDiffWithinAt I' I n f s a) (hg : ContMDiffWithinAt I' I n g s a) (h‚ÇÄ : g a ‚â† 0) :
    ContMDiffWithinAt I' I n (f / g) s a := by
  simpa [div_eq_mul_inv] using hf.mul (hg.inv‚ÇÄ h‚ÇÄ)
theorem ContMDiffOn.div‚ÇÄ (hf : ContMDiffOn I' I n f s) (hg : ContMDiffOn I' I n g s)
    (h‚ÇÄ : ‚àÄ x ‚àà s, g x ‚â† 0) : ContMDiffOn I' I n (f / g) s := by
  simpa [div_eq_mul_inv] using hf.mul (hg.inv‚ÇÄ h‚ÇÄ)
theorem ContMDiffAt.div‚ÇÄ (hf : ContMDiffAt I' I n f a) (hg : ContMDiffAt I' I n g a)
    (h‚ÇÄ : g a ‚â† 0) : ContMDiffAt I' I n (f / g) a := by
  simpa [div_eq_mul_inv] using hf.mul (hg.inv‚ÇÄ h‚ÇÄ)
theorem ContMDiff.div‚ÇÄ (hf : ContMDiff I' I n f) (hg : ContMDiff I' I n g) (h‚ÇÄ : ‚àÄ x, g x ‚â† 0) :
    ContMDiff I' I n (f / g) := by simpa only [div_eq_mul_inv] using hf.mul (hg.inv‚ÇÄ h‚ÇÄ)
@[deprecated (since := "2024-11-21")] alias SmoothWithinAt.div‚ÇÄ := ContMDiffWithinAt.div‚ÇÄ
@[deprecated (since := "2024-11-21")] alias SmoothAt.div‚ÇÄ := ContMDiffAt.div‚ÇÄ
@[deprecated (since := "2024-11-21")] alias SmoothOn.div‚ÇÄ := ContMDiffOn.div‚ÇÄ
@[deprecated (since := "2024-11-21")] alias Smooth.div‚ÇÄ := ContMDiff.div‚ÇÄ
end Div