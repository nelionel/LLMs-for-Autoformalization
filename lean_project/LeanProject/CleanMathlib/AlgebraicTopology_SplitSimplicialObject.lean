import Mathlib.AlgebraicTopology.SimplicialObject.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Products
import Mathlib.Data.Fintype.Sigma
noncomputable section
open CategoryTheory CategoryTheory.Category CategoryTheory.Limits Opposite SimplexCategory
open Simplicial
universe u
variable {C : Type*} [Category C]
namespace SimplicialObject
namespace Splitting
def IndexSet (Œî : SimplexCategory·µí·µñ) :=
  Œ£Œî' : SimplexCategory·µí·µñ, { Œ± : Œî.unop ‚ü∂ Œî'.unop // Epi Œ± }
namespace IndexSet
@[simps]
def mk {Œî Œî' : SimplexCategory} (f : Œî ‚ü∂ Œî') [Epi f] : IndexSet (op Œî) :=
  ‚ü®op Œî', f, inferInstance‚ü©
variable {Œî : SimplexCategory·µí·µñ} (A : IndexSet Œî)
def e :=
  A.2.1
instance : Epi A.e :=
  A.2.2
theorem ext' : A = ‚ü®A.1, ‚ü®A.e, A.2.2‚ü©‚ü© := rfl
theorem ext (A‚ÇÅ A‚ÇÇ : IndexSet Œî) (h‚ÇÅ : A‚ÇÅ.1 = A‚ÇÇ.1) (h‚ÇÇ : A‚ÇÅ.e ‚â´ eqToHom (by rw [h‚ÇÅ]) = A‚ÇÇ.e) :
    A‚ÇÅ = A‚ÇÇ := by
  rcases A‚ÇÅ with ‚ü®Œî‚ÇÅ, ‚ü®Œ±‚ÇÅ, hŒ±‚ÇÅ‚ü©‚ü©
  rcases A‚ÇÇ with ‚ü®Œî‚ÇÇ, ‚ü®Œ±‚ÇÇ, hŒ±‚ÇÇ‚ü©‚ü©
  simp only at h‚ÇÅ
  subst h‚ÇÅ
  simp only [eqToHom_refl, comp_id, IndexSet.e] at h‚ÇÇ
  simp only [h‚ÇÇ]
instance : Fintype (IndexSet Œî) :=
  Fintype.ofInjective
    (fun A =>
      ‚ü®‚ü®A.1.unop.len, Nat.lt_succ_iff.mpr (len_le_of_epi (inferInstance : Epi A.e))‚ü©,
        A.e.toOrderHom‚ü© :
      IndexSet Œî ‚Üí Sigma fun k : Fin (Œî.unop.len + 1) => Fin (Œî.unop.len + 1) ‚Üí Fin (k + 1))
    (by
      rintro ‚ü®Œî‚ÇÅ, Œ±‚ÇÅ‚ü© ‚ü®Œî‚ÇÇ, Œ±‚ÇÇ‚ü© h‚ÇÅ
      induction' Œî‚ÇÅ using Opposite.rec with Œî‚ÇÅ
      induction' Œî‚ÇÇ using Opposite.rec with Œî‚ÇÇ
      simp only [unop_op, Sigma.mk.inj_iff, Fin.mk.injEq] at h‚ÇÅ
      have h‚ÇÇ : Œî‚ÇÅ = Œî‚ÇÇ := by
        ext1
        simpa only [Fin.mk_eq_mk] using h‚ÇÅ.1
      subst h‚ÇÇ
      refine ext _ _ rfl ?_
      ext : 2
      exact eq_of_heq h‚ÇÅ.2)
variable (Œî)
@[simps]
def id : IndexSet Œî :=
  ‚ü®Œî, ‚ü®ùüô _, by infer_instance‚ü©‚ü©
instance : Inhabited (IndexSet Œî) :=
  ‚ü®id Œî‚ü©
variable {Œî}
@[simp]
def EqId : Prop :=
  A = id _
theorem eqId_iff_eq : A.EqId ‚Üî A.1 = Œî := by
  constructor
  ¬∑ intro h
    dsimp at h
    rw [h]
    rfl
  ¬∑ intro h
    rcases A with ‚ü®_, ‚ü®f, hf‚ü©‚ü©
    simp only at h
    subst h
    refine ext _ _ rfl ?_
    haveI := hf
    simp only [eqToHom_refl, comp_id]
    exact eq_id_of_epi f
theorem eqId_iff_len_eq : A.EqId ‚Üî A.1.unop.len = Œî.unop.len := by
  rw [eqId_iff_eq]
  constructor
  ¬∑ intro h
    rw [h]
  ¬∑ intro h
    rw [‚Üê unop_inj_iff]
    ext
    exact h
theorem eqId_iff_len_le : A.EqId ‚Üî Œî.unop.len ‚â§ A.1.unop.len := by
  rw [eqId_iff_len_eq]
  constructor
  ¬∑ intro h
    rw [h]
  ¬∑ exact le_antisymm (len_le_of_epi (inferInstance : Epi A.e))
theorem eqId_iff_mono : A.EqId ‚Üî Mono A.e := by
  constructor
  ¬∑ intro h
    dsimp at h
    subst h
    dsimp only [id, e]
    infer_instance
  ¬∑ intro h
    rw [eqId_iff_len_le]
    exact len_le_of_mono h
@[simps]
def epiComp {Œî‚ÇÅ Œî‚ÇÇ : SimplexCategory·µí·µñ} (A : IndexSet Œî‚ÇÅ) (p : Œî‚ÇÅ ‚ü∂ Œî‚ÇÇ) [Epi p.unop] :
    IndexSet Œî‚ÇÇ :=
  ‚ü®A.1, ‚ü®p.unop ‚â´ A.e, epi_comp _ _‚ü©‚ü©
variable {Œî' : SimplexCategory·µí·µñ} (Œ∏ : Œî ‚ü∂ Œî')
def pull : IndexSet Œî' :=
  mk (factorThruImage (Œ∏.unop ‚â´ A.e))
@[reassoc]
theorem fac_pull : (A.pull Œ∏).e ‚â´ image.Œπ (Œ∏.unop ‚â´ A.e) = Œ∏.unop ‚â´ A.e :=
  image.fac _
end IndexSet
variable (N : ‚Ñï ‚Üí C) (Œî : SimplexCategory·µí·µñ) (X : SimplicialObject C) (œÜ : ‚àÄ n, N n ‚ü∂ X _[n])
@[simp, nolint unusedArguments]
def summand (A : IndexSet Œî) : C :=
  N A.1.unop.len
def cofan' (Œî : SimplexCategory·µí·µñ) : Cofan (summand N Œî) :=
  Cofan.mk (X.obj Œî) (fun A => œÜ A.1.unop.len ‚â´ X.map A.e.op)
end Splitting
structure Splitting (X : SimplicialObject C) where
  N : ‚Ñï ‚Üí C
  Œπ : ‚àÄ n, N n ‚ü∂ X _[n]
  isColimit' : ‚àÄ Œî : SimplexCategory·µí·µñ, IsColimit (Splitting.cofan' N X Œπ Œî)
namespace Splitting
variable {X Y : SimplicialObject C} (s : Splitting X)
def cofan (Œî : SimplexCategory·µí·µñ) : Cofan (summand s.N Œî) :=
  Cofan.mk (X.obj Œî) (fun A => s.Œπ A.1.unop.len ‚â´ X.map A.e.op)
def isColimit (Œî : SimplexCategory·µí·µñ) : IsColimit (s.cofan Œî) := s.isColimit' Œî
@[reassoc]
theorem cofan_inj_eq {Œî : SimplexCategory·µí·µñ} (A : IndexSet Œî) :
    (s.cofan Œî).inj  A = s.Œπ A.1.unop.len ‚â´ X.map A.e.op := rfl
theorem cofan_inj_id (n : ‚Ñï) : (s.cofan _).inj (IndexSet.id (op [n])) = s.Œπ n := by
  erw [cofan_inj_eq, X.map_id, comp_id]
  rfl
@[simp]
def œÜ (f : X ‚ü∂ Y) (n : ‚Ñï) : s.N n ‚ü∂ Y _[n] :=
  s.Œπ n ‚â´ f.app (op [n])
@[reassoc (attr := simp)]
theorem cofan_inj_comp_app (f : X ‚ü∂ Y) {Œî : SimplexCategory·µí·µñ} (A : IndexSet Œî) :
    (s.cofan Œî).inj A ‚â´ f.app Œî = s.œÜ f A.1.unop.len ‚â´ Y.map A.e.op := by
  simp only [cofan_inj_eq_assoc, œÜ, assoc]
  rw [NatTrans.naturality]
theorem hom_ext' {Z : C} {Œî : SimplexCategory·µí·µñ} (f g : X.obj Œî ‚ü∂ Z)
    (h : ‚àÄ A : IndexSet Œî, (s.cofan Œî).inj A ‚â´ f = (s.cofan Œî).inj A ‚â´ g) : f = g :=
  Cofan.IsColimit.hom_ext (s.isColimit Œî) _ _ h
theorem hom_ext (f g : X ‚ü∂ Y) (h : ‚àÄ n : ‚Ñï, s.œÜ f n = s.œÜ g n) : f = g := by
  ext Œî
  apply s.hom_ext'
  intro A
  induction' Œî using Opposite.rec with Œî
  induction' Œî using SimplexCategory.rec with n
  dsimp
  simp only [s.cofan_inj_comp_app, h]
def desc {Z : C} (Œî : SimplexCategory·µí·µñ) (F : ‚àÄ A : IndexSet Œî, s.N A.1.unop.len ‚ü∂ Z) :
    X.obj Œî ‚ü∂ Z :=
  Cofan.IsColimit.desc (s.isColimit Œî) F
@[reassoc (attr := simp)]
theorem Œπ_desc {Z : C} (Œî : SimplexCategory·µí·µñ) (F : ‚àÄ A : IndexSet Œî, s.N A.1.unop.len ‚ü∂ Z)
    (A : IndexSet Œî) : (s.cofan Œî).inj A ‚â´ s.desc Œî F = F A := by
  apply Cofan.IsColimit.fac
@[simps]
def ofIso (e : X ‚âÖ Y) : Splitting Y where
  N := s.N
  Œπ n := s.Œπ n ‚â´ e.hom.app (op [n])
  isColimit' Œî := IsColimit.ofIsoColimit (s.isColimit Œî ) (Cofan.ext (e.app Œî)
    (fun A => by simp [cofan, cofan']))
@[reassoc]
theorem cofan_inj_epi_naturality {Œî‚ÇÅ Œî‚ÇÇ : SimplexCategory·µí·µñ} (A : IndexSet Œî‚ÇÅ) (p : Œî‚ÇÅ ‚ü∂ Œî‚ÇÇ)
    [Epi p.unop] : (s.cofan Œî‚ÇÅ).inj A ‚â´ X.map p = (s.cofan Œî‚ÇÇ).inj (A.epiComp p) := by
  dsimp [cofan]
  rw [assoc, ‚Üê X.map_comp]
  rfl
end Splitting
variable (C)
@[ext]
structure Split where
  X : SimplicialObject C
  s : Splitting X
namespace Split
variable {C}
@[simps]
def mk' {X : SimplicialObject C} (s : Splitting X) : Split C :=
  ‚ü®X, s‚ü©
structure Hom (S‚ÇÅ S‚ÇÇ : Split C) where
  F : S‚ÇÅ.X ‚ü∂ S‚ÇÇ.X
  f : ‚àÄ n : ‚Ñï, S‚ÇÅ.s.N n ‚ü∂ S‚ÇÇ.s.N n
  comm : ‚àÄ n : ‚Ñï, S‚ÇÅ.s.Œπ n ‚â´ F.app (op [n]) = f n ‚â´ S‚ÇÇ.s.Œπ n := by aesop_cat
@[ext]
theorem Hom.ext {S‚ÇÅ S‚ÇÇ : Split C} (Œ¶‚ÇÅ Œ¶‚ÇÇ : Hom S‚ÇÅ S‚ÇÇ) (h : ‚àÄ n : ‚Ñï, Œ¶‚ÇÅ.f n = Œ¶‚ÇÇ.f n) : Œ¶‚ÇÅ = Œ¶‚ÇÇ := by
  rcases Œ¶‚ÇÅ with ‚ü®F‚ÇÅ, f‚ÇÅ, c‚ÇÅ‚ü©
  rcases Œ¶‚ÇÇ with ‚ü®F‚ÇÇ, f‚ÇÇ, c‚ÇÇ‚ü©
  have h' : f‚ÇÅ = f‚ÇÇ := by
    ext
    apply h
  subst h'
  simp only [mk.injEq, and_true]
  apply S‚ÇÅ.s.hom_ext
  intro n
  dsimp
  rw [c‚ÇÅ, c‚ÇÇ]
attribute [simp, reassoc] Hom.comm
end Split
instance : Category (Split C) where
  Hom := Split.Hom
  id S :=
    { F := ùüô _
      f := fun _ => ùüô _ }
  comp Œ¶‚ÇÅ‚ÇÇ Œ¶‚ÇÇ‚ÇÉ :=
    { F := Œ¶‚ÇÅ‚ÇÇ.F ‚â´ Œ¶‚ÇÇ‚ÇÉ.F
      f := fun n => Œ¶‚ÇÅ‚ÇÇ.f n ‚â´ Œ¶‚ÇÇ‚ÇÉ.f n
      comm := fun n => by
        dsimp
        simp only [assoc, Split.Hom.comm_assoc, Split.Hom.comm] }
variable {C}
namespace Split
@[ext]
theorem hom_ext {S‚ÇÅ S‚ÇÇ : Split C} (Œ¶‚ÇÅ Œ¶‚ÇÇ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : ‚àÄ n : ‚Ñï, Œ¶‚ÇÅ.f n = Œ¶‚ÇÇ.f n) : Œ¶‚ÇÅ = Œ¶‚ÇÇ :=
  Hom.ext _ _ h
theorem congr_F {S‚ÇÅ S‚ÇÇ : Split C} {Œ¶‚ÇÅ Œ¶‚ÇÇ : S‚ÇÅ ‚ü∂ S‚ÇÇ} (h : Œ¶‚ÇÅ = Œ¶‚ÇÇ) : Œ¶‚ÇÅ.f = Œ¶‚ÇÇ.f := by rw [h]
theorem congr_f {S‚ÇÅ S‚ÇÇ : Split C} {Œ¶‚ÇÅ Œ¶‚ÇÇ : S‚ÇÅ ‚ü∂ S‚ÇÇ} (h : Œ¶‚ÇÅ = Œ¶‚ÇÇ) (n : ‚Ñï) : Œ¶‚ÇÅ.f n = Œ¶‚ÇÇ.f n := by
  rw [h]
@[simp]
theorem id_F (S : Split C) : (ùüô S : S ‚ü∂ S).F = ùüô S.X :=
  rfl
@[simp]
theorem id_f (S : Split C) (n : ‚Ñï) : (ùüô S : S ‚ü∂ S).f n = ùüô (S.s.N n) :=
  rfl
@[simp]
theorem comp_F {S‚ÇÅ S‚ÇÇ S‚ÇÉ : Split C} (Œ¶‚ÇÅ‚ÇÇ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (Œ¶‚ÇÇ‚ÇÉ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
    (Œ¶‚ÇÅ‚ÇÇ ‚â´ Œ¶‚ÇÇ‚ÇÉ).F = Œ¶‚ÇÅ‚ÇÇ.F ‚â´ Œ¶‚ÇÇ‚ÇÉ.F :=
  rfl
@[simp]
theorem comp_f {S‚ÇÅ S‚ÇÇ S‚ÇÉ : Split C} (Œ¶‚ÇÅ‚ÇÇ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (Œ¶‚ÇÇ‚ÇÉ : S‚ÇÇ ‚ü∂ S‚ÇÉ) (n : ‚Ñï) :
    (Œ¶‚ÇÅ‚ÇÇ ‚â´ Œ¶‚ÇÇ‚ÇÉ).f n = Œ¶‚ÇÅ‚ÇÇ.f n ‚â´ Œ¶‚ÇÇ‚ÇÉ.f n :=
  rfl
@[reassoc (attr := simp 1100)]
theorem cofan_inj_naturality_symm {S‚ÇÅ S‚ÇÇ : Split C} (Œ¶ : S‚ÇÅ ‚ü∂ S‚ÇÇ) {Œî : SimplexCategory·µí·µñ}
    (A : Splitting.IndexSet Œî) :
    (S‚ÇÅ.s.cofan Œî).inj A ‚â´ Œ¶.F.app Œî = Œ¶.f A.1.unop.len ‚â´ (S‚ÇÇ.s.cofan Œî).inj A := by
  rw [S‚ÇÅ.s.cofan_inj_eq, S‚ÇÇ.s.cofan_inj_eq, assoc, Œ¶.F.naturality, ‚Üê Œ¶.comm_assoc]
variable (C)
@[simps]
def forget : Split C ‚•§ SimplicialObject C where
  obj S := S.X
  map Œ¶ := Œ¶.F
@[simps]
def evalN (n : ‚Ñï) : Split C ‚•§ C where
  obj S := S.s.N n
  map Œ¶ := Œ¶.f n
@[simps]
def natTransCofanInj {Œî : SimplexCategory·µí·µñ} (A : Splitting.IndexSet Œî) :
    evalN C A.1.unop.len ‚ü∂ forget C ‚ãô (evaluation SimplexCategory·µí·µñ C).obj Œî where
  app S := (S.s.cofan Œî).inj A
  naturality _ _ Œ¶ := (cofan_inj_naturality_symm Œ¶ A).symm
end Split
end SimplicialObject