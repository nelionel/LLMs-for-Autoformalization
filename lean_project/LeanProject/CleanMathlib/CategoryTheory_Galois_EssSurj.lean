import Mathlib.CategoryTheory.Galois.Full
import Mathlib.CategoryTheory.Galois.Topology
import Mathlib.Topology.Algebra.OpenSubgroup
noncomputable section
universe u‚ÇÅ u‚ÇÇ
namespace CategoryTheory
namespace PreGaloisCategory
variable {C : Type u‚ÇÅ} [Category.{u‚ÇÇ} C] {F : C ‚•§ FintypeCat.{u‚ÇÅ}}
open Limits Functor
variable [GaloisCategory C] [FiberFunctor F]
variable {G : Type*} [Group G] [TopologicalSpace G] [TopologicalGroup G] [CompactSpace G]
private local instance fintypeQuotient (H : OpenSubgroup (G)) :
    Fintype (G ‚ß∏ (H : Subgroup (G))) :=
  have : Finite (G ‚ß∏ H.toSubgroup) := H.toSubgroup.quotient_finite_of_isOpen H.isOpen'
  Fintype.ofFinite _
private local instance fintypeQuotientStabilizer {X : Type*} [MulAction G X]
    [TopologicalSpace X] [ContinuousSMul G X] [DiscreteTopology X] (x : X) :
    Fintype (G ‚ß∏ (MulAction.stabilizer (G) x)) :=
  fintypeQuotient ‚ü®MulAction.stabilizer (G) x, stabilizer_isOpen (G) x‚ü©
lemma has_decomp_quotients (X : Action FintypeCat (MonCat.of G))
    [TopologicalSpace X.V] [DiscreteTopology X.V] [ContinuousSMul G X.V] :
    ‚àÉ (Œπ : Type) (_ : Finite Œπ) (f : Œπ ‚Üí OpenSubgroup (G)),
      Nonempty ((‚àê fun i ‚Ü¶ G ‚ß∏‚Çê (f i).toSubgroup) ‚âÖ X) := by
  obtain ‚ü®Œπ, hf, f, u, hc‚ü© := has_decomp_connected_components' X
  letI (i : Œπ) : TopologicalSpace (f i).V := ‚ä•
  haveI (i : Œπ) : DiscreteTopology (f i).V := ‚ü®rfl‚ü©
  have (i : Œπ) : ContinuousSMul G (f i).V := ContinuousSMul.mk <| by
    let r : f i ‚ü∂ X := Sigma.Œπ f i ‚â´ u.hom
    let r'' (p : G √ó (f i).V) : G √ó X.V := (p.1, r.hom p.2)
    let q (p : G √ó X.V) : X.V := X.œÅ p.1 p.2
    let q' (p : G √ó (f i).V) : (f i).V := (f i).œÅ p.1 p.2
    have heq : q ‚àò r'' = r.hom ‚àò q' := by
      ext (p : G √ó (f i).V)
      exact (congr_fun (r.comm p.1) p.2).symm
    have hrinj : Function.Injective r.hom :=
      (ConcreteCategory.mono_iff_injective_of_preservesPullback r).mp <| mono_comp _ _
    let t‚ÇÅ : TopologicalSpace (G √ó (f i).V) := inferInstance
    show @Continuous _ _ _ ‚ä• q'
    have : TopologicalSpace.induced r.hom inferInstance = ‚ä• := by
      rw [‚Üê le_bot_iff]
      exact fun s _ ‚Ü¶ ‚ü®r.hom '' s, ‚ü®isOpen_discrete (r.hom '' s), Set.preimage_image_eq s hrinj‚ü©‚ü©
    rw [‚Üê this, continuous_induced_rng, ‚Üê heq]
    exact Continuous.comp continuous_smul (by fun_prop)
  have (i : Œπ) : ‚àÉ (U : OpenSubgroup (G)), (Nonempty ((f i) ‚âÖ G ‚ß∏‚Çê U.toSubgroup)) := by
    obtain ‚ü®(x : (f i).V)‚ü© := nonempty_fiber_of_isConnected (forget‚ÇÇ _ _) (f i)
    let U : OpenSubgroup (G) := ‚ü®MulAction.stabilizer (G) x, stabilizer_isOpen (G) x‚ü©
    letI : Fintype (G ‚ß∏ MulAction.stabilizer (G) x) := fintypeQuotient U
    exact ‚ü®U, ‚ü®FintypeCat.isoQuotientStabilizerOfIsConnected (f i) x‚ü©‚ü©
  choose g ui using this
  exact ‚ü®Œπ, hf, g, ‚ü®(Sigma.mapIso (fun i ‚Ü¶ (ui i).some)).symm ‚â™‚â´ u‚ü©‚ü©
def fiberIsoQuotientStabilizer (X : C) [IsConnected X] (x : F.obj X) :
    (functorToAction F).obj X ‚âÖ Aut F ‚ß∏‚Çê MulAction.stabilizer (Aut F) x :=
  haveI : IsConnected ((functorToAction F).obj X) := PreservesIsConnected.preserves
  letI : Fintype (Aut F ‚ß∏ MulAction.stabilizer (Aut F) x) := fintypeQuotientStabilizer x
  FintypeCat.isoQuotientStabilizerOfIsConnected ((functorToAction F).obj X) x
section
open Action.FintypeCat
variable (V : OpenSubgroup (Aut F)) {U : OpenSubgroup (Aut F)}
  (h : Subgroup.Normal U.toSubgroup) {A : C} (u : (functorToAction F).obj A ‚âÖ Aut F ‚ß∏‚Çê U.toSubgroup)
private def quotientToEndObjectHom :
    V.toSubgroup ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup ‚Üí* End A :=
  let ff : (functorToAction F).FullyFaithful := FullyFaithful.ofFullyFaithful (functorToAction F)
  let e : End A ‚âÉ* End (Aut F ‚ß∏‚Çê U.toSubgroup) := (ff.mulEquivEnd A).trans (Iso.conj u)
  e.symm.toMonoidHom.comp (quotientToEndHom V.toSubgroup U.toSubgroup)
private lemma functorToAction_map_quotientToEndObjectHom
    (m : SingleObj.star (V ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup) ‚ü∂
      SingleObj.star (V ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup)) :
    (functorToAction F).map (quotientToEndObjectHom V h u m) =
      u.hom ‚â´ quotientToEndHom V.toSubgroup U.toSubgroup m ‚â´ u.inv := by
  simp [‚Üê cancel_epi u.inv, ‚Üê cancel_mono u.hom, ‚Üê Iso.conj_apply, quotientToEndObjectHom]
@[simps!]
private def quotientDiag : SingleObj (V.toSubgroup ‚ß∏ Subgroup.subgroupOf U V) ‚•§ C :=
  SingleObj.functor (quotientToEndObjectHom V h u)
variable {V} (hUinV : U ‚â§ V)
@[simps]
private def coconeQuotientDiag :
    Cocone (quotientDiag V h u ‚ãô functorToAction F) where
  pt := Aut F ‚ß∏‚Çê V.toSubgroup
  Œπ := SingleObj.natTrans (u.hom ‚â´ quotientToQuotientOfLE V.toSubgroup U.toSubgroup hUinV) <| by
    intro (m : V ‚ß∏ Subgroup.subgroupOf U V)
    simp only [const_obj_obj, Functor.comp_map, const_obj_map, Category.comp_id]
    rw [‚Üê cancel_epi (u.inv), Iso.inv_hom_id_assoc]
    apply Action.hom_ext
    ext (x : Aut F ‚ß∏ U.toSubgroup)
    induction' m, x using Quotient.inductionOn‚ÇÇ with œÉ Œº
    suffices h : ‚ü¶Œº * œÉ‚Åª¬π‚üß = ‚ü¶Œº‚üß by
      simp only [quotientToQuotientOfLE_hom_mk, quotientDiag_map,
        functorToAction_map_quotientToEndObjectHom V _ u]
      simpa
    apply Quotient.sound
    apply (QuotientGroup.leftRel_apply).mpr
    simp
@[simps]
private def coconeQuotientDiagDesc
    (s : Cocone (quotientDiag V h u ‚ãô functorToAction F)) :
      (coconeQuotientDiag h u hUinV).pt ‚ü∂ s.pt where
  hom := Quotient.lift (fun œÉ ‚Ü¶ (u.inv ‚â´ s.Œπ.app (SingleObj.star _)).hom ‚ü¶œÉ‚üß) <| fun œÉ œÑ hst ‚Ü¶ by
    let J' := quotientDiag V h u ‚ãô functorToAction F
    let m : End (SingleObj.star (V.toSubgroup ‚ß∏ Subgroup.subgroupOf U V)) :=
      ‚ü¶‚ü®œÉ‚Åª¬π * œÑ, (QuotientGroup.leftRel_apply).mp hst‚ü©‚üß
    have h1 : J'.map m ‚â´ s.Œπ.app (SingleObj.star _) = s.Œπ.app (SingleObj.star _) := s.Œπ.naturality m
    conv_rhs => rw [‚Üê h1]
    have h2 : (J'.map m).hom (u.inv.hom ‚ü¶œÑ‚üß) = u.inv.hom ‚ü¶œÉ‚üß := by
      simp only [comp_obj, quotientDiag_obj, Functor.comp_map, quotientDiag_map, J',
        functorToAction_map_quotientToEndObjectHom V h u m]
      show (u.inv ‚â´ u.hom ‚â´ _ ‚â´ u.inv).hom ‚ü¶œÑ‚üß = u.inv.hom ‚ü¶œÉ‚üß
      simp [m]
    simp only [‚Üê h2, const_obj_obj, Action.comp_hom, FintypeCat.comp_apply]
  comm g := by
    ext (x : Aut F ‚ß∏ V.toSubgroup)
    induction' x using Quotient.inductionOn with œÉ
    simp only [const_obj_obj]
    show (((Aut F ‚ß∏‚Çê U.toSubgroup).œÅ g ‚â´ u.inv.hom) ‚â´ (s.Œπ.app (SingleObj.star _)).hom) ‚ü¶œÉ‚üß =
      ((s.Œπ.app (SingleObj.star _)).hom ‚â´ s.pt.œÅ g) (u.inv.hom ‚ü¶œÉ‚üß)
    have : ((functorToAction F).obj A).œÅ g ‚â´ (s.Œπ.app (SingleObj.star _)).hom =
        (s.Œπ.app (SingleObj.star _)).hom ‚â´ s.pt.œÅ g :=
      (s.Œπ.app (SingleObj.star _)).comm g
    rw [‚Üê this, u.inv.comm g]
    rfl
private def coconeQuotientDiagIsColimit :
    IsColimit (coconeQuotientDiag h u hUinV) where
  desc := coconeQuotientDiagDesc h u hUinV
  fac s j := by
    apply (cancel_epi u.inv).mp
    apply Action.hom_ext
    ext (x : Aut F ‚ß∏ U.toSubgroup)
    induction' x using Quotient.inductionOn with œÉ
    simp
    rfl
  uniq s f hf := by
    apply Action.hom_ext
    ext (x : Aut F ‚ß∏ V.toSubgroup)
    induction' x using Quotient.inductionOn with œÉ
    simp [‚Üê hf (SingleObj.star _)]
end
lemma exists_lift_of_quotient_openSubgroup (V : OpenSubgroup (Aut F)) :
    ‚àÉ (X : C), Nonempty ((functorToAction F).obj X ‚âÖ Aut F ‚ß∏‚Çê V.toSubgroup) := by
  obtain ‚ü®I, hf, hc, hi‚ü© := exists_set_ker_evaluation_subset_of_isOpen F (one_mem V) V.isOpen'
  haveI (X : I) : IsConnected X.val := hc X X.property
  haveI (X : I) : Nonempty (F.obj X.val) := nonempty_fiber_of_isConnected F X
  have hn : Nonempty (F.obj <| (‚àè·∂ú fun X : I => X)) := nonempty_fiber_pi_of_nonempty_of_finite F _
  obtain ‚ü®A, f, hgal‚ü© := exists_hom_from_galois_of_fiber_nonempty F (‚àè·∂ú fun X : I => X) hn
  obtain ‚ü®a‚ü© := nonempty_fiber_of_isConnected F A
  let U : OpenSubgroup (Aut F) := ‚ü®MulAction.stabilizer (Aut F) a, stabilizer_isOpen (Aut F) a‚ü©
  let u := fiberIsoQuotientStabilizer A a
  have hUnormal : U.toSubgroup.Normal := stabilizer_normal_of_isGalois F A a
  have h1 (œÉ : Aut F) (œÉinU : œÉ ‚àà U) : œÉ.hom.app A = ùüô (F.obj A) := by
    have hi : (Aut F ‚ß∏‚Çê MulAction.stabilizer (Aut F) a).œÅ œÉ = ùüô _ := by
      refine FintypeCat.hom_ext _ _ (fun x ‚Ü¶ ?_)
      induction' x using Quotient.inductionOn with œÑ
      show ‚ü¶œÉ * œÑ‚üß = ‚ü¶œÑ‚üß
      apply Quotient.sound
      apply (QuotientGroup.leftRel_apply).mpr
      simp only [mul_inv_rev]
      exact Subgroup.Normal.conj_mem hUnormal _ (Subgroup.inv_mem U.toSubgroup œÉinU) _
    simp [‚Üê cancel_mono u.hom.hom, show œÉ.hom.app A ‚â´ u.hom.hom = _ from u.hom.comm œÉ, hi]
  have h2 (œÉ : Aut F) (œÉinU : œÉ ‚àà U) : ‚àÄ X : I, œÉ.hom.app X = ùüô (F.obj X) := by
    intro ‚ü®X, hX‚ü©
    ext (x : F.obj X)
    let p : A ‚ü∂ X := f ‚â´ Pi.œÄ (fun Z : I => (Z : C)) ‚ü®X, hX‚ü©
    have : IsConnected X := hc X hX
    obtain ‚ü®a, rfl‚ü© := surjective_of_nonempty_fiber_of_isConnected F p x
    simp only [FintypeCat.id_apply, FunctorToFintypeCat.naturality, h1 œÉ œÉinU]
  have hUinV : (U : Set (Aut F)) ‚â§ V := fun u uinU ‚Ü¶ hi u (h2 u uinU)
  have := V.quotient_finite_of_isOpen' (U.subgroupOf V) V.isOpen (V.subgroupOf_isOpen U U.isOpen)
  exact ‚ü®colimit (quotientDiag V hUnormal u),
    ‚ü®preservesColimitIso (functorToAction F) (quotientDiag V hUnormal u) ‚â™‚â´
    colimit.isoColimitCocone ‚ü®coconeQuotientDiag hUnormal u hUinV,
    coconeQuotientDiagIsColimit hUnormal u hUinV‚ü©‚ü©‚ü©
@[stacks 0BN4 "Essential surjectivity part"]
theorem exists_lift_of_continuous (X : Action FintypeCat (MonCat.of (Aut F)))
    [TopologicalSpace X.V] [DiscreteTopology X.V] [ContinuousSMul (Aut F) X.V] :
    ‚àÉ A, Nonempty ((functorToAction F).obj A ‚âÖ X) := by
  obtain ‚ü®Œπ, hfin, f, ‚ü®u‚ü©‚ü© := has_decomp_quotients X
  choose g gu using (fun i ‚Ü¶ exists_lift_of_quotient_openSubgroup (f i))
  exact ‚ü®‚àê g, ‚ü®PreservesCoproduct.iso (functorToAction F) g ‚â™‚â´
    Sigma.mapIso (fun i ‚Ü¶ (gu i).some) ‚â™‚â´ u‚ü©‚ü©
end PreGaloisCategory
end CategoryTheory