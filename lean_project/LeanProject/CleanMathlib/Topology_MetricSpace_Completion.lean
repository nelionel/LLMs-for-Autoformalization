import Mathlib.Topology.UniformSpace.Completion
import Mathlib.Topology.MetricSpace.Isometry
import Mathlib.Topology.MetricSpace.Lipschitz
import Mathlib.Topology.MetricSpace.Algebra
import Mathlib.Topology.Algebra.GroupCompletion
import Mathlib.Topology.Instances.Real
open Set Filter UniformSpace Metric
open Filter Topology Uniformity
noncomputable section
universe u v
variable {Œ± : Type u} {Œ≤ : Type v} [PseudoMetricSpace Œ±]
namespace UniformSpace.Completion
instance : Dist (Completion Œ±) :=
  ‚ü®Completion.extension‚ÇÇ dist‚ü©
protected theorem uniformContinuous_dist :
    UniformContinuous fun p : Completion Œ± √ó Completion Œ± ‚Ü¶ dist p.1 p.2 :=
  uniformContinuous_extension‚ÇÇ dist
protected theorem continuous_dist [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Completion Œ±} (hf : Continuous f)
    (hg : Continuous g) : Continuous fun x ‚Ü¶ dist (f x) (g x) :=
  Completion.uniformContinuous_dist.continuous.comp (hf.prod_mk hg : _)
@[simp]
protected theorem dist_eq (x y : Œ±) : dist (x : Completion Œ±) y = dist x y :=
  Completion.extension‚ÇÇ_coe_coe uniformContinuous_dist _ _
protected theorem dist_self (x : Completion Œ±) : dist x x = 0 := by
  refine induction_on x ?_ ?_
  ¬∑ refine isClosed_eq ?_ continuous_const
    exact Completion.continuous_dist continuous_id continuous_id
  ¬∑ intro a
    rw [Completion.dist_eq, dist_self]
protected theorem dist_comm (x y : Completion Œ±) : dist x y = dist y x := by
  refine induction_on‚ÇÇ x y ?_ ?_
  ¬∑ exact isClosed_eq (Completion.continuous_dist continuous_fst continuous_snd)
        (Completion.continuous_dist continuous_snd continuous_fst)
  ¬∑ intro a b
    rw [Completion.dist_eq, Completion.dist_eq, dist_comm]
protected theorem dist_triangle (x y z : Completion Œ±) : dist x z ‚â§ dist x y + dist y z := by
  refine induction_on‚ÇÉ x y z ?_ ?_
  ¬∑ refine isClosed_le ?_ (Continuous.add ?_ ?_) <;>
      apply_rules [Completion.continuous_dist, Continuous.fst, Continuous.snd, continuous_id]
  ¬∑ intro a b c
    rw [Completion.dist_eq, Completion.dist_eq, Completion.dist_eq]
    exact dist_triangle a b c
protected theorem mem_uniformity_dist (s : Set (Completion Œ± √ó Completion Œ±)) :
    s ‚àà ùì§ (Completion Œ±) ‚Üî ‚àÉ Œµ > 0, ‚àÄ {a b}, dist a b < Œµ ‚Üí (a, b) ‚àà s := by
  constructor
  ¬∑ 
    intro hs
    rcases mem_uniformity_isClosed hs with ‚ü®t, ht, ‚ü®tclosed, ts‚ü©‚ü©
    have A : { x : Œ± √ó Œ± | (‚Üëx.1, ‚Üëx.2) ‚àà t } ‚àà uniformity Œ± :=
      uniformContinuous_def.1 (uniformContinuous_coe Œ±) t ht
    rcases mem_uniformity_dist.1 A with ‚ü®Œµ, Œµpos, hŒµ‚ü©
    refine ‚ü®Œµ, Œµpos, @fun x y hxy ‚Ü¶ ?_‚ü©
    have : Œµ ‚â§ dist x y ‚à® (x, y) ‚àà t := by
      refine induction_on‚ÇÇ x y ?_ ?_
      ¬∑ have : { x : Completion Œ± √ó Completion Œ± | Œµ ‚â§ dist x.fst x.snd ‚à® (x.fst, x.snd) ‚àà t } =
               { p : Completion Œ± √ó Completion Œ± | Œµ ‚â§ dist p.1 p.2 } ‚à™ t := by ext; simp
        rw [this]
        apply IsClosed.union _ tclosed
        exact isClosed_le continuous_const Completion.uniformContinuous_dist.continuous
      ¬∑ intro x y
        rw [Completion.dist_eq]
        by_cases h : Œµ ‚â§ dist x y
        ¬∑ exact Or.inl h
        ¬∑ have Z := hŒµ (not_le.1 h)
          simp only [Set.mem_setOf_eq] at Z
          exact Or.inr Z
    simp only [not_le.mpr hxy, false_or, not_le] at this
    exact ts this
  ¬∑ 
    rintro ‚ü®Œµ, Œµpos, hŒµ‚ü©
    let r : Set (‚Ñù √ó ‚Ñù) := { p | dist p.1 p.2 < Œµ }
    have : r ‚àà uniformity ‚Ñù := Metric.dist_mem_uniformity Œµpos
    have T := uniformContinuous_def.1 (@Completion.uniformContinuous_dist Œ± _) r this
    simp only [uniformity_prod_eq_prod, mem_prod_iff, exists_prop, Filter.mem_map,
      Set.mem_setOf_eq] at T
    rcases T with ‚ü®t1, ht1, t2, ht2, ht‚ü©
    refine mem_of_superset ht1 ?_
    have A : ‚àÄ a b : Completion Œ±, (a, b) ‚àà t1 ‚Üí dist a b < Œµ := by
      intro a b hab
      have : ((a, b), (a, a)) ‚àà t1 √óÀ¢ t2 := ‚ü®hab, refl_mem_uniformity ht2‚ü©
      have I := ht this
      simp? [r, Completion.dist_self, Real.dist_eq, Completion.dist_comm] at I says
        simp only [Real.dist_eq, mem_setOf_eq, preimage_setOf_eq, Completion.dist_self,
          Completion.dist_comm, zero_sub, abs_neg, r] at I
      exact lt_of_le_of_lt (le_abs_self _) I
    show t1 ‚äÜ s
    rintro ‚ü®a, b‚ü© hp
    have : dist a b < Œµ := A a b hp
    exact hŒµ this
protected theorem uniformity_dist' :
    ùì§ (Completion Œ±) = ‚®Ö Œµ : { Œµ : ‚Ñù // 0 < Œµ }, ùìü { p | dist p.1 p.2 < Œµ.val } := by
  ext s; rw [mem_iInf_of_directed]
  ¬∑ simp [Completion.mem_uniformity_dist, subset_def]
  ¬∑ rintro ‚ü®r, hr‚ü© ‚ü®p, hp‚ü©
    use ‚ü®min r p, lt_min hr hp‚ü©
    simp +contextual [lt_min_iff]
protected theorem uniformity_dist : ùì§ (Completion Œ±) = ‚®Ö Œµ > 0, ùìü { p | dist p.1 p.2 < Œµ } := by
  simpa [iInf_subtype] using @Completion.uniformity_dist' Œ± _
instance instMetricSpace : MetricSpace (Completion Œ±) :=
  @MetricSpace.ofT0PseudoMetricSpace _
    { dist_self := Completion.dist_self
      dist_comm := Completion.dist_comm
      dist_triangle := Completion.dist_triangle
      dist := dist
      toUniformSpace := inferInstance
      uniformity_dist := Completion.uniformity_dist } _
@[deprecated eq_of_dist_eq_zero (since := "2024-03-10")]
protected theorem eq_of_dist_eq_zero (x y : Completion Œ±) (h : dist x y = 0) : x = y :=
  eq_of_dist_eq_zero h
theorem coe_isometry : Isometry ((‚Üë) : Œ± ‚Üí Completion Œ±) :=
  Isometry.of_dist_eq Completion.dist_eq
@[simp]
protected theorem edist_eq (x y : Œ±) : edist (x : Completion Œ±) y = edist x y :=
  coe_isometry x y
instance {M} [Zero M] [Zero Œ±] [SMul M Œ±] [PseudoMetricSpace M] [BoundedSMul M Œ±] :
    BoundedSMul M (Completion Œ±) where
  dist_smul_pair' c x‚ÇÅ x‚ÇÇ := by
    induction x‚ÇÅ, x‚ÇÇ using induction_on‚ÇÇ with
    | hp =>
      exact isClosed_le
        ((continuous_fst.const_smul _).dist (continuous_snd.const_smul _))
        (continuous_const.mul (continuous_fst.dist continuous_snd))
    | ih x‚ÇÅ x‚ÇÇ =>
      rw [‚Üê coe_smul, ‚Üê coe_smul, Completion.dist_eq,  Completion.dist_eq]
      exact dist_smul_pair c x‚ÇÅ x‚ÇÇ
  dist_pair_smul' c‚ÇÅ c‚ÇÇ x := by
    induction x using induction_on with
    | hp =>
      exact isClosed_le
        ((continuous_const_smul _).dist (continuous_const_smul _))
        (continuous_const.mul (continuous_id.dist continuous_const))
    | ih x =>
      rw [‚Üê coe_smul, ‚Üê coe_smul, Completion.dist_eq, ‚Üê coe_zero, Completion.dist_eq]
      exact dist_pair_smul c‚ÇÅ c‚ÇÇ x
end UniformSpace.Completion
open UniformSpace Completion NNReal
theorem LipschitzWith.completion_extension [MetricSpace Œ≤] [CompleteSpace Œ≤] {f : Œ± ‚Üí Œ≤}
    {K : ‚Ñù‚â•0} (h : LipschitzWith K f) : LipschitzWith K (Completion.extension f) :=
  LipschitzWith.of_dist_le_mul fun x y => induction_on‚ÇÇ x y
    (isClosed_le (by fun_prop) (by fun_prop)) <| by
      simpa only [extension_coe h.uniformContinuous, Completion.dist_eq] using h.dist_le_mul
theorem LipschitzWith.completion_map [PseudoMetricSpace Œ≤] {f : Œ± ‚Üí Œ≤} {K : ‚Ñù‚â•0}
    (h : LipschitzWith K f) : LipschitzWith K (Completion.map f) :=
  one_mul K ‚ñ∏ (coe_isometry.lipschitz.comp h).completion_extension
theorem Isometry.completion_extension [MetricSpace Œ≤] [CompleteSpace Œ≤] {f : Œ± ‚Üí Œ≤}
    (h : Isometry f) : Isometry (Completion.extension f) :=
  Isometry.of_dist_eq fun x y => induction_on‚ÇÇ x y
    (isClosed_eq (by fun_prop) (by fun_prop)) fun _ _ ‚Ü¶ by
      simp only [extension_coe h.uniformContinuous, Completion.dist_eq, h.dist_eq]
theorem Isometry.completion_map [PseudoMetricSpace Œ≤] {f : Œ± ‚Üí Œ≤}
    (h : Isometry f) : Isometry (Completion.map f) :=
  (coe_isometry.comp h).completion_extension