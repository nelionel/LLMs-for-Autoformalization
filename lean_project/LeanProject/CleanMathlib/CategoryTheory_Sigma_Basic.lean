import Mathlib.CategoryTheory.Whiskering
import Mathlib.CategoryTheory.Functor.FullyFaithful
import Mathlib.CategoryTheory.NatIso
namespace CategoryTheory
namespace Sigma
universe w‚ÇÅ w‚ÇÇ w‚ÇÉ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ
variable {I : Type w‚ÇÅ} {C : I ‚Üí Type u‚ÇÅ} [‚àÄ i, Category.{v‚ÇÅ} (C i)]
inductive SigmaHom : (Œ£i, C i) ‚Üí (Œ£i, C i) ‚Üí Type max w‚ÇÅ v‚ÇÅ u‚ÇÅ
  | mk : ‚àÄ {i : I} {X Y : C i}, (X ‚ü∂ Y) ‚Üí SigmaHom ‚ü®i, X‚ü© ‚ü®i, Y‚ü©
namespace SigmaHom
def id : ‚àÄ X : Œ£i, C i, SigmaHom X X
  | ‚ü®_, _‚ü© => mk (ùüô _)
instance (X : Œ£i, C i) : Inhabited (SigmaHom X X) :=
  ‚ü®id X‚ü©
def comp : ‚àÄ {X Y Z : Œ£i, C i}, SigmaHom X Y ‚Üí SigmaHom Y Z ‚Üí SigmaHom X Z
  | _, _, _, mk f, mk g => mk (f ‚â´ g)
instance : CategoryStruct (Œ£i, C i) where
  Hom := SigmaHom
  id := id
  comp f g := comp f g
@[simp]
lemma comp_def (i : I) (X Y Z : C i) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : comp (mk f) (mk g) = mk (f ‚â´ g) :=
  rfl
lemma assoc : ‚àÄ {X Y Z W : Œ£i, C i} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ W), (f ‚â´ g) ‚â´ h = f ‚â´ g ‚â´ h
  | _, _, _, _, mk _, mk _, mk _ => congr_arg mk (Category.assoc _ _ _)
lemma id_comp : ‚àÄ {X Y : Œ£i, C i} (f : X ‚ü∂ Y), ùüô X ‚â´ f = f
  | _, _, mk _ => congr_arg mk (Category.id_comp _)
lemma comp_id : ‚àÄ {X Y : Œ£i, C i} (f : X ‚ü∂ Y), f ‚â´ ùüô Y = f
  | _, _, mk _ => congr_arg mk (Category.comp_id _)
end SigmaHom
instance sigma : Category (Œ£i, C i) where
  id_comp := SigmaHom.id_comp
  comp_id := SigmaHom.comp_id
  assoc := SigmaHom.assoc
@[simps map]
def incl (i : I) : C i ‚•§ Œ£i, C i where
  obj X := ‚ü®i, X‚ü©
  map := SigmaHom.mk
@[simp]
lemma incl_obj {i : I} (X : C i) : (incl i).obj X = ‚ü®i, X‚ü© :=
  rfl
instance (i : I) : Functor.Full (incl i : C i ‚•§ Œ£i, C i) where
  map_surjective := fun ‚ü®f‚ü© => ‚ü®f, rfl‚ü©
instance (i : I) : Functor.Faithful (incl i : C i ‚•§ Œ£i, C i) where
  map_injective {_ _ _ _} h := by injection h
section
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (F : ‚àÄ i, C i ‚•§ D)
def natTrans {F G : (Œ£i, C i) ‚•§ D} (h : ‚àÄ i : I, incl i ‚ãô F ‚ü∂ incl i ‚ãô G) : F ‚ü∂ G where
  app := fun ‚ü®j, X‚ü© => (h j).app X
  naturality := by
    rintro ‚ü®j, X‚ü© ‚ü®_, _‚ü© ‚ü®f‚ü©
    apply (h j).naturality
@[simp]
lemma natTrans_app {F G : (Œ£i, C i) ‚•§ D} (h : ‚àÄ i : I, incl i ‚ãô F ‚ü∂ incl i ‚ãô G) (i : I)
    (X : C i) : (natTrans h).app ‚ü®i, X‚ü© = (h i).app X :=
  rfl
def descMap : ‚àÄ X Y : Œ£i, C i, (X ‚ü∂ Y) ‚Üí ((F X.1).obj X.2 ‚ü∂ (F Y.1).obj Y.2)
  | _, _, SigmaHom.mk g => (F _).map g
@[simps obj]
def desc : (Œ£i, C i) ‚•§ D where
  obj X := (F X.1).obj X.2
  map g := descMap F _ _ g
  map_id := by
    rintro ‚ü®i, X‚ü©
    apply (F i).map_id
  map_comp := by
    rintro ‚ü®i, X‚ü© ‚ü®_, Y‚ü© ‚ü®_, Z‚ü© ‚ü®f‚ü© ‚ü®g‚ü©
    apply (F i).map_comp
@[simp]
lemma desc_map_mk {i : I} (X Y : C i) (f : X ‚ü∂ Y) : (desc F).map (SigmaHom.mk f) = (F i).map f :=
  rfl
def inclDesc (i : I) : incl i ‚ãô desc F ‚âÖ F i :=
  NatIso.ofComponents fun _ => Iso.refl _
@[simp]
lemma inclDesc_hom_app (i : I) (X : C i) : (inclDesc F i).hom.app X = ùüô ((F i).obj X) :=
  rfl
@[simp]
lemma inclDesc_inv_app (i : I) (X : C i) : (inclDesc F i).inv.app X = ùüô ((F i).obj X) :=
  rfl
def descUniq (q : (Œ£i, C i) ‚•§ D) (h : ‚àÄ i, incl i ‚ãô q ‚âÖ F i) : q ‚âÖ desc F :=
  NatIso.ofComponents (fun ‚ü®i, X‚ü© => (h i).app X) <| by
    rintro ‚ü®i, X‚ü© ‚ü®_, _‚ü© ‚ü®f‚ü©
    apply (h i).hom.naturality f
@[simp]
lemma descUniq_hom_app (q : (Œ£i, C i) ‚•§ D) (h : ‚àÄ i, incl i ‚ãô q ‚âÖ F i) (i : I) (X : C i) :
    (descUniq F q h).hom.app ‚ü®i, X‚ü© = (h i).hom.app X :=
  rfl
@[simp]
lemma descUniq_inv_app (q : (Œ£i, C i) ‚•§ D) (h : ‚àÄ i, incl i ‚ãô q ‚âÖ F i) (i : I) (X : C i) :
    (descUniq F q h).inv.app ‚ü®i, X‚ü© = (h i).inv.app X :=
  rfl
@[simps]
def natIso {q‚ÇÅ q‚ÇÇ : (Œ£i, C i) ‚•§ D} (h : ‚àÄ i, incl i ‚ãô q‚ÇÅ ‚âÖ incl i ‚ãô q‚ÇÇ) : q‚ÇÅ ‚âÖ q‚ÇÇ where
  hom := natTrans fun i => (h i).hom
  inv := natTrans fun i => (h i).inv
end
section
variable (C) {J : Type w‚ÇÇ} (g : J ‚Üí I)
def map : (Œ£j : J, C (g j)) ‚•§ Œ£i : I, C i :=
  desc fun j => incl (g j)
@[simp]
lemma map_obj (j : J) (X : C (g j)) : (Sigma.map C g).obj ‚ü®j, X‚ü© = ‚ü®g j, X‚ü© :=
  rfl
@[simp]
lemma map_map {j : J} {X Y : C (g j)} (f : X ‚ü∂ Y) :
    (Sigma.map C g).map (SigmaHom.mk f) = SigmaHom.mk f :=
  rfl
@[simps!]
def inclCompMap (j : J) : incl j ‚ãô map C g ‚âÖ incl (g j) :=
  Iso.refl _
variable (I)
@[simps!]
def mapId : map C (id : I ‚Üí I) ‚âÖ ùü≠ (Œ£i, C i) :=
  natIso fun i => NatIso.ofComponents fun _ => Iso.refl _
variable {I} {K : Type w‚ÇÉ}
@[simps!]
def mapComp (f : K ‚Üí J) (g : J ‚Üí I) : map (fun x ‚Ü¶ C (g x)) f ‚ãô (map C g : _) ‚âÖ map C (g ‚àò f) :=
  (descUniq _ _) fun k =>
    (isoWhiskerRight (inclCompMap (fun i => C (g i)) f k) (map C g : _) : _) ‚â™‚â´ inclCompMap _ _ _
end
namespace Functor
variable {D : I ‚Üí Type u‚ÇÅ} [‚àÄ i, Category.{v‚ÇÅ} (D i)]
def sigma (F : ‚àÄ i, C i ‚•§ D i) : (Œ£i, C i) ‚•§ Œ£i, D i :=
  desc fun i => F i ‚ãô incl i
end Functor
namespace natTrans
variable {D : I ‚Üí Type u‚ÇÅ} [‚àÄ i, Category.{v‚ÇÅ} (D i)]
variable {F G : ‚àÄ i, C i ‚•§ D i}
def sigma (Œ± : ‚àÄ i, F i ‚ü∂ G i) : Functor.sigma F ‚ü∂ Functor.sigma G where
  app f := SigmaHom.mk ((Œ± f.1).app _)
  naturality := by
    rintro ‚ü®i, X‚ü© ‚ü®_, _‚ü© ‚ü®f‚ü©
    change SigmaHom.mk _ = SigmaHom.mk _
    rw [(Œ± i).naturality]
end natTrans
end Sigma
end CategoryTheory