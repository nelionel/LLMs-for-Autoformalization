import Mathlib.Probability.Kernel.Disintegration.CondCDF
open MeasureTheory Set Filter
open scoped Topology
namespace ProbabilityTheory
noncomputable
def cdf (Œº : Measure ‚Ñù) : StieltjesFunction :=
  condCDF ((Measure.dirac Unit.unit).prod Œº) Unit.unit
section ExplicitMeasureArg
variable (Œº : Measure ‚Ñù)
lemma cdf_nonneg (x : ‚Ñù) : 0 ‚â§ cdf Œº x := condCDF_nonneg _ _ _
lemma cdf_le_one (x : ‚Ñù) : cdf Œº x ‚â§ 1 := condCDF_le_one _ _ _
lemma monotone_cdf : Monotone (cdf Œº) := (condCDF _ _).mono
lemma tendsto_cdf_atBot : Tendsto (cdf Œº) atBot (ùìù 0) := tendsto_condCDF_atBot _ _
lemma tendsto_cdf_atTop : Tendsto (cdf Œº) atTop (ùìù 1) := tendsto_condCDF_atTop _ _
lemma ofReal_cdf [IsProbabilityMeasure Œº] (x : ‚Ñù) : ENNReal.ofReal (cdf Œº x) = Œº (Iic x) := by
  have h := lintegral_condCDF ((Measure.dirac Unit.unit).prod Œº) x
  simpa only [MeasureTheory.Measure.fst_prod, Measure.prod_prod, measure_univ, one_mul,
    lintegral_dirac] using h
lemma cdf_eq_toReal [IsProbabilityMeasure Œº] (x : ‚Ñù) : cdf Œº x = (Œº (Iic x)).toReal := by
  rw [‚Üê ofReal_cdf Œº x, ENNReal.toReal_ofReal (cdf_nonneg Œº x)]
instance instIsProbabilityMeasurecdf : IsProbabilityMeasure (cdf Œº).measure := by
  constructor
  simp only [StieltjesFunction.measure_univ _ (tendsto_cdf_atBot Œº) (tendsto_cdf_atTop Œº), sub_zero,
    ENNReal.ofReal_one]
lemma measure_cdf [IsProbabilityMeasure Œº] : (cdf Œº).measure = Œº := by
  refine Measure.ext_of_Iic (cdf Œº).measure Œº (fun a ‚Ü¶ ?_)
  rw [StieltjesFunction.measure_Iic _ (tendsto_cdf_atBot Œº), sub_zero, ofReal_cdf]
end ExplicitMeasureArg
lemma cdf_measure_stieltjesFunction (f : StieltjesFunction) (hf0 : Tendsto f atBot (ùìù 0))
    (hf1 : Tendsto f atTop (ùìù 1)) :
    cdf f.measure = f := by
  refine (cdf f.measure).eq_of_measure_of_tendsto_atBot f ?_ (tendsto_cdf_atBot _) hf0
  have h_prob : IsProbabilityMeasure f.measure :=
    ‚ü®by rw [f.measure_univ hf0 hf1, sub_zero, ENNReal.ofReal_one]‚ü©
  exact measure_cdf f.measure
end ProbabilityTheory
open ProbabilityTheory
lemma MeasureTheory.Measure.eq_of_cdf (Œº ŒΩ : Measure ‚Ñù) [IsProbabilityMeasure Œº]
    [IsProbabilityMeasure ŒΩ] (h : cdf Œº = cdf ŒΩ) : Œº = ŒΩ := by
  rw [‚Üê measure_cdf Œº, ‚Üê measure_cdf ŒΩ, h]
@[simp] lemma MeasureTheory.Measure.cdf_eq_iff (Œº ŒΩ : Measure ‚Ñù) [IsProbabilityMeasure Œº]
    [IsProbabilityMeasure ŒΩ] :
    cdf Œº = cdf ŒΩ ‚Üî Œº = ŒΩ :=
‚ü®MeasureTheory.Measure.eq_of_cdf Œº ŒΩ, fun h ‚Ü¶ by rw [h]‚ü©