import Mathlib.CategoryTheory.Monoidal.Braided.Basic
import Mathlib.CategoryTheory.Monoidal.Transport
import Mathlib.CategoryTheory.Skeletal
namespace CategoryTheory
open MonoidalCategory
universe v u
variable {C : Type u} [Category.{v} C] [MonoidalCategory C]
abbrev monoidOfSkeletalMonoidal (hC : Skeletal C) : Monoid C where
  mul X Y := (X ‚äó Y : C)
  one := (ùüô_ C : C)
  one_mul X := hC ‚ü®Œª_ X‚ü©
  mul_one X := hC ‚ü®œÅ_ X‚ü©
  mul_assoc X Y Z := hC ‚ü®Œ±_ X Y Z‚ü©
def commMonoidOfSkeletalBraided [BraidedCategory C] (hC : Skeletal C) : CommMonoid C :=
  { monoidOfSkeletalMonoidal hC with mul_comm := fun X Y => hC ‚ü®Œ≤_ X Y‚ü© }
namespace Skeleton
noncomputable instance instMonoidalCategory : MonoidalCategory (Skeleton C) :=
  Monoidal.transport (skeletonEquivalence C).symm
noncomputable instance instMonoid : Monoid (Skeleton C) :=
  monoidOfSkeletalMonoidal (skeleton_isSkeleton _).skel
theorem mul_eq (X Y : Skeleton C) : X * Y = toSkeleton (X.out ‚äó Y.out) := rfl
theorem one_eq : (1 : Skeleton C) = toSkeleton (ùüô_ C) := rfl
theorem toSkeleton_tensorObj (X Y : C) : toSkeleton (X ‚äó Y) = toSkeleton X * toSkeleton Y :=
  let œÜ := (skeletonEquivalence C).symm.unitIso.app; Quotient.sound ‚ü®œÜ X ‚äó œÜ Y‚ü©
noncomputable instance instBraidedCategory [BraidedCategory C] : BraidedCategory (Skeleton C) := by
  letI := braidedCategoryOfFullyFaithful
    (Monoidal.equivalenceTransported (skeletonEquivalence C).symm).inverse
  exact this
noncomputable instance instCommMonoid [BraidedCategory C] : CommMonoid (Skeleton C) :=
  commMonoidOfSkeletalBraided (skeleton_isSkeleton _).skel
end Skeleton
end CategoryTheory