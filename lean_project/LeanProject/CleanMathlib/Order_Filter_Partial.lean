import Mathlib.Order.Filter.Tendsto
import Mathlib.Data.PFun
universe u v w
namespace Filter
variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}
open Filter
def rmap (r : Rel Œ± Œ≤) (l : Filter Œ±) : Filter Œ≤ where
  sets := { s | r.core s ‚àà l }
  univ_sets := by simp
  sets_of_superset hs st := mem_of_superset hs (Rel.core_mono _ st)
  inter_sets hs ht := by
    simp only [Set.mem_setOf_eq]
    convert inter_mem hs ht
    rw [‚Üê Rel.core_inter]
theorem rmap_sets (r : Rel Œ± Œ≤) (l : Filter Œ±) : (l.rmap r).sets = r.core ‚Åª¬π' l.sets :=
  rfl
@[simp]
theorem mem_rmap (r : Rel Œ± Œ≤) (l : Filter Œ±) (s : Set Œ≤) : s ‚àà l.rmap r ‚Üî r.core s ‚àà l :=
  Iff.rfl
@[simp]
theorem rmap_rmap (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) (l : Filter Œ±) :
    rmap s (rmap r l) = rmap (r.comp s) l :=
  filter_eq <| by simp [rmap_sets, Set.preimage, Rel.core_comp]
@[simp]
theorem rmap_compose (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) : rmap s ‚àò rmap r = rmap (r.comp s) :=
  funext <| rmap_rmap _ _
def RTendsto (r : Rel Œ± Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :=
  l‚ÇÅ.rmap r ‚â§ l‚ÇÇ
theorem rtendsto_def (r : Rel Œ± Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :
    RTendsto r l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, r.core s ‚àà l‚ÇÅ :=
  Iff.rfl
def rcomap (r : Rel Œ± Œ≤) (f : Filter Œ≤) : Filter Œ± where
  sets := Rel.image (fun s t => r.core s ‚äÜ t) f.sets
  univ_sets := ‚ü®Set.univ, univ_mem, Set.subset_univ _‚ü©
  sets_of_superset := fun ‚ü®a', ha', ma'a‚ü© ab => ‚ü®a', ha', ma'a.trans ab‚ü©
  inter_sets := fun ‚ü®a', ha‚ÇÅ, ha‚ÇÇ‚ü© ‚ü®b', hb‚ÇÅ, hb‚ÇÇ‚ü© =>
    ‚ü®a' ‚à© b', inter_mem ha‚ÇÅ hb‚ÇÅ, (r.core_inter a' b').subset.trans (Set.inter_subset_inter ha‚ÇÇ hb‚ÇÇ)‚ü©
theorem rcomap_sets (r : Rel Œ± Œ≤) (f : Filter Œ≤) :
    (rcomap r f).sets = Rel.image (fun s t => r.core s ‚äÜ t) f.sets :=
  rfl
theorem rcomap_rcomap (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) (l : Filter Œ≥) :
    rcomap r (rcomap s l) = rcomap (r.comp s) l :=
  filter_eq <| by
    ext t; simp only [rcomap_sets, Rel.image, Filter.mem_sets, Set.mem_setOf_eq, Rel.core_comp]
    constructor
    ¬∑ rintro ‚ü®u, ‚ü®v, vsets, hv‚ü©, h‚ü©
      exact ‚ü®v, vsets, Set.Subset.trans (Rel.core_mono _ hv) h‚ü©
    rintro ‚ü®t, tsets, ht‚ü©
    exact ‚ü®Rel.core s t, ‚ü®t, tsets, Set.Subset.rfl‚ü©, ht‚ü©
@[simp]
theorem rcomap_compose (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) : rcomap r ‚àò rcomap s = rcomap (r.comp s) :=
  funext <| rcomap_rcomap _ _
theorem rtendsto_iff_le_rcomap (r : Rel Œ± Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :
    RTendsto r l‚ÇÅ l‚ÇÇ ‚Üî l‚ÇÅ ‚â§ l‚ÇÇ.rcomap r := by
  rw [rtendsto_def]
  simp_rw [‚Üê l‚ÇÇ.mem_sets]
  constructor
  ¬∑ simpa [Filter.le_def, rcomap, Rel.mem_image] using fun h s t tl‚ÇÇ => mem_of_superset (h t tl‚ÇÇ)
  ¬∑ simpa [Filter.le_def, rcomap, Rel.mem_image] using fun h t tl‚ÇÇ => h _ t tl‚ÇÇ Set.Subset.rfl
def rcomap' (r : Rel Œ± Œ≤) (f : Filter Œ≤) : Filter Œ± where
  sets := Rel.image (fun s t => r.preimage s ‚äÜ t) f.sets
  univ_sets := ‚ü®Set.univ, univ_mem, Set.subset_univ _‚ü©
  sets_of_superset := fun ‚ü®a', ha', ma'a‚ü© ab => ‚ü®a', ha', ma'a.trans ab‚ü©
  inter_sets := fun ‚ü®a', ha‚ÇÅ, ha‚ÇÇ‚ü© ‚ü®b', hb‚ÇÅ, hb‚ÇÇ‚ü© =>
    ‚ü®a' ‚à© b', inter_mem ha‚ÇÅ hb‚ÇÅ,
      (@Rel.preimage_inter _ _ r _ _).trans (Set.inter_subset_inter ha‚ÇÇ hb‚ÇÇ)‚ü©
@[simp]
theorem mem_rcomap' (r : Rel Œ± Œ≤) (l : Filter Œ≤) (s : Set Œ±) :
    s ‚àà l.rcomap' r ‚Üî ‚àÉ t ‚àà l, r.preimage t ‚äÜ s :=
  Iff.rfl
theorem rcomap'_sets (r : Rel Œ± Œ≤) (f : Filter Œ≤) :
    (rcomap' r f).sets = Rel.image (fun s t => r.preimage s ‚äÜ t) f.sets :=
  rfl
@[simp]
theorem rcomap'_rcomap' (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) (l : Filter Œ≥) :
    rcomap' r (rcomap' s l) = rcomap' (r.comp s) l :=
  Filter.ext fun t => by
    simp only [mem_rcomap', Rel.preimage_comp]
    constructor
    ¬∑ rintro ‚ü®u, ‚ü®v, vsets, hv‚ü©, h‚ü©
      exact ‚ü®v, vsets, (Rel.preimage_mono _ hv).trans h‚ü©
    rintro ‚ü®t, tsets, ht‚ü©
    exact ‚ü®s.preimage t, ‚ü®t, tsets, Set.Subset.rfl‚ü©, ht‚ü©
@[simp]
theorem rcomap'_compose (r : Rel Œ± Œ≤) (s : Rel Œ≤ Œ≥) : rcomap' r ‚àò rcomap' s = rcomap' (r.comp s) :=
  funext <| rcomap'_rcomap' _ _
def RTendsto' (r : Rel Œ± Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :=
  l‚ÇÅ ‚â§ l‚ÇÇ.rcomap' r
theorem rtendsto'_def (r : Rel Œ± Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :
    RTendsto' r l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, r.preimage s ‚àà l‚ÇÅ := by
  unfold RTendsto' rcomap'; constructor
  ¬∑ simpa [le_def, Rel.mem_image] using fun h s hs => h _ _ hs Set.Subset.rfl
  ¬∑ simpa [le_def, Rel.mem_image] using fun h s t ht => mem_of_superset (h t ht)
theorem tendsto_iff_rtendsto (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) (f : Œ± ‚Üí Œ≤) :
    Tendsto f l‚ÇÅ l‚ÇÇ ‚Üî RTendsto (Function.graph f) l‚ÇÅ l‚ÇÇ := by
  simp [tendsto_def, Function.graph, rtendsto_def, Rel.core, Set.preimage]
theorem tendsto_iff_rtendsto' (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) (f : Œ± ‚Üí Œ≤) :
    Tendsto f l‚ÇÅ l‚ÇÇ ‚Üî RTendsto' (Function.graph f) l‚ÇÅ l‚ÇÇ := by
  simp [tendsto_def, Function.graph, rtendsto'_def, Rel.preimage_def, Set.preimage]
def pmap (f : Œ± ‚Üí. Œ≤) (l : Filter Œ±) : Filter Œ≤ :=
  Filter.rmap f.graph' l
@[simp]
theorem mem_pmap (f : Œ± ‚Üí. Œ≤) (l : Filter Œ±) (s : Set Œ≤) : s ‚àà l.pmap f ‚Üî f.core s ‚àà l :=
  Iff.rfl
def PTendsto (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :=
  l‚ÇÅ.pmap f ‚â§ l‚ÇÇ
theorem ptendsto_def (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :
    PTendsto f l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, f.core s ‚àà l‚ÇÅ :=
  Iff.rfl
theorem ptendsto_iff_rtendsto (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) (f : Œ± ‚Üí. Œ≤) :
    PTendsto f l‚ÇÅ l‚ÇÇ ‚Üî RTendsto f.graph' l‚ÇÅ l‚ÇÇ :=
  Iff.rfl
theorem pmap_res (l : Filter Œ±) (s : Set Œ±) (f : Œ± ‚Üí Œ≤) :
    pmap (PFun.res f s) l = map f (l ‚äì ùìü s) := by
  ext t
  simp only [PFun.core_res, mem_pmap, mem_map, mem_inf_principal, imp_iff_not_or]
  rfl
theorem tendsto_iff_ptendsto (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) (s : Set Œ±) (f : Œ± ‚Üí Œ≤) :
    Tendsto f (l‚ÇÅ ‚äì ùìü s) l‚ÇÇ ‚Üî PTendsto (PFun.res f s) l‚ÇÅ l‚ÇÇ := by
  simp only [Tendsto, PTendsto, pmap_res]
theorem tendsto_iff_ptendsto_univ (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) (f : Œ± ‚Üí Œ≤) :
    Tendsto f l‚ÇÅ l‚ÇÇ ‚Üî PTendsto (PFun.res f Set.univ) l‚ÇÅ l‚ÇÇ := by
  rw [‚Üê tendsto_iff_ptendsto]
  simp [principal_univ]
def pcomap' (f : Œ± ‚Üí. Œ≤) (l : Filter Œ≤) : Filter Œ± :=
  Filter.rcomap' f.graph' l
def PTendsto' (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :=
  l‚ÇÅ ‚â§ l‚ÇÇ.rcomap' f.graph'
theorem ptendsto'_def (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : Filter Œ≤) :
    PTendsto' f l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, f.preimage s ‚àà l‚ÇÅ :=
  rtendsto'_def _ _ _
theorem ptendsto_of_ptendsto' {f : Œ± ‚Üí. Œ≤} {l‚ÇÅ : Filter Œ±} {l‚ÇÇ : Filter Œ≤} :
    PTendsto' f l‚ÇÅ l‚ÇÇ ‚Üí PTendsto f l‚ÇÅ l‚ÇÇ := by
  rw [ptendsto_def, ptendsto'_def]
  exact fun h s sl‚ÇÇ => mem_of_superset (h s sl‚ÇÇ) (PFun.preimage_subset_core _ _)
theorem ptendsto'_of_ptendsto {f : Œ± ‚Üí. Œ≤} {l‚ÇÅ : Filter Œ±} {l‚ÇÇ : Filter Œ≤} (h : f.Dom ‚àà l‚ÇÅ) :
    PTendsto f l‚ÇÅ l‚ÇÇ ‚Üí PTendsto' f l‚ÇÅ l‚ÇÇ := by
  rw [ptendsto_def, ptendsto'_def]
  intro h' s sl‚ÇÇ
  rw [PFun.preimage_eq]
  exact inter_mem (h' s sl‚ÇÇ) h
end Filter