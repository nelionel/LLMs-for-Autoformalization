import Mathlib.Analysis.InnerProductSpace.GramSchmidtOrtho
import Mathlib.LinearAlgebra.Matrix.PosDef
variable {ùïú : Type*} [RCLike ùïú]
variable {n : Type*} [LinearOrder n] [WellFoundedLT n] [LocallyFiniteOrderBot n]
section set_options
set_option quotPrecheck false
local notation "‚ü™" x ", " y "‚ü´‚Çë" =>
  @inner ùïú _ _ ((WithLp.equiv 2 _).symm x) ((WithLp.equiv _ _).symm y)
open Matrix
open scoped Matrix ComplexOrder
variable {S : Matrix n n ùïú} [Fintype n] (hS : S.PosDef)
noncomputable def LDL.lowerInv : Matrix n n ùïú :=
  @gramSchmidt ùïú (n ‚Üí ùïú) _ (_ : _) (InnerProductSpace.ofMatrix hS.transpose) n _ _ _
    (Pi.basisFun ùïú n)
theorem LDL.lowerInv_eq_gramSchmidtBasis :
    LDL.lowerInv hS =
      ((Pi.basisFun ùïú n).toMatrix
          (@gramSchmidtBasis ùïú (n ‚Üí ùïú) _ (_ : _) (InnerProductSpace.ofMatrix hS.transpose) n _ _ _
            (Pi.basisFun ùïú n)))·µÄ := by
  letI := NormedAddCommGroup.ofMatrix hS.transpose
  letI := InnerProductSpace.ofMatrix hS.transpose
  ext i j
  rw [LDL.lowerInv, Basis.coePiBasisFun.toMatrix_eq_transpose, coe_gramSchmidtBasis]
  rfl
noncomputable instance LDL.invertibleLowerInv : Invertible (LDL.lowerInv hS) := by
  rw [LDL.lowerInv_eq_gramSchmidtBasis]
  haveI :=
    Basis.invertibleToMatrix (Pi.basisFun ùïú n)
      (@gramSchmidtBasis ùïú (n ‚Üí ùïú) _ (_ : _) (InnerProductSpace.ofMatrix hS.transpose) n _ _ _
        (Pi.basisFun ùïú n))
  infer_instance
theorem LDL.lowerInv_orthogonal {i j : n} (h‚ÇÄ : i ‚â† j) :
    ‚ü™LDL.lowerInv hS i, S·µÄ *·µ• LDL.lowerInv hS j‚ü´‚Çë = 0 :=
  @gramSchmidt_orthogonal ùïú _ _ (_ : _) (InnerProductSpace.ofMatrix hS.transpose) _ _ _ _ _ _ _ h‚ÇÄ
noncomputable def LDL.diagEntries : n ‚Üí ùïú := fun i =>
  ‚ü™star (LDL.lowerInv hS i), S *·µ• star (LDL.lowerInv hS i)‚ü´‚Çë
noncomputable def LDL.diag : Matrix n n ùïú :=
  Matrix.diagonal (LDL.diagEntries hS)
theorem LDL.lowerInv_triangular {i j : n} (hij : i < j) : LDL.lowerInv hS i j = 0 := by
  rw [‚Üê
    @gramSchmidt_triangular ùïú (n ‚Üí ùïú) _ (_ : _) (InnerProductSpace.ofMatrix hS.transpose) n _ _ _
      i j hij (Pi.basisFun ùïú n),
    Pi.basisFun_repr, LDL.lowerInv]
theorem LDL.diag_eq_lowerInv_conj : LDL.diag hS = LDL.lowerInv hS * S * (LDL.lowerInv hS)·¥¥ := by
  ext i j
  by_cases hij : i = j
  ¬∑ simp only [diag, diagEntries, EuclideanSpace.inner_piLp_equiv_symm, star_star, hij,
    diagonal_apply_eq, Matrix.mul_assoc]
    rfl
  ¬∑ simp only [LDL.diag, hij, diagonal_apply_ne, Ne, not_false_iff, mul_mul_apply]
    rw [conjTranspose, transpose_map, transpose_transpose, dotProduct_mulVec,
      (LDL.lowerInv_orthogonal hS fun h : j = i => hij h.symm).symm, ‚Üê inner_conj_symm,
      mulVec_transpose, EuclideanSpace.inner_piLp_equiv_symm, ‚Üê RCLike.star_def, ‚Üê
      star_dotProduct_star, dotProduct_comm, star_star]
    rfl
noncomputable def LDL.lower :=
  (LDL.lowerInv hS)‚Åª¬π
theorem LDL.lower_conj_diag : LDL.lower hS * LDL.diag hS * (LDL.lower hS)·¥¥ = S := by
  rw [LDL.lower, conjTranspose_nonsing_inv, Matrix.mul_assoc,
    Matrix.inv_mul_eq_iff_eq_mul_of_invertible (LDL.lowerInv hS),
    Matrix.mul_inv_eq_iff_eq_mul_of_invertible]
  exact LDL.diag_eq_lowerInv_conj hS
end set_options