import Mathlib.MeasureTheory.Measure.ProbabilityMeasure
import Mathlib.MeasureTheory.Measure.Lebesgue.Basic
import Mathlib.MeasureTheory.Integral.Layercake
import Mathlib.MeasureTheory.Integral.BoundedContinuousFunction
noncomputable section
open MeasureTheory Set Filter BoundedContinuousFunction
open scoped Topology ENNReal NNReal BoundedContinuousFunction
namespace MeasureTheory
section LimsupClosedLEAndLELiminfOpen
variable {Œ© : Type*} [MeasurableSpace Œ©]
theorem le_measure_compl_liminf_of_limsup_measure_le {Œπ : Type*} {L : Filter Œπ} {Œº : Measure Œ©}
    {Œºs : Œπ ‚Üí Measure Œ©} [IsProbabilityMeasure Œº] [‚àÄ i, IsProbabilityMeasure (Œºs i)] {E : Set Œ©}
    (E_mble : MeasurableSet E) (h : (L.limsup fun i ‚Ü¶ Œºs i E) ‚â§ Œº E) :
    Œº E·∂ú ‚â§ L.liminf fun i ‚Ü¶ Œºs i E·∂ú := by
  rcases L.eq_or_neBot with rfl | hne
  ¬∑ simp only [liminf_bot, le_top]
  have meas_Ec : Œº E·∂ú = 1 - Œº E := by
    simpa only [measure_univ] using measure_compl E_mble (measure_lt_top Œº E).ne
  have meas_i_Ec : ‚àÄ i, Œºs i E·∂ú = 1 - Œºs i E := by
    intro i
    simpa only [measure_univ] using measure_compl E_mble (measure_lt_top (Œºs i) E).ne
  simp_rw [meas_Ec, meas_i_Ec]
  rw [show (L.liminf fun i : Œπ ‚Ü¶ 1 - Œºs i E) = L.liminf ((fun x ‚Ü¶ 1 - x) ‚àò fun i : Œπ ‚Ü¶ Œºs i E)
      from rfl]
  have key := antitone_const_tsub.map_limsup_of_continuousAt (F := L)
    (fun i ‚Ü¶ Œºs i E) (ENNReal.continuous_sub_left ENNReal.one_ne_top).continuousAt
  simpa [‚Üê key] using antitone_const_tsub h
theorem le_measure_liminf_of_limsup_measure_compl_le {Œπ : Type*} {L : Filter Œπ} {Œº : Measure Œ©}
    {Œºs : Œπ ‚Üí Measure Œ©} [IsProbabilityMeasure Œº] [‚àÄ i, IsProbabilityMeasure (Œºs i)] {E : Set Œ©}
    (E_mble : MeasurableSet E) (h : (L.limsup fun i ‚Ü¶ Œºs i E·∂ú) ‚â§ Œº E·∂ú) :
    Œº E ‚â§ L.liminf fun i ‚Ü¶ Œºs i E :=
  compl_compl E ‚ñ∏ le_measure_compl_liminf_of_limsup_measure_le (MeasurableSet.compl E_mble) h
theorem limsup_measure_compl_le_of_le_liminf_measure {Œπ : Type*} {L : Filter Œπ} {Œº : Measure Œ©}
    {Œºs : Œπ ‚Üí Measure Œ©} [IsProbabilityMeasure Œº] [‚àÄ i, IsProbabilityMeasure (Œºs i)] {E : Set Œ©}
    (E_mble : MeasurableSet E) (h : Œº E ‚â§ L.liminf fun i ‚Ü¶ Œºs i E) :
    (L.limsup fun i ‚Ü¶ Œºs i E·∂ú) ‚â§ Œº E·∂ú := by
  rcases L.eq_or_neBot with rfl | hne
  ¬∑ simp only [limsup_bot, bot_le]
  have meas_Ec : Œº E·∂ú = 1 - Œº E := by
    simpa only [measure_univ] using measure_compl E_mble (measure_lt_top Œº E).ne
  have meas_i_Ec : ‚àÄ i, Œºs i E·∂ú = 1 - Œºs i E := by
    intro i
    simpa only [measure_univ] using measure_compl E_mble (measure_lt_top (Œºs i) E).ne
  simp_rw [meas_Ec, meas_i_Ec]
  rw [show (L.limsup fun i : Œπ ‚Ü¶ 1 - Œºs i E) = L.limsup ((fun x ‚Ü¶ 1 - x) ‚àò fun i : Œπ ‚Ü¶ Œºs i E)
      from rfl]
  have key := antitone_const_tsub.map_liminf_of_continuousAt (F := L)
    (fun i ‚Ü¶ Œºs i E) (ENNReal.continuous_sub_left ENNReal.one_ne_top).continuousAt
  simpa [‚Üê key] using antitone_const_tsub h
theorem limsup_measure_le_of_le_liminf_measure_compl {Œπ : Type*} {L : Filter Œπ} {Œº : Measure Œ©}
    {Œºs : Œπ ‚Üí Measure Œ©} [IsProbabilityMeasure Œº] [‚àÄ i, IsProbabilityMeasure (Œºs i)] {E : Set Œ©}
    (E_mble : MeasurableSet E) (h : Œº E·∂ú ‚â§ L.liminf fun i ‚Ü¶ Œºs i E·∂ú) :
    (L.limsup fun i ‚Ü¶ Œºs i E) ‚â§ Œº E :=
  compl_compl E ‚ñ∏ limsup_measure_compl_le_of_le_liminf_measure (MeasurableSet.compl E_mble) h
variable [TopologicalSpace Œ©] [OpensMeasurableSpace Œ©]
theorem limsup_measure_closed_le_iff_liminf_measure_open_ge {Œπ : Type*} {L : Filter Œπ}
    {Œº : Measure Œ©} {Œºs : Œπ ‚Üí Measure Œ©} [IsProbabilityMeasure Œº]
    [‚àÄ i, IsProbabilityMeasure (Œºs i)] :
    (‚àÄ F, IsClosed F ‚Üí (L.limsup fun i ‚Ü¶ Œºs i F) ‚â§ Œº F) ‚Üî
      ‚àÄ G, IsOpen G ‚Üí Œº G ‚â§ L.liminf fun i ‚Ü¶ Œºs i G := by
  constructor
  ¬∑ intro h G G_open
    exact le_measure_liminf_of_limsup_measure_compl_le
      G_open.measurableSet (h G·∂ú (isClosed_compl_iff.mpr G_open))
  ¬∑ intro h F F_closed
    exact limsup_measure_le_of_le_liminf_measure_compl
      F_closed.measurableSet (h F·∂ú (isOpen_compl_iff.mpr F_closed))
end LimsupClosedLEAndLELiminfOpen 
section TendstoOfNullFrontier
variable {Œ© : Type*} [MeasurableSpace Œ©]
theorem tendsto_measure_of_le_liminf_measure_of_limsup_measure_le {Œπ : Type*} {L : Filter Œπ}
    {Œº : Measure Œ©} {Œºs : Œπ ‚Üí Measure Œ©} {E‚ÇÄ E E‚ÇÅ : Set Œ©} (E‚ÇÄ_subset : E‚ÇÄ ‚äÜ E) (subset_E‚ÇÅ : E ‚äÜ E‚ÇÅ)
    (nulldiff : Œº (E‚ÇÅ \ E‚ÇÄ) = 0) (h_E‚ÇÄ : Œº E‚ÇÄ ‚â§ L.liminf fun i ‚Ü¶ Œºs i E‚ÇÄ)
    (h_E‚ÇÅ : (L.limsup fun i ‚Ü¶ Œºs i E‚ÇÅ) ‚â§ Œº E‚ÇÅ) : L.Tendsto (fun i ‚Ü¶ Œºs i E) (ùìù (Œº E)) := by
  apply tendsto_of_le_liminf_of_limsup_le
  ¬∑ have E‚ÇÄ_ae_eq_E : E‚ÇÄ =·µê[Œº] E :=
      EventuallyLE.antisymm E‚ÇÄ_subset.eventuallyLE
        (subset_E‚ÇÅ.eventuallyLE.trans (ae_le_set.mpr nulldiff))
    calc
      Œº E = Œº E‚ÇÄ := measure_congr E‚ÇÄ_ae_eq_E.symm
      _ ‚â§ L.liminf fun i ‚Ü¶ Œºs i E‚ÇÄ := h_E‚ÇÄ
      _ ‚â§ L.liminf fun i ‚Ü¶ Œºs i E :=
        liminf_le_liminf (.of_forall fun _ ‚Ü¶ measure_mono E‚ÇÄ_subset)
  ¬∑ have E_ae_eq_E‚ÇÅ : E =·µê[Œº] E‚ÇÅ :=
      EventuallyLE.antisymm subset_E‚ÇÅ.eventuallyLE
        ((ae_le_set.mpr nulldiff).trans E‚ÇÄ_subset.eventuallyLE)
    calc
      (L.limsup fun i ‚Ü¶ Œºs i E) ‚â§ L.limsup fun i ‚Ü¶ Œºs i E‚ÇÅ :=
        limsup_le_limsup (.of_forall fun _ ‚Ü¶ measure_mono subset_E‚ÇÅ)
      _ ‚â§ Œº E‚ÇÅ := h_E‚ÇÅ
      _ = Œº E := measure_congr E_ae_eq_E‚ÇÅ.symm
  ¬∑ infer_param
  ¬∑ infer_param
variable [TopologicalSpace Œ©] [OpensMeasurableSpace Œ©]
theorem tendsto_measure_of_null_frontier {Œπ : Type*} {L : Filter Œπ} {Œº : Measure Œ©}
    {Œºs : Œπ ‚Üí Measure Œ©} [IsProbabilityMeasure Œº] [‚àÄ i, IsProbabilityMeasure (Œºs i)]
    (h_opens : ‚àÄ G, IsOpen G ‚Üí Œº G ‚â§ L.liminf fun i ‚Ü¶ Œºs i G) {E : Set Œ©}
    (E_nullbdry : Œº (frontier E) = 0) : L.Tendsto (fun i ‚Ü¶ Œºs i E) (ùìù (Œº E)) :=
  haveI h_closeds : ‚àÄ F, IsClosed F ‚Üí (L.limsup fun i ‚Ü¶ Œºs i F) ‚â§ Œº F :=
    limsup_measure_closed_le_iff_liminf_measure_open_ge.mpr h_opens
  tendsto_measure_of_le_liminf_measure_of_limsup_measure_le interior_subset subset_closure
    E_nullbdry (h_opens _ isOpen_interior) (h_closeds _ isClosed_closure)
end TendstoOfNullFrontier 
section ConvergenceImpliesLimsupClosedLE
theorem FiniteMeasure.limsup_measure_closed_le_of_tendsto {Œ© Œπ : Type*} {L : Filter Œπ}
    [MeasurableSpace Œ©] [TopologicalSpace Œ©] [HasOuterApproxClosed Œ©]
    [OpensMeasurableSpace Œ©] {Œº : FiniteMeasure Œ©}
    {Œºs : Œπ ‚Üí FiniteMeasure Œ©} (Œºs_lim : Tendsto Œºs L (ùìù Œº)) {F : Set Œ©} (F_closed : IsClosed F) :
    (L.limsup fun i ‚Ü¶ (Œºs i : Measure Œ©) F) ‚â§ (Œº : Measure Œ©) F := by
  rcases L.eq_or_neBot with rfl | hne
  ¬∑ simp only [limsup_bot, bot_le]
  apply ENNReal.le_of_forall_pos_le_add
  intro Œµ Œµ_pos _
  have Œµ_pos' := (ENNReal.half_pos (ENNReal.coe_ne_zero.mpr Œµ_pos.ne.symm)).ne.symm
  let fs := F_closed.apprSeq
  have key‚ÇÅ : Tendsto (fun n ‚Ü¶ ‚à´‚Åª  œâ, (fs n œâ : ‚Ñù‚â•0‚àû) ‚àÇŒº) atTop (ùìù ((Œº : Measure Œ©) F)) :=
    HasOuterApproxClosed.tendsto_lintegral_apprSeq F_closed (Œº : Measure Œ©)
  have room‚ÇÅ : (Œº : Measure Œ©) F < (Œº : Measure Œ©) F + Œµ / 2 :=
    ENNReal.lt_add_right (measure_lt_top (Œº : Measure Œ©) F).ne Œµ_pos'
  obtain ‚ü®M, hM‚ü© := eventually_atTop.mp <| key‚ÇÅ.eventually_lt_const room‚ÇÅ
  have key‚ÇÇ := FiniteMeasure.tendsto_iff_forall_lintegral_tendsto.mp Œºs_lim (fs M)
  have room‚ÇÇ :
    (lintegral (Œº : Measure Œ©) fun a ‚Ü¶ fs M a) <
      (lintegral (Œº : Measure Œ©) fun a ‚Ü¶ fs M a) + Œµ / 2 :=
    ENNReal.lt_add_right (ne_of_lt ((fs M).lintegral_lt_top_of_nnreal _)) Œµ_pos'
  have ev_near := key‚ÇÇ.eventually_le_const room‚ÇÇ
  have ev_near' := ev_near.mono
    (fun n ‚Ü¶ le_trans (HasOuterApproxClosed.measure_le_lintegral F_closed (Œºs n) M))
  apply (Filter.limsup_le_limsup ev_near').trans
  rw [limsup_const]
  apply le_trans (add_le_add (hM M rfl.le).le (le_refl (Œµ / 2 : ‚Ñù‚â•0‚àû)))
  simp only [add_assoc, ENNReal.add_halves, le_refl]
theorem ProbabilityMeasure.limsup_measure_closed_le_of_tendsto {Œ© Œπ : Type*} {L : Filter Œπ}
    [MeasurableSpace Œ©] [TopologicalSpace Œ©] [OpensMeasurableSpace Œ©] [HasOuterApproxClosed Œ©]
    {Œº : ProbabilityMeasure Œ©} {Œºs : Œπ ‚Üí ProbabilityMeasure Œ©} (Œºs_lim : Tendsto Œºs L (ùìù Œº))
    {F : Set Œ©} (F_closed : IsClosed F) :
    (L.limsup fun i ‚Ü¶ (Œºs i : Measure Œ©) F) ‚â§ (Œº : Measure Œ©) F := by
  apply FiniteMeasure.limsup_measure_closed_le_of_tendsto
    ((tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds L).mp Œºs_lim) F_closed
theorem ProbabilityMeasure.le_liminf_measure_open_of_tendsto {Œ© Œπ : Type*} {L : Filter Œπ}
    [MeasurableSpace Œ©] [PseudoEMetricSpace Œ©] [OpensMeasurableSpace Œ©] [HasOuterApproxClosed Œ©]
    {Œº : ProbabilityMeasure Œ©} {Œºs : Œπ ‚Üí ProbabilityMeasure Œ©} (Œºs_lim : Tendsto Œºs L (ùìù Œº))
    {G : Set Œ©} (G_open : IsOpen G) :
    (Œº : Measure Œ©) G ‚â§ L.liminf fun i ‚Ü¶ (Œºs i : Measure Œ©) G :=
  haveI h_closeds : ‚àÄ F, IsClosed F ‚Üí (L.limsup fun i ‚Ü¶ (Œºs i : Measure Œ©) F) ‚â§ (Œº : Measure Œ©) F :=
    fun _ F_closed ‚Ü¶ limsup_measure_closed_le_of_tendsto Œºs_lim F_closed
  le_measure_liminf_of_limsup_measure_compl_le G_open.measurableSet
    (h_closeds _ (isClosed_compl_iff.mpr G_open))
theorem ProbabilityMeasure.tendsto_measure_of_null_frontier_of_tendsto' {Œ© Œπ : Type*}
    {L : Filter Œπ} [MeasurableSpace Œ©] [PseudoEMetricSpace Œ©] [OpensMeasurableSpace Œ©]
    [HasOuterApproxClosed Œ©] {Œº : ProbabilityMeasure Œ©} {Œºs : Œπ ‚Üí ProbabilityMeasure Œ©}
    (Œºs_lim : Tendsto Œºs L (ùìù Œº)) {E : Set Œ©} (E_nullbdry : (Œº : Measure Œ©) (frontier E) = 0) :
    Tendsto (fun i ‚Ü¶ (Œºs i : Measure Œ©) E) L (ùìù ((Œº : Measure Œ©) E)) :=
  haveI h_opens : ‚àÄ G, IsOpen G ‚Üí (Œº : Measure Œ©) G ‚â§ L.liminf fun i ‚Ü¶ (Œºs i : Measure Œ©) G :=
    fun _ G_open ‚Ü¶ le_liminf_measure_open_of_tendsto Œºs_lim G_open
  tendsto_measure_of_null_frontier h_opens E_nullbdry
theorem ProbabilityMeasure.tendsto_measure_of_null_frontier_of_tendsto {Œ© Œπ : Type*} {L : Filter Œπ}
    [MeasurableSpace Œ©] [PseudoEMetricSpace Œ©] [OpensMeasurableSpace Œ©] [HasOuterApproxClosed Œ©]
    {Œº : ProbabilityMeasure Œ©} {Œºs : Œπ ‚Üí ProbabilityMeasure Œ©} (Œºs_lim : Tendsto Œºs L (ùìù Œº))
    {E : Set Œ©} (E_nullbdry : Œº (frontier E) = 0) : Tendsto (fun i ‚Ü¶ Œºs i E) L (ùìù (Œº E)) := by
  have key := tendsto_measure_of_null_frontier_of_tendsto' Œºs_lim (by simpa using E_nullbdry)
  exact (ENNReal.tendsto_toNNReal (measure_ne_top (‚ÜëŒº) E)).comp key
end ConvergenceImpliesLimsupClosedLE 
section LimitBorelImpliesLimsupClosedLE
open ENNReal
variable {Œ© : Type*} [PseudoEMetricSpace Œ©] [MeasurableSpace Œ©] [OpensMeasurableSpace Œ©]
theorem exists_null_frontier_thickening (Œº : Measure Œ©) [SFinite Œº] (s : Set Œ©) {a b : ‚Ñù}
    (hab : a < b) : ‚àÉ r ‚àà Ioo a b, Œº (frontier (Metric.thickening r s)) = 0 := by
  have mbles : ‚àÄ r : ‚Ñù, MeasurableSet (frontier (Metric.thickening r s)) :=
    fun r ‚Ü¶ isClosed_frontier.measurableSet
  have disjs := Metric.frontier_thickening_disjoint s
  have key := Measure.countable_meas_pos_of_disjoint_iUnion (Œº := Œº) mbles disjs
  have aux := measure_diff_null (s := Ioo a b) (Set.Countable.measure_zero key volume)
  have len_pos : 0 < ENNReal.ofReal (b - a) := by simp only [hab, ENNReal.ofReal_pos, sub_pos]
  rw [‚Üê Real.volume_Ioo, ‚Üê aux] at len_pos
  rcases nonempty_of_measure_ne_zero len_pos.ne.symm with ‚ü®r, ‚ü®r_in_Ioo, hr‚ü©‚ü©
  refine ‚ü®r, r_in_Ioo, ?_‚ü©
  simpa only [mem_setOf_eq, not_lt, le_zero_iff] using hr
theorem exists_null_frontiers_thickening (Œº : Measure Œ©) [SFinite Œº] (s : Set Œ©) :
    ‚àÉ rs : ‚Ñï ‚Üí ‚Ñù,
      Tendsto rs atTop (ùìù 0) ‚àß ‚àÄ n, 0 < rs n ‚àß Œº (frontier (Metric.thickening (rs n) s)) = 0 := by
  rcases exists_seq_strictAnti_tendsto (0 : ‚Ñù) with ‚ü®Rs, ‚ü®_, ‚ü®Rs_pos, Rs_lim‚ü©‚ü©‚ü©
  have obs := fun n : ‚Ñï => exists_null_frontier_thickening Œº s (Rs_pos n)
  refine ‚ü®fun n : ‚Ñï => (obs n).choose, ‚ü®?_, ?_‚ü©‚ü©
  ¬∑ exact tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds Rs_lim
      (fun n ‚Ü¶ (obs n).choose_spec.1.1.le) fun n ‚Ü¶ (obs n).choose_spec.1.2.le
  ¬∑ exact fun n ‚Ü¶ ‚ü®(obs n).choose_spec.1.1, (obs n).choose_spec.2‚ü©
lemma limsup_measure_closed_le_of_forall_tendsto_measure
    {Œ© Œπ : Type*} {L : Filter Œπ} [MeasurableSpace Œ©] [PseudoEMetricSpace Œ©] [OpensMeasurableSpace Œ©]
    {Œº : Measure Œ©} [IsFiniteMeasure Œº] {Œºs : Œπ ‚Üí Measure Œ©}
    (h : ‚àÄ {E : Set Œ©}, MeasurableSet E ‚Üí Œº (frontier E) = 0 ‚Üí
            Tendsto (fun i ‚Ü¶ Œºs i E) L (ùìù (Œº E)))
    (F : Set Œ©) (F_closed : IsClosed F) :
    L.limsup (fun i ‚Ü¶ Œºs i F) ‚â§ Œº F := by
  rcases L.eq_or_neBot with rfl | _
  ¬∑ simp only [limsup_bot, bot_eq_zero', zero_le]
  have ex := exists_null_frontiers_thickening Œº F
  let rs := Classical.choose ex
  have rs_lim : Tendsto rs atTop (ùìù 0) := (Classical.choose_spec ex).1
  have rs_pos : ‚àÄ n, 0 < rs n := fun n ‚Ü¶ ((Classical.choose_spec ex).2 n).1
  have rs_null : ‚àÄ n, Œº (frontier (Metric.thickening (rs n) F)) = 0 :=
    fun n ‚Ü¶ ((Classical.choose_spec ex).2 n).2
  have Fthicks_open : ‚àÄ n, IsOpen (Metric.thickening (rs n) F) :=
    fun n ‚Ü¶ Metric.isOpen_thickening
  have key := fun (n : ‚Ñï) ‚Ü¶ h (Fthicks_open n).measurableSet (rs_null n)
  apply ENNReal.le_of_forall_pos_le_add
  intros Œµ Œµ_pos ŒºF_finite
  have keyB := tendsto_measure_cthickening_of_isClosed (Œº := Œº) (s := F)
                ‚ü®1, ‚ü®by simp only [gt_iff_lt, zero_lt_one], measure_ne_top _ _‚ü©‚ü© F_closed
  have nhd : Iio (Œº F + Œµ) ‚àà ùìù (Œº F) :=
    Iio_mem_nhds <| ENNReal.lt_add_right ŒºF_finite.ne (ENNReal.coe_pos.mpr Œµ_pos).ne'
  specialize rs_lim (keyB nhd)
  simp only [mem_map, mem_atTop_sets, ge_iff_le, mem_preimage, mem_Iio] at rs_lim
  obtain ‚ü®m, hm‚ü© := rs_lim
  have aux : (fun i ‚Ü¶ (Œºs i F)) ‚â§·∂†[L] (fun i ‚Ü¶ Œºs i (Metric.thickening (rs m) F)) :=
    .of_forall <| fun i ‚Ü¶ measure_mono (Metric.self_subset_thickening (rs_pos m) F)
  refine (limsup_le_limsup aux).trans ?_
  rw [Tendsto.limsup_eq (key m)]
  apply (measure_mono (Metric.thickening_subset_cthickening (rs m) F)).trans (hm m rfl.le).le
lemma le_liminf_measure_open_of_forall_tendsto_measure
    {Œ© Œπ : Type*} {L : Filter Œπ}
    [MeasurableSpace Œ©] [PseudoEMetricSpace Œ©] [OpensMeasurableSpace Œ©]
    {Œº : Measure Œ©} [IsProbabilityMeasure Œº] {Œºs : Œπ ‚Üí Measure Œ©} [‚àÄ i, IsProbabilityMeasure (Œºs i)]
    (h : ‚àÄ {E}, MeasurableSet E ‚Üí Œº (frontier E) = 0 ‚Üí Tendsto (fun i ‚Ü¶ Œºs i E) L (ùìù (Œº E)))
    (G : Set Œ©) (G_open : IsOpen G) :
    Œº G ‚â§ L.liminf (fun i ‚Ü¶ Œºs i G) := by
  apply le_measure_liminf_of_limsup_measure_compl_le G_open.measurableSet
  exact limsup_measure_closed_le_of_forall_tendsto_measure h _ (isClosed_compl_iff.mpr G_open)
end LimitBorelImpliesLimsupClosedLE 
section le_liminf_open_implies_convergence
variable {Œ© : Type*} [MeasurableSpace Œ©] [TopologicalSpace Œ©] [OpensMeasurableSpace Œ©]
lemma lintegral_le_liminf_lintegral_of_forall_isOpen_measure_le_liminf_measure
    {Œº : Measure Œ©} {Œºs : ‚Ñï ‚Üí Measure Œ©} {f : Œ© ‚Üí ‚Ñù} (f_cont : Continuous f) (f_nn : 0 ‚â§ f)
    (h_opens : ‚àÄ G, IsOpen G ‚Üí Œº G ‚â§ atTop.liminf (fun i ‚Ü¶ Œºs i G)) :
    ‚à´‚Åª x, ENNReal.ofReal (f x) ‚àÇŒº ‚â§ atTop.liminf (fun i ‚Ü¶ ‚à´‚Åª x, ENNReal.ofReal (f x) ‚àÇ (Œºs i)) := by
  simp_rw [lintegral_eq_lintegral_meas_lt _ (Eventually.of_forall f_nn) f_cont.aemeasurable]
  calc  ‚à´‚Åª (t : ‚Ñù) in Set.Ioi 0, Œº {a | t < f a}
      ‚â§ ‚à´‚Åª (t : ‚Ñù) in Set.Ioi 0, atTop.liminf (fun i ‚Ü¶ (Œºs i) {a | t < f a}) := ?_ 
    _ ‚â§ atTop.liminf (fun i ‚Ü¶ ‚à´‚Åª (t : ‚Ñù) in Set.Ioi 0, (Œºs i) {a | t < f a}) := ?_ 
  ¬∑ 
    exact (lintegral_mono (fun t ‚Ü¶ h_opens _ (continuous_def.mp f_cont _ isOpen_Ioi))).trans
            (le_refl _)
  ¬∑ 
    exact lintegral_liminf_le (fun n ‚Ü¶ Antitone.measurable (fun s t hst ‚Ü¶
            measure_mono (fun œâ hœâ ‚Ü¶ lt_of_le_of_lt hst hœâ)))
lemma integral_le_liminf_integral_of_forall_isOpen_measure_le_liminf_measure
    {Œº : Measure Œ©} {Œºs : ‚Ñï ‚Üí Measure Œ©} [‚àÄ i, IsProbabilityMeasure (Œºs i)]
    {f : Œ© ‚Üí·µá ‚Ñù} (f_nn : 0 ‚â§ f)
    (h_opens : ‚àÄ G, IsOpen G ‚Üí Œº G ‚â§ atTop.liminf (fun i ‚Ü¶ Œºs i G)) :
    ‚à´ x, (f x) ‚àÇŒº ‚â§ atTop.liminf (fun i ‚Ü¶ ‚à´ x, (f x) ‚àÇ (Œºs i)) := by
  have same := lintegral_le_liminf_lintegral_of_forall_isOpen_measure_le_liminf_measure
                  f.continuous f_nn h_opens
  rw [@integral_eq_lintegral_of_nonneg_ae Œ© _ Œº f (Eventually.of_forall f_nn)
        f.continuous.measurable.aestronglyMeasurable]
  convert ENNReal.toReal_mono ?_ same
  ¬∑ simp only [fun i ‚Ü¶ @integral_eq_lintegral_of_nonneg_ae Œ© _ (Œºs i) f (Eventually.of_forall f_nn)
                        f.continuous.measurable.aestronglyMeasurable]
    let g := BoundedContinuousFunction.comp _ Real.lipschitzWith_toNNReal f
    have bound : ‚àÄ i, ‚à´‚Åª x, ENNReal.ofReal (f x) ‚àÇ(Œºs i) ‚â§ nndist 0 g := fun i ‚Ü¶ by
      simpa only [coe_nnreal_ennreal_nndist, measure_univ, mul_one, ge_iff_le] using
            BoundedContinuousFunction.lintegral_le_edist_mul (Œº := Œºs i) g
    apply ENNReal.liminf_toReal_eq ENNReal.coe_ne_top (Eventually.of_forall bound)
  ¬∑ apply ne_of_lt
    have obs := fun (i : ‚Ñï) ‚Ü¶ @BoundedContinuousFunction.lintegral_nnnorm_le Œ© _ _ (Œºs i) ‚Ñù _ f
    simp only [measure_univ, mul_one] at obs
    apply lt_of_le_of_lt _ (show (‚Äñf‚Äñ‚Çä : ‚Ñù‚â•0‚àû) < ‚àû from ENNReal.coe_lt_top)
    apply liminf_le_of_le
    ¬∑ refine ‚ü®0, .of_forall (by simp only [ge_iff_le, zero_le, forall_const])‚ü©
    ¬∑ intro x hx
      obtain ‚ü®i, hi‚ü© := hx.exists
      apply le_trans hi
      convert obs i with x
      have aux := ENNReal.ofReal_eq_coe_nnreal (f_nn x)
      simp only [ContinuousMap.toFun_eq_coe, BoundedContinuousFunction.coe_to_continuous_fun] at aux
      rw [aux]
      congr
      exact (Real.norm_of_nonneg (f_nn x)).symm
theorem tendsto_of_forall_isOpen_le_liminf {Œº : ProbabilityMeasure Œ©}
    {Œºs : ‚Ñï ‚Üí ProbabilityMeasure Œ©}
    (h_opens : ‚àÄ G, IsOpen G ‚Üí Œº G ‚â§ atTop.liminf (fun i ‚Ü¶ Œºs i G)) :
    atTop.Tendsto (fun i ‚Ü¶ Œºs i) (ùìù Œº) := by
  refine ProbabilityMeasure.tendsto_iff_forall_integral_tendsto.mpr ?_
  apply tendsto_integral_of_forall_integral_le_liminf_integral
  intro f f_nn
  apply integral_le_liminf_integral_of_forall_isOpen_measure_le_liminf_measure (f := f) f_nn
  intro G G_open
  specialize h_opens G G_open
  have aux : ENNReal.ofNNReal (liminf (fun i ‚Ü¶ Œºs i G) atTop) =
          liminf (ENNReal.ofNNReal ‚àò fun i ‚Ü¶ Œºs i G) atTop := by
    refine Monotone.map_liminf_of_continuousAt (F := atTop) ENNReal.coe_mono (Œºs ¬∑ G) ?_ ?_ ?_
    ¬∑ exact ENNReal.continuous_coe.continuousAt
    ¬∑ exact IsBoundedUnder.isCoboundedUnder_ge ‚ü®1, by simp‚ü©
    ¬∑ exact ‚ü®0, by simp‚ü©
  have obs := ENNReal.coe_mono h_opens
  simp only [ne_eq, ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure, aux] at obs
  convert obs
  simp only [Function.comp_apply, ne_eq, ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure]
end le_liminf_open_implies_convergence
end MeasureTheory 