import Mathlib.CategoryTheory.Limits.Shapes.Equalizers
namespace CategoryTheory
universe v v‚ÇÇ u u‚ÇÇ
variable {C : Type u} [Category.{v} C]
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
variable (G : C ‚•§ D)
variable {X Y : C} (f g : X ‚ü∂ Y)
structure IsSplitEqualizer {W : C} (Œπ : W ‚ü∂ X) where
  leftRetraction : X ‚ü∂ W
  rightRetraction : Y ‚ü∂ X
  condition : Œπ ‚â´ f = Œπ ‚â´ g := by aesop_cat
  Œπ_leftRetraction : Œπ ‚â´ leftRetraction = ùüô W := by aesop_cat
  bottom_rightRetraction : g ‚â´ rightRetraction = ùüô X := by aesop_cat
  top_rightRetraction : f ‚â´ rightRetraction = leftRetraction ‚â´ Œπ := by aesop_cat
instance {X : C} : Inhabited (IsSplitEqualizer (ùüô X) (ùüô X) (ùüô X)) where
  default := { leftRetraction := ùüô X, rightRetraction := ùüô X }
open IsSplitEqualizer
attribute [reassoc] condition
attribute [reassoc (attr := simp)] Œπ_leftRetraction bottom_rightRetraction top_rightRetraction
variable {f g}
@[simps]
def IsSplitEqualizer.map {W : C} {Œπ : W ‚ü∂ X} (q : IsSplitEqualizer f g Œπ) (F : C ‚•§ D) :
    IsSplitEqualizer (F.map f) (F.map g) (F.map Œπ) where
  leftRetraction := F.map q.leftRetraction
  rightRetraction := F.map q.rightRetraction
  condition := by rw [‚Üê F.map_comp, q.condition, F.map_comp]
  Œπ_leftRetraction := by rw [‚Üê F.map_comp, q.Œπ_leftRetraction, F.map_id]
  bottom_rightRetraction := by rw [‚Üê F.map_comp, q.bottom_rightRetraction, F.map_id]
  top_rightRetraction := by rw [‚Üê F.map_comp, q.top_rightRetraction, F.map_comp]
section
open Limits
@[simps! pt]
def IsSplitEqualizer.asFork {W : C} {h : W ‚ü∂ X} (t : IsSplitEqualizer f g h) :
    Fork f g := Fork.ofŒπ h t.condition
@[simp]
theorem IsSplitEqualizer.asFork_Œπ {W : C} {h : W ‚ü∂ X} (t : IsSplitEqualizer f g h) :
    t.asFork.Œπ = h := rfl
def IsSplitEqualizer.isEqualizer {W : C} {h : W ‚ü∂ X} (t : IsSplitEqualizer f g h) :
    IsLimit t.asFork :=
  Fork.IsLimit.mk' _ fun s =>
    ‚ü® s.Œπ ‚â´ t.leftRetraction,
      by simp [- top_rightRetraction, ‚Üê t.top_rightRetraction, s.condition_assoc],
      fun hm => by simp [‚Üê hm] ‚ü©
end
variable (f g)
class HasSplitEqualizer : Prop where
  splittable : ‚àÉ (W : C) (h : W ‚ü∂ X), Nonempty (IsSplitEqualizer f g h)
abbrev Functor.IsCosplitPair : Prop :=
  HasSplitEqualizer (G.map f) (G.map g)
noncomputable def HasSplitEqualizer.equalizerOfSplit [HasSplitEqualizer f g] : C :=
  (splittable (f := f) (g := g)).choose
noncomputable def HasSplitEqualizer.equalizerŒπ [HasSplitEqualizer f g] :
    HasSplitEqualizer.equalizerOfSplit f g ‚ü∂ X :=
  (splittable (f := f) (g := g)).choose_spec.choose
noncomputable def HasSplitEqualizer.isSplitEqualizer [HasSplitEqualizer f g] :
    IsSplitEqualizer f g (HasSplitEqualizer.equalizerŒπ f g) :=
  Classical.choice (splittable (f := f) (g := g)).choose_spec.choose_spec
instance map_is_cosplit_pair [HasSplitEqualizer f g] : HasSplitEqualizer (G.map f) (G.map g) where
  splittable :=
    ‚ü®_, _, ‚ü®IsSplitEqualizer.map (HasSplitEqualizer.isSplitEqualizer f g) _‚ü©‚ü©
namespace Limits
instance (priority := 1) hasEqualizer_of_hasSplitEqualizer [HasSplitEqualizer f g] :
    HasEqualizer f g :=
  HasLimit.mk ‚ü®_, (HasSplitEqualizer.isSplitEqualizer f g).isEqualizer‚ü©
end Limits
end CategoryTheory