import Mathlib.CategoryTheory.Adjunction.Basic
import Mathlib.CategoryTheory.Category.Preorder
import Mathlib.CategoryTheory.IsomorphismClasses
import Mathlib.CategoryTheory.Thin
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
namespace CategoryTheory
open Category
variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C]
variable (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]
variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E]
def Skeletal : Prop :=
  ‚àÄ ‚¶ÉX Y : C‚¶Ñ, IsIsomorphic X Y ‚Üí X = Y
structure IsSkeletonOf (F : D ‚•§ C) : Prop where
  skel : Skeletal D
  eqv : F.IsEquivalence := by infer_instance
attribute [local instance] isIsomorphicSetoid
variable {C D}
theorem Functor.eq_of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ C} [Quiver.IsThin C] (hC : Skeletal C) (hF : F‚ÇÅ ‚âÖ F‚ÇÇ) :
    F‚ÇÅ = F‚ÇÇ :=
  Functor.ext (fun X => hC ‚ü®hF.app X‚ü©) fun _ _ _ => Subsingleton.elim _ _
theorem functor_skeletal [Quiver.IsThin C] (hC : Skeletal C) : Skeletal (D ‚•§ C) := fun _ _ h =>
  h.elim (Functor.eq_of_iso hC)
variable (C D)
def Skeleton : Type u‚ÇÅ := InducedCategory (C := Quotient (isIsomorphicSetoid C)) C Quotient.out
instance [Inhabited C] : Inhabited (Skeleton C) :=
  ‚ü®‚ü¶default‚üß‚ü©
noncomputable instance : Category (Skeleton C) := by
  apply InducedCategory.category
noncomputable instance {Œ±} [CoeSort C Œ±] : CoeSort (Skeleton C) Œ± :=
  inferInstanceAs (CoeSort (InducedCategory _ _) _)
@[simps!]
noncomputable def fromSkeleton : Skeleton C ‚•§ C :=
  inducedFunctor _
noncomputable instance : (fromSkeleton C).Full := by
  apply InducedCategory.full
noncomputable instance : (fromSkeleton C).Faithful := by
  apply InducedCategory.faithful
instance : (fromSkeleton C).EssSurj where mem_essImage X := ‚ü®Quotient.mk' X, Quotient.mk_out X‚ü©
noncomputable instance fromSkeleton.isEquivalence : (fromSkeleton C).IsEquivalence where
variable {C}
abbrev toSkeleton (X : C) : Skeleton C := ‚ü¶X‚üß
noncomputable def preCounitIso (X : C) : (fromSkeleton C).obj (toSkeleton X) ‚âÖ X :=
  Nonempty.some (Quotient.mk_out X)
variable (C)
@[simps] noncomputable def toSkeletonFunctor : C ‚•§ Skeleton C where
  obj := toSkeleton
  map {X Y} f := by apply (preCounitIso X).hom ‚â´ f ‚â´ (preCounitIso Y).inv
  map_id _ := by aesop
  map_comp _ _ := by change _ = CategoryStruct.comp (obj := C) _ _; simp
@[simps] noncomputable def skeletonEquivalence : Skeleton C ‚âå C where
  functor := fromSkeleton C
  inverse := toSkeletonFunctor C
  unitIso := NatIso.ofComponents
    (fun X ‚Ü¶ InducedCategory.isoMk (Nonempty.some <| Quotient.mk_out X.out).symm)
    fun _ ‚Ü¶ .symm <| Iso.inv_hom_id_assoc _ _
  counitIso := NatIso.ofComponents preCounitIso
  functor_unitIso_comp _ := Iso.inv_hom_id _
theorem skeleton_skeletal : Skeletal (Skeleton C) := by
  rintro X Y ‚ü®h‚ü©
  have : X.out ‚âà Y.out := ‚ü®(fromSkeleton C).mapIso h‚ü©
  simpa using Quotient.sound this
lemma skeleton_isSkeleton : IsSkeletonOf C (Skeleton C) (fromSkeleton C) where
  skel := skeleton_skeletal C
  eqv := fromSkeleton.isEquivalence C
section
variable {C D}
noncomputable def Equivalence.skeletonEquiv (e : C ‚âå D) : Skeleton C ‚âÉ Skeleton D :=
  let f := ((skeletonEquivalence C).trans e).trans (skeletonEquivalence D).symm
  { toFun := f.functor.obj
    invFun := f.inverse.obj
    left_inv := fun X => skeleton_skeletal C ‚ü®(f.unitIso.app X).symm‚ü©
    right_inv := fun Y => skeleton_skeletal D ‚ü®f.counitIso.app Y‚ü© }
end
def ThinSkeleton : Type u‚ÇÅ :=
  Quotient (isIsomorphicSetoid C)
instance inhabitedThinSkeleton [Inhabited C] : Inhabited (ThinSkeleton C) :=
  ‚ü®@Quotient.mk' C (isIsomorphicSetoid C) default‚ü©
instance ThinSkeleton.preorder : Preorder (ThinSkeleton C) where
  le :=
    @Quotient.lift‚ÇÇ C C _ (isIsomorphicSetoid C) (isIsomorphicSetoid C)
      (fun X Y => Nonempty (X ‚ü∂ Y))
        (by
          rintro _ _ _ _ ‚ü®i‚ÇÅ‚ü© ‚ü®i‚ÇÇ‚ü©
          exact
            propext
              ‚ü®Nonempty.map fun f => i‚ÇÅ.inv ‚â´ f ‚â´ i‚ÇÇ.hom,
                Nonempty.map fun f => i‚ÇÅ.hom ‚â´ f ‚â´ i‚ÇÇ.inv‚ü©)
  le_refl := by
    refine Quotient.ind fun a => ?_
    exact ‚ü®ùüô _‚ü©
  le_trans a b c := Quotient.inductionOn‚ÇÉ a b c fun _ _ _ => Nonempty.map2 (¬∑ ‚â´ ¬∑)
@[simps]
def toThinSkeleton : C ‚•§ ThinSkeleton C where
  obj := @Quotient.mk' C _
  map f := homOfLE (Nonempty.intro f)
namespace ThinSkeleton
instance thin : Quiver.IsThin (ThinSkeleton C) := fun _ _ =>
  ‚ü®by
    rintro ‚ü®‚ü®f‚ÇÅ‚ü©‚ü© ‚ü®‚ü®_‚ü©‚ü©
    rfl‚ü©
variable {C} {D}
@[simps]
def map (F : C ‚•§ D) : ThinSkeleton C ‚•§ ThinSkeleton D where
  obj := Quotient.map F.obj fun _ _ ‚ü®hX‚ü© => ‚ü®F.mapIso hX‚ü©
  map {X} {Y} := Quotient.recOnSubsingleton‚ÇÇ X Y fun _ _ k => homOfLE (k.le.elim fun t => ‚ü®F.map t‚ü©)
theorem comp_toThinSkeleton (F : C ‚•§ D) : F ‚ãô toThinSkeleton D = toThinSkeleton C ‚ãô map F :=
  rfl
def mapNatTrans {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (k : F‚ÇÅ ‚ü∂ F‚ÇÇ) : map F‚ÇÅ ‚ü∂ map F‚ÇÇ where
  app X := Quotient.recOnSubsingleton X fun x => ‚ü®‚ü®‚ü®k.app x‚ü©‚ü©‚ü©
def map‚ÇÇObjMap (F : C ‚•§ D ‚•§ E) : ThinSkeleton C ‚Üí ThinSkeleton D ‚Üí ThinSkeleton E :=
  fun x y =>
    @Quotient.map‚ÇÇ C D (isIsomorphicSetoid C) (isIsomorphicSetoid D) E (isIsomorphicSetoid E)
      (fun X Y => (F.obj X).obj Y)
          (fun X‚ÇÅ _ ‚ü®hX‚ü© _ Y‚ÇÇ ‚ü®hY‚ü© => ‚ü®(F.obj X‚ÇÅ).mapIso hY ‚â™‚â´ (F.mapIso hX).app Y‚ÇÇ‚ü©) x y
def map‚ÇÇFunctor (F : C ‚•§ D ‚•§ E) : ThinSkeleton C ‚Üí ThinSkeleton D ‚•§ ThinSkeleton E :=
  fun x =>
    { obj := fun y => map‚ÇÇObjMap F x y
      map := fun {y‚ÇÅ} {y‚ÇÇ} => @Quotient.recOnSubsingleton C (isIsomorphicSetoid C)
        (fun x => (y‚ÇÅ ‚ü∂ y‚ÇÇ) ‚Üí (map‚ÇÇObjMap F x y‚ÇÅ ‚ü∂ map‚ÇÇObjMap F x y‚ÇÇ)) _ x fun X
          => Quotient.recOnSubsingleton‚ÇÇ y‚ÇÅ y‚ÇÇ fun _ _ hY =>
            homOfLE (hY.le.elim fun g => ‚ü®(F.obj X).map g‚ü©) }
def map‚ÇÇNatTrans (F : C ‚•§ D ‚•§ E) : {x‚ÇÅ x‚ÇÇ : ThinSkeleton C} ‚Üí (x‚ÇÅ ‚ü∂ x‚ÇÇ) ‚Üí
    (map‚ÇÇFunctor F x‚ÇÅ ‚ü∂ map‚ÇÇFunctor F x‚ÇÇ) := fun {x‚ÇÅ} {x‚ÇÇ} =>
  @Quotient.recOnSubsingleton‚ÇÇ C C (isIsomorphicSetoid C) (isIsomorphicSetoid C)
    (fun x x' : ThinSkeleton C => (x ‚ü∂ x') ‚Üí (map‚ÇÇFunctor F x ‚ü∂ map‚ÇÇFunctor F x')) _ x‚ÇÅ x‚ÇÇ
    (fun X‚ÇÅ X‚ÇÇ f => { app := fun y =>
      Quotient.recOnSubsingleton y fun Y => homOfLE (f.le.elim fun f' => ‚ü®(F.map f').app Y‚ü©) })
@[simps]
def map‚ÇÇ (F : C ‚•§ D ‚•§ E) : ThinSkeleton C ‚•§ ThinSkeleton D ‚•§ ThinSkeleton E where
  obj := map‚ÇÇFunctor F
  map := map‚ÇÇNatTrans F
variable (C)
section
variable [Quiver.IsThin C]
instance toThinSkeleton_faithful : (toThinSkeleton C).Faithful where
@[simps]
noncomputable def fromThinSkeleton : ThinSkeleton C ‚•§ C where
  obj := Quotient.out
  map {x} {y} :=
    Quotient.recOnSubsingleton‚ÇÇ x y fun X Y f =>
      (Nonempty.some (Quotient.mk_out X)).hom ‚â´ f.le.some ‚â´ (Nonempty.some (Quotient.mk_out Y)).inv
noncomputable def equivalence : ThinSkeleton C ‚âå C where
  functor := fromThinSkeleton C
  inverse := toThinSkeleton C
  counitIso := NatIso.ofComponents fun X => Nonempty.some (Quotient.mk_out X)
  unitIso := NatIso.ofComponents fun x => Quotient.recOnSubsingleton x fun X =>
    eqToIso (Quotient.sound ‚ü®(Nonempty.some (Quotient.mk_out X)).symm‚ü©)
noncomputable instance fromThinSkeleton_isEquivalence : (fromThinSkeleton C).IsEquivalence :=
  (equivalence C).isEquivalence_functor
variable {C}
theorem equiv_of_both_ways {X Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X) : X ‚âà Y :=
  ‚ü®iso_of_both_ways f g‚ü©
instance thinSkeletonPartialOrder : PartialOrder (ThinSkeleton C) :=
  { CategoryTheory.ThinSkeleton.preorder C with
    le_antisymm :=
      Quotient.ind‚ÇÇ
        (by
          rintro _ _ ‚ü®f‚ü© ‚ü®g‚ü©
          apply Quotient.sound (equiv_of_both_ways f g)) }
theorem skeletal : Skeletal (ThinSkeleton C) := fun X Y =>
  Quotient.inductionOn‚ÇÇ X Y fun _ _ h => h.elim fun i => i.1.le.antisymm i.2.le
theorem map_comp_eq (F : E ‚•§ D) (G : D ‚•§ C) : map (F ‚ãô G) = map F ‚ãô map G :=
  Functor.eq_of_iso skeletal <|
    NatIso.ofComponents fun X => Quotient.recOnSubsingleton X fun _ => Iso.refl _
theorem map_id_eq : map (ùü≠ C) = ùü≠ (ThinSkeleton C) :=
  Functor.eq_of_iso skeletal <|
    NatIso.ofComponents fun X => Quotient.recOnSubsingleton X fun _ => Iso.refl _
theorem map_iso_eq {F‚ÇÅ F‚ÇÇ : D ‚•§ C} (h : F‚ÇÅ ‚âÖ F‚ÇÇ) : map F‚ÇÅ = map F‚ÇÇ :=
  Functor.eq_of_iso skeletal
    { hom := mapNatTrans h.hom
      inv := mapNatTrans h.inv }
lemma thinSkeleton_isSkeleton : IsSkeletonOf C (ThinSkeleton C) (fromThinSkeleton C) where
  skel := skeletal
instance isSkeletonOfInhabited :
    Inhabited (IsSkeletonOf C (ThinSkeleton C) (fromThinSkeleton C)) :=
  ‚ü®thinSkeleton_isSkeleton‚ü©
end
variable {C}
def lowerAdjunction (R : D ‚•§ C) (L : C ‚•§ D) (h : L ‚ä£ R) :
    ThinSkeleton.map L ‚ä£ ThinSkeleton.map R where
  unit :=
    { app := fun X => by
        letI := isIsomorphicSetoid C
        exact Quotient.recOnSubsingleton X fun x => homOfLE ‚ü®h.unit.app x‚ü© }
  counit :=
    { app := fun X => by
        letI := isIsomorphicSetoid D
        exact Quotient.recOnSubsingleton X fun x => homOfLE ‚ü®h.counit.app x‚ü© }
end ThinSkeleton
open ThinSkeleton
section
variable {C} {Œ± : Type*} [PartialOrder Œ±]
noncomputable def Equivalence.thinSkeletonOrderIso [Quiver.IsThin C] (e : C ‚âå Œ±) :
    ThinSkeleton C ‚âÉo Œ± :=
  ((ThinSkeleton.equivalence C).trans e).toOrderIso
end
end CategoryTheory