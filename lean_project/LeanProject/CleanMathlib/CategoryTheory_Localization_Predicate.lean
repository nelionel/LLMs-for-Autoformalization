import Mathlib.CategoryTheory.Localization.Construction
noncomputable section
namespace CategoryTheory
open Category
variable {C D : Type*} [Category C] [Category D] (L : C ‚•§ D) (W : MorphismProperty C) (E : Type*)
  [Category E]
namespace Functor
class IsLocalization : Prop where
  inverts : W.IsInvertedBy L
  isEquivalence : IsEquivalence (Localization.Construction.lift L inverts)
instance q_isLocalization : W.Q.IsLocalization W where
  inverts := W.Q_inverts
  isEquivalence := by
    suffices Localization.Construction.lift W.Q W.Q_inverts = ùü≠ _ by
      rw [this]
      infer_instance
    apply Localization.Construction.uniq
    simp only [Localization.Construction.fac]
    rfl
end Functor
namespace Localization
structure StrictUniversalPropertyFixedTarget where
  inverts : W.IsInvertedBy L
  lift : ‚àÄ (F : C ‚•§ E) (_ : W.IsInvertedBy F), D ‚•§ E
  fac : ‚àÄ (F : C ‚•§ E) (hF : W.IsInvertedBy F), L ‚ãô lift F hF = F
  uniq : ‚àÄ (F‚ÇÅ F‚ÇÇ : D ‚•§ E) (_ : L ‚ãô F‚ÇÅ = L ‚ãô F‚ÇÇ), F‚ÇÅ = F‚ÇÇ
@[simps]
def strictUniversalPropertyFixedTargetQ : StrictUniversalPropertyFixedTarget W.Q W E where
  inverts := W.Q_inverts
  lift := Construction.lift
  fac := Construction.fac
  uniq := Construction.uniq
instance : Inhabited (StrictUniversalPropertyFixedTarget W.Q W E) :=
  ‚ü®strictUniversalPropertyFixedTargetQ _ _‚ü©
@[simps]
def strictUniversalPropertyFixedTargetId (hW : W ‚â§ MorphismProperty.isomorphisms C) :
    StrictUniversalPropertyFixedTarget (ùü≠ C) W E where
  inverts _ _ f hf := hW f hf
  lift F _ := F
  fac F hF := by
    cases F
    rfl
  uniq F‚ÇÅ F‚ÇÇ eq := by
    cases F‚ÇÅ
    cases F‚ÇÇ
    exact eq
end Localization
namespace Functor
theorem IsLocalization.mk' (h‚ÇÅ : Localization.StrictUniversalPropertyFixedTarget L W D)
    (h‚ÇÇ : Localization.StrictUniversalPropertyFixedTarget L W W.Localization) :
    IsLocalization L W :=
  { inverts := h‚ÇÅ.inverts
    isEquivalence := IsEquivalence.mk' (h‚ÇÇ.lift W.Q W.Q_inverts)
      (eqToIso (Localization.Construction.uniq _ _ (by
        simp only [‚Üê Functor.assoc, Localization.Construction.fac, h‚ÇÇ.fac, Functor.comp_id])))
      (eqToIso (h‚ÇÅ.uniq _ _ (by
        simp only [‚Üê Functor.assoc, h‚ÇÇ.fac, Localization.Construction.fac, Functor.comp_id]))) }
theorem IsLocalization.for_id (hW : W ‚â§ MorphismProperty.isomorphisms C) : (ùü≠ C).IsLocalization W :=
  IsLocalization.mk' _ _ (Localization.strictUniversalPropertyFixedTargetId W _ hW)
    (Localization.strictUniversalPropertyFixedTargetId W _ hW)
end Functor
namespace Localization
variable [L.IsLocalization W]
theorem inverts : W.IsInvertedBy L :=
  (inferInstance : L.IsLocalization W).inverts
@[simps! hom]
def isoOfHom {X Y : C} (f : X ‚ü∂ Y) (hf : W f) : L.obj X ‚âÖ L.obj Y :=
  haveI : IsIso (L.map f) := inverts L W f hf
  asIso (L.map f)
@[reassoc (attr := simp)]
lemma isoOfHom_hom_inv_id {X Y : C} (f : X ‚ü∂ Y) (hf : W f) :
    L.map f ‚â´ (isoOfHom L W f hf).inv = ùüô _ :=
  (isoOfHom L W f hf).hom_inv_id
@[reassoc (attr := simp)]
lemma isoOfHom_inv_hom_id {X Y : C} (f : X ‚ü∂ Y) (hf : W f) :
    (isoOfHom L W f hf).inv ‚â´ L.map f = ùüô _ :=
  (isoOfHom L W f hf).inv_hom_id
@[simp]
lemma isoOfHom_id_inv (X : C) (hX : W (ùüô X)) :
    (isoOfHom L W (ùüô X) hX).inv = ùüô _ := by
  rw [‚Üê cancel_mono (isoOfHom L W (ùüô X) hX).hom, Iso.inv_hom_id, id_comp,
    isoOfHom_hom, Functor.map_id]
variable {W}
lemma Construction.wIso_eq_isoOfHom {X Y : C} (f : X ‚ü∂ Y) (hf : W f) :
    Construction.wIso f hf = isoOfHom W.Q W f hf := by ext; rfl
lemma Construction.wInv_eq_isoOfHom_inv {X Y : C} (f : X ‚ü∂ Y) (hf : W f) :
    Construction.wInv f hf = (isoOfHom W.Q W f hf).inv :=
  congr_arg Iso.inv (wIso_eq_isoOfHom f hf)
instance : (Localization.Construction.lift L (inverts L W)).IsEquivalence :=
  (inferInstance : L.IsLocalization W).isEquivalence
variable (W)
def equivalenceFromModel : W.Localization ‚âå D :=
  (Localization.Construction.lift L (inverts L W)).asEquivalence
def qCompEquivalenceFromModelFunctorIso : W.Q ‚ãô (equivalenceFromModel L W).functor ‚âÖ L :=
  eqToIso (Construction.fac _ _)
def compEquivalenceFromModelInverseIso : L ‚ãô (equivalenceFromModel L W).inverse ‚âÖ W.Q :=
  calc
    L ‚ãô (equivalenceFromModel L W).inverse ‚âÖ _ :=
      isoWhiskerRight (qCompEquivalenceFromModelFunctorIso L W).symm _
    _ ‚âÖ W.Q ‚ãô (equivalenceFromModel L W).functor ‚ãô (equivalenceFromModel L W).inverse :=
      (Functor.associator _ _ _)
    _ ‚âÖ W.Q ‚ãô ùü≠ _ := isoWhiskerLeft _ (equivalenceFromModel L W).unitIso.symm
    _ ‚âÖ W.Q := Functor.rightUnitor _
theorem essSurj (W) [L.IsLocalization W] : L.EssSurj :=
  ‚ü®fun X =>
    ‚ü®(Construction.objEquiv W).invFun ((equivalenceFromModel L W).inverse.obj X),
      Nonempty.intro
        ((qCompEquivalenceFromModelFunctorIso L W).symm.app _ ‚â™‚â´
          (equivalenceFromModel L W).counitIso.app X)‚ü©‚ü©
def whiskeringLeftFunctor : (D ‚•§ E) ‚•§ W.FunctorsInverting E :=
  FullSubcategory.lift _ ((whiskeringLeft _ _ E).obj L)
    (MorphismProperty.IsInvertedBy.of_comp W L (inverts L W))
instance : (whiskeringLeftFunctor L W E).IsEquivalence := by
  let iso : (whiskeringLeft (MorphismProperty.Localization W) D E).obj
    (equivalenceFromModel L W).functor ‚ãô
      (Construction.whiskeringLeftEquivalence W E).functor ‚âÖ whiskeringLeftFunctor L W E :=
    NatIso.ofComponents (fun F => eqToIso (by
      ext
      change (W.Q ‚ãô Localization.Construction.lift L (inverts L W)) ‚ãô F = L ‚ãô F
      rw [Construction.fac])) (fun œÑ => by
        ext
        dsimp [Construction.whiskeringLeftEquivalence, equivalenceFromModel, whiskerLeft]
        erw [NatTrans.comp_app, NatTrans.comp_app, eqToHom_app, eqToHom_app, eqToHom_refl,
          eqToHom_refl, comp_id, id_comp]
        ¬∑ rfl
        all_goals
          change (W.Q ‚ãô Localization.Construction.lift L (inverts L W)) ‚ãô _ = L ‚ãô _
          rw [Construction.fac])
  exact Functor.isEquivalence_of_iso iso
def functorEquivalence : D ‚•§ E ‚âå W.FunctorsInverting E :=
  (whiskeringLeftFunctor L W E).asEquivalence
@[nolint unusedArguments]
def whiskeringLeftFunctor' [L.IsLocalization W] (E : Type*) [Category E] :
    (D ‚•§ E) ‚•§ C ‚•§ E :=
  (whiskeringLeft C D E).obj L
theorem whiskeringLeftFunctor'_eq :
    whiskeringLeftFunctor' L W E = Localization.whiskeringLeftFunctor L W E ‚ãô inducedFunctor _ :=
  rfl
variable {E} in
@[simp]
theorem whiskeringLeftFunctor'_obj (F : D ‚•§ E) : (whiskeringLeftFunctor' L W E).obj F = L ‚ãô F :=
  rfl
instance : (whiskeringLeftFunctor' L W E).Full := by
  rw [whiskeringLeftFunctor'_eq]
  apply @Functor.Full.comp _ _ _ _ _ _ _ _ ?_ ?_
  ¬∑ infer_instance
  apply InducedCategory.full 
instance : (whiskeringLeftFunctor' L W E).Faithful := by
  rw [whiskeringLeftFunctor'_eq]
  apply @Functor.Faithful.comp _ _ _ _ _ _ _ _ ?_ ?_
  ¬∑ infer_instance
  apply InducedCategory.faithful 
lemma full_whiskeringLeft (L : C ‚•§ D) (W) [L.IsLocalization W] (E : Type*) [Category E] :
    ((whiskeringLeft C D E).obj L).Full :=
  inferInstanceAs (whiskeringLeftFunctor' L W E).Full
lemma faithful_whiskeringLeft (L : C ‚•§ D) (W) [L.IsLocalization W] (E : Type*) [Category E] :
    ((whiskeringLeft C D E).obj L).Faithful :=
  inferInstanceAs (whiskeringLeftFunctor' L W E).Faithful
variable {E}
theorem natTrans_ext (L : C ‚•§ D) (W) [L.IsLocalization W] {F‚ÇÅ F‚ÇÇ : D ‚•§ E} (œÑ œÑ' : F‚ÇÅ ‚ü∂ F‚ÇÇ)
    (h : ‚àÄ X : C, œÑ.app (L.obj X) = œÑ'.app (L.obj X)) : œÑ = œÑ' := by
  haveI := essSurj L W
  ext Y
  rw [‚Üê cancel_epi (F‚ÇÅ.map (L.objObjPreimageIso Y).hom), œÑ.naturality, œÑ'.naturality, h]
class Lifting (W : MorphismProperty C) (F : C ‚•§ E) (F' : D ‚•§ E) where
  iso' : L ‚ãô F' ‚âÖ F
def Lifting.iso (F : C ‚•§ E) (F' : D ‚•§ E) [Lifting L W F F'] :
    L ‚ãô F' ‚âÖ F :=
  Lifting.iso' W
variable {W}
def lift (F : C ‚•§ E) (hF : W.IsInvertedBy F) (L : C ‚•§ D) [L.IsLocalization W] : D ‚•§ E :=
  (functorEquivalence L W E).inverse.obj ‚ü®F, hF‚ü©
instance liftingLift (F : C ‚•§ E) (hF : W.IsInvertedBy F) (L : C ‚•§ D) [L.IsLocalization W] :
    Lifting L W F (lift F hF L) :=
  ‚ü®(inducedFunctor _).mapIso ((functorEquivalence L W E).counitIso.app ‚ü®F, hF‚ü©)‚ü©
def fac (F : C ‚•§ E) (hF : W.IsInvertedBy F) (L : C ‚•§ D) [L.IsLocalization W] :
    L ‚ãô lift F hF L ‚âÖ F :=
  Lifting.iso L W F _
instance liftingConstructionLift (F : C ‚•§ D) (hF : W.IsInvertedBy F) :
    Lifting W.Q W F (Construction.lift F hF) :=
  ‚ü®eqToIso (Construction.fac F hF)‚ü©
variable (W)
def liftNatTrans (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E) [Lifting L W F‚ÇÅ F‚ÇÅ'] [Lifting L W F‚ÇÇ F‚ÇÇ']
    (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) : F‚ÇÅ' ‚ü∂ F‚ÇÇ' :=
  (whiskeringLeftFunctor' L W E).preimage
    ((Lifting.iso L W F‚ÇÅ F‚ÇÅ').hom ‚â´ œÑ ‚â´ (Lifting.iso L W F‚ÇÇ F‚ÇÇ').inv)
@[simp]
theorem liftNatTrans_app (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E) [Lifting L W F‚ÇÅ F‚ÇÅ'] [Lifting L W F‚ÇÇ F‚ÇÇ']
    (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (X : C) :
    (liftNatTrans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' œÑ).app (L.obj X) =
      (Lifting.iso L W F‚ÇÅ F‚ÇÅ').hom.app X ‚â´ œÑ.app X ‚â´ (Lifting.iso L W F‚ÇÇ F‚ÇÇ').inv.app X :=
  congr_app (Functor.map_preimage (whiskeringLeftFunctor' L W E) _) X
@[reassoc (attr := simp)]
theorem comp_liftNatTrans (F‚ÇÅ F‚ÇÇ F‚ÇÉ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' F‚ÇÉ' : D ‚•§ E) [h‚ÇÅ : Lifting L W F‚ÇÅ F‚ÇÅ']
    [h‚ÇÇ : Lifting L W F‚ÇÇ F‚ÇÇ'] [h‚ÇÉ : Lifting L W F‚ÇÉ F‚ÇÉ'] (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (œÑ' : F‚ÇÇ ‚ü∂ F‚ÇÉ) :
    liftNatTrans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' œÑ ‚â´ liftNatTrans L W F‚ÇÇ F‚ÇÉ F‚ÇÇ' F‚ÇÉ' œÑ' =
      liftNatTrans L W F‚ÇÅ F‚ÇÉ F‚ÇÅ' F‚ÇÉ' (œÑ ‚â´ œÑ') :=
  natTrans_ext L W _ _ fun X => by
    simp only [NatTrans.comp_app, liftNatTrans_app, assoc, Iso.inv_hom_id_app_assoc]
@[simp]
theorem liftNatTrans_id (F : C ‚•§ E) (F' : D ‚•§ E) [h : Lifting L W F F'] :
    liftNatTrans L W F F F' F' (ùüô F) = ùüô F' :=
  natTrans_ext L W _ _ fun X => by
    simp only [liftNatTrans_app, NatTrans.id_app, id_comp, Iso.hom_inv_id_app]
    rfl
@[simps]
def liftNatIso (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E) [h‚ÇÅ : Lifting L W F‚ÇÅ F‚ÇÅ'] [h‚ÇÇ : Lifting L W F‚ÇÇ F‚ÇÇ']
    (e : F‚ÇÅ ‚âÖ F‚ÇÇ) : F‚ÇÅ' ‚âÖ F‚ÇÇ' where
  hom := liftNatTrans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' e.hom
  inv := liftNatTrans L W F‚ÇÇ F‚ÇÅ F‚ÇÇ' F‚ÇÅ' e.inv
namespace Lifting
@[simps]
instance compRight {E' : Type*} [Category E'] (F : C ‚•§ E) (F' : D ‚•§ E) [Lifting L W F F']
    (G : E ‚•§ E') : Lifting L W (F ‚ãô G) (F' ‚ãô G) :=
  ‚ü®isoWhiskerRight (iso L W F F') G‚ü©
@[simps]
instance id : Lifting L W L (ùü≠ D) :=
  ‚ü®Functor.rightUnitor L‚ü©
@[simps]
instance compLeft (F : D ‚•§ E) : Localization.Lifting L W (L ‚ãô F) F := ‚ü®Iso.refl _‚ü©
@[simp]
lemma compLeft_iso (W) (F : D ‚•§ E) : Localization.Lifting.iso L W (L ‚ãô F) F = Iso.refl _ := rfl
@[simps]
def ofIsos {F‚ÇÅ F‚ÇÇ : C ‚•§ E} {F‚ÇÅ' F‚ÇÇ' : D ‚•§ E} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) (e' : F‚ÇÅ' ‚âÖ F‚ÇÇ') [Lifting L W F‚ÇÅ F‚ÇÅ'] :
    Lifting L W F‚ÇÇ F‚ÇÇ' :=
  ‚ü®isoWhiskerLeft L e'.symm ‚â™‚â´ iso L W F‚ÇÅ F‚ÇÅ' ‚â™‚â´ e‚ü©
end Lifting
end Localization
namespace Functor
namespace IsLocalization
open Localization
theorem of_iso {L‚ÇÅ L‚ÇÇ : C ‚•§ D} (e : L‚ÇÅ ‚âÖ L‚ÇÇ) [L‚ÇÅ.IsLocalization W] : L‚ÇÇ.IsLocalization W := by
  have h := Localization.inverts L‚ÇÅ W
  rw [MorphismProperty.IsInvertedBy.iff_of_iso W e] at h
  let F‚ÇÅ := Localization.Construction.lift L‚ÇÅ (Localization.inverts L‚ÇÅ W)
  let F‚ÇÇ := Localization.Construction.lift L‚ÇÇ h
  exact
    { inverts := h
      isEquivalence := Functor.isEquivalence_of_iso (liftNatIso W.Q W L‚ÇÅ L‚ÇÇ F‚ÇÅ F‚ÇÇ e) }
theorem of_equivalence_target {E : Type*} [Category E] (L' : C ‚•§ E) (eq : D ‚âå E)
    [L.IsLocalization W] (e : L ‚ãô eq.functor ‚âÖ L') : L'.IsLocalization W := by
  have h : W.IsInvertedBy L' := by
    rw [‚Üê MorphismProperty.IsInvertedBy.iff_of_iso W e]
    exact MorphismProperty.IsInvertedBy.of_comp W L (Localization.inverts L W) eq.functor
  let F‚ÇÅ := Localization.Construction.lift L (Localization.inverts L W)
  let F‚ÇÇ := Localization.Construction.lift L' h
  let e' : F‚ÇÅ ‚ãô eq.functor ‚âÖ F‚ÇÇ := liftNatIso W.Q W (L ‚ãô eq.functor) L' _ _ e
  exact
    { inverts := h
      isEquivalence := Functor.isEquivalence_of_iso e' }
instance (F : D ‚•§ E) [F.IsEquivalence] [L.IsLocalization W] :
    (L ‚ãô F).IsLocalization W :=
  of_equivalence_target L W _ F.asEquivalence (Iso.refl _)
lemma of_isEquivalence (L : C ‚•§ D) (W : MorphismProperty C)
    (hW : W ‚â§ MorphismProperty.isomorphisms C) [IsEquivalence L] :
    L.IsLocalization W := by
  haveI : (ùü≠ C).IsLocalization W := for_id W hW
  exact of_equivalence_target (ùü≠ C) W L L.asEquivalence L.leftUnitor
end IsLocalization
end Functor
namespace Localization
variable {D‚ÇÅ D‚ÇÇ : Type _} [Category D‚ÇÅ] [Category D‚ÇÇ] (L‚ÇÅ : C ‚•§ D‚ÇÅ) (L‚ÇÇ : C ‚•§ D‚ÇÇ)
  (W' : MorphismProperty C) [L‚ÇÅ.IsLocalization W'] [L‚ÇÇ.IsLocalization W']
def uniq : D‚ÇÅ ‚âå D‚ÇÇ :=
  (equivalenceFromModel L‚ÇÅ W').symm.trans (equivalenceFromModel L‚ÇÇ W')
lemma uniq_symm : (uniq L‚ÇÅ L‚ÇÇ W').symm = uniq L‚ÇÇ L‚ÇÅ W' := rfl
def compUniqFunctor : L‚ÇÅ ‚ãô (uniq L‚ÇÅ L‚ÇÇ W').functor ‚âÖ L‚ÇÇ :=
  calc
    L‚ÇÅ ‚ãô (uniq L‚ÇÅ L‚ÇÇ W').functor ‚âÖ (L‚ÇÅ ‚ãô (equivalenceFromModel L‚ÇÅ W').inverse) ‚ãô
      (equivalenceFromModel L‚ÇÇ W').functor := (Functor.associator _ _ _).symm
    _ ‚âÖ W'.Q ‚ãô (equivalenceFromModel L‚ÇÇ W').functor :=
      isoWhiskerRight (compEquivalenceFromModelInverseIso L‚ÇÅ W') _
    _ ‚âÖ L‚ÇÇ := qCompEquivalenceFromModelFunctorIso L‚ÇÇ W'
def compUniqInverse : L‚ÇÇ ‚ãô (uniq L‚ÇÅ L‚ÇÇ W').inverse ‚âÖ L‚ÇÅ := compUniqFunctor L‚ÇÇ L‚ÇÅ W'
instance : Lifting L‚ÇÅ W' L‚ÇÇ (uniq L‚ÇÅ L‚ÇÇ W').functor := ‚ü®compUniqFunctor L‚ÇÅ L‚ÇÇ W'‚ü©
instance : Lifting L‚ÇÇ W' L‚ÇÅ (uniq L‚ÇÅ L‚ÇÇ W').inverse := ‚ü®compUniqInverse L‚ÇÅ L‚ÇÇ W'‚ü©
def isoUniqFunctor (F : D‚ÇÅ ‚•§ D‚ÇÇ) (e : L‚ÇÅ ‚ãô F ‚âÖ L‚ÇÇ) :
    F ‚âÖ (uniq L‚ÇÅ L‚ÇÇ W').functor :=
  letI : Lifting L‚ÇÅ W' L‚ÇÇ F := ‚ü®e‚ü©
  liftNatIso L‚ÇÅ W' L‚ÇÇ L‚ÇÇ F (uniq L‚ÇÅ L‚ÇÇ W').functor (Iso.refl L‚ÇÇ)
end Localization
section
variable {X Y : C} (f g : X ‚ü∂ Y)
def AreEqualizedByLocalization : Prop := W.Q.map f = W.Q.map g
lemma areEqualizedByLocalization_iff [L.IsLocalization W] :
    AreEqualizedByLocalization W f g ‚Üî L.map f = L.map g := by
  dsimp [AreEqualizedByLocalization]
  constructor
  ¬∑ intro h
    let e := Localization.compUniqFunctor W.Q L W
    rw [‚Üê NatIso.naturality_1 e f, ‚Üê NatIso.naturality_1 e g]
    dsimp
    rw [h]
  ¬∑ intro h
    let e := Localization.compUniqFunctor L W.Q W
    rw [‚Üê NatIso.naturality_1 e f, ‚Üê NatIso.naturality_1 e g]
    dsimp
    rw [h]
namespace AreEqualizedByLocalization
lemma mk (L : C ‚•§ D) [L.IsLocalization W] (h : L.map f = L.map g) :
    AreEqualizedByLocalization W f g :=
  (areEqualizedByLocalization_iff L W f g).2 h
variable {W f g}
lemma map_eq (h : AreEqualizedByLocalization W f g) (L : C ‚•§ D) [L.IsLocalization W] :
    L.map f = L.map g :=
  (areEqualizedByLocalization_iff L W f g).1 h
end AreEqualizedByLocalization
end
end CategoryTheory