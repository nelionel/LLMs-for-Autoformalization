import Mathlib.CategoryTheory.Localization.Predicate
import Mathlib.CategoryTheory.CatCommSq
namespace CategoryTheory
open Category Localization
variable {C‚ÇÅ C‚ÇÇ D D‚ÇÅ D‚ÇÇ : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D]
  [Category D‚ÇÅ] [Category D‚ÇÇ]
namespace Localization
variable
  (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (W‚ÇÅ : MorphismProperty C‚ÇÅ) [L‚ÇÅ.IsLocalization W‚ÇÅ]
  (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (W‚ÇÇ : MorphismProperty C‚ÇÇ) [L‚ÇÇ.IsLocalization W‚ÇÇ]
  (G : C‚ÇÅ ‚•§ D‚ÇÇ) (G' : D‚ÇÅ ‚•§ D‚ÇÇ) [Lifting L‚ÇÅ W‚ÇÅ G G']
  (F : C‚ÇÇ ‚•§ D‚ÇÅ) (F' : D‚ÇÇ ‚•§ D‚ÇÅ) [Lifting L‚ÇÇ W‚ÇÇ F F']
  (Œ± : G ‚ãô F' ‚âÖ L‚ÇÅ) (Œ≤ : F ‚ãô G' ‚âÖ L‚ÇÇ)
noncomputable def equivalence : D‚ÇÅ ‚âå D‚ÇÇ :=
  Equivalence.mk G' F' (liftNatIso L‚ÇÅ W‚ÇÅ L‚ÇÅ (G ‚ãô F') (ùü≠ D‚ÇÅ) (G' ‚ãô F') Œ±.symm)
    (liftNatIso L‚ÇÇ W‚ÇÇ (F ‚ãô G') L‚ÇÇ (F' ‚ãô G') (ùü≠ D‚ÇÇ) Œ≤)
@[simp]
lemma equivalence_counitIso_app (X : C‚ÇÇ) :
    (equivalence L‚ÇÅ W‚ÇÅ L‚ÇÇ W‚ÇÇ G G' F F' Œ± Œ≤).counitIso.app (L‚ÇÇ.obj X) =
      (Lifting.iso L‚ÇÇ W‚ÇÇ (F ‚ãô G') (F' ‚ãô G')).app X ‚â™‚â´ Œ≤.app X := by
  ext
  dsimp [equivalence, Equivalence.mk]
  rw [liftNatTrans_app]
  dsimp [Lifting.iso]
  rw [comp_id]
include L‚ÇÅ W‚ÇÅ L‚ÇÇ W‚ÇÇ G F F' Œ± Œ≤ in
lemma isEquivalence : G'.IsEquivalence :=
  (equivalence L‚ÇÅ W‚ÇÅ L‚ÇÇ W‚ÇÇ G G' F F' Œ± Œ≤).isEquivalence_functor
end Localization
namespace Functor
namespace IsLocalization
lemma of_equivalence_source (L‚ÇÅ : C‚ÇÅ ‚•§ D) (W‚ÇÅ : MorphismProperty C‚ÇÅ)
    (L‚ÇÇ : C‚ÇÇ ‚•§ D) (W‚ÇÇ : MorphismProperty C‚ÇÇ)
    (E : C‚ÇÅ ‚âå C‚ÇÇ) (hW‚ÇÅ : W‚ÇÅ ‚â§ W‚ÇÇ.isoClosure.inverseImage E.functor) (hW‚ÇÇ : W‚ÇÇ.IsInvertedBy L‚ÇÇ)
    [L‚ÇÅ.IsLocalization W‚ÇÅ] (iso : E.functor ‚ãô L‚ÇÇ ‚âÖ L‚ÇÅ) : L‚ÇÇ.IsLocalization W‚ÇÇ := by
  have h : W‚ÇÅ.IsInvertedBy (E.functor ‚ãô W‚ÇÇ.Q) := fun _ _ f hf => by
    obtain ‚ü®_, _, f', hf', ‚ü®e‚ü©‚ü© := hW‚ÇÅ f hf
    exact ((MorphismProperty.isomorphisms _).arrow_mk_iso_iff
      (W‚ÇÇ.Q.mapArrow.mapIso e)).1 (Localization.inverts W‚ÇÇ.Q W‚ÇÇ _ hf')
  exact
    { inverts := hW‚ÇÇ
      isEquivalence :=
        Localization.isEquivalence W‚ÇÇ.Q W‚ÇÇ L‚ÇÅ W‚ÇÅ L‚ÇÇ (Construction.lift L‚ÇÇ hW‚ÇÇ)
          (E.functor ‚ãô W‚ÇÇ.Q) (Localization.lift (E.functor ‚ãô W‚ÇÇ.Q) h L‚ÇÅ) (by
            calc
              L‚ÇÇ ‚ãô lift (E.functor ‚ãô W‚ÇÇ.Q) h L‚ÇÅ ‚âÖ _ := (leftUnitor _).symm
              _ ‚âÖ _ := isoWhiskerRight E.counitIso.symm _
              _ ‚âÖ E.inverse ‚ãô E.functor ‚ãô L‚ÇÇ ‚ãô lift (E.functor ‚ãô W‚ÇÇ.Q) h L‚ÇÅ :=
                    Functor.associator _ _ _
              _ ‚âÖ E.inverse ‚ãô L‚ÇÅ ‚ãô lift (E.functor ‚ãô W‚ÇÇ.Q) h L‚ÇÅ :=
                    isoWhiskerLeft E.inverse ((Functor.associator _ _ _).symm ‚â™‚â´
                      isoWhiskerRight iso _)
              _ ‚âÖ E.inverse ‚ãô E.functor ‚ãô W‚ÇÇ.Q :=
                    isoWhiskerLeft _ (Localization.fac (E.functor ‚ãô W‚ÇÇ.Q) h L‚ÇÅ)
              _ ‚âÖ (E.inverse ‚ãô E.functor) ‚ãô W‚ÇÇ.Q := (Functor.associator _ _ _).symm
              _ ‚âÖ ùü≠ C‚ÇÇ ‚ãô W‚ÇÇ.Q := isoWhiskerRight E.counitIso _
              _ ‚âÖ W‚ÇÇ.Q := leftUnitor _)
          (Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ (Lifting.iso W‚ÇÇ.Q W‚ÇÇ _ _)  ‚â™‚â´ iso) }
lemma of_equivalences (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (W‚ÇÅ : MorphismProperty C‚ÇÅ) [L‚ÇÅ.IsLocalization W‚ÇÅ]
    (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (W‚ÇÇ : MorphismProperty C‚ÇÇ)
    (E : C‚ÇÅ ‚âå C‚ÇÇ) (E' : D‚ÇÅ ‚âå D‚ÇÇ) [CatCommSq E.functor L‚ÇÅ L‚ÇÇ E'.functor]
    (hW‚ÇÅ : W‚ÇÅ ‚â§ W‚ÇÇ.isoClosure.inverseImage E.functor) (hW‚ÇÇ : W‚ÇÇ.IsInvertedBy L‚ÇÇ) :
    L‚ÇÇ.IsLocalization W‚ÇÇ := by
  haveI : (E.functor ‚ãô L‚ÇÇ).IsLocalization W‚ÇÅ :=
    of_equivalence_target L‚ÇÅ W‚ÇÅ _ E' ((CatCommSq.iso _ _ _ _).symm)
  exact of_equivalence_source (E.functor ‚ãô L‚ÇÇ) W‚ÇÅ L‚ÇÇ W‚ÇÇ E hW‚ÇÅ hW‚ÇÇ (Iso.refl _)
end IsLocalization
end Functor
end CategoryTheory